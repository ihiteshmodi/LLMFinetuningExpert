[
  {
    "chunk": "Total Order Broadcast                                                                                             348\nDistributed Transactions and Consensus                                                                352\nAtomic Commit and Two-Phase Commit (2PC)                                               354\nDistributed Transactions in Practice                                                                    360\nFault-Tolerant Consensus                                                                                      364\nMembership and Coordination Services                                                              370\nSummary                                                                                                                       373\nPart III. Derived Data\n10. Batch Processing. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  389\nBatch Processing with Unix Tools                                                                            391\nSimple Log Analysis                                                                                                 391\nThe Unix Philosophy                                                                                               394\nMapReduce and Distributed Filesystems                                                                 397\nMapReduce Job Execution                                                                                     399\nReduce-Side Joins and Grouping                                                                          403\nMap-Side Joins                                                                                                         408\nThe Output of Batch Workflows                                                                           411\nComparing Hadoop to Distributed Databases                                                    414\nBeyond MapReduce                                                                                                    419\nMaterialization of Intermediate State                                                                   419\nGraphs and Iterative Processing                                                                            424\nHigh-Level APIs and Languages                                                                            426\nSummary                                                                                                                       429\n",
    "summary": "The text discusses batch processing, MapReduce, and distributed transactions, highlighting the need for materialization and iterative processing in complex workflows. It references 2PC and fault-tolerant consensus mechanisms.",
    "sample_answer": "\u201cOkay, this chunk suggests we\u2019re dealing with a system requiring robust batch processing, likely involving substantial data transformation. The emphasis on \u2018MapReduce and Distributed Filesystems\u2019 indicates a need for a scalable architecture, perhaps leveraging the inherent parallelism of MapReduce to process large datasets. Furthermore, the inclusion of \u2018Atomic Commit and Two-Phase Commit (2PC)\u2019 suggests the system needs to support distributed transactions, likely requiring careful consideration of the CAP theorem and the tradeoffs between consistency and availability, as 2PC itself introduces potential bottlenecks.\u201d",
    "potential_interview_question": "\u201cLet's say we need to build a system to process millions of financial transactions daily. Considering the described technologies (MapReduce, 2PC), how would you design the system to ensure both data accuracy and eventual consistency, and what are the key trade-offs you would need to evaluate?\u201d"
  },
  {
    "chunk": "Preface\nIf you have worked in software engineering in recent years, especially in server-side\nand backend systems, you have probably been bombarded with a plethora of buzz\u2010\nwords relating to storage and processing of data. NoSQL! Big Data! Web-scale!\nSharding! Eventual consistency! ACID! CAP theorem! Cloud services! MapReduce!\nReal-time!\nIn the last decade we have seen many interesting developments in databases, in dis\u2010\ntributed systems, and in the ways we build applications on top of them. There are\nvarious driving forces for these developments:\n\u2022Internet companies such as Google, Yahoo!, Amazon, Facebook, LinkedIn,\nMicrosoft, and Twitter are handling huge volumes of data and traffic, forcing\nthem to create new tools that enable them to efficiently handle such scale.\n\u2022Businesses need to be agile, test hypotheses cheaply, and respond quickly to new\nmarket insights by keeping development cycles short and data models flexible.\n\u2022Free and open source software has become very successful and is now preferred\nto commercial or bespoke in-house software in many environments.\n\u2022CPU clock speeds are barely increasing, but multi-core processors are standard,\nand networks are getting faster. This means parallelism is only going to increase.\n\u2022Even if you work on a small team, you can now build systems that are distributed\nacross many machines and even multiple geographic regions, thanks to infra\u2010\nstructure as a service (IaaS) such as Amazon Web Services.\n\u2022Many services are now expected to be highly available; extended downtime due\nto outages or maintenance is becoming increasingly unacceptable.\nData-intensive applications  are pushing the boundaries of what is possible by making\nuse of these technological developments. We call an application data-intensive  if data\nis its primary challenge\u2014the quantity of data, the complexity of data, or the speed at\nPreface | xiii\n",
    "summary": "This chunk discusses scaling challenges in data-intensive applications, the influence of cloud infrastructure, and the importance of high availability.",
    "sample_answer": "\u201cThis text highlights the core drivers behind modern data engineering challenges \u2013 primarily, the scale of data and the need for distributed systems. The rise of internet companies like Google and Amazon, coupled with the increasing availability of IaaS, has created a demand for systems capable of handling massive data volumes and traffic. A key concept here is the CAP theorem, which suggests that a distributed system can only guarantee two out of consistency, availability, and partition tolerance, reflecting the inherent trade-offs in designing for scale. Furthermore, the expectation of high availability\u2014essentially, minimizing downtime\u2014is a critical consideration when architecting data-intensive systems, often requiring strategies like replication and potentially fault-tolerant consensus algorithms like Raft to ensure continued operation even in the face of node failures.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system to ingest and process user activity data for a social media platform. Considering the scale of data and the need for high availability, how would you approach the system design, and what key considerations would you prioritize, referencing concepts like the CAP theorem?\u201d"
  },
  {
    "chunk": "This book is for software engineers, software architects, and technical managers who\nlove to code. It is especially relevant if you need to make decisions about the architec\u2010\nture of the systems you work on\u2014for example, if you need to choose tools for solving\na given problem and figure out how best to apply them. But even if you have no\nchoice over your tools, this book will help you better understand their strengths and\nweaknesses.\nYou should have some experience building web-based applications or network serv\u2010\nices, and you should be familiar with relational databases and SQL. Any non-\nrelational databases and other data-related tools you know are a bonus, but not\nrequired. A general understanding of common network protocols like TCP and\nHTTP is helpful. Your choice of programming language or framework makes no dif\u2010\nference for this book.\nIf any of the following are true for you, you\u2019ll find this book valuable:\n\u2022You want to learn how to make data systems scalable, for example, to support\nweb or mobile apps with millions of users.\n\u2022You need to make applications highly available (minimizing downtime) and\noperationally robust.\n\u2022You are looking for ways of making systems easier to maintain in the long run,\neven as they grow and as requirements and technologies change.\n\u2022You have a natural curiosity for the way things work and want to know what\ngoes on inside major websites and online services. This book breaks down the\ninternals of various databases and data processing systems, and it\u2019s great fun to\nexplore the bright thinking that went into their design.\nSometimes, when discussing scalable data systems, people make comments along the\nlines of, \u201cYou\u2019re not Google or Amazon. Stop worrying about scale and just use a\nrelational database.\u201d There is truth in that statement: building for scale that you don\u2019t\nneed is wasted effort and may lock you into an inflexible design. In effect, it is a form\nof premature optimization. However, it\u2019s also important to choose the right tool for\nthe job, and different technologies each have their own strengths and weaknesses. As\nwe shall see, relational databases are important but not the final word on dealing with\ndata.\nScope of This Book\nThis book does not attempt to give detailed instructions on how to install or use spe\u2010\ncific software packages or APIs, since there is already plenty of documentation for\nthose things. Instead we discuss the various principles and trade-offs that are funda\u2010\nmental to data systems, and we explore the different design decisions taken by differ\u2010\nent products.\nPreface | xv\n",
    "summary": "The text emphasizes the importance of understanding design principles and trade-offs in data systems, particularly regarding scalability, availability, and maintainability, while cautioning against premature optimization.",
    "sample_answer": "\u201cOkay, so when building data systems, it\u2019s crucial to move beyond simply choosing a technology based on hype. The excerpt highlights a key principle: we need to think about our specific requirements and design for availability, scalability, and maintainability, rather than trying to build for a scale we don't actually need \u2013 which is a form of premature optimization. This ties into the CAP theorem; if we\u2019re prioritizing availability and partition tolerance, for example, we need to acknowledge that we might be sacrificing consistency, and that architectural decisions around replication and consensus mechanisms (like Raft) will become vital.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where you might prioritize availability over strong consistency in a data system design. Explain your reasoning, and briefly discuss the potential trade-offs involved, referencing concepts like the CAP theorem.\u201d"
  },
  {
    "chunk": "In the ebook editions we have included links to the full text of online resources. All\nlinks were verified at the time of publication, but unfortunately links tend to break\nfrequently due to the nature of the web. If you come across a broken link, or if you\nare reading a print copy of this book, you can look up references using a search\nengine. For academic papers, you can search for the title in Google Scholar to find\nopen-access PDF files. Alternatively, you can find all of the references at https://\ngithub.com/ept/ddia-references , where we maintain up-to-date links.\nWe look primarily at the architecture  of data systems and the ways they are integrated\ninto data-intensive applications. This book doesn\u2019t have space to cover deployment,\noperations, security, management, and other areas\u2014those are complex and impor\u2010\ntant topics, and we wouldn\u2019t do them justice by making them superficial side notes in\nthis book. They deserve books of their own.\nMany of the technologies described in this book fall within the realm of the Big Data\nbuzzword. However, the term \u201cBig Data\u201d is so overused and underdefined that it is\nnot useful in a serious engineering discussion. This book uses less ambiguous terms,\nsuch as single-node versus distributed systems, or online/interactive versus offline/\nbatch processing systems.\nThis book has a bias toward free and open source software (FOSS), because reading,\nmodifying, and executing source code is a great way to understand how something\nworks in detail. Open platforms also reduce the risk of vendor lock-in. However,\nwhere appropriate, we also discuss proprietary software (closed-source software, soft\u2010\nware as a service, or companies\u2019 in-house software that is only described in literature\nbut not released publicly).\nOutline of This Book\nThis book is arranged into three parts:\n1.In Part I , we discuss the fundamental ideas that underpin the design of data-\nintensive applications. We start in Chapter 1  by discussing what we\u2019re actually\ntrying to achieve: reliability, scalability, and maintainability; how we need to\nthink about them; and how we can achieve them. In Chapter 2  we compare sev\u2010\neral different data models and query languages, and see how they are appropriate\nto different situations. In Chapter 3  we talk about storage engines: how databases\narrange data on disk so that we can find it again efficiently. Chapter 4  turns to\nformats for data encoding (serialization) and evolution of schemas over time.\n2.In Part II , we move from data stored on one machine to data that is distributed\nacross multiple machines. This is often necessary for scalability, but brings with\nit a variety of unique challenges. We first discuss replication ( Chapter 5 ), parti\u2010\ntioning/sharding ( Chapter 6 ), and transactions ( Chapter 7 ). We then go into\nxvi | Preface\n",
    "summary": "The chapter discusses key design considerations like reliability, scalability, and maintainability, alongside distributed system challenges such as replication, sharding, and transactions.",
    "sample_answer": "\u201cOkay, so when designing a data system, you absolutely have to prioritize reliability, scalability, and maintainability \u2013 that\u2019s the foundation. We need to consider how a system will handle failures, how it can grow to meet increasing demand, and how easily it can be modified or updated. Replication, as we discuss in Chapter 5, is a critical technique for ensuring availability \u2013 if one node goes down, others can still serve requests. Sharding, introduced in Chapter 6, allows us to horizontally scale by partitioning the data across multiple machines, but it introduces complexities regarding consistency and transaction management.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re building a data warehouse for an e-commerce company, and we need to handle a huge volume of transaction data. How would you approach the design, considering the need for scalability and fault tolerance \u2013 specifically, how might you leverage replication and partitioning to address these challenges?\u201d"
  },
  {
    "chunk": "PART I\nFoundations of Data Systems\nThe first four chapters go through the fundamental ideas that apply to all data sys\u2010\ntems, whether running on a single machine or distributed across a cluster of\nmachines:\n1.Chapter 1  introduces the terminology and approach that we\u2019re going to use\nthroughout this book. It examines what we actually mean by words like reliabil\u2010\nity, scalability , and maintainability , and how we can try to achieve these goals.\n2.Chapter 2  compares several different data models and query languages\u2014the\nmost visible distinguishing factor between databases from a developer\u2019s point of\nview. We will see how different models are appropriate to different situations.\n3.Chapter 3  turns to the internals of storage engines and looks at how databases lay\nout data on disk. Different storage engines are optimized for different workloads,\nand choosing the right one can have a huge effect on performance.\n4.Chapter 4  compares various formats for data encoding (serialization) and espe\u2010\ncially examines how they fare in an environment where application requirements\nchange and schemas need to adapt over time.\nLater, Part II  will turn to the particular issues of distributed data systems.\n",
    "summary": "The text discusses fundamental data system concepts like reliability, scalability, maintainability, data model selection, storage engine optimization, and schema evolution.",
    "sample_answer": "\u201cOkay, let\u2019s consider the implications of these foundational concepts. Achieving reliability, as highlighted in Chapter 1, requires more than just replication; we need to think about fault tolerance strategies \u2013 potentially leveraging techniques like Paxos for ensuring consensus in a distributed environment.  Furthermore, the selection of a storage engine, detailed in Chapter 3, directly impacts performance, and understanding the workload characteristics is critical; for example, a storage engine optimized for OLTP (online transaction processing) would likely be very different than one optimized for analytical workloads.  Finally, Chapter 4\u2019s focus on schema evolution\u2014and handling schema drift\u2014is key; we might use a schema registry like Apache Avro to manage schema changes and ensure backward compatibility.\u201d",
    "potential_interview_question": "\u201cDescribe how you would approach designing a data system to handle evolving schemas, drawing on concepts like schema registries and fault tolerance. What are the key considerations for achieving both durability and backward compatibility?\u201d"
  },
  {
    "chunk": "Figure 1-1. One possible architecture for a data system that combines several\ncomponents.\nWhen you combine several tools in order to provide a service, the service\u2019s interface\nor application programming interface (API) usually hides those implementation\ndetails from clients. Now you have essentially created a new, special-purpose data\nsystem from smaller, general-purpose components. Your composite data system may\nprovide certain guarantees: e.g., that the cache will be correctly invalidated or upda\u2010\nted on writes so that outside clients see consistent results. You are now not only an\napplication developer, but also a data system designer.\nIf you are designing a data system or service, a lot of tricky questions arise. How do\nyou ensure that the data remains correct and complete, even when things go wrong\ninternally? How do you provide consistently good performance to clients, even when\nparts of your system are degraded? How do you scale to handle an increase in load?\nWhat does a good API for the service look like?\nThere are many factors that may influence the design of a data system, including the\nskills and experience of the people involved, legacy system dependencies, the time\u2010\nscale for delivery, your organization\u2019s tolerance of different kinds of risk, regulatory\nconstraints, etc. Those factors depend very much on the situation.\nThinking About Data Systems | 5\n",
    "summary": "This chunk discusses the challenges of designing composite data systems, highlighting the need for consistency guarantees, performance considerations, and scalability strategies.",
    "sample_answer": "\u201cOkay, so when building a system like this \u2013 combining multiple tools \u2013 we\u2019re essentially creating a new, specialized data system. A key concern is ensuring data consistency; for example, if we\u2019re using a cache, we need a strategy to invalidate it correctly on writes to ensure clients receive consistent results, potentially utilizing techniques like TTL (Time-To-Live) or a more sophisticated approach leveraging eventual consistency principles. Scalability is also crucial; we need to think about how the system will handle increased load, perhaps employing sharding to distribute the data and processing across multiple nodes.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019ve built a system that uses a cache layer to improve performance. How would you design the cache invalidation strategy to ensure data consistency across our system, considering potential failures?\u201d"
  },
  {
    "chunk": "In this book, we focus on three concerns that are important in most software systems:\nReliability\nThe system should continue to work correctly  (performing the correct function at\nthe desired level of performance) even in the face of adversity  (hardware or soft\u2010\nware faults, and even human error). See \u201cReliability\u201d on page 6 .\nScalability\nAs the system grows  (in data volume, traffic volume, or complexity), there should\nbe reasonable ways of dealing with that growth. See \u201cScalability\u201d on page 10 .\nMaintainability\nOver time, many different people will work on the system (engineering and oper\u2010\nations, both maintaining current behavior and adapting the system to new use\ncases), and they should all be able to work on it productively . See \u201cMaintainabil\u2010\nity\u201d on page 18 .\nThese words are often cast around without a clear understanding of what they mean.\nIn the interest of thoughtful engineering, we will spend the rest of this chapter\nexploring ways of thinking about reliability, scalability, and maintainability. Then, in\nthe following chapters, we will look at various techniques, architectures, and algo\u2010\nrithms that are used in order to achieve those goals.\nReliability\nEverybody has an intuitive idea of what it means for something to be reliable or unre\u2010\nliable. For software, typical expectations include:\n\u2022The application performs the function that the user expected.\n\u2022It can tolerate the user making mistakes or using the software in unexpected\nways.\n\u2022Its performance is good enough for the required use case, under the expected\nload and data volume.\n\u2022The system prevents any unauthorized access and abuse.\nIf all those things together mean \u201cworking correctly,\u201d then we can understand relia\u2010\nbility  as meaning, roughly, \u201ccontinuing to work correctly, even when things go\nwrong.\u201d\nThe things that can go wrong are called faults , and systems that anticipate faults and\ncan cope with them are called fault-tolerant  or resilient . The former term is slightly\nmisleading: it suggests that we could make a system tolerant of every possible kind of\nfault, which in reality is not feasible. If the entire planet Earth (and all servers on it)\nwere swallowed by a black hole, tolerance of that fault would require web hosting in\n6 | Chapter 1: Reliable, Scalable, and Maintainable Applications\n",
    "summary": "The text outlines three core concerns \u2013 reliability, scalability, and maintainability \u2013 highlighting the need for fault tolerance and resilience in system design.",
    "sample_answer": "\u201cWhen considering reliability, we need to think about anticipating faults and building a resilient system, which aligns with the concept of fault tolerance.  A key architectural principle is replicating data across multiple nodes to achieve high availability \u2013 a common technique, though note that achieving absolute tolerance of *every* possible fault is generally unfeasible.\u201d Furthermore, \u201cScalability is about designing for growth, and this often involves strategies like sharding data to distribute load, as the system\u2019s data volume or user traffic increases.  We must acknowledge that simply scaling up a single server won\u2019t always solve the problem.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where you would employ replication to improve system reliability. What considerations would you prioritize when choosing a replication strategy, and how would you monitor its effectiveness?\u201d"
  },
  {
    "chunk": "space\u2014good luck getting that budget item approved. So it only makes sense to talk\nabout tolerating certain types  of faults.\nNote that a fault is not the same as a failure [ 2]. A fault is usually defined as one com\u2010\nponent of the system deviating from its spec, whereas a failure  is when the system as a\nwhole stops providing the required service to the user. It is impossible to reduce the\nprobability of a fault to zero; therefore it is usually best to design fault-tolerance\nmechanisms that prevent faults from causing failures. In this book we cover several\ntechniques for building reliable systems from unreliable parts.\nCounterintuitively, in such fault-tolerant systems, it can make sense to increase  the\nrate of faults by triggering them deliberately\u2014for example, by randomly killing indi\u2010\nvidual processes without warning. Many critical bugs are actually due to poor error\nhandling [ 3]; by deliberately inducing faults, you ensure that the fault-tolerance\nmachinery is continually exercised and tested, which can increase your confidence\nthat faults will be handled correctly when they occur naturally. The Netflix Chaos\nMonkey  [4] is an example of this approach.\nAlthough we generally prefer tolerating faults over preventing faults, there are cases\nwhere prevention is better than cure (e.g., because no cure exists). This is the case\nwith security matters, for example: if an attacker has compromised a system and\ngained access to sensitive data, that event cannot be undone. However, this book\nmostly deals with the kinds of faults that can be cured, as described in the following\nsections.\nHardware Faults\nWhen we think of causes of system failure, hardware faults quickly come to mind.\nHard disks crash, RAM becomes faulty, the power grid has a blackout, someone\nunplugs the wrong network cable. Anyone who has worked with large datacenters\ncan tell you that these things happen all the time  when you have a lot of machines.\nHard disks are reported as having a mean time to failure (MTTF) of about 10 to 50\nyears [ 5, 6]. Thus, on a storage cluster with 10,000 disks, we should expect on average\none disk to die per day.\nOur first response is usually to add redundancy to the individual hardware compo\u2010\nnents in order to reduce the failure rate of the system. Disks may be set up in a RAID\nconfiguration, servers may have dual power supplies and hot-swappable CPUs, and\ndatacenters may have batteries and diesel generators for backup power. When one\ncomponent dies, the redundant component can take its place while the broken com\u2010\nponent is replaced. This approach cannot completely prevent hardware problems\nfrom causing failures, but it is well understood and can often keep a machine running\nuninterrupted for years.\nReliability | 7\n",
    "summary": "The text discusses fault tolerance strategies, particularly redundancy and deliberate fault injection, to mitigate hardware failures and prevent system failures.",
    "sample_answer": "\u201cOkay, so when designing for reliability, we need to acknowledge that complete failure prevention is impossible, especially with hardware. The key is to implement fault tolerance mechanisms, primarily through redundancy \u2013 think RAID configurations for disks or dual power supplies for servers \u2013 to handle individual component failures. The approach of deliberately inducing faults, as seen with Netflix\u2019s Chaos Monkey, is also a valuable technique for proactively testing and validating our fault tolerance mechanisms. This aligns with the CAP theorem; we're prioritizing availability over strong consistency in this case, accepting potential data inconsistencies during a failure.\u201d",
    "potential_interview_question": "\u201cNetflix uses Chaos Monkey to inject faults into their production systems. Explain the rationale behind this approach and how it relates to the broader concept of building fault-tolerant systems. How might this strategy inform your design decisions when building a distributed data processing pipeline?\u201d"
  },
  {
    "chunk": "i. Defined in \u201cApproaches for Coping with Load\u201d on page 17 .Until recently, redundancy of hardware components was sufficient for most applica\u2010\ntions, since it makes total failure of a single machine fairly rare. As long as you can\nrestore a backup onto a new machine fairly quickly, the downtime in case of failure is\nnot catastrophic in most applications. Thus, multi-machine redundancy was only\nrequired by a small number of applications for which high availability was absolutely\nessential.\nHowever, as data volumes and applications\u2019 computing demands have increased,\nmore applications have begun using larger numbers of machines, which proportion\u2010\nally increases the rate of hardware faults. Moreover, in some cloud platforms such as\nAmazon Web Services (AWS) it is fairly common for virtual machine instances to\nbecome unavailable without warning [ 7], as the platforms are designed to prioritize\nflexibility and elasticityi over single-machine reliability.\nHence there is a move toward systems that can tolerate the loss of entire machines, by\nusing software fault-tolerance techniques in preference or in addition to hardware\nredundancy. Such systems also have operational advantages: a single-server system\nrequires planned downtime if you need to reboot the machine (to apply operating\nsystem security patches, for example), whereas a system that can tolerate machine\nfailure can be patched one node at a time, without downtime of the entire system (a\nrolling upgrade ; see Chapter 4 ).\nSoftware Errors\nWe usually think of hardware faults as being random and independent from each\nother: one machine\u2019s disk failing does not imply that another machine\u2019s disk is going\nto fail. There may be weak correlations (for example due to a common cause, such as\nthe temperature in the server rack), but otherwise it is unlikely that a large number of\nhardware components will fail at the same time.\nAnother class of fault is a systematic error within the system [ 8]. Such faults are\nharder to anticipate, and because they are correlated across nodes, they tend to cause\nmany more system failures than uncorrelated hardware faults [ 5]. Examples include:\n\u2022A software bug that causes every instance of an application server to crash when\ngiven a particular bad input. For example, consider the leap second on June 30,\n2012, that caused many applications to hang simultaneously due to a bug in the\nLinux kernel [ 9].\n\u2022A runaway process that uses up some shared resource\u2014CPU time, memory, disk\nspace, or network bandwidth.\n8 | Chapter 1: Reliable, Scalable, and Maintainable Applications\n",
    "summary": "The text highlights the shift from relying solely on hardware redundancy to incorporating software fault-tolerance due to increased system complexity and the potential for correlated software failures. It emphasizes the importance of rolling upgrades and mitigating correlated failures.",
    "sample_answer": "\u201cOkay, this section really speaks to a crucial evolution in system design. Previously, hardware redundancy was sufficient, but as applications scale and platforms like AWS introduce the possibility of unpredictable instance failures, we need to move beyond simply restoring backups. Specifically, the concept of \u2018rolling upgrades,\u2019 which allows patching one node at a time without system-wide downtime, is vital for maintaining availability \u2013 this contrasts with the traditional approach of planned downtime for hardware maintenance.  Furthermore, the discussion of correlated software failures, such as the Linux kernel bug during the leap second, underscores the need for systems designed to handle situations where multiple instances simultaneously fail due to a shared cause.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say you're designing a system for processing streaming data. The system is deployed on a cloud platform like AWS, and you anticipate the potential for sporadic instance failures.  Describe the strategies you would employ to ensure high availability and fault tolerance, referencing specific techniques you'd consider and explaining how they address both hardware and software-related failures.\u201d"
  },
  {
    "chunk": "\u2022A service that the system depends on that slows down, becomes unresponsive, or\nstarts returning corrupted responses.\n\u2022Cascading failures, where a small fault in one component triggers a fault in\nanother component, which in turn triggers further faults [ 10].\nThe bugs that cause these kinds of software faults often lie dormant for a long time\nuntil they are triggered by an unusual set of circumstances. In those circumstances, it\nis revealed that the software is making some kind of assumption about its environ\u2010\nment\u2014and while that assumption is usually true, it eventually stops being true for\nsome reason [ 11].\nThere is no quick solution to the problem of systematic faults in software. Lots of\nsmall things can help: carefully thinking about assumptions and interactions in the\nsystem; thorough testing; process isolation; allowing processes to crash and restart;\nmeasuring, monitoring, and analyzing system behavior in production. If a system is\nexpected to provide some guarantee (for example, in a message queue, that the num\u2010\nber of incoming messages equals the number of outgoing messages), it can constantly\ncheck itself while it is running and raise an alert if a discrepancy is found [ 12].\nHuman Errors\nHumans design and build software systems, and the operators who keep the systems\nrunning are also human. Even when they have the best intentions, humans are\nknown to be unreliable. For example, one study of large internet services found that\nconfiguration errors by operators were the leading cause of outages, whereas hard\u2010\nware faults (servers or network) played a role in only 10\u201325% of outages [ 13].\nHow do we make our systems reliable, in spite of unreliable humans? The best sys\u2010\ntems combine several approaches:\n\u2022Design systems in a way that minimizes opportunities for error. For example,\nwell-designed abstractions, APIs, and admin interfaces make it easy to do \u201cthe\nright thing\u201d and discourage \u201cthe wrong thing.\u201d However, if the interfaces are too\nrestrictive people will work around them, negating their benefit, so this is a tricky\nbalance to get right.\n\u2022Decouple the places where people make the most mistakes from the places where\nthey can cause failures. In particular, provide fully featured non-production\nsandbox  environments where people can explore and experiment safely, using\nreal data, without affecting real users.\n\u2022Test thoroughly at all levels, from unit tests to whole-system integration tests and\nmanual tests [ 3]. Automated testing is widely used, well understood, and espe\u2010\ncially valuable for covering corner cases that rarely arise in normal operation.\nReliability | 9\n",
    "summary": "The text emphasizes proactive measures for building reliable systems, focusing on minimizing human error and implementing robust testing strategies.",
    "sample_answer": "\u201cOkay, let\u2019s think about how we design for resilience. This chunk highlights a critical issue: systematic faults often stem from unhandled assumptions within the system, frequently triggered by human error. To address this, we need to incorporate several layers of defense \u2013 starting with minimizing opportunities for human error through well-designed abstractions and APIs, as suggested. Furthermore, creating isolated, non-production environments for experimentation and testing, like sandboxes, is crucial for safe exploration and identifying potential issues before they impact live users, similar to the concept of a canary deployment strategy. We also need to implement comprehensive testing \u2013 automated testing, especially, is vital for uncovering corner cases, echoing the importance of rigorous testing in ensuring system stability.\"",
    "potential_interview_question": "\u201cDescribe a system design strategy that incorporates human factors to minimize the risk of outages.  Specifically, how would you balance the benefits of well-defined interfaces with the potential for users to bypass them, and how could you use automated testing to mitigate the risk of corner-case failures?\u201d"
  },
  {
    "chunk": "\u2022Allow quick and easy recovery from human errors, to minimize the impact in the\ncase of a failure. For example, make it fast to roll back configuration changes, roll\nout new code gradually (so that any unexpected bugs affect only a small subset of\nusers), and provide tools to recompute data (in case it turns out that the old com\u2010\nputation was incorrect).\n\u2022Set up detailed and clear monitoring, such as performance metrics and error\nrates. In other engineering disciplines this is referred to as telemetry . (Once a\nrocket has left the ground, telemetry is essential for tracking what is happening,\nand for understanding failures [ 14].) Monitoring can show us early warning sig\u2010\nnals and allow us to check whether any assumptions or constraints are being vio\u2010\nlated. When a problem occurs, metrics can be invaluable in diagnosing the issue.\n\u2022Implement good management practices and training\u2014a complex and important\naspect, and beyond the scope of this book.\nHow Important Is Reliability?\nReliability is not just for nuclear power stations and air traffic control software\u2014\nmore mundane applications are also expected to work reliably. Bugs in business\napplications cause lost productivity (and legal risks if figures are reported incor\u2010\nrectly), and outages of ecommerce sites can have huge costs in terms of lost revenue\nand damage to reputation.\nEven in \u201cnoncritical\u201d applications we have a responsibility to our users. Consider a\nparent who stores all their pictures and videos of their children in your photo appli\u2010\ncation [ 15]. How would they feel if that database was suddenly corrupted? Would\nthey know how to restore it from a backup?\nThere are situations in which we may choose to sacrifice reliability in order to reduce\ndevelopment cost (e.g., when developing a prototype product for an unproven mar\u2010\nket) or operational cost (e.g., for a service with a very narrow profit margin)\u2014but we\nshould be very conscious of when we are cutting corners. \nScalability\nEven if a system is working reliably today, that doesn\u2019t mean it will necessarily work\nreliably in the future. One common reason for degradation is increased load: perhaps\nthe system has grown from 10,000 concurrent users to 100,000 concurrent users, or\nfrom 1 million to 10 million. Perhaps it is processing much larger volumes of data\nthan it did before.\nScalability  is the term we use to describe a system\u2019s ability to cope with increased\nload. Note, however, that it is not a one-dimensional label that we can attach to a sys\u2010\ntem: it is meaningless to say \u201cX is scalable\u201d or \u201cY doesn\u2019t scale.\u201d Rather, discussing\n10 | Chapter 1: Reliable, Scalable, and Maintainable Applications\n",
    "summary": "The chunk emphasizes the importance of reliability, scalability, and operational practices within application design, highlighting recovery strategies, monitoring, and the need for conscious trade-offs.",
    "sample_answer": "\u201cOkay, let\u2019s talk about building a reliable system.  From this excerpt, it\u2019s clear that we need robust recovery mechanisms \u2013 like gradually rolling out code changes (a form of canary deployments) to limit the impact of bugs and the ability to recompute data if necessary.  Furthermore, proactive monitoring, or telemetry, is crucial; we should be tracking performance metrics and error rates to detect issues early, aligning with the principle of observability. This mirrors the concept of \u2018defense in depth\u2019 - layering multiple strategies to ensure resilience.\u201d",
    "potential_interview_question": "\u201cImagine you're designing a new data processing pipeline for an e-commerce site. Describe three strategies you\u2019d implement to ensure its reliability, referencing concepts from this text. How would you balance the need for reliability with potential development cost considerations?\u201d"
  },
  {
    "chunk": "ii. A term borrowed from electronic engineering, where it describes the number of logic gate inputs that are\nattached to another gate\u2019s output. The output needs to supply enough current to drive all the attached inputs.\nIn transaction processing systems, we use it to describe the number of requests to other services that we need\nto make in order to serve one incoming request.scalability means considering questions like \u201cIf the system grows in a particular way,\nwhat are our options for coping with the growth?\u201d and \u201cHow can we add computing\nresources to handle the additional load?\u201d\nDescribing Load\nFirst, we need to succinctly describe the current load on the system; only then can we\ndiscuss growth questions (what happens if our load doubles?). Load can be described\nwith a few numbers which we call load parameters . The best choice of parameters\ndepends on the architecture of your system: it may be requests per second to a web\nserver, the ratio of reads to writes in a database, the number of simultaneously active\nusers in a chat room, the hit rate on a cache, or something else. Perhaps the average\ncase is what matters for you, or perhaps your bottleneck is dominated by a small\nnumber of extreme cases.\nTo make this idea more concrete, let\u2019s consider Twitter as an example, using data\npublished in November 2012 [ 16]. Two of Twitter\u2019s main operations are:\nPost tweet\nA user can publish a new message to their followers (4.6k requests/sec on aver\u2010\nage, over 12k requests/sec at peak).\nHome timeline\nA user can view tweets posted by the people they follow (300k requests/sec).\nSimply handling 12,000 writes per second (the peak rate for posting tweets) would be\nfairly easy. However, Twitter\u2019s scaling challenge is not primarily due to tweet volume,\nbut due to fan-outii\u2014each user follows many people, and each user is followed by\nmany people. There are broadly two ways of implementing these two operations:\n1.Posting a tweet simply inserts the new tweet into a global collection of tweets.\nWhen a user requests their home timeline, look up all the people they follow,\nfind all the tweets for each of those users, and merge them (sorted by time). In a\nrelational database like in Figure 1-2 , you could write a query such as:\nSELECT tweets.*, users.* FROM tweets\n  JOIN users   ON tweets.sender_id     = users.id\n  JOIN follows ON follows.followee_id  = users.id\n  WHERE follows.follower_id  = current_user\nScalability | 11\n",
    "summary": "The text discusses load scaling considerations in a distributed system, focusing on fan-out challenges and the need for efficient query design to handle high request volumes.",
    "sample_answer": "\u201cOkay, let\u2019s break this down. The core challenge here is fan-out, where a single user\u2019s request triggers a cascade of requests to other services \u2013 as seen with Twitter\u2019s home timeline operation. To address this, we need to think about how to efficiently merge data from multiple sources, similar to how the example query merges tweets based on follower relationships.  This highlights the importance of designing queries with techniques like joins \u2013 in this case, a relational database join \u2013 to minimize the number of requests needed to serve a single user\u2019s timeline, directly addressing a potential scalability bottleneck.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system to serve user timelines, like Twitter\u2019s home timeline. Describe the potential scaling challenges you might encounter due to fan-out. How would you approach designing a query to minimize the number of requests required to fulfill a single user\u2019s timeline, and what database concepts would you leverage?\u201d"
  },
  {
    "chunk": "2.Maintain a cache for each user\u2019s home timeline\u2014like a mailbox of tweets for\neach recipient user (see Figure 1-3 ). When a user posts a tweet , look up all the\npeople who follow that user, and insert the new tweet into each of their home\ntimeline caches. The request to read the home timeline is then cheap, because its\nresult has been computed ahead of time.\nFigure 1-2. Simple relational schema for implementing a Twitter home timeline.\nFigure 1-3. Twitter\u2019s data pipeline for delivering tweets to followers, with load parame\u2010\nters as of November 2012 [ 16].\nThe first version of Twitter used approach 1, but the systems struggled to keep up\nwith the load of home timeline queries, so the company switched to approach 2. This\nworks better because the average rate of published tweets is almost two orders of\nmagnitude lower than the rate of home timeline reads, and so in this case it\u2019s prefera\u2010\nble to do more work at write time and less at read time.\nHowever, the downside of approach 2 is that posting a tweet now requires a lot of\nextra work. On average, a tweet is delivered to about 75 followers, so 4.6k tweets per\nsecond become 345k writes per second to the home timeline caches. But this average\nhides the fact that the number of followers per user varies wildly, and some users\n12 | Chapter 1: Reliable, Scalable, and Maintainable Applications\n",
    "summary": "The text describes a caching strategy for a home timeline, prioritizing read performance by pre-computing and storing timeline data, and highlights a key trade-off between write and read load.",
    "sample_answer": "\u201cThis design demonstrates a classic read-heavy workload optimization strategy, similar to what we see with systems like Facebook\u2019s newsfeed. By maintaining a cache\u2014essentially a keyed data structure\u2014for each user\u2019s home timeline, we're leveraging a common pattern to reduce the latency of read operations. The shift from approach 1 to approach 2 reflects a crucial understanding of the CAP theorem; initially prioritizing fast reads led to a write bottleneck, so the system was adjusted to perform more computation at write time to mitigate this.  The fact that the read rate is orders of magnitude greater than the write rate is a key factor in this design.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say you\u2019re designing a system to deliver real-time updates to users. You\u2019ve identified that reads are significantly more frequent than writes. Describe a caching strategy you might employ, and specifically address the potential trade-offs you\u2019d be considering in terms of data consistency and write performance.\u201d"
  },
  {
    "chunk": "iii. In an ideal world, the running time of a batch job is the size of the dataset divided by the throughput. In\npractice, the running time is often longer, due to skew (data not being spread evenly across worker processes)\nand needing to wait for the slowest task to complete.have over 30 million followers. This means that a single tweet may result in over 30\nmillion writes to home timelines! Doing this in a timely manner\u2014Twitter tries to\ndeliver tweets to followers within five seconds\u2014is a significant challenge.\nIn the example of Twitter, the distribution of followers per user (maybe weighted by\nhow often those users tweet) is a key load parameter for discussing scalability, since it\ndetermines the fan-out load. Your application may have very different characteristics,\nbut you can apply similar principles to reasoning about its load.\nThe final twist of the Twitter anecdote: now that approach 2 is robustly implemented,\nTwitter is moving to a hybrid of both approaches. Most users\u2019 tweets continue to be\nfanned out to home timelines at the time when they are posted, but a small number\nof users with a very large number of followers (i.e., celebrities) are excepted from this\nfan-out. Tweets from any celebrities that a user may follow are fetched separately and\nmerged with that user\u2019s home timeline when it is read, like in approach 1. This hybrid\napproach is able to deliver consistently good performance. We will revisit this exam\u2010\nple in Chapter 12  after we have covered some more technical ground.\nDescribing Performance\nOnce you have described the load on your system, you can investigate what happens\nwhen the load increases. You can look at it in two ways:\n\u2022When you increase a load parameter and keep the system resources (CPU, mem\u2010\nory, network bandwidth, etc.) unchanged, how is the performance of your system\naffected?\n\u2022When you increase a load parameter, how much do you need to increase the\nresources if you want to keep performance unchanged?\nBoth questions require performance numbers, so let\u2019s look briefly at describing the\nperformance of a system.\nIn a batch processing system such as Hadoop, we usually care about throughput \u2014the\nnumber of records we can process per second, or the total time it takes to run a job\non a dataset of a certain size.iii In online systems, what\u2019s usually more important is the\nservice\u2019s response time \u2014that is, the time between a client sending a request and\nreceiving a response.\nScalability | 13\n",
    "summary": "The chunk discusses the challenges of fan-out load in a system like Twitter, highlighting skew, response time versus throughput, and the need for hybrid approaches to achieve consistent performance.",
    "sample_answer": "\u201cOkay, let\u2019s break down this Twitter example. The core challenge here is understanding and mitigating \u2018fan-out\u2019 load \u2013 the exponentially increasing write load as you distribute data to a growing number of followers, like with a celebrity\u2019s tweets. This illustrates the importance of considering skew, as uneven data distribution can lead to bottlenecks, similar to how a single slow task can impact overall throughput, as described in our Hadoop batch processing example. The hybrid approach, selectively fanning out to a subset of users, demonstrates a key performance optimization technique \u2013 a deliberate trade-off between latency and overall system capacity.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system to process user-generated content for a social media platform. How would you approach designing a system to handle a \u2018fan-out\u2019 load, similar to the Twitter example, and what key considerations would you prioritize regarding scalability and performance?\u201d"
  },
  {
    "chunk": "Latency and response time\nLatency  and response time  are often used synonymously, but they\nare not the same. The response time is what the client sees: besides\nthe actual time to process the request (the service time ), it includes\nnetwork delays and queueing delays. Latency is the duration that a\nrequest is waiting to be handled\u2014during which it is latent , await\u2010\ning service [ 17].\nEven if you only make the same request over and over again, you\u2019ll get a slightly dif\u2010\nferent response time on every try. In practice, in a system handling a variety of\nrequests, the response time can vary a lot. We therefore need to think of response\ntime not as a single number, but as a distribution  of values that you can measure.\nIn Figure 1-4 , each gray bar represents a request to a service, and its height shows\nhow long that request took. Most requests are reasonably fast, but there are occa\u2010\nsional outliers  that take much longer. Perhaps the slow requests are intrinsically more\nexpensive, e.g., because they process more data. But even in a scenario where you\u2019d\nthink all requests should take the same time, you get variation: random additional\nlatency could be introduced by a context switch to a background process, the loss of a\nnetwork packet and TCP retransmission, a garbage collection pause, a page fault\nforcing a read from disk, mechanical vibrations in the server rack [ 18], or many other\ncauses.\nFigure 1-4. Illustrating mean and percentiles: response times for a sample of 100\nrequests to a service.\nIt\u2019s common to see the average  response time of a service reported. (Strictly speaking,\nthe term \u201caverage\u201d doesn\u2019t refer to any particular formula, but in practice it is usually\nunderstood as the arithmetic mean : given n values, add up all the values, and divide\nby n.) However, the mean is not a very good metric if you want to know your \u201ctypi\u2010\ncal\u201d response time, because it doesn\u2019t tell you how many users actually experienced\nthat delay.\nUsually it is better to use percentiles . If you take your list of response times and sort it\nfrom fastest to slowest, then the median  is the halfway point: for example, if your\n14 | Chapter 1: Reliable, Scalable, and Maintainable Applications\n",
    "summary": "The text highlights the difference between latency and response time, emphasizing the importance of understanding response time distributions and using percentiles for more accurate measurement.",
    "sample_answer": "\u201cOkay, let's break down this concept of response time. It\u2019s crucial to understand that simply reporting the average response time is misleading because it doesn't represent the experience for most users. We need to consider the entire response time distribution, which captures the variability introduced by factors like network delays, queueing, and internal system operations \u2013 essentially, anything that can cause a request to be latent while awaiting service.  Using percentiles \u2013 like the median \u2013 provides a much more robust understanding of typical response times and allows us to identify and address potential performance bottlenecks.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re monitoring a service and you see a high average response time, but also a significant tail of slow requests. How would you approach diagnosing the root cause, and what metrics beyond the average would you focus on?\u201d"
  },
  {
    "chunk": "median response time is 200 ms, that means half your requests return in less than\n200 ms, and half your requests take longer than that.\nThis makes the median a good metric if you want to know how long users typically\nhave to wait: half of user requests are served in less than the median response time,\nand the other half take longer than the median. The median is also known as the 50th\npercentile , and sometimes abbreviated as p50. Note that the median refers to a single\nrequest; if the user makes several requests (over the course of a session, or because\nseveral resources are included in a single page), the probability that at least one of\nthem is slower than the median is much greater than 50%.\nIn order to figure out how bad your outliers are, you can look at higher percentiles:\nthe 95th , 99th , and 99.9th  percentiles are common (abbreviated p95, p99, and p999 ).\nThey are the response time thresholds at which 95%, 99%, or 99.9% of requests are\nfaster than that particular threshold. For example, if the 95th percentile response time\nis 1.5 seconds, that means 95 out of 100 requests take less than 1.5 seconds, and 5 out\nof 100 requests take 1.5 seconds or more. This is illustrated in Figure 1-4 .\nHigh percentiles of response times, also known as tail latencies , are important\nbecause they directly affect users\u2019 experience of the service. For example, Amazon\ndescribes response time requirements for internal services in terms of the 99.9th per\u2010\ncentile, even though it only affects 1 in 1,000 requests. This is because the customers\nwith the slowest requests are often those who have the most data on their accounts\nbecause they have made many purchases\u2014that is, they\u2019re the most valuable custom\u2010\ners [ 19]. It\u2019s important to keep those customers happy by ensuring the website is fast\nfor them: Amazon has also observed that a 100 ms increase in response time reduces\nsales by 1% [ 20], and others report that a 1-second slowdown reduces a customer sat\u2010\nisfaction metric by 16% [ 21, 22].\nOn the other hand, optimizing the 99.99th percentile (the slowest 1 in 10,000\nrequests) was deemed too expensive and to not yield enough benefit for Amazon\u2019s\npurposes. Reducing response times at very high percentiles is difficult because they\nare easily affected by random events outside of your control, and the benefits are\ndiminishing.\nFor example, percentiles are often used in service level objectives  (SLOs) and service\nlevel agreements  (SLAs), contracts that define the expected performance and availa\u2010\nbility of a service. An SLA may state that the service is considered to be up if it has a\nmedian response time of less than 200 ms and a 99th percentile under 1 s (if the\nresponse time is longer, it might as well be down), and the service may be required to\nbe up at least 99.9% of the time. These metrics set expectations for clients of the ser\u2010\nvice and allow customers to demand a refund if the SLA is not met.\nQueueing delays often account for a large part of the response time at high percen\u2010\ntiles. As a server can only process a small number of things in parallel (limited, for\nScalability | 15\n",
    "summary": "The chunk discusses response time metrics (median, percentiles) and their importance in SLO/SLA definition, highlighting the trade-offs between optimizing different percentiles.",
    "sample_answer": "\u201cOkay, let\u2019s break this down. Focusing on response times, the median (p50) is a good initial metric for understanding typical user experience. However, it's crucial to look at higher percentiles \u2013 like the 99th or 99.9th \u2013 because these represent the tail latency and directly impact a smaller, but critical, subset of users.  As the text mentions, Amazon observed that optimizing for the 99.9th percentile was prioritized because those slowest requests usually came from high-value customers, aligning with the concept of prioritizing the customer experience based on business value.\u201d",
    "potential_interview_question": "\u201cImagine you are designing a system for a high-traffic e-commerce site. What key response time metrics would you monitor, and why? Explain how you might use percentiles \u2013 specifically the 99th and 99.9th \u2013 to prioritize your optimization efforts.\u201d"
  },
  {
    "chunk": "example, by its number of CPU cores), it only takes a small number of slow requests\nto hold up the processing of subsequent requests\u2014an effect sometimes known as\nhead-of-line blocking . Even if those subsequent requests are fast to process on the\nserver, the client will see a slow overall response time due to the time waiting for the\nprior request to complete. Due to this effect, it is important to measure response\ntimes on the client side.\nWhen generating load artificially in order to test the scalability of a system, the load-\ngenerating client needs to keep sending requests independently of the response time.\nIf the client waits for the previous request to complete before sending the next one,\nthat behavior has the effect of artificially keeping the queues shorter in the test than\nthey would be in reality, which skews the measurements [ 23].\nPercentiles in Practice\nHigh percentiles become especially important in backend services that are called mul\u2010\ntiple times as part of serving a single end-user request. Even if you make the calls in\nparallel, the end-user request still needs to wait for the slowest of the parallel calls to\ncomplete. It takes just one slow call to make the entire end-user request slow, as illus\u2010\ntrated in Figure 1-5 . Even if only a small percentage of backend calls are slow, the\nchance of getting a slow call increases if an end-user request requires multiple back\u2010\nend calls, and so a higher proportion of end-user requests end up being slow (an\neffect known as tail latency amplification  [24]).\nIf you want to add response time percentiles to the monitoring dashboards for your\nservices, you need to efficiently calculate them on an ongoing basis. For example, you\nmay want to keep a rolling window of response times of requests in the last 10\nminutes. Every minute, you calculate the median and various percentiles over the val\u2010\nues in that window and plot those metrics on a graph.\nThe na\u00efve implementation is to keep a list of response times for all requests within the\ntime window and to sort that list every minute. If that is too inefficient for you, there\nare algorithms that can calculate a good approximation of percentiles at minimal\nCPU and memory cost, such as forward decay [ 25], t-digest [ 26], or HdrHistogram\n[27]. Beware that averaging percentiles, e.g., to reduce the time resolution or to com\u2010\nbine data from several machines, is mathematically meaningless\u2014the right way of\naggregating response time data is to add the histograms [ 28].\n16 | Chapter 1: Reliable, Scalable, and Maintainable Applications\n",
    "summary": "The text discusses head-of-line blocking, tail latency amplification, and efficient percentile calculation strategies for monitoring backend service performance.",
    "sample_answer": "\u201cOkay, let\u2019s think about this from a system design perspective. Head-of-line blocking is a critical concern\u2014a slow initial request can dramatically impact the overall latency of subsequent requests, even if those requests themselves are fast. To mitigate this, we need to focus on monitoring and understanding tail latency, which is exacerbated when requests involve multiple backend calls, leading to amplification of slow responses.  We should implement percentile monitoring, leveraging techniques like forward decay or histograms to accurately represent the tail of the distribution, while avoiding simply averaging percentiles which loses information.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where head-of-line blocking could significantly impact the performance of a microservice architecture. What monitoring strategies would you employ to detect and address this issue, and why would you choose those particular techniques over simply averaging response time metrics?\u201d"
  },
  {
    "chunk": "Figure 1-5. When several backend calls are needed to serve a request, it takes just a sin\u2010\ngle slow backend request to slow down the entire end-user request.\nApproaches for Coping with Load\nNow that we have discussed the parameters for describing load and metrics for meas\u2010\nuring performance, we can start discussing scalability in earnest: how do we maintain\ngood performance even when our load parameters increase by some amount?\nAn architecture that is appropriate for one level of load is unlikely to cope with 10\ntimes that load. If you are working on a fast-growing service, it is therefore likely that\nyou will need to rethink your architecture on every order of magnitude load increase\n\u2014or perhaps even more often than that.\nPeople often talk of a dichotomy between scaling up  (vertical scaling , moving to a\nmore powerful machine) and scaling out  (horizontal scaling , distributing the load\nacross multiple smaller machines). Distributing load across multiple machines is also\nknown as a shared-nothing  architecture. A system that can run on a single machine is\noften simpler, but high-end machines can become very expensive, so very intensive\nworkloads often can\u2019t avoid scaling out. In reality, good architectures usually involve\na pragmatic mixture of approaches: for example, using several fairly powerful\nmachines can still be simpler and cheaper than a large number of small virtual\nmachines.\nSome systems are elastic , meaning that they can automatically add computing resour\u2010\nces when they detect a load increase, whereas other systems are scaled manually (a\nhuman analyzes the capacity and decides to add more machines to the system). An\nelastic system can be useful if load is highly unpredictable, but manually scaled sys\u2010\ntems are simpler and may have fewer operational surprises (see \u201cRebalancing Parti\u2010\ntions\u201d on page 209 ).\nScalability | 17\n",
    "summary": "The chunk discusses scaling strategies, including horizontal scaling (shared-nothing architecture), elasticity, and the trade-offs between manual and automated scaling.",
    "sample_answer": "\u201cOkay, let\u2019s consider this from a system design perspective. The core issue here is how to handle increasing load. The text highlights the problem of a single slow backend call impacting the entire request, which speaks directly to the importance of distributed systems and fault tolerance. Scaling out \u2013 specifically adopting a shared-nothing architecture \u2013 is crucial to avoid this bottleneck; this means distributing the workload across multiple machines, which aligns with the CAP theorem where we must consider the trade-offs between consistency and availability. Furthermore, the discussion about elasticity \u2013 automatically adding resources \u2013 is key for dealing with unpredictable workloads, though a manually scaled system might be simpler to manage and avoid operational surprises.\u201d",
    "potential_interview_question": "\u201cDescribe the architectural trade-offs between scaling up (vertical scaling) and scaling out (horizontal scaling), and explain how a \u2018shared-nothing architecture\u2019 addresses potential bottlenecks in a growing system.  How might you consider elasticity versus manual scaling in a system with highly unpredictable load?\u201d"
  },
  {
    "chunk": "While distributing stateless services across multiple machines is fairly straightfor\u2010\nward, taking stateful data systems from a single node to a distributed setup can intro\u2010\nduce a lot of additional complexity. For this reason, common wisdom until recently\nwas to keep your database on a single node (scale up) until scaling cost or high-\navailability requirements forced you to make it distributed.\nAs the tools and abstractions for distributed systems get better, this common wisdom\nmay change, at least for some kinds of applications. It is conceivable that distributed\ndata systems will become the default in the future, even for use cases that don\u2019t han\u2010\ndle large volumes of data or traffic. Over the course of the rest of this book we will\ncover many kinds of distributed data systems, and discuss how they fare not just in\nterms of scalability, but also ease of use and maintainability.\nThe architecture of systems that operate at large scale is usually highly specific to the\napplication\u2014there is no such thing as a generic, one-size-fits-all scalable architecture\n(informally known as magic scaling sauce ). The problem may be the volume of reads,\nthe volume of writes, the volume of data to store, the complexity of the data, the\nresponse time requirements, the access patterns, or (usually) some mixture of all of\nthese plus many more issues.\nFor example, a system that is designed to handle 100,000 requests per second, each\n1 kB in size, looks very different from a system that is designed for 3 requests per\nminute, each 2 GB in size\u2014even though the two systems have the same data through\u2010\nput.\nAn architecture that scales well for a particular application is built around assump\u2010\ntions of which operations will be common and which will be rare\u2014the load parame\u2010\nters. If those assumptions turn out to be wrong, the engineering effort for scaling is at\nbest wasted, and at worst counterproductive. In an early-stage startup or an unpro\u2010\nven product it\u2019s usually more important to be able to iterate quickly on product fea\u2010\ntures than it is to scale to some hypothetical future load.\nEven though they are specific to a particular application, scalable architectures are\nnevertheless usually built from general-purpose building blocks, arranged in familiar\npatterns. In this book we discuss those building blocks and patterns. \nMaintainability\nIt is well known that the majority of the cost of software is not in its initial develop\u2010\nment, but in its ongoing maintenance\u2014fixing bugs, keeping its systems operational,\ninvestigating failures, adapting it to new platforms, modifying it for new use cases,\nrepaying technical debt, and adding new features.\nYet, unfortunately, many people working on software systems dislike maintenance of\nso-called legacy  systems\u2014perhaps it involves fixing other people\u2019s mistakes, or work\u2010\n18 | Chapter 1: Reliable, Scalable, and Maintainable Applications\n",
    "summary": "The text discusses the challenges of moving stateful systems to distributed architectures and highlights the importance of application-specific scaling and maintainability considerations.",
    "sample_answer": "\u201cThe shift from scaling up a single node to distributing a stateful system introduces significant complexity. As the chunk notes, there isn\u2019t a \u2018magic scaling sauce,\u2019 and architecture must be tailored to specific application needs, primarily considering read/write volume and access patterns. This aligns with the CAP theorem \u2013 a system can only guarantee two out of consistency, availability, and partition tolerance, and understanding these trade-offs is crucial for designing resilient systems.\u201d  Furthermore, \u201cGiven the high cost of maintenance, focusing on application-specific scaling, rather than a generic approach, is a prudent strategy, especially for early-stage products. This reflects a shift towards a more pragmatic approach to system design, emphasizing maintainability and avoiding premature scaling.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system that needs to handle user session data. Considering the text\u2019s emphasis on application-specific scaling and the CAP theorem, how would you approach the architectural decisions, particularly regarding data consistency and availability for this system?\u201d"
  },
  {
    "chunk": "ing with platforms that are now outdated, or systems that were forced to do things\nthey were never intended for. Every legacy system is unpleasant in its own way, and\nso it is difficult to give general recommendations for dealing with them.\nHowever, we can and should design software in such a way that it will hopefully min\u2010\nimize pain during maintenance, and thus avoid creating legacy software ourselves. To\nthis end, we will pay particular attention to three design principles for software\nsystems:\nOperability\nMake it easy for operations teams to keep the system running smoothly.\nSimplicity\nMake it easy for new engineers to understand the system, by removing as much\ncomplexity as possible from the system. (Note this is not the same as simplicity\nof the user interface.)\nEvolvability\nMake it easy for engineers to make changes to the system in the future, adapting\nit for unanticipated use cases as requirements change. Also known as extensibil\u2010\nity, modifiability , or plasticity .\nAs previously with reliability and scalability, there are no easy solutions for achieving\nthese goals. Rather, we will try to think about systems with operability, simplicity,\nand evolvability in mind.\nOperability: Making Life Easy for Operations\nIt has been suggested that \u201cgood operations can often work around the limitations of\nbad (or incomplete) software, but good software cannot run reliably with bad opera\u2010\ntions\u201d [ 12]. While some aspects of operations can and should be automated, it is still\nup to humans to set up that automation in the first place and to make sure it\u2019s work\u2010\ning correctly.\nOperations teams are vital to keeping a software system running smoothly. A good\noperations team typically is responsible for the following, and more [ 29]:\n\u2022Monitoring the health of the system and quickly restoring service if it goes into a\nbad state\n\u2022Tracking down the cause of problems, such as system failures or degraded per\u2010\nformance\n\u2022Keeping software and platforms up to date, including security patches\n\u2022Keeping tabs on how different systems affect each other, so that a problematic\nchange can be avoided before it causes damage\nMaintainability | 19\n",
    "summary": "The text emphasizes designing for operability, simplicity, and evolvability as key principles to mitigate the creation of future legacy systems.",
    "sample_answer": "\u201cWhen designing for maintainability, we absolutely need to consider operability \u2013 it\u2019s fundamentally about empowering operations teams. A system designed with operability in mind will allow operations to efficiently monitor health, quickly resolve issues, and proactively manage updates, reducing the likelihood of a system becoming a legacy issue. Furthermore, the text highlights the importance of simplicity and evolvability, which are critical for reducing cognitive load on engineers and adapting to changing requirements, respectively.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say you\u2019re tasked with designing a monitoring system for a data pipeline. Considering the principles outlined in this excerpt \u2013 operability, simplicity, and evolvability \u2013 how would you approach the architecture, specifically focusing on how you'd ensure operations teams can effectively manage and adapt to changes over time?\u201d"
  },
  {
    "chunk": "\u2022Anticipating future problems and solving them before they occur (e.g., capacity\nplanning)\n\u2022Establishing good practices and tools for deployment, configuration manage\u2010\nment, and more\n\u2022Performing complex maintenance tasks, such as moving an application from one\nplatform to another\n\u2022Maintaining the security of the system as configuration changes are made\n\u2022Defining processes that make operations predictable and help keep the produc\u2010\ntion environment stable\n\u2022Preserving the organization\u2019s knowledge about the system, even as individual\npeople come and go\nGood operability means making routine tasks easy, allowing the operations team to\nfocus their efforts on high-value activities. Data systems can do various things to\nmake routine tasks easy, including:\n\u2022Providing visibility into the runtime behavior and internals of the system, with\ngood monitoring\n\u2022Providing good support for automation and integration with standard tools\n\u2022Avoiding dependency on individual machines (allowing machines to be taken\ndown for maintenance while the system as a whole continues running uninter\u2010\nrupted)\n\u2022Providing good documentation and an easy-to-understand operational model\n(\u201cIf I do X, Y will happen\u201d)\n\u2022Providing good default behavior, but also giving administrators the freedom to\noverride defaults when needed\n\u2022Self-healing where appropriate, but also giving administrators manual control\nover the system state when needed\n\u2022Exhibiting predictable behavior, minimizing surprises\nSimplicity: Managing Complexity\nSmall software projects can have delightfully simple and expressive code, but as\nprojects get larger, they often become very complex and difficult to understand. This\ncomplexity slows down everyone who needs to work on the system, further increas\u2010\ning the cost of maintenance. A software project mired in complexity is sometimes\ndescribed as a big ball of mud  [30].\n20 | Chapter 1: Reliable, Scalable, and Maintainable Applications\n",
    "summary": "This chunk discusses operational reliability, scalability, and maintainability through proactive planning, automation, and a focus on predictable system behavior.",
    "sample_answer": "\u201cTo build a truly reliable system, we need to move beyond just reacting to failures \u2013 a key principle is anticipating future problems through proactive capacity planning and establishing robust operational processes. For example, we can leverage automation and tooling, like configuration management, to ensure consistent deployments and reduce configuration drift, and providing good monitoring and observability is crucial to quickly identify issues and establish alerting thresholds. Furthermore, considering concepts like sharding \u2013 distributing data across multiple nodes \u2013 is vital for scalability, but it also introduces complexities that require well-defined management and monitoring strategies.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where you would advocate for sharding a data system, and explain how you would monitor the performance of the sharded system to ensure optimal operation and prevent hotspots.\u201d"
  },
  {
    "chunk": "There are various possible symptoms of complexity: explosion of the state space, tight\ncoupling of modules, tangled dependencies, inconsistent naming and terminology,\nhacks aimed at solving performance problems, special-casing to work around issues\nelsewhere, and many more. Much has been said on this topic already [ 31, 32, 33].\nWhen complexity makes maintenance hard, budgets and schedules are often over\u2010\nrun. In complex software, there is also a greater risk of introducing bugs when mak\u2010\ning a change: when the system is harder for developers to understand and reason\nabout, hidden assumptions, unintended consequences, and unexpected interactions\nare more easily overlooked. Conversely, reducing complexity greatly improves the\nmaintainability of software, and thus simplicity should be a key goal for the systems\nwe build.\nMaking a system simpler does not necessarily mean reducing its functionality; it can\nalso mean removing accidental  complexity. Moseley and Marks [ 32] define complex\u2010\nity as accidental if it is not inherent in the problem that the software solves (as seen\nby the users) but arises only from the implementation.\nOne of the best tools we have for removing accidental complexity is abstraction . A\ngood abstraction can hide a great deal of implementation detail behind a clean,\nsimple-to-understand fa\u00e7ade. A good abstraction can also be used for a wide range of\ndifferent applications. Not only is this reuse more efficient than reimplementing a\nsimilar thing multiple times, but it also leads to higher-quality software, as quality\nimprovements in the abstracted component benefit all applications that use it.\nFor example, high-level programming languages are abstractions that hide machine\ncode, CPU registers, and syscalls. SQL is an abstraction that hides complex on-disk\nand in-memory data structures, concurrent requests from other clients, and inconsis\u2010\ntencies after crashes. Of course, when programming in a high-level language, we are\nstill using machine code; we are just not using it directly , because the programming\nlanguage abstraction saves us from having to think about it.\nHowever, finding good abstractions is very hard. In the field of distributed systems,\nalthough there are many good algorithms, it is much less clear how we should be\npackaging them into abstractions that help us keep the complexity of the system at a\nmanageable level.\nThroughout this book, we will keep our eyes open for good abstractions that allow us\nto extract parts of a large system into well-defined, reusable components.\nEvolvability: Making Change Easy\nIt\u2019s extremely unlikely that your system\u2019s requirements will remain unchanged for\u2010\never. They are much more likely to be in constant flux: you learn new facts, previ\u2010\nously unanticipated use cases emerge, business priorities change, users request new\nMaintainability | 21\n",
    "summary": "The text emphasizes the importance of abstraction and reducing accidental complexity in system design, particularly in the context of maintainability and evolvability.",
    "sample_answer": "\u201cWhen dealing with complex systems, we absolutely need to prioritize reducing accidental complexity \u2013 as described here, this often stems from tightly coupled modules and hacks. Abstraction is a key tool for this, allowing us to hide underlying implementation details and create reusable components. For instance, SQL itself is an abstraction that hides the complexities of relational database management, enabling developers to focus on querying data rather than managing storage details.  A failure to address complexity will certainly lead to budget overruns and increased risk of bugs during maintenance.\u201d",
    "potential_interview_question": "\u201cConsider a large data warehouse system that\u2019s becoming increasingly complex due to new data sources and evolving business requirements. Describe your approach to managing this complexity, specifically referencing techniques like abstraction and how they relate to maintainability and cost control.\u201d"
  },
  {
    "chunk": "features, new platforms replace old platforms, legal or regulatory requirements\nchange, growth of the system forces architectural changes, etc.\nIn terms of organizational processes, Agile  working patterns provide a framework for\nadapting to change. The Agile community has also developed technical tools and pat\u2010\nterns that are helpful when developing software in a frequently changing environ\u2010\nment, such as test-driven development (TDD) and refactoring.\nMost discussions of these Agile techniques focus on a fairly small, local scale (a cou\u2010\nple of source code files within the same application). In this book, we search for ways\nof increasing agility on the level of a larger data system, perhaps consisting of several\ndifferent applications or services with different characteristics. For example, how\nwould you \u201crefactor\u201d Twitter\u2019s architecture for assembling home timelines ( \u201cDescrib\u2010\ning Load\u201d on page 11 ) from approach 1 to approach 2?\nThe ease with which you can modify a data system, and adapt it to changing require\u2010\nments, is closely linked to its simplicity and its abstractions: simple and easy-to-\nunderstand systems are usually easier to modify than complex ones. But since this is\nsuch an important idea, we will use a different word to refer to agility on a data sys\u2010\ntem level: evolvability  [34]. \nSummary\nIn this chapter, we have explored some fundamental ways of thinking about data-\nintensive applications. These principles will guide us through the rest of the book,\nwhere we dive into deep technical detail.\nAn application has to meet various requirements in order to be useful. There are\nfunctional requirements  (what it should do, such as allowing data to be stored,\nretrieved, searched, and processed in various ways), and some nonfunctional require\u2010\nments  (general properties like security, reliability, compliance, scalability, compatibil\u2010\nity, and maintainability). In this chapter we discussed reliability, scalability, and\nmaintainability in detail.\nReliability  means making systems work correctly, even when faults occur. Faults can\nbe in hardware (typically random and uncorrelated), software (bugs are typically sys\u2010\ntematic and hard to deal with), and humans (who inevitably make mistakes from\ntime to time). Fault-tolerance techniques can hide certain types of faults from the end\nuser.\nScalability  means having strategies for keeping performance good, even when load\nincreases. In order to discuss scalability, we first need ways of describing load and\nperformance quantitatively. We briefly looked at Twitter\u2019s home timelines as an\nexample of describing load, and response time percentiles as a way of measuring per\u2010\n22 | Chapter 1: Reliable, Scalable, and Maintainable Applications\n",
    "summary": "The text discusses the importance of evolvability, reliability, scalability, and maintainability in data systems, highlighting the need for fault-tolerance and quantitative load/performance measurement.",
    "sample_answer": "\u201cWhen designing a data system like Twitter\u2019s home timeline aggregation, we need to consider both functional and nonfunctional requirements. From a reliability perspective, we need to implement fault-tolerance strategies \u2013 perhaps using techniques like replication to hide hardware faults and ensure continued operation.  Scalability is also key; this means adopting methods for monitoring load, likely using metrics like response time percentiles, to proactively identify bottlenecks and adjust our system's architecture \u2013 perhaps through techniques like sharding to distribute the load across multiple nodes.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you would leverage replication to improve the reliability of a data pipeline. How would you measure the impact of this change on overall system availability, and what metrics would you track to ensure it\u2019s successful?\u201d"
  },
  {
    "chunk": "formance. In a scalable system, you can add processing capacity in order to remain\nreliable under high load.\nMaintainability  has many facets, but in essence it\u2019s about making life better for the\nengineering and operations teams who need to work with the system. Good abstrac\u2010\ntions can help reduce complexity and make the system easier to modify and adapt for\nnew use cases. Good operability means having good visibility into the system\u2019s health,\nand having effective ways of managing it.\nThere is unfortunately no easy fix for making applications reliable, scalable, or main\u2010\ntainable. However, there are certain patterns and techniques that keep reappearing in\ndifferent kinds of applications. In the next few chapters we will take a look at some\nexamples of data systems and analyze how they work toward those goals.\nLater in the book, in Part III , we will look at patterns for systems that consist of sev\u2010\neral components working together, such as the one in Figure 1-1 .\nReferences\n[1] Michael Stonebraker and U\u011fur \u00c7etintemel: \u201c \u2018One Size Fits All\u2019: An Idea Whose\nTime Has Come and Gone ,\u201d at 21st International Conference on Data Engineering\n(ICDE), April 2005.\n[2] Walter L. Heimerdinger and Charles B. Weinstock: \u201c A Conceptual Framework\nfor System Fault Tolerance ,\u201d Technical Report CMU/SEI-92-TR-033, Software Engi\u2010\nneering Institute, Carnegie Mellon University, October 1992.\n[3] Ding Yuan, Yu Luo, Xin Zhuang, et al.: \u201c Simple Testing Can Prevent Most Criti\u2010\ncal Failures: An Analysis of Production Failures in Distributed Data-Intensive Sys\u2010\ntems ,\u201d at 11th USENIX Symposium on Operating Systems Design and Implementation\n(OSDI), October 2014.\n[4] Yury Izrailevsky and Ariel Tseitlin: \u201c The Netflix Simian Army ,\u201d techblog.net\u2010\nflix.com , July 19, 2011.\n[5] Daniel Ford, Fran\u00e7ois Labelle, Florentina I. Popovici, et al.: \u201c Availability in Glob\u2010\nally Distributed Storage Systems ,\u201d at 9th USENIX Symposium on Operating Systems\nDesign and Implementation  (OSDI), October 2010.\n[6] Brian Beach: \u201c Hard Drive Reliability Update \u2013 Sep 2014 ,\u201d backblaze.com , Septem\u2010\nber 23, 2014.\n[7] Laurie Voss: \u201c AWS: The Good, the Bad and the Ugly ,\u201d blog.awe.sm , December 18,\n2012.\nSummary | 23\n",
    "summary": "The text highlights the importance of scalability, maintainability, and reliability in system design, referencing techniques like abstraction and distributed system analysis.",
    "sample_answer": "\u201cOkay, this passage really emphasizes the core challenges of building reliable, scalable systems. The repeated mention of \u2018scalability\u2019 suggests a need to consider how the system will handle increasing load \u2013 likely through techniques like sharding or partitioning, as we discussed in the CAP theorem. Maintaining a system effectively relies on good abstractions, as highlighted, which simplifies modification and reduces the overall cognitive load for the engineering teams. Furthermore, the references to fault tolerance (Stonebraker, Heimerdinger) and Netflix's Simian Army demonstrate the need for robust monitoring and automated recovery strategies, particularly in complex distributed systems.\u201d",
    "potential_interview_question": "\u201cImagine you're designing a system to ingest and process clickstream data for a large e-commerce website. Considering the challenges of high data volume and the need for rapid responsiveness, what architectural considerations would you prioritize, and what specific techniques might you employ to ensure scalability and reliability, referencing any relevant system design principles we've discussed?\u201d"
  },
  {
    "chunk": "[8] Haryadi S. Gunawi, Mingzhe Hao, Tanakorn Leesatapornwongsa, et al.: \u201c What\nBugs Live in the Cloud? ,\u201d at 5th ACM Symposium on Cloud Computing  (SoCC),\nNovember 2014. doi:10.1145/2670979.2670986\n[9] Nelson Minar: \u201c Leap Second Crashes Half the Internet ,\u201d somebits.com , July 3,\n2012.\n[10] Amazon Web Services: \u201c Summary of the Amazon EC2 and Amazon RDS Ser\u2010\nvice Disruption in the US East Region ,\u201d aws.amazon.com , April 29, 2011.\n[11] Richard I. Cook: \u201c How Complex Systems Fail ,\u201d Cognitive Technologies Labora\u2010\ntory, April 2000.\n[12] Jay Kreps: \u201c Getting Real About Distributed System Reliability ,\u201d blog.empathy\u2010\nbox.com , March 19, 2012.\n[13] David Oppenheimer, Archana Ganapathi, and David A. Patterson: \u201c Why Do\nInternet Services Fail, and What Can Be Done About It? ,\u201d at 4th USENIX Symposium\non Internet Technologies and Systems  (USITS), March 2003.\n[14] Nathan Marz: \u201c Principles of Software Engineering, Part 1 ,\u201d nathanmarz.com ,\nApril 2, 2013.\n[15] Michael Jurewitz: \u201c The Human Impact of Bugs ,\u201d jury.me , March 15, 2013.\n[16] Raffi Krikorian: \u201c Timelines at Scale ,\u201d at QCon San Francisco , November 2012.\n[17] Martin Fowler: Patterns of Enterprise Application Architecture . Addison Wesley,\n",
    "summary": "This chunk discusses the challenges of system failures, particularly in cloud environments and at scale, emphasizing the importance of understanding system behavior and recovery strategies.",
    "sample_answer": "\u201cThis excerpt highlights the critical need for robust system design, particularly considering the potential for cascading failures, as demonstrated by the \u2018leap second\u2019 crashes and the Amazon EC2 disruption. To build resilient systems, we must incorporate principles like redundancy and replication \u2013 for example, utilizing multiple Availability Zones to mitigate the impact of a single outage, aligning with the concept of avoiding single points of failure. Furthermore, understanding the \u2018human impact of bugs\u2019 \u2013 as discussed by Jurewitz \u2013 underscores the importance of rigorous testing, monitoring, and proactive fault detection, similar to what\u2019s presented in Fowler\u2019s \u2018Patterns of Enterprise Application Architecture\u2019 where designing for failure is a core pattern.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where system design needs to account for the potential for large-scale outages. How would you approach designing for resilience, incorporating the principles of redundancy and fault tolerance, and what monitoring strategies would you implement to detect and respond to these failures?\u201d"
  },
  {
    "chunk": "2002. ISBN: 978-0-321-12742-6\n[18] Kelly Sommers: \u201c After all that run around, what caused 500ms disk latency even\nwhen we replaced physical server? \u201d twitter.com , November 13, 2014.\n[19] Giuseppe DeCandia, Deniz Hastorun, Madan Jampani, et al.: \u201c Dynamo: Ama\u2010\nzon\u2019s Highly Available Key-Value Store ,\u201d at 21st ACM Symposium on Operating Sys\u2010\ntems Principles  (SOSP), October 2007.\n[20] Greg Linden: \u201c Make Data Useful ,\u201d slides from presentation at Stanford Univer\u2010\nsity Data Mining class (CS345), December 2006.\n[21] Tammy Everts: \u201c The Real Cost of Slow Time vs Downtime ,\u201d webperformanceto\u2010\nday.com , November 12, 2014.\n[22] Jake Brutlag: \u201c Speed Matters for Google Web Search ,\u201d googleresearch.blog\u2010\nspot.co.uk , June 22, 2009.\n[23] Tyler Treat: \u201c Everything You Know About Latency Is Wrong ,\u201d bravenew\u2010\ngeek.com , December 12, 2015.\n24 | Chapter 1: Reliable, Scalable, and Maintainable Applications\n[24] Jeffrey Dean and Luiz Andr\u00e9 Barroso: \u201c The Tail at Scale ,\u201d Communications of the\nACM , volume 56, number 2, pages 74\u201380, February 2013. doi:\n10.1145/2408776.2408794\n[25] Graham Cormode, Vladislav Shkapenyuk, Divesh Srivastava, and Bojian Xu:\n\u201cForward Decay: A Practical Time Decay Model for Streaming Systems ,\u201d at 25th\nIEEE International Conference on Data Engineering  (ICDE), March 2009.\n[26] Ted Dunning and Otmar Ertl: \u201c Computing Extremely Accurate Quantiles Using\nt-Digests ,\u201d github.com , March 2014.\n[27] Gil Tene: \u201c HdrHistogram ,\u201d hdrhistogram.org .\n[28] Baron Schwartz: \u201c Why Percentiles Don\u2019t Work the Way You Think ,\u201d vividcor\u2010\ntex.com , December 7, 2015.\n[29] James Hamilton: \u201c On Designing and Deploying Internet-Scale Services ,\u201d at 21st\nLarge Installation System Administration Conference  (LISA), November 2007.\n[30] Brian Foote and Joseph Yoder: \u201c Big Ball of Mud ,\u201d at 4th Conference on Pattern\nLanguages of Programs  (PLoP), September 1997.\n[31] Frederick P Brooks: \u201cNo Silver Bullet \u2013 Essence and Accident in Software Engi\u2010\nneering,\u201d in The Mythical Man-Month , Anniversary edition, Addison-Wesley, 1995.\nISBN: 978-0-201-83595-3\n[32] Ben Moseley and Peter Marks: \u201c Out of the Tar Pit ,\u201d at BCS Software Practice\nAdvancement  (SPA), 2006.\n[33] Rich Hickey: \u201c Simple Made Easy ,\u201d at Strange Loop , September 2011.\n[34] Hongyu Pei Breivold, Ivica Crnkovic, and Peter J. Eriksson: \u201c Analyzing Software\nEvolvability ,\u201d at 32nd Annual IEEE International Computer Software and Applica\u2010\ntions Conference  (COMPSAC), July 2008. doi:10.1109/COMPSAC.2008.50\nSummary | 25\n",
    "summary": "The text discusses latency, data decay, and software evolvability, referencing Amazon\u2019s Dynamo, Google\u2019s web search, and approaches to accurately measuring latency and time decay in streaming systems.",
    "sample_answer": "\"Okay, this excerpt highlights some crucial considerations for building reliable, scalable applications. The Dynamo paper, for example, illustrates the importance of eventual consistency and a distributed key-value store for high availability \u2013 a classic CAP theorem trade-off.  Furthermore, the 'Forward Decay' concept, as described in the ICDE paper, directly addresses the challenge of accurately measuring latency in streaming systems, acknowledging that data decays over time and needs to be modeled accordingly. We need to be thinking about how to handle the inherent inaccuracies when dealing with real-time data streams.\"",
    "potential_interview_question": "\u201cDescribe a scenario where you might need to model time decay for a streaming data pipeline. What specific techniques could you employ, and what trade-offs would you consider between accuracy and computational cost?\""
  },
  {
    "chunk": "CHAPTER 2\nData Models and Query Languages\nThe limits of my language mean the limits of my world.\n\u2014Ludwig Wittgenstein, Tractatus Logico-Philosophicus  (1922)\nData models are perhaps the most important part of developing software, because\nthey have such a profound effect: not only on how the software is written, but also on\nhow we think about the problem  that we are solving.\nMost applications are built by layering one data model on top of another. For each\nlayer, the key question is: how is it represented  in terms of the next-lower layer? For\nexample:\n1.As an application developer, you look at the real world (in which there are peo\u2010\nple, organizations, goods, actions, money flows, sensors, etc.) and model it in\nterms of objects or data structures, and APIs that manipulate those data struc\u2010\ntures. Those structures are often specific to your application.\n2.When you want to store those data structures, you express them in terms of a\ngeneral-purpose data model, such as JSON or XML documents, tables in a rela\u2010\ntional database, or a graph model.\n3.The engineers who built your database software decided on a way of representing\nthat JSON/XML/relational/graph data in terms of bytes in memory, on disk, or\non a network. The representation may allow the data to be queried, searched,\nmanipulated, and processed in various ways.\n4.On yet lower levels, hardware engineers have figured out how to represent bytes\nin terms of electrical currents, pulses of light, magnetic fields, and more.\nIn a complex application there may be more intermediary levels, such as APIs built\nupon APIs, but the basic idea is still the same: each layer hides the complexity of the\nlayers below it by providing a clean data model. These abstractions allow different\n27\n",
    "summary": "This chapter outlines a layered approach to data modeling, emphasizing abstraction and the relationship between different data representations from application APIs down to hardware.",
    "sample_answer": "\u201cThis chunk describes a classic layered architecture for data modeling, which is critical for maintaining flexibility and reducing complexity in large systems. The principle here is that each layer \u2013 from the application\u2019s object model to the raw bytes stored in memory \u2013 hides the underlying complexity of the layers below. A key consideration is how schemas evolve across these layers; for instance, a change in the application\u2019s object model might require a corresponding change in the database schema to accommodate the new data types, mirroring the concept of schema evolution that\u2019s important for data pipelines.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where you\u2019ve had to adapt a data model to accommodate changes at a lower layer of a system. What strategies did you employ to ensure compatibility and minimize disruption, considering potential schema evolution challenges?\u201d"
  },
  {
    "chunk": "groups of people\u2014for example, the engineers at the database vendor and the applica\u2010\ntion developers using their database\u2014to work together effectively.\nThere are many different kinds of data models, and every data model embodies\nassumptions about how it is going to be used. Some kinds of usage are easy and some\nare not supported; some operations are fast and some perform badly; some data\ntransformations feel natural and some are awkward.\nIt can take a lot of effort to master just one data model (think how many books there\nare on relational data modeling). Building software is hard enough, even when work\u2010\ning with just one data model and without worrying about its inner workings. But\nsince the data model has such a profound effect on what the software above it can\nand can\u2019t do, it\u2019s important to choose one that is appropriate to the application.\nIn this chapter we will look at a range of general-purpose data models for data stor\u2010\nage and querying (point 2 in the preceding list). In particular, we will compare the\nrelational model, the document model, and a few graph-based data models. We will\nalso look at various query languages and compare their use cases. In Chapter 3  we\nwill discuss how storage engines work; that is, how these data models are actually\nimplemented (point 3 in the list).\nRelational Model Versus Document Model\nThe best-known data model today is probably that of SQL, based on the relational\nmodel proposed by Edgar Codd in 1970 [ 1]: data is organized into relations  (called\ntables  in SQL), where each relation is an unordered collection of tuples  (rows  in SQL).\nThe relational model was a theoretical proposal, and many people at the time\ndoubted whether it could be implemented efficiently. However, by the mid-1980s,\nrelational database management systems (RDBMSes) and SQL had become the tools\nof choice for most people who needed to store and query data with some kind of reg\u2010\nular structure. The dominance of relational databases has lasted around 25\u201230 years\n\u2014an eternity in computing history.\nThe roots of relational databases lie in business data processing , which was performed\non mainframe computers in the 1960s and \u201970s. The use cases appear mundane from\ntoday\u2019s perspective: typically transaction processing  (entering sales or banking trans\u2010\nactions, airline reservations, stock-keeping in warehouses) and batch processing  (cus\u2010\ntomer invoicing, payroll, reporting).\nOther databases at that time forced application developers to think a lot about the\ninternal representation of the data in the database. The goal of the relational model\nwas to hide that implementation detail behind a cleaner interface.\nOver the years, there have been many competing approaches to data storage and\nquerying. In the 1970s and early 1980s, the network model  and the hierarchical model\n28 | Chapter 2: Data Models and Query Languages\n",
    "summary": "The text discusses the importance of choosing appropriate data models (relational, document, graph) considering use cases and query languages, highlighting the historical context of relational databases and their evolution.",
    "sample_answer": "\u201cWhen designing a data system, it\u2019s crucial to align the data model with the expected usage patterns. The relational model, as established by Edgar Codd, gained prominence due to its ability to abstract away the underlying implementation details \u2013 a key factor considering the complexity of early database systems. This is analogous to the principles of hiding implementation details, like those described in the CAP theorem, where you want to minimize the impact of system complexity on the application layer.\u201d",
    "potential_interview_question": "\u201cExplain the historical context behind the dominance of the relational model in database design. What factors contributed to its widespread adoption, and what design principles does this evolution illustrate?\u201d"
  },
  {
    "chunk": "were the main alternatives, but the relational model came to dominate them. Object\ndatabases came and went again in the late 1980s and early 1990s. XML databases\nappeared in the early 2000s, but have only seen niche adoption. Each competitor to\nthe relational model generated a lot of hype in its time, but it never lasted [ 2].\nAs computers became vastly more powerful and networked, they started being used\nfor increasingly diverse purposes. And remarkably, relational databases turned out to\ngeneralize very well, beyond their original scope of business data processing, to a\nbroad variety of use cases. Much of what you see on the web today is still powered by\nrelational databases, be it online publishing, discussion, social networking, ecom\u2010\nmerce, games, software-as-a-service productivity applications, or much more.\nThe Birth of NoSQL\nNow, in the 2010s, NoSQL  is the latest attempt to overthrow the relational model\u2019s\ndominance. The name \u201cNoSQL\u201d is unfortunate, since it doesn\u2019t actually refer to any\nparticular technology\u2014it was originally intended simply as a catchy Twitter hashtag\nfor a meetup on open source, distributed, nonrelational databases in 2009 [ 3]. Never\u2010\ntheless, the term struck a nerve and quickly spread through the web startup commu\u2010\nnity and beyond. A number of interesting database systems are now associated with\nthe #NoSQL hashtag, and it has been retroactively reinterpreted as Not Only SQL  [4].\nThere are several driving forces behind the adoption of NoSQL databases, including:\n\u2022A need for greater scalability than relational databases can easily achieve, includ\u2010\ning very large datasets or very high write throughput\n\u2022A widespread preference for free and open source software over commercial\ndatabase products\n\u2022Specialized query operations that are not well supported by the relational model\n\u2022Frustration with the restrictiveness of relational schemas, and a desire for a more\ndynamic and expressive data model [ 5]\nDifferent applications have different requirements, and the best choice of technology\nfor one use case may well be different from the best choice for another use case. It\ntherefore seems likely that in the foreseeable future, relational databases will continue\nto be used alongside a broad variety of nonrelational datastores\u2014an idea that is\nsometimes called polyglot persistence  [3].\nThe Object-Relational Mismatch\nMost application development today is done in object-oriented programming lan\u2010\nguages, which leads to a common criticism of the SQL data model: if data is stored in\nrelational tables, an awkward translation layer is required between the objects in the\nRelational Model Versus Document Model | 29\n",
    "summary": "The text discusses the rise of NoSQL databases as an alternative to relational databases, driven by scalability needs, open-source preferences, and limitations of the relational model, and advocates for a polyglot persistence approach.",
    "sample_answer": "\u201cIt\u2019s interesting to see how the evolution of database technologies mirrors application needs. The move to NoSQL databases represents a direct response to the limitations of the relational model in handling massive datasets and high-volume writes, a concept we often hear about in the context of scaling systems like online publishing or social networks. Furthermore, the \u2018polyglot persistence\u2019 approach \u2013 using different database technologies depending on the specific requirements of the application \u2013 reflects a sophisticated understanding of how to optimize for both performance and data modeling, aligning with modern object-oriented development practices.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system for a rapidly growing social media platform.  Given the potential for extreme data volume and high write throughput, and considering the limitations of a traditional relational database, what are some of the architectural considerations you'd evaluate for the data storage layer, and why?  How might you address the concept of \u2018polyglot persistence\u2019 in this scenario?\u201d"
  },
  {
    "chunk": "Figure 2-1. Representing a LinkedIn profile using a relational schema. Photo of Bill\nGates courtesy of Wikimedia Commons, Ricardo Stuckert, Ag\u00eancia Brasil.\nFor a data structure like a r\u00e9sum\u00e9, which is mostly a self-contained document , a JSON\nrepresentation can be quite appropriate: see Example 2-1 . JSON has the appeal of\nbeing much simpler than XML. Document-oriented databases like MongoDB [ 9],\nRethinkDB [ 10], CouchDB [ 11], and Espresso [ 12] support this data model.\nExample 2-1. Representing a LinkedIn profile as a JSON document\n{\n  \"user_id\" :     251,\n  \"first_name\" :  \"Bill\",\n  \"last_name\" :   \"Gates\",\n  \"summary\" :     \"Co-chair of the Bill & Melinda Gates... Active blogger.\" ,\n  \"region_id\" :   \"us:91\",\n  \"industry_id\" : 131,\n  \"photo_url\" :   \"/p/7/000/253/05b/308dd6e.jpg\" ,\nRelational Model Versus Document Model | 31\n  \"positions\" : [\n    {\"job_title\" : \"Co-chair\" , \"organization\" : \"Bill & Melinda Gates Foundation\" },\n    {\"job_title\" : \"Co-founder, Chairman\" , \"organization\" : \"Microsoft\" }\n  ],\n  \"education\" : [\n    {\"school_name\" : \"Harvard University\" ,       \"start\": 1973, \"end\": 1975},\n    {\"school_name\" : \"Lakeside School, Seattle\" , \"start\": null, \"end\": null}\n  ],\n  \"contact_info\" : {\n    \"blog\":    \"http://thegatesnotes.com\" ,\n    \"twitter\" : \"http://twitter.com/BillGates\"\n  }\n}\nSome developers feel that the JSON model reduces the impedance mismatch between\nthe application code and the storage layer. However, as we shall see in Chapter 4 ,\nthere are also problems with JSON as a data encoding format. The lack of a schema is\noften cited as an advantage; we will discuss this in \u201cSchema flexibility in the docu\u2010\nment model\u201d on page 39 .\nThe JSON representation has better locality  than the multi-table schema in\nFigure 2-1 . If you want to fetch a profile in the relational example, you need to either\nperform multiple queries (query each table by user_id ) or perform a messy multi-\nway join between the users  table and its subordinate tables. In the JSON representa\u2010\ntion, all the relevant information is in one place, and one query is sufficient.\nThe one-to-many relationships from the user profile to the user\u2019s positions, educa\u2010\ntional history, and contact information imply a tree structure in the data, and the\nJSON representation makes this tree structure explicit (see Figure 2-2 ).\nFigure 2-2. One-to-many relationships forming a tree structure.\n32 | Chapter 2: Data Models and Query Languages\n",
    "summary": "The text highlights the advantages of a JSON representation for data like a LinkedIn profile, emphasizing locality and the avoidance of complex joins compared to relational schemas.",
    "sample_answer": "\u201cOkay, this excerpt really illustrates a key consideration in data modeling \u2013 locality versus complexity. Using a JSON representation, as shown here, avoids the need for multiple table joins, which is a common performance bottleneck when querying relational data. The one-to-many relationships \u2013 user to positions, education, contact info \u2013 inherently form a tree, and a JSON document allows us to directly access all of that information in a single query, which is much more efficient than the multi-table approach depicted in Figure 2-1.  This aligns with the principle of reducing data movement and optimizing query performance, a critical aspect of scaling data systems.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system to store and retrieve user profiles, similar to the JSON example provided. What are some strategies you\u2019d employ to ensure efficient querying, and how would you address potential performance issues compared to a more traditional relational schema?\u201d"
  },
  {
    "chunk": "ii. Literature on the relational model distinguishes several different normal forms, but the distinctions are of\nlittle practical interest. As a rule of thumb, if you\u2019re duplicating values that could be stored in just one place,\nthe schema is not normalized.Many-to-One and Many-to-Many Relationships\nIn Example 2-1  in the preceding section, region_id  and industry_id  are given as\nIDs, not as plain-text strings \"Greater Seattle Area\"  and \"Philanthropy\" . Why?\nIf the user interface has free-text fields for entering the region and the industry, it\nmakes sense to store them as plain-text strings. But there are advantages to having\nstandardized lists of geographic regions and industries, and letting users choose from\na drop-down list or autocompleter:\n\u2022Consistent style and spelling across profiles\n\u2022Avoiding ambiguity (e.g., if there are several cities with the same name)\n\u2022Ease of updating\u2014the name is stored in only one place, so it is easy to update\nacross the board if it ever needs to be changed (e.g., change of a city name due to\npolitical events)\n\u2022Localization support\u2014when the site is translated into other languages, the stand\u2010\nardized lists can be localized, so the region and industry can be displayed in the\nviewer\u2019s language\n\u2022Better search\u2014e.g., a search for philanthropists in the state of Washington can\nmatch this profile, because the list of regions can encode the fact that Seattle is in\nWashington (which is not apparent from the string \"Greater Seattle Area\" )\nWhether you store an ID or a text string is a question of duplication. When you use\nan ID, the information that is meaningful to humans (such as the word Philanthropy )\nis stored in only one place, and everything that refers to it uses an ID (which only has\nmeaning within the database). When you store the text directly, you are duplicating\nthe human-meaningful information in every record that uses it.\nThe advantage of using an ID is that because it has no meaning to humans, it never\nneeds to change: the ID can remain the same, even if the information it identifies\nchanges. Anything that is meaningful to humans may need to change sometime in\nthe future\u2014and if that information is duplicated, all the redundant copies need to be\nupdated. That incurs write overheads, and risks inconsistencies (where some copies\nof the information are updated but others aren\u2019t). Removing such duplication is the\nkey idea behind normalization  in databases.ii\nRelational Model Versus Document Model | 33\n",
    "summary": "The text highlights the trade-offs between using IDs versus storing human-readable strings in a relational database, emphasizing the importance of minimizing data duplication for consistency and maintainability.",
    "sample_answer": "\u201cOkay, let\u2019s break this down. This excerpt is really focused on a core principle in database design: avoiding data duplication. Using IDs instead of free-text strings like \u2018Greater Seattle Area\u2019 directly addresses the problem of inconsistencies. If we were to store \u2018Greater Seattle Area\u2019 repeatedly, any change\u2014say, a name change\u2014would require updating every instance, leading to significant write overhead and a higher risk of data divergence. This aligns with the concept of normalization, where the goal is to reduce redundancy and improve data integrity, mirroring the benefits of strategies like sharding by reducing the number of independently updated components.\u201d",
    "potential_interview_question": "\u201cImagine we\u2019re building a system to store user profiles. Should we store the user\u2019s city and state as plain text strings or use a standardized ID system? What are the key considerations driving your decision, and how would you address potential schema evolution challenges if we later decide to switch to a standardized ID system?\u201d"
  },
  {
    "chunk": "iii. At the time of writing, joins are supported in RethinkDB, not supported in MongoDB, and only sup\u2010\nported in predeclared views in CouchDB.Database administrators and developers love to argue about nor\u2010\nmalization and denormalization, but we will suspend judgment for\nnow. In Part III  of this book we will return to this topic and explore\nsystematic ways of dealing with caching, denormalization, and\nderived data.\nUnfortunately, normalizing this data requires many-to-one  relationships (many peo\u2010\nple live in one particular region, many people work in one particular industry), which\ndon\u2019t fit nicely into the document model. In relational databases, it\u2019s normal to refer\nto rows in other tables by ID, because joins are easy. In document databases, joins are\nnot needed for one-to-many tree structures, and support for joins is often weak.iii\nIf the database itself does not support joins, you have to emulate a join in application\ncode by making multiple queries to the database. (In this case, the lists of regions and\nindustries are probably small and slow-changing enough that the application can\nsimply keep them in memory. But nevertheless, the work of making the join is shifted\nfrom the database to the application code.)\nMoreover, even if the initial version of an application fits well in a join-free docu\u2010\nment model, data has a tendency of becoming more interconnected as features are\nadded to applications. For example, consider some changes we could make to the\nr\u00e9sum\u00e9 example:\nOrganizations and schools as entities\nIn the previous description, organization  (the company where the user worked)\nand school_name  (where they studied) are just strings. Perhaps they should be\nreferences to entities instead? Then each organization, school, or university could\nhave its own web page (with logo, news feed, etc.); each r\u00e9sum\u00e9 could link to the\norganizations and schools that it mentions, and include their logos and other\ninformation (see Figure 2-3  for an example from LinkedIn).\nRecommendations\nSay you want to add a new feature: one user can write a recommendation for\nanother user. The recommendation is shown on the r\u00e9sum\u00e9 of the user who was\nrecommended, together with the name and photo of the user making the recom\u2010\nmendation. If the recommender updates their photo, any recommendations they\nhave written need to reflect the new photo. Therefore, the recommendation\nshould have a reference to the author\u2019s profile.\n34 | Chapter 2: Data Models and Query Languages\n",
    "summary": "The text discusses the trade-offs of join operations in document databases versus relational databases, and how schema evolution impacts query design and data modeling.",
    "sample_answer": "\u201cThe core challenge here is the difference in how relational and document databases handle relationships. Relational databases excel due to their native join support, which simplifies complex queries and allows for efficient data retrieval based on connected entities. However, document databases, like the one described, often lack this native support, forcing developers to emulate joins in application code \u2013 a potential bottleneck. Furthermore, as demonstrated by the recommendation example, data models evolve, requiring developers to maintain consistency across multiple documents, potentially impacting query performance and necessitating careful consideration of data duplication for efficiency.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where a lack of native join support in a document database would negatively impact application performance. How would you address this, and what design considerations would you prioritize?\u201d"
  },
  {
    "chunk": "Figure 2-3. The company name is not just a string, but a link to a company entity.\nScreenshot of linkedin.com.\nFigure 2-4  illustrates how these new features require many-to-many relationships.\nThe data within each dotted rectangle can be grouped into one document, but the\nreferences to organizations, schools, and other users need to be represented as refer\u2010\nences, and require joins when queried.\nFigure 2-4. Extending r\u00e9sum\u00e9s with many-to-many relationships.\nRelational Model Versus Document Model | 35\nAre Document Databases Repeating History?\nWhile many-to-many relationships and joins are routinely used in relational data\u2010\nbases, document databases and NoSQL reopened the debate on how best to represent\nsuch relationships in a database. This debate is much older than NoSQL\u2014in fact, it\ngoes back to the very earliest computerized database systems.\nThe most popular database for business data processing in the 1970s was IBM\u2019s Infor\u2010\nmation Management System  (IMS), originally developed for stock-keeping in the\nApollo space program and first commercially released in 1968 [ 13]. It is still in use\nand maintained today, running on OS/390 on IBM mainframes [ 14].\nThe design of IMS used a fairly simple data model called the hierarchical model ,\nwhich has some remarkable similarities to the JSON model used by document data\u2010\nbases [ 2]. It represented all data as a tree of records nested within records, much like\nthe JSON structure of Figure 2-2 .\nLike document databases, IMS worked well for one-to-many relationships, but it\nmade many-to-many relationships difficult, and it didn\u2019t support joins. Developers\nhad to decide whether to duplicate (denormalize) data or to manually resolve refer\u2010\nences from one record to another. These problems of the 1960s and \u201970s were very\nmuch like the problems that developers are running into with document databases\ntoday [ 15].\nVarious solutions were proposed to solve the limitations of the hierarchical model.\nThe two most prominent were the relational model  (which became SQL, and took\nover the world) and the network model  (which initially had a large following but\neventually faded into obscurity). The \u201cgreat debate\u201d between these two camps lasted\nfor much of the 1970s [ 2].\nSince the problem that the two models were solving is still so relevant today, it\u2019s\nworth briefly revisiting this debate in today\u2019s light.\nThe network model\nThe network model was standardized by a committee called the Conference on Data\nSystems Languages (CODASYL) and implemented by several different database ven\u2010\ndors; it is also known as the CODASYL model  [16].\nThe CODASYL model was a generalization of the hierarchical model. In the tree\nstructure of the hierarchical model, every record has exactly one parent; in the net\u2010\nwork model, a record could have multiple parents. For example, there could be one\nrecord for the \"Greater Seattle Area\"  region, and every user who lived in that\nregion could be linked to it. This allowed many-to-one and many-to-many relation\u2010\nships to be modeled.\n36 | Chapter 2: Data Models and Query Languages\n",
    "summary": "The text discusses the historical evolution of data modeling, highlighting the challenges of representing many-to-many relationships and the trade-offs between relational and document databases.",
    "sample_answer": "\u201cThis section really illustrates a key data engineering concern: schema design and the ability to model complex relationships. The historical context\u2014specifically the evolution from IMS and its hierarchical model to the relational and network models\u2014demonstrates how data modeling choices directly impact query performance and scalability.  The challenges faced with the hierarchical model, where developers had to manually resolve references or denormalize data to handle many-to-many relationships, resonates with contemporary debates about document databases.  It\u2019s critical to understand that different data models trade off complexity, query performance, and the ability to efficiently represent relationships\u2014a trade-off that still guides our design choices today.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system to store user profiles, including affiliations with organizations and schools. Discuss the potential challenges you might encounter if you choose a document database versus a relational database, and what design considerations would drive your decision.\u201d"
  },
  {
    "chunk": "bly a good idea to use a document model. The relational technique of shredding \u2014\nsplitting a document-like structure into multiple tables (like positions , education ,\nand contact_info  in Figure 2-1 )\u2014can lead to cumbersome schemas and unnecessa\u2010\nrily complicated application code.\nThe document model has limitations: for example, you cannot refer directly to a nes\u2010\nted item within a document, but instead you need to say something like \u201cthe second\nitem in the list of positions for user 251\u201d (much like an access path in the hierarchical\nmodel). However, as long as documents are not too deeply nested, that is not usually\na problem.\nThe poor support for joins in document databases may or may not be a problem,\ndepending on the application. For example, many-to-many relationships may never\nbe needed in an analytics application that uses a document database to record which\nevents occurred at which time [ 19].\nHowever, if your application does use many-to-many relationships, the document\nmodel becomes less appealing. It\u2019s possible to reduce the need for joins by denormal\u2010\nizing, but then the application code needs to do additional work to keep the denor\u2010\nmalized data consistent. Joins can be emulated in application code by making\nmultiple requests to the database, but that also moves complexity into the application\nand is usually slower than a join performed by specialized code inside the database.\nIn such cases, using a document model can lead to significantly more complex appli\u2010\ncation code and worse performance [ 15].\nIt\u2019s not possible to say in general which data model leads to simpler application code;\nit depends on the kinds of relationships that exist between data items. For highly\ninterconnected data, the document model is awkward, the relational model is accept\u2010\nable, and graph models (see \u201cGraph-Like Data Models\u201d on page 49) are the most\nnatural.\nSchema flexibility in the document model\nMost document databases, and the JSON support in relational databases, do not\nenforce any schema on the data in documents. XML support in relational databases\nusually comes with optional schema validation. No schema means that arbitrary keys\nand values can be added to a document, and when reading, clients have no guaran\u2010\ntees as to what fields the documents may contain.\nDocument databases are sometimes called schemaless , but that\u2019s misleading, as the\ncode that reads the data usually assumes some kind of structure\u2014i.e., there is an\nimplicit schema, but it is not enforced by the database [ 20]. A more accurate term is\nschema-on-read  (the structure of the data is implicit, and only interpreted when the\ndata is read), in contrast with schema-on-write  (the traditional approach of relational\nRelational Model Versus Document Model | 39\n",
    "summary": "The text contrasts relational and document models, highlighting trade-offs in schema enforcement, join operations, and application complexity.",
    "sample_answer": "\u201cOkay, so when comparing relational and document models, we\u2019re seeing a fundamental difference in how they handle relationships. The relational model\u2019s strength is its support for joins, but this comes at the cost of a rigid schema and potentially complex application code when dealing with many-to-many relationships \u2013 something that\u2019s frequently a bottleneck in analytics.  The document model\u2019s flexibility is appealing for analytics, but it\u2019s crucial to recognize the implications of \u2018schema-on-read\u2019 \u2013 the application code must inherently understand and handle the implicit schema, adding complexity if there are deeply nested documents.  This emphasizes the importance of carefully considering the expected data relationships when choosing a model; we need to weigh the benefits of schema flexibility against the potential for increased application complexity.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where you might choose a document model over a relational model for an analytics application. What are the key considerations regarding schema enforcement and join operations in this scenario, and how might you mitigate potential performance issues?\u201d"
  },
  {
    "chunk": "v. Codd\u2019s original description of the relational model [ 1] actually allowed something quite similar to JSON\ndocuments within a relational schema. He called it nonsimple domains . The idea was that a value in a row\ndoesn\u2019t have to just be a primitive datatype like a number or a string, but could also be a nested relation\n(table)\u2014so you can have an arbitrarily nested tree structure as a value, much like the JSON or XML support\nthat was added to SQL over 30 years later.PostgreSQL since version 9.3 [ 8], MySQL since version 5.7, and IBM DB2 since ver\u2010\nsion 10.5 [ 30] also have a similar level of support for JSON documents. Given the\npopularity of JSON for web APIs, it is likely that other relational databases will follow\nin their footsteps and add JSON support.\nOn the document database side, RethinkDB supports relational-like joins in its query\nlanguage, and some MongoDB drivers automatically resolve database references\n(effectively performing a client-side join, although this is likely to be slower than a\njoin performed in the database since it requires additional network round-trips and is\nless optimized).\nIt seems that relational and document databases are becoming more similar over\ntime, and that is a good thing: the data models complement each other.v If a database\nis able to handle document-like data and also perform relational queries on it, appli\u2010\ncations can use the combination of features that best fits their needs.\nA hybrid of the relational and document models is a good route for databases to take\nin the future. \nQuery Languages for Data\nWhen the relational model was introduced, it included a new way of querying data:\nSQL is a declarative  query language, whereas IMS and CODASYL queried the data\u2010\nbase using imperative  code. What does that mean?\nMany commonly used programming languages are imperative. For example, if you\nhave a list of animal species, you might write something like this to return only the\nsharks in the list:\nfunction  getSharks () {\n    var sharks = [];\n    for (var i = 0; i < animals.length; i++) {\n        if (animals[i].family === \"Sharks\" ) {\n            sharks.push(animals[i]);\n        }\n    }\n    return sharks;\n}\nIn the relational algebra, you would instead write:\nsharks  =  \u03c3 family = \u201cSharks\u201d  (animals)\n42 | Chapter 2: Data Models and Query Languages\n",
    "summary": "The text discusses the evolution of data models, highlighting the increasing similarity between relational and document databases, and the importance of declarative query languages like SQL.",
    "sample_answer": "\u201cThis excerpt illustrates a key trend in data engineering: the convergence of relational and document database models. The inclusion of \u2018nonsimple domains\u2019 in the relational model, mirroring JSON documents, represents a shift towards more flexible data representation. Furthermore, the contrast between imperative programming styles (like the JavaScript example) and declarative query languages like SQL demonstrates a fundamental difference in how data is accessed and manipulated \u2013 SQL\u2019s declarative approach is generally preferred for its efficiency and ability to express complex queries concisely, often aligning better with the scale and complexity of modern data systems.\u201d",
    "potential_interview_question": "\u201cExplain the trade-offs between imperative and declarative query languages like SQL. Can you provide a concrete example to illustrate your answer, and how these differences might impact the design of a large-scale data pipeline?\u201d"
  },
  {
    "chunk": "If you were using XSL instead of CSS, you could do something similar:\n<xsl:template  match=\"li[@class='selected']/p\" >\n    <fo:block  background-color= \"blue\">\n        <xsl:apply-templates />\n    </fo:block>\n</xsl:template>\nHere, the XPath expression li[@class='selected']/p  is equivalent to the CSS selec\u2010\ntor li.selected > p  in the previous example. What CSS and XSL have in common\nis that they are both declarative  languages for specifying the styling of a document.\nImagine what life would be like if you had to use an imperative approach. In Java\u2010\nScript, using the core Document Object Model (DOM) API, the result might look\nsomething like this:\nvar liElements  = document .getElementsByTagName (\"li\");\nfor (var i = 0; i < liElements .length; i++) {\n    if (liElements [i].className  === \"selected\" ) {\n        var children  = liElements [i].childNodes ;\n        for (var j = 0; j < children .length; j++) {\n            var child = children [j];\n            if (child.nodeType  === Node.ELEMENT_NODE  && child.tagName === \"P\") {\n                child.setAttribute (\"style\", \"background-color: blue\" );\n            }\n        }\n    }\n}\nThis JavaScript imperatively sets the element <p>Sharks</p>  to have a blue back\u2010\nground, but the code is awful. Not only is it much longer and harder to understand\nthan the CSS and XSL equivalents, but it also has some serious problems:\n\u2022If the selected  class is removed (e.g., because the user clicks a different page),\nthe blue color won\u2019t be removed, even if the code is rerun\u2014and so the item will\nremain highlighted until the entire page is reloaded. With CSS, the browser auto\u2010\nmatically detects when the li.selected > p  rule no longer applies and removes\nthe blue background as soon as the selected  class is removed.\n\u2022If you want to take advantage of a new API, such as document.getElementsBy\nClassName(\"selected\")  or even document.evaluate() \u2014which may improve\nperformance\u2014you have to rewrite the code. On the other hand, browser vendors\ncan improve the performance of CSS and XPath without breaking compatibility.\nQuery Languages for Data | 45\n",
    "summary": "The text highlights the advantages of declarative styling (CSS/XSL) over imperative approaches (DOM manipulation) in terms of maintainability, backward compatibility, and performance.",
    "sample_answer": "\u201cThis excerpt really underscores the importance of choosing declarative languages like CSS or XSL for styling because they promote a much more maintainable and robust system. The imperative DOM manipulation example demonstrates a common pitfall: changes require re-running the entire script, leading to potential inconsistencies and a brittle design.  Furthermore, the browser\u2019s ability to automatically update styles based on changes in the stylesheet (like removing the background color when the \u2018selected\u2019 class is removed) demonstrates a fundamental principle of efficient styling \u2013 avoiding hardcoded, reactive logic.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where you would prefer a declarative approach (like CSS) over an imperative approach (like directly manipulating a DOM API). What specific issues does the imperative approach introduce, and how does the declarative approach mitigate those issues?  Consider scenarios related to maintaining consistency and handling changes in a complex data structure.\u201d"
  },
  {
    "chunk": "vi. IMS and CODASYL both used imperative query APIs. Applications typically used COBOL code to iterate\nover records in the database, one record at a time [ 2, 16].In a web browser, using declarative CSS styling is much better than manipulating\nstyles imperatively in JavaScript. Similarly, in databases, declarative query languages\nlike SQL turned out to be much better than imperative query APIs.vi\nMapReduce Querying\nMapReduce  is a programming model for processing large amounts of data in bulk\nacross many machines, popularized by Google [ 33]. A limited form of MapReduce is\nsupported by some NoSQL datastores, including MongoDB and CouchDB, as a\nmechanism for performing read-only queries across many documents.\nMapReduce in general is described in more detail in Chapter 10 . For now, we\u2019ll just\nbriefly discuss MongoDB\u2019s use of the model.\nMapReduce is neither a declarative query language nor a fully imperative query API,\nbut somewhere in between: the logic of the query is expressed with snippets of code,\nwhich are called repeatedly by the processing framework. It is based on the map (also\nknown as collect ) and reduce  (also known as fold  or inject ) functions that exist\nin many functional programming languages.\nTo give an example, imagine you are a marine biologist, and you add an observation\nrecord to your database every time you see animals in the ocean. Now you want to\ngenerate a report saying how many sharks you have sighted per month.\nIn PostgreSQL you might express that query like this:\nSELECT date_trunc ('month', observation_timestamp ) AS observation_month , \n       sum(num_animals ) AS total_animals\nFROM observations\nWHERE family = 'Sharks'\nGROUP BY observation_month ;\nThe date_trunc('month', timestamp)  function determines the calendar month\ncontaining timestamp , and returns another timestamp representing the begin\u2010\nning of that month. In other words, it rounds a timestamp down to the nearest\nmonth.\nThis query first filters the observations to only show species in the Sharks  family,\nthen groups the observations by the calendar month in which they occurred, and\nfinally adds up the number of animals seen in all observations in that month.\nThe same can be expressed with MongoDB\u2019s MapReduce feature as follows:\n46 | Chapter 2: Data Models and Query Languages\n",
    "summary": "The text discusses the evolution of query languages from imperative APIs (like COBOL) to declarative languages (SQL) and introduces MongoDB\u2019s MapReduce as a hybrid approach.",
    "sample_answer": "\u201cOkay, this section highlights a really important trend in data querying. Moving from imperative APIs like COBOL to declarative languages like SQL represents a fundamental shift in how we design data systems \u2013 SQL allows for much more concise and maintainable queries compared to the tightly-coupled, error-prone approach of imperative coding. MongoDB\u2019s MapReduce, while not a full-fledged declarative language, demonstrates a way to process data in bulk, similar to what Google pioneered with MapReduce, and provides a framework for implementing complex aggregations.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we need to analyze website clickstream data to determine the most popular products viewed each month.  Describe a system design approach, incorporating concepts like data aggregation and potentially MapReduce, and justify your choice of approach versus a purely SQL-based solution. How might the choice of approach impact the system\u2019s performance and scalability?\u201d"
  },
  {
    "chunk": "db.observations .mapReduce (\n    function  map() { \n        var year  = this.observationTimestamp .getFullYear ();\n        var month = this.observationTimestamp .getMonth () + 1;\n        emit(year + \"-\" + month, this.numAnimals ); \n    },\n    function  reduce(key, values) { \n        return Array.sum(values); \n    },\n    {\n        query: { family: \"Sharks\"  }, \n        out: \"monthlySharkReport\"  \n    }\n);\nThe filter to consider only shark species can be specified declaratively (this is a\nMongoDB-specific extension to MapReduce).\nThe JavaScript function map is called once for every document that matches\nquery , with this  set to the document object.\nThe map function emits a key (a string consisting of year and month, such as\n\"2013-12\"  or \"2014-1\" ) and a value (the number of animals in that observation).\nThe key-value pairs emitted by map are grouped by key. For all key-value pairs\nwith the same key (i.e., the same month and year), the reduce  function is called\nonce.\nThe reduce  function adds up the number of animals from all observations in a\nparticular month.\nThe final output is written to the collection monthlySharkReport .\nFor example, say the observations  collection contains these two documents:\n{\n    observationTimestamp : Date.parse(\"Mon, 25 Dec 1995 12:34:56 GMT\" ),\n    family:     \"Sharks\" ,\n    species:    \"Carcharodon carcharias\" ,\n    numAnimals : 3\n}\n{\n    observationTimestamp : Date.parse(\"Tue, 12 Dec 1995 16:17:18 GMT\" ),\n    family:     \"Sharks\" ,\n    species:    \"Carcharias taurus\" ,\n    numAnimals : 4\n}\nQuery Languages for Data | 47\n",
    "summary": "This chunk describes a MapReduce job for aggregating animal counts by month, filtered for shark species, demonstrating a basic batch processing pipeline.",
    "sample_answer": "\u201cThis looks like a straightforward example of using MapReduce for batch aggregation. The `map` function is responsible for extracting the key (year and month) and the value (number of animals) from each observation, and emitting these as key-value pairs. The `reduce` function then performs a simple summation of all values associated with the same key, representing the total animal count for that month.  This approach highlights a basic pattern for time-series data aggregation \u2013 although in a modern system, we\u2019d likely be leveraging a streaming engine or a similar technology for better performance and scalability, it illustrates a fundamental concept.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re building a system to analyze website traffic, and we need to calculate the daily number of unique visitors.  Describe how you might approach this problem using a batch processing technique like MapReduce, focusing on the key design decisions you\u2019d make regarding the `map` and `reduce` functions, and how you\u2019d ensure the accuracy and scalability of your solution.\u201d"
  },
  {
    "chunk": "The map function would be called once for each document, resulting in\nemit(\"1995-12\", 3)  and emit(\"1995-12\", 4) . Subsequently, the reduce  function\nwould be called with reduce(\"1995-12\", [3, 4]) , returning 7.\nThe map and reduce  functions are somewhat restricted in what they are allowed to\ndo. They must be pure  functions, which means they only use the data that is passed to\nthem as input, they cannot perform additional database queries, and they must not\nhave any side effects. These restrictions allow the database to run the functions any\u2010\nwhere, in any order, and rerun them on failure. However, they are nevertheless pow\u2010\nerful: they can parse strings, call library functions, perform calculations, and more.\nMapReduce is a fairly low-level programming model for distributed execution on a\ncluster of machines. Higher-level query languages like SQL can be implemented as a\npipeline of MapReduce operations (see Chapter 10 ), but there are also many dis\u2010\ntributed implementations of SQL that don\u2019t use MapReduce. Note there is nothing in\nSQL that constrains it to running on a single machine, and MapReduce doesn\u2019t have\na monopoly on distributed query execution.\nBeing able to use JavaScript code in the middle of a query is a great feature for\nadvanced queries, but it\u2019s not limited to MapReduce\u2014some SQL databases can be\nextended with JavaScript functions too [ 34].\nA usability problem with MapReduce is that you have to write two carefully coordi\u2010\nnated JavaScript functions, which is often harder than writing a single query. More\u2010\nover, a declarative query language offers more opportunities for a query optimizer to\nimprove the performance of a query. For these reasons, MongoDB 2.2 added support\nfor a declarative query language called the aggregation pipeline  [9]. In this language,\nthe same shark-counting query looks like this:\ndb.observations .aggregate ([\n    { $match: { family: \"Sharks\"  } },\n    { $group: {\n        _id: {\n            year:  { $year:  \"$observationTimestamp\"  },\n            month: { $month: \"$observationTimestamp\"  }\n        },\n        totalAnimals : { $sum: \"$numAnimals\"  }\n    } }\n]);\nThe aggregation pipeline language is similar in expressiveness to a subset of SQL, but\nit uses a JSON-based syntax rather than SQL\u2019s English-sentence-style syntax; the dif\u2010\nference is perhaps a matter of taste. The moral of the story is that a NoSQL system\nmay find itself accidentally reinventing SQL, albeit in disguise. \n48 | Chapter 2: Data Models and Query Languages\n",
    "summary": "The chunk discusses the trade-offs between low-level programming models like MapReduce and higher-level query languages (like aggregation pipelines), emphasizing the importance of pure functions and the potential for reinventing SQL in NoSQL systems.",
    "sample_answer": "\u201cOkay, let\u2019s talk about the trade-offs here. MapReduce, as demonstrated, provides a low-level execution model, which is powerful but can be complex to manage, especially given the restriction on pure functions. This restriction, while facilitating distributed execution and fault tolerance, also introduces significant development effort \u2013 ensuring the functions don\u2019t perform database queries or have side effects. A more modern approach, like MongoDB\u2019s aggregation pipeline, offers a higher-level, declarative syntax, allowing the query optimizer to manage the execution plan and potentially yield better performance. We see a classic cost/performance trade-off here; lower-level control comes at the cost of increased complexity, while a higher-level language might sacrifice some control for simplified development and optimization. \u201c",
    "potential_interview_question": "\u201cDescribe a scenario where you might choose to implement a data processing pipeline using a low-level framework like MapReduce versus a higher-level query language like an aggregation pipeline. What are the key factors you\u2019d consider, and how would you assess the trade-offs?\u201d"
  },
  {
    "chunk": "Graph-Like Data Models\nWe saw earlier that many-to-many relationships are an important distinguishing fea\u2010\nture between different data models. If your application has mostly one-to-many rela\u2010\ntionships (tree-structured data) or no relationships between records, the document\nmodel is appropriate.\nBut what if many-to-many relationships are very common in your data? The rela\u2010\ntional model can handle simple cases of many-to-many relationships, but as the con\u2010\nnections within your data become more complex, it becomes more natural to start\nmodeling your data as a graph.\nA graph consists of two kinds of objects: vertices  (also known as nodes  or entities ) and\nedges  (also known as relationships  or arcs). Many kinds of data can be modeled as a\ngraph. Typical examples include:\nSocial graphs\nVertices are people, and edges indicate which people know each other.\nThe web graph\nVertices are web pages, and edges indicate HTML links to other pages.\nRoad or rail networks\nVertices are junctions, and edges represent the roads or railway lines between\nthem.\nWell-known algorithms can operate on these graphs: for example, car navigation sys\u2010\ntems search for the shortest path between two points in a road network, and\nPageRank  can be used on the web graph to determine the popularity of a web page\nand thus its ranking in search results.\nIn the examples just given, all the vertices in a graph represent the same kind of thing\n(people, web pages, or road junctions, respectively). However, graphs are not limited\nto such homogeneous  data: an equally powerful use of graphs is to provide a consis\u2010\ntent way of storing completely different types of objects in a single datastore. For\nexample, Facebook maintains a single graph with many different types of vertices and\nedges: vertices represent people, locations, events, checkins, and comments made by\nusers; edges indicate which people are friends with each other, which checkin hap\u2010\npened in which location, who commented on which post, who attended which event,\nand so on [ 35].\nIn this section we will use the example shown in Figure 2-5 . It could be taken from a\nsocial network or a genealogical database: it shows two people, Lucy from Idaho and\nAlain from Beaune, France. They are married and living in London.\nGraph-Like Data Models | 49\n",
    "summary": "This chunk discusses modeling complex relationships using graph-like data models, highlighting the trade-offs between relational and graph models and the use of algorithms like PageRank on graph structures.",
    "sample_answer": "\u201cWhen dealing with many-to-many relationships, transitioning from a relational model to a graph-like data model becomes advantageous. Relational models struggle with complex connections, while graphs inherently represent relationships efficiently.  Specifically, the example of a social network with vertices representing people and edges representing relationships (friendships, checkins, etc.) demonstrates how a graph can accommodate diverse data types within a single datastore, allowing us to leverage algorithms like PageRank for network analysis.\u201d  Furthermore, the ability to represent diverse objects within a single datastore aligns with modern data architectures where consistency and flexibility are paramount.",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re designing a system to model a social network.  We\u2019ve identified a significant number of many-to-many relationships.  Considering the advantages of graph-like models as presented in this text, what are the key architectural considerations \u2013 beyond simply choosing a graph database \u2013 to ensure we can efficiently query and analyze these relationships, and what algorithm might we leverage?\u201d"
  },
  {
    "chunk": "intricacies of sovereign states and nations), and varying granularity of data (Lucy\u2019s\ncurrent residence is specified as a city, whereas her place of birth is specified only at\nthe level of a state).\nYou could imagine extending the graph to also include many other facts about Lucy\nand Alain, or other people. For instance, you could use it to indicate any food aller\u2010\ngies they have (by introducing a vertex for each allergen, and an edge between a per\u2010\nson and an allergen to indicate an allergy), and link the allergens with a set of vertices\nthat show which foods contain which substances. Then you could write a query to\nfind out what is safe for each person to eat. Graphs are good for evolvability: as you\nadd features to your application, a graph can easily be extended to accommodate\nchanges in your application\u2019s data structures.\nThe Cypher Query Language\nCypher  is a declarative query language for property graphs, created for the Neo4j\ngraph database [ 37]. (It is named after a character in the movie The Matrix  and is not\nrelated to ciphers in cryptography [ 38].)\nExample 2-3  shows the Cypher query to insert the lefthand portion of Figure 2-5  into\na graph database. The rest of the graph can be added similarly and is omitted for\nreadability. Each vertex is given a symbolic name like USA or Idaho , and other parts of\nthe query can use those names to create edges between the vertices, using an arrow\nnotation: (Idaho) -[:WITHIN]-> (USA)  creates an edge labeled WITHIN , with Idaho\nas the tail node and USA as the head node.\nExample 2-3. A subset of the data in Figure 2-5 , represented as a Cypher query\nCREATE\n  (NAmerica:Location {name: 'North America' , type:'continent' }),\n  (USA:Location      {name: 'United States' , type:'country'   }),\n  (Idaho:Location    {name: 'Idaho',         type:'state'    }),\n  (Lucy:Person       {name: 'Lucy' }),\n  (Idaho) -[:WITHIN]->  (USA)  -[:WITHIN]-> (NAmerica),\n  (Lucy)  -[:BORN_IN]-> (Idaho)\nWhen all the vertices and edges of Figure 2-5  are added to the database, we can start\nasking interesting questions: for example, find the names of all the people who emigra\u2010\nted from the United States to Europe . To be more precise, here we want to find all the\nvertices that have a BORN_IN  edge to a location within the US, and also a LIVING_IN\nedge to a location within Europe, and return the name  property of each of those verti\u2010\nces.\nExample 2-4  shows how to express that query in Cypher. The same arrow notation is\nused in a MATCH  clause to find patterns in the graph: (person) -[:BORN_IN]-> ()\n52 | Chapter 2: Data Models and Query Languages\n",
    "summary": "The chunk discusses using a property graph database (Neo4j with Cypher) for representing and querying complex relationships, highlighting evolvability and the importance of schema design.",
    "sample_answer": "\u201cOkay, this is a really interesting use case.  We\u2019re seeing a trend toward using graph databases, particularly with query languages like Cypher, because they excel at representing and traversing complex, interconnected data \u2013 like this relationship between countries, states, and people. The Cypher query language provides a declarative way to express these relationships, and the fact that it\u2019s designed for property graphs is key for handling evolving schemas. From a system design perspective, we need to consider how we\u2019d ensure data consistency as we add new vertices and edges \u2013 potentially leveraging features like ACID transactions within Neo4j to maintain data integrity.  Furthermore, the evolvability mentioned here suggests a focus on schema management strategies, potentially incorporating schema validation or migration tools to handle changes gracefully without disrupting existing queries.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re building a system to track supply chains, and we\u2019re considering using a graph database like Neo4j with Cypher. What are some key design considerations we should have when defining the graph schema, and how would you address potential schema evolution as the system grows and new data requirements emerge?\u201d"
  },
  {
    "chunk": "traverse a variable number of edges before you find the vertex you\u2019re looking for\u2014\nthat is, the number of joins is not fixed in advance.\nIn our example, that happens in the () -[:WITHIN*0..]-> ()  rule in the Cypher\nquery. A person\u2019s LIVES_IN  edge may point at any kind of location: a street, a city, a\ndistrict, a region, a state, etc. A city may be WITHIN  a region, a region WITHIN  a state, a\nstate WITHIN  a country, etc. The LIVES_IN  edge may point directly at the location ver\u2010\ntex you\u2019re looking for, or it may be several levels removed in the location hierarchy.\nIn Cypher, :WITHIN*0..  expresses that fact very concisely: it means \u201cfollow a WITHIN\nedge, zero or more times.\u201d It is like the * operator in a regular expression.\nSince SQL:1999, this idea of variable-length traversal paths in a query can be\nexpressed using something called recursive common table expressions  (the WITH\nRECURSIVE  syntax). Example 2-5  shows the same query\u2014finding the names of people\nwho emigrated from the US to Europe\u2014expressed in SQL using this technique (sup\u2010\nported in PostgreSQL, IBM DB2, Oracle, and SQL Server). However, the syntax is\nvery clumsy in comparison to Cypher.\nExample 2-5. The same query as Example 2-4 , expressed in SQL using recursive\ncommon table expressions\n",
    "summary": "The chunk discusses variable-length traversal paths in graph queries, exemplified by Cypher\u2019s `WITHIN*0..` operator, and the use of recursive common table expressions (WITH RECURSIVE) to achieve similar functionality in SQL.",
    "sample_answer": "\u201cThis scenario highlights a key challenge in graph query design: handling variable-length relationships. The Cypher `WITHIN*0..` operator elegantly addresses this by allowing traversal of an arbitrary number of edges \u2013 essentially, it\u2019s a flexible way to express \u2018follow the edges until you find the target.\u2019  This contrasts with a traditional SQL approach, where defining a fixed number of joins would be required.  The use of recursive common table expressions (WITH RECURSIVE) as described here demonstrates how to replicate this variable-length traversal in SQL, though it\u2019s admittedly less concise.  This illustrates a common trade-off \u2013 Cypher provides a more intuitive syntax for complex graph queries, but SQL\u2019s recursive CTEs provide a powerful mechanism for achieving similar results, albeit with a potentially less readable design.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system to analyze social networks. How might you handle the scenario where a user's connections (edges) aren't fixed but can branch out through multiple levels of relationships (e.g., friends of friends of friends)? Discuss the potential design choices and trade-offs you\u2019d consider, and how concepts like recursive queries or graph traversal algorithms might factor into your solution.\u201d"
  },
  {
    "chunk": "WITH RECURSIVE\n  -- in_usa is the set of vertex IDs of all locations within the United States\n  in_usa(vertex_id ) AS (\n      SELECT vertex_id  FROM vertices  WHERE properties ->>'name' = 'United States'  \n    UNION\n      SELECT edges.tail_vertex  FROM edges \n        JOIN in_usa ON edges.head_vertex  = in_usa.vertex_id\n        WHERE edges.label = 'within'\n  ),\n  -- in_europe is the set of vertex IDs of all locations within Europe\n  in_europe (vertex_id ) AS (\n      SELECT vertex_id  FROM vertices  WHERE properties ->>'name' = 'Europe'  \n    UNION\n      SELECT edges.tail_vertex  FROM edges\n        JOIN in_europe  ON edges.head_vertex  = in_europe .vertex_id\n        WHERE edges.label = 'within'\n  ),\n  -- born_in_usa is the set of vertex IDs of all people born in the US\n  born_in_usa (vertex_id ) AS ( \n    SELECT edges.tail_vertex  FROM edges\n      JOIN in_usa ON edges.head_vertex  = in_usa.vertex_id\n      WHERE edges.label = 'born_in'\n  ),\n54 | Chapter 2: Data Models and Query Languages\n  -- lives_in_europe is the set of vertex IDs of all people living in Europe\n  lives_in_europe (vertex_id ) AS ( \n    SELECT edges.tail_vertex  FROM edges\n      JOIN in_europe  ON edges.head_vertex  = in_europe .vertex_id\n      WHERE edges.label = 'lives_in'\n  )\nSELECT vertices .properties ->>'name'\nFROM vertices\n-- join to find those people who were both born in the US *and* live in Europe\nJOIN born_in_usa      ON vertices .vertex_id  = born_in_usa .vertex_id  \nJOIN lives_in_europe  ON vertices .vertex_id  = lives_in_europe .vertex_id ;\nFirst find the vertex whose name  property has the value \"United States\" , and\nmake it the first element of the set of vertices in_usa .\nFollow all incoming within  edges from vertices in the set in_usa , and add them\nto the same set, until all incoming within  edges have been visited.\nDo the same starting with the vertex whose name  property has the value\n\"Europe\" , and build up the set of vertices in_europe .\nFor each of the vertices in the set in_usa , follow incoming born_in  edges to find\npeople who were born in some place within the United States.\nSimilarly, for each of the vertices in the set in_europe , follow incoming lives_in\nedges to find people who live in Europe.\nFinally, intersect the set of people born in the USA with the set of people living in\nEurope, by joining them.\nIf the same query can be written in 4 lines in one query language but requires 29 lines\nin another, that just shows that different data models are designed to satisfy different\nuse cases. It\u2019s important to pick a data model that is suitable for your application.\nTriple-Stores and SPARQL\nThe triple-store model is mostly equivalent to the property graph model, using differ\u2010\nent words to describe the same ideas. It is nevertheless worth discussing, because\nthere are various tools and languages for triple-stores that can be valuable additions\nto your toolbox for building applications.\nIn a triple-store, all information is stored in the form of very simple three-part state\u2010\nments: ( subject , predicate , object ). For example, in the triple ( Jim, likes , bananas ), Jim\nis the subject, likes  is the predicate (verb), and bananas  is the object.\nGraph-Like Data Models | 55\n",
    "summary": "This chunk describes a graph data model (specifically a triple-store) and its query language (SPARQL), highlighting the importance of data modeling choices for different use cases.",
    "sample_answer": "\u201cThis example demonstrates a key consideration in system design: choosing the right data model. The triple-store model, with its (subject, predicate, object) structure, is a representation of interconnected data, analogous to a property graph.  The use of SPARQL to query this data emphasizes the importance of selecting a query language that aligns with the data model's strengths \u2013 in this case, efficient traversal of relationships.  From a reliability perspective, a triple-store\u2019s ability to represent complex relationships directly avoids some of the join-heavy operations often required in relational databases, which can be a source of performance bottlenecks and potential failure points.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system to track global supply chains.  Describe the pros and cons of using a relational database versus a graph database (like a triple-store) to model this data.  Specifically, how would your choice of data model affect query performance and potential scalability issues?\u201d"
  },
  {
    "chunk": "The subject of a triple is equivalent to a vertex in a graph. The object is one of two\nthings:\n1.A value in a primitive datatype, such as a string or a number. In that case, the\npredicate and object of the triple are equivalent to the key and value of a property\non the subject vertex. For example, ( lucy, age, 33) is like a vertex lucy  with prop\u2010\nerties {\"age\":33} .\n2.Another vertex in the graph. In that case, the predicate is an edge in the graph,\nthe subject is the tail vertex, and the object is the head vertex. For example, in\n(lucy, marriedTo , alain ) the subject and object lucy and alain  are both vertices,\nand the predicate marriedTo  is the label of the edge that connects them.\nExample 2-6  shows the same data as in Example 2-3 , written as triples in a format\ncalled Turtle , a subset of Notation3  (N3) [39].\nExample 2-6. A subset of the data in Figure 2-5 , represented as Turtle triples\n@prefix : <urn:example:>.\n_:lucy     a       :Person.\n_:lucy     :name   \"Lucy\".\n_:lucy     :bornIn _:idaho.\n_:idaho    a       :Location.\n_:idaho    :name   \"Idaho\".\n_:idaho    :type   \"state\".\n_:idaho    :within _:usa.\n_:usa      a       :Location.\n_:usa      :name   \"United States\".\n_:usa      :type   \"country\".\n_:usa      :within _:namerica.\n_:namerica a       :Location.\n_:namerica :name   \"North America\".\n_:namerica :type   \"continent\".\nIn this example, vertices of the graph are written as _:someName . The name doesn\u2019t\nmean anything outside of this file; it exists only because we otherwise wouldn\u2019t know\nwhich triples refer to the same vertex. When the predicate represents an edge, the\nobject is a vertex, as in _:idaho :within _:usa . When the predicate is a property,\nthe object is a string literal, as in _:usa :name \"United States\" .\nIt\u2019s quite repetitive to repeat the same subject over and over again, but fortunately\nyou can use semicolons to say multiple things about the same subject. This makes the\nTurtle format quite nice and readable: see Example 2-7 .\n56 | Chapter 2: Data Models and Query Languages\n",
    "summary": "The text describes a graph data model represented using triples, highlighting the use of semicolons for concise representation and referencing predicates as edges or properties.",
    "sample_answer": "\u201cOkay, this describes a graph data model \u2013 essentially, we\u2019re representing entities and their relationships as triples. The key design consideration here is the representation of relationships; we can model them as edges (predicates) connecting vertices, or as properties attached to vertices, which aligns with the principles of a property graph database. The use of semicolons to express multiple facts about a single subject, like in Example 2-7, demonstrates an effort to reduce redundancy, a common pattern for optimizing storage and query performance.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re building a system to represent knowledge about a company\u2019s employees, including their skills and projects. How would you approach modeling this data using a graph database like the one described in this excerpt, and what are some potential trade-offs you\u2019d consider regarding the choice between using predicates to represent relationships and properties attached to vertices?\u201d"
  },
  {
    "chunk": "vii. Technically, Datomic uses 5-tuples rather than triples; the two additional fields are metadata for version\u2010\ning.Example 2-7. A more concise way of writing the data in Example 2-6\n@prefix : <urn:example:>.\n_:lucy     a :Person;   :name \"Lucy\";          :bornIn _:idaho.\n_:idaho    a :Location; :name \"Idaho\";         :type \"state\";   :within _:usa.\n_:usa      a :Location; :name \"United States\"; :type \"country\"; :within _:namerica.\n_:namerica a :Location; :name \"North America\"; :type \"continent\".\nThe semantic web\nIf you read more about triple-stores, you may get sucked into a maelstrom of articles\nwritten about the semantic web . The triple-store data model is completely independ\u2010\nent of the semantic web\u2014for example, Datomic [ 40] is a triple-store that does not\nclaim to have anything to do with it.vii But since the two are so closely linked in many\npeople\u2019s minds, we should discuss them briefly.\nThe semantic web is fundamentally a simple and reasonable idea: websites already\npublish information as text and pictures for humans to read, so why don\u2019t they also\npublish information as machine-readable data for computers to read? The Resource\nDescription Framework  (RDF) [ 41] was intended as a mechanism for different web\u2010\nsites to publish data in a consistent format, allowing data from different websites to\nbe automatically combined into a web of data \u2014a kind of internet-wide \u201cdatabase of\neverything.\u201d\nUnfortunately, the semantic web was overhyped in the early 2000s but so far hasn\u2019t\nshown any sign of being realized in practice, which has made many people cynical\nabout it. It has also suffered from a dizzying plethora of acronyms, overly complex\nstandards proposals, and hubris.\nHowever, if you look past those failings, there is also a lot of good work that has come\nout of the semantic web project. Triples can be a good internal data model for appli\u2010\ncations, even if you have no interest in publishing RDF data on the semantic web.\nThe RDF data model\nThe Turtle language we used in Example 2-7  is a human-readable format for RDF\ndata. Sometimes RDF is also written in an XML format, which does the same thing\nmuch more verbosely\u2014see Example 2-8 . Turtle/N3 is preferable as it is much easier\non the eyes, and tools like Apache Jena [ 42] can automatically convert between differ\u2010\nent RDF formats if necessary.\nGraph-Like Data Models | 57\n",
    "summary": "The chunk discusses RDF, Turtle, and Apache Jena, highlighting their use as an internal data model and the ability to handle schema evolution through format conversion.",
    "sample_answer": "\u201cOkay, so this section touches on a key architectural consideration: choosing an internal data model. Using RDF, represented here in Turtle, offers a flexible way to represent data, which is important for accommodating schema evolution. We\u2019re seeing that Turtle is preferable to XML, and the ability to utilize tools like Apache Jena for format conversion is crucial for handling the inherent complexity of evolving data models \u2013 essentially, we\u2019re mitigating risk by allowing us to adapt the data representation without fundamentally redesigning our system.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say you're building a system to represent customer relationships. You\u2019ve chosen to store data using an RDF triple store. Describe how you might handle a situation where the data model needs to evolve to incorporate new customer attributes without causing backward incompatibility issues. What tools or approaches might you consider?\u201d"
  },
  {
    "chunk": "Example 2-8. The data of Example 2-7 , expressed using RDF/XML syntax\n<rdf:RDF  xmlns=\"urn:example:\"\n    xmlns:rdf= \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" >\n  <Location  rdf:nodeID= \"idaho\">\n    <name>Idaho</name>\n    <type>state</type>\n    <within>\n      <Location  rdf:nodeID= \"usa\">\n        <name>United States </name>\n        <type>country</type>\n        <within>\n          <Location  rdf:nodeID= \"namerica\" >\n            <name>North America </name>\n            <type>continent </type>\n          </Location>\n        </within>\n      </Location>\n    </within>\n  </Location>\n  <Person rdf:nodeID= \"lucy\">\n    <name>Lucy</name>\n    <bornIn rdf:nodeID= \"idaho\"/>\n  </Person>\n</rdf:RDF>\nRDF has a few quirks due to the fact that it is designed for internet-wide data\nexchange. The subject, predicate, and object of a triple are often URIs. For example, a\npredicate might be an URI such as <http://my-company.com/namespace#within>  or\n<http://my-company.com/namespace#lives_in> , rather than just WITHIN  or\nLIVES_IN . The reasoning behind this design is that you should be able to combine\nyour data with someone else\u2019s data, and if they attach a different meaning to the word\nwithin  or lives_in , you won\u2019t get a conflict because their predicates are actually\n<http://other.org/foo#within>  and <http://other.org/foo#lives_in> .\nThe URL <http://my-company.com/namespace>  doesn\u2019t necessarily need to resolve\nto anything\u2014from RDF\u2019s point of view, it is simply a namespace. To avoid potential\nconfusion with http://  URLs, the examples in this section use non-resolvable URIs\nsuch as urn:example:within . Fortunately, you can just specify this prefix once at the\ntop of the file, and then forget about it.\n58 | Chapter 2: Data Models and Query Languages\n",
    "summary": "The text discusses the use of RDF and URIs for data modeling, highlighting the importance of namespace management and avoiding conflicts through URI-based predicates.",
    "sample_answer": "\u201cOkay, this example demonstrates a key architectural consideration when designing data models for interoperability. Using URIs as predicates, as shown with the example predicates like `<http://my-company.com/namespace#within>`, is crucial for decoupling data and preventing conflicts when integrating with external data sources; this aligns with principles of avoiding tight coupling. Furthermore, the explicit use of a non-resolvable URI prefix, such as \u2018urn:example:\u2019 and the management of namespaces, directly addresses the need for schema evolution and avoiding naming collisions, a critical element in ensuring long-term maintainability of the system.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re building a system to ingest and query data from multiple external sources, each potentially using different terminology for relationships between entities. How would you approach the design of the data model to ensure data integration and prevent semantic conflicts, specifically considering the use of URIs as predicates, as exemplified in this RDF example?\u201d"
  },
  {
    "chunk": "The SPARQL query language\nSPARQL  is a query language for triple-stores using the RDF data model [ 43]. (It is an\nacronym for SPARQL Protocol and RDF Query Language , pronounced \u201csparkle.\u201d) It\npredates Cypher, and since Cypher\u2019s pattern matching is borrowed from SPARQL,\nthey look quite similar [ 37].\nThe same query as before\u2014finding people who have moved from the US to Europe\u2014\nis even more concise in SPARQL than it is in Cypher (see Example 2-9 ).\nExample 2-9. The same query as Example 2-4 , expressed in SPARQL\nPREFIX : <urn:example:>\nSELECT ?personName  WHERE {\n  ?person :name ?personName .\n  ?person :bornIn  / :within* / :name \"United States\" .\n  ?person :livesIn  / :within* / :name \"Europe\" .\n}\nThe structure is very similar. The following two expressions are equivalent (variables\nstart with a question mark in SPARQL):\n(person) -[:BORN_IN]-> () -[:WITHIN*0..]-> (location)   # Cypher\n?person :bornIn / :within* ?location.                   # SPARQL\nBecause RDF doesn\u2019t distinguish between properties and edges but just uses predi\u2010\ncates for both, you can use the same syntax for matching properties. In the following\nexpression, the variable usa is bound to any vertex that has a name  property whose\nvalue is the string \"United States\" :\n(usa {name:'United States'})   # Cypher\n?usa :name \"United States\".    # SPARQL\nSPARQL is a nice query language\u2014even if the semantic web never happens, it can be\na powerful tool for applications to use internally. \nGraph-Like Data Models | 59\n",
    "summary": "The chunk discusses the use of SPARQL, a query language for RDF data models, highlighting its similarity to Cypher and emphasizing its ability to express relationships within a graph-like data structure.",
    "sample_answer": "\"SPARQL\u2019s use of RDF and its triple-store architecture allows us to model complex relationships\u2014like those found in a social network or knowledge graph\u2014directly in the database. Because it\u2019s a declarative query language, SPARQL allows us to define *what* we want to retrieve, rather than *how* to retrieve it, which is a key principle for building scalable and maintainable data pipelines. Considering the \u2018semantic web\u2019 never materialized, its value lies in internal applications needing powerful graph query capabilities.\"",
    "potential_interview_question": "\"Describe a scenario where you might use a graph query language like SPARQL to solve a business problem. How would you approach designing a pipeline to ingest and query data represented in this format, and what are some key considerations related to performance and scalability?\""
  },
  {
    "chunk": "Datalog\u2019s data model is similar to the triple-store model, generalized a bit. Instead of\nwriting a triple as ( subject , predicate , object ), we write it as predicate (subject , object ).\nExample 2-10  shows how to write the data from our example in Datalog.\nExample 2-10. A subset of the data in Figure 2-5 , represented as Datalog facts\nname(namerica , 'North America' ).\ntype(namerica , continent ).\nname(usa, 'United States' ).\ntype(usa, country ).\nwithin(usa, namerica ).\nname(idaho, 'Idaho' ).\ntype(idaho, state).\nwithin(idaho, usa).\nname(lucy, 'Lucy').\nborn_in(lucy, idaho).\nNow that we have defined the data, we can write the same query as before, as shown\nin Example 2-11 . It looks a bit different from the equivalent in Cypher or SPARQL,\nbut don\u2019t let that put you off. Datalog is a subset of Prolog, which you might have\nseen before if you\u2019ve studied computer science.\nExample 2-11. The same query as Example 2-4 , expressed in Datalog\nwithin_recursive (Location , Name) :- name(Location , Name).     /* Rule 1 */\nwithin_recursive (Location , Name) :- within(Location , Via),    /* Rule 2 */\n                                    within_recursive (Via, Name).\nmigrated (Name, BornIn, LivingIn ) :- name(Person, Name),       /* Rule 3 */\n                                    born_in(Person, BornLoc),\n                                    within_recursive (BornLoc, BornIn),\n                                    lives_in (Person, LivingLoc ),\n                                    within_recursive (LivingLoc , LivingIn ).\n?- migrated (Who, 'United States' , 'Europe' ).\n/* Who = 'Lucy'. */\nCypher and SPARQL jump in right away with SELECT , but Datalog takes a small step\nat a time. We define rules  that tell the database about new predicates: here, we define\ntwo new predicates, within_recursive  and migrated . These predicates aren\u2019t triples\nstored in the database, but instead they are derived from data or from other rules.\nRules can refer to other rules, just like functions can call other functions or recur\u2010\nsively call themselves. Like this, complex queries can be built up a small piece at a\ntime.\nGraph-Like Data Models | 61\n",
    "summary": "The text describes Datalog\u2019s data model as a rule-based system built on a graph-like structure, highlighting its use of rules derived from data and its recursive nature for complex queries.",
    "sample_answer": "\u201cOkay, so Datalog presents a unique approach to data modeling compared to traditional triple stores. Its core strength lies in its rule-based system, where we define relationships using \u2018rules\u2019 like `within_recursive` and `migrated`, rather than storing data as triples. This allows us to derive new relationships based on existing ones, which is crucial for handling complex, evolving data relationships - a pattern we often see in knowledge graphs.  The recursive nature of these rules, mirroring function calls, allows for building complex queries step-by-step, similar to how we might design a complex data pipeline, incrementally constructing the result set.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system to track customer journeys across multiple touchpoints. How would you represent this data, and why might you choose a rule-based approach like Datalog, rather than a traditional graph database?\u201d"
  },
  {
    "chunk": "In rules, words that start with an uppercase letter are variables, and predicates are\nmatched like in Cypher and SPARQL. For example, name(Location, Name)  matches\nthe triple name(namerica, 'North America')  with variable bindings Location =\nnamerica  and Name = 'North America' .\nA rule applies if the system can find a match for all predicates on the righthand side\nof the :- operator. When the rule applies, it\u2019s as though the lefthand side of the :-\nwas added to the database (with variables replaced by the values they matched).\nOne possible way of applying the rules is thus:\n1.name(namerica, 'North America')  exists in the database, so rule 1 applies. It\ngenerates within_recursive(namerica, 'North America') .\n2.within(usa, namerica)  exists in the database and the previous step generated\nwithin_recursive(namerica, 'North America') , so rule 2 applies. It generates\nwithin_recursive(usa, 'North America') .\n3.within(idaho, usa)  exists in the database and the previous step generated\nwithin_recursive(usa, 'North America') , so rule 2 applies. It generates\nwithin_recursive(idaho, 'North America') .\nBy repeated application of rules 1 and 2, the within_recursive  predicate can tell us\nall the locations in North America (or any other location name) contained in our\ndatabase. This process is illustrated in Figure 2-6 .\nFigure 2-6. Determining that Idaho is in North America, using the Datalog rules from\nExample 2-11 .\nNow rule 3 can find people who were born in some location BornIn  and live in some\nlocation LivingIn . By querying with BornIn = 'United States'  and LivingIn =\n'Europe' , and leaving the person as a variable Who, we ask the Datalog system to find\nout which values can appear for the variable Who. So, finally we get the same answer as\nin the earlier Cypher and SPARQL queries.\n62 | Chapter 2: Data Models and Query Languages\n",
    "summary": "The text describes a Datalog-based rules engine for querying and reasoning about relationships within a database, demonstrating a pattern of declarative querying and rule application. It highlights the concept of variable binding and how rules are iteratively applied to derive new relationships.",
    "sample_answer": "\u201cThis system design resembles a rule engine, where we define relationships as rules and then iteratively apply those rules to derive new insights. The iterative application of rules, as shown in the example, mirrors a common pattern in data pipelines \u2013 transforming raw data through a series of dependent transformations. We're essentially building a dependency graph of relationships, which is a fundamental concept in data lineage and understanding the flow of information within the system; similar to a complex ETL process.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where you would utilize a rule engine like the one described in this text. What are some key considerations for designing and maintaining a system that relies on iteratively applied rules, particularly concerning performance and scalability?\u201d"
  },
  {
    "chunk": "The Datalog approach requires a different kind of thinking to the other query lan\u2010\nguages discussed in this chapter, but it\u2019s a very powerful approach, because rules can\nbe combined and reused in different queries. It\u2019s less convenient for simple one-off\nqueries, but it can cope better if your data is complex. \nSummary\nData models are a huge subject, and in this chapter we have taken a quick look at a\nbroad variety of different models. We didn\u2019t have space to go into all the details of\neach model, but hopefully the overview has been enough to whet your appetite to\nfind out more about the model that best fits your application\u2019s requirements.\nHistorically, data started out being represented as one big tree (the hierarchical\nmodel), but that wasn\u2019t good for representing many-to-many relationships, so the\nrelational model was invented to solve that problem. More recently, developers found\nthat some applications don\u2019t fit well in the relational model either. New nonrelational\n\u201cNoSQL\u201d datastores have diverged in two main directions:\n1.Document databases  target use cases where data comes in self-contained docu\u2010\nments and relationships between one document and another are rare.\n2.Graph databases  go in the opposite direction, targeting use cases where anything\nis potentially related to everything.\nAll three models (document, relational, and graph) are widely used today, and each is\ngood in its respective domain. One model can be emulated in terms of another model\n\u2014for example, graph data can be represented in a relational database\u2014but the result\nis often awkward. That\u2019s why we have different systems for different purposes, not a\nsingle one-size-fits-all solution.\nOne thing that document and graph databases have in common is that they typically\ndon\u2019t enforce a schema for the data they store, which can make it easier to adapt\napplications to changing requirements. However, your application most likely still\nassumes that data has a certain structure; it\u2019s just a question of whether the schema is\nexplicit (enforced on write) or implicit (handled on read).\nEach data model comes with its own query language or framework, and we discussed\nseveral examples: SQL, MapReduce, MongoDB\u2019s aggregation pipeline, Cypher,\nSPARQL, and Datalog. We also touched on CSS and XSL/XPath, which aren\u2019t data\u2010\nbase query languages but have interesting parallels.\nAlthough we have covered a lot of ground, there are still many data models left\nunmentioned. To give just a few brief examples:\n\u2022Researchers working with genome data often need to perform sequence-\nsimilarity searches , which means taking one very long string (representing a\nSummary | 63\n",
    "summary": "The text discusses various data models (relational, document, graph) and their corresponding query languages, highlighting the trade-offs in schema enforcement and data modeling approaches.",
    "sample_answer": "\u201cOkay, so when choosing a data model, we need to consider the complexity of the relationships within our data. A relational model, like SQL, excels when data is structured with well-defined, one-to-many relationships \u2013 think of a traditional customer-order system. However, if we\u2019re dealing with highly interconnected data, like a social network, a graph database with Cypher would be a better choice because it natively handles these complex relationships. Furthermore, the fact that document and graph databases often don\u2019t enforce a schema, while simplifying initial development, introduces a challenge: we still need to ensure our application correctly handles data drift and potential schema evolution \u2013 perhaps through monitoring data quality and implementing validation rules on the read side.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say you\u2019re tasked with building a system to analyze user interactions on a social media platform. The relationships between users, posts, comments, and likes are incredibly complex and evolving. You\u2019re considering both relational and graph databases. What are the key considerations when choosing between these models, and what are some potential challenges you might encounter with either approach?\u201d"
  },
  {
    "chunk": "[26] Shlomi Noach: \u201c gh-ost: GitHub\u2019s Online Schema Migration Tool for MySQL ,\u201d\ngithubengineering.com , August 1, 2016.\n[27] James C. Corbett, Jeffrey Dean, Michael Epstein, et al.: \u201c Spanner: Google\u2019s\nGlobally-Distributed Database ,\u201d at 10th USENIX Symposium on Operating System\nDesign and Implementation  (OSDI), October 2012.\n[28] Donald K. Burleson: \u201c Reduce I/O with Oracle Cluster Tables ,\u201d dba-oracle.com .\n[29] Fay Chang, Jeffrey Dean, Sanjay Ghemawat, et al.: \u201c Bigtable: A Distributed Stor\u2010\nage System for Structured Data ,\u201d at 7th USENIX Symposium on Operating System\nDesign and Implementation  (OSDI), November 2006.\n[30] Bobbie J. Cochrane and Kathy A. McKnight: \u201c DB2 JSON Capabilities, Part 1:\nIntroduction to DB2 JSON ,\u201d IBM developerWorks, June 20, 2013.\n[31] Herb Sutter: \u201c The Free Lunch Is Over: A Fundamental Turn Toward Concur\u2010\nrency in Software ,\u201d Dr. Dobb\u2019s Journal , volume 30, number 3, pages 202-210, March\n2005.\n[32] Joseph M. Hellerstein: \u201c The Declarative Imperative: Experiences and Conjec\u2010\ntures in Distributed Logic ,\u201d Electrical Engineering and Computer Sciences, Univer\u2010\nsity of California at Berkeley, Tech report UCB/EECS-2010-90, June 2010.\n[33] Jeffrey Dean and Sanjay Ghemawat: \u201c MapReduce: Simplified Data Processing on\nLarge Clusters ,\u201d at 6th USENIX Symposium on Operating System Design and Imple\u2010\nmentation  (OSDI), December 2004.\n[34] Craig Kerstiens: \u201c JavaScript in Your Postgres ,\u201d blog.heroku.com , June 5, 2013.\n[35] Nathan Bronson, Zach Amsden, George Cabrera, et al.: \u201c TAO: Facebook\u2019s Dis\u2010\ntributed Data Store for the Social Graph ,\u201d at USENIX Annual Technical Conference\n(USENIX ATC), June 2013.\n[36] \u201cApache TinkerPop3.2.3 Documentation ,\u201d tinkerpop.apache.org , October 2016.\n[37] \u201cThe Neo4j Manual v2.0.0 ,\u201d Neo Technology, 2013.\n[38] Emil Eifrem: Twitter correspondence , January 3, 2014.\n[39] David Beckett and Tim Berners-Lee: \u201c Turtle \u2013 Terse RDF Triple Language ,\u201d\nW3C Team Submission, March 28, 2011.\n[40] \u201cDatomic Development Resources ,\u201d Metadata Partners, LLC, 2013.\n[41] W3C RDF Working Group: \u201c Resource Description Framework (RDF) ,\u201d w3.org ,\n10 February 2004.\n[42] \u201cApache Jena ,\u201d Apache Software Foundation.\n66 | Chapter 2: Data Models and Query Languages\n",
    "summary": "The text discusses various distributed databases, data models (RDF, JSON), and processing frameworks, highlighting architectural approaches and trade-offs.",
    "sample_answer": "\u201cThis collection of resources demonstrates a progression in database technology, from early distributed systems like Spanner and Bigtable, which clearly address the challenges of scale and data consistency \u2013 potentially leveraging concepts like sharding to manage data across geographically distributed nodes. Moving forward, we see the rise of graph databases like Neo4j and Apache TinkerPop, which leverage a declarative query language to model relationships, contrasting with the imperative model often found in traditional databases. It\u2019s worth noting the shift towards data models like RDF, indicating an evolution in how data is represented and queried, potentially reflecting an increased focus on semantic understanding and interoperability.\u201d",
    "potential_interview_question": "\u201cDescribe the trade-offs between using a key-value store like Bigtable versus a graph database like Neo4j to model and query social network data. Specifically, how would you address the challenge of efficiently querying relationships within the graph, and what architectural considerations would be most important in designing such a system?\u201d"
  },
  {
    "chunk": "[43] Steve Harris, Andy Seaborne, and Eric Prud\u2019hommeaux: \u201c SPARQL 1.1 Query\nLanguage ,\u201d W3C Recommendation, March 2013.\n[44] Todd J. Green, Shan Shan Huang, Boon Thau Loo, and Wenchao Zhou: \u201c Data\u2010\nlog and Recursive Query Processing ,\u201d Foundations and Trends in Databases , volume\n5, number 2, pages 105\u2013195, November 2013. doi:10.1561/1900000017\n[45] Stefano Ceri, Georg Gottlob, and Letizia Tanca: \u201c What You Always Wanted to\nKnow About Datalog (And Never Dared to Ask) ,\u201d IEEE Transactions on Knowledge\nand Data Engineering , volume 1, number 1, pages 146\u2013166, March 1989. doi:\n10.1109/69.43410\n[46] Serge Abiteboul, Richard Hull, and Victor Vianu: Foundations of Databases .\nAddison-Wesley, 1995. ISBN: 978-0-201-53771-0, available online at web\u2010\ndam.inria.fr/Alice\n[47] Nathan Marz: \u201c Cascalog ,\u201d cascalog.org .\n[48] Dennis A. Benson, Ilene Karsch-Mizrachi, David J. Lipman, et al.: \u201c GenBank ,\u201d\nNucleic Acids Research , volume 36, Database issue, pages D25\u2013D30, December 2007.\ndoi:10.1093/nar/gkm929\n[49] Fons Rademakers: \u201c ROOT for Big Data Analysis ,\u201d at Workshop on the Future of\nBig Data Management , London, UK, June 2013.\nSummary | 67\n",
    "summary": "The chunk discusses data querying languages (SPARQL, Datalog), database foundations, and big data analysis tools (Cascalog, ROOT), highlighting the evolution of data access and processing techniques.",
    "sample_answer": "\u201cThis chunk points to a progression in data access strategies. Initially, we have query languages like SPARQL and Datalog, which represent a shift from traditional relational database querying towards declarative approaches, particularly useful when dealing with complex relationships.  Datalog\u2019s recursive query processing is particularly relevant for evolving data models and representing intricate dependencies, which is something we often encounter with schema drift.  Furthermore, the mention of Cascalog and ROOT indicates the trend towards distributed data processing for large-scale datasets, demanding robust fault tolerance and coordination strategies \u2013 concepts central to designing resilient big data systems.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re building a system to analyze genomic data using a data log. Explain how the principles of Datalog\u2019s recursive query processing might influence your choice of query language and how you\u2019d handle schema evolution within that system.  What specific design considerations would you have regarding scalability and performance?\u201d"
  },
  {
    "chunk": "CHAPTER 3\nStorage and Retrieval\nWer Ordnung h\u00e4lt, ist nur zu faul zum Suchen.\n(If you keep things tidily ordered, you\u2019re just too lazy to go searching.)\n\u2014German proverb\nOn the most fundamental level, a database needs to do two things: when you give it\nsome data, it should store the data, and when you ask it again later, it should give the\ndata back to you.\nIn Chapter 2  we discussed data models and query languages\u2014i.e., the format in\nwhich you (the application developer) give the database your data, and the mecha\u2010\nnism by which you can ask for it again later. In this chapter we discuss the same from\nthe database\u2019s point of view: how we can store the data that we\u2019re given, and how we\ncan find it again when we\u2019re asked for it.\nWhy should you, as an application developer, care how the database handles storage\nand retrieval internally? You\u2019re probably not going to implement your own storage\nengine from scratch, but you do need to select a storage engine that is appropriate for\nyour application, from the many that are available. In order to tune a storage engine\nto perform well on your kind of workload, you need to have a rough idea of what the\nstorage engine is doing under the hood.\nIn particular, there is a big difference between storage engines that are optimized for\ntransactional workloads and those that are optimized for analytics. We will explore\nthat distinction later in \u201cTransaction Processing or Analytics?\u201d on page 90, and in\n\u201cColumn-Oriented Storage\u201d on page 95 we\u2019ll discuss a family of storage engines that\nis optimized for analytics.\nHowever, first we\u2019ll start this chapter by talking about storage engines that are used in\nthe kinds of databases that you\u2019re probably familiar with: traditional relational data\u2010\nbases, and also most so-called NoSQL databases. We will examine two families of\n69\n",
    "summary": "The text discusses the fundamental need for storage and retrieval in databases, highlighting the distinction between transactional and analytical workloads, and introducing the concepts of relational and NoSQL databases.",
    "sample_answer": "\u201cOkay, at a fundamental level, every database system needs to efficiently store and retrieve data. The key consideration here is the type of workload \u2013 we're seeing a crucial distinction emerging between transactional databases, optimized for fast, consistent writes and reads, and analytical databases, which often leverage columnar storage to optimize for complex queries. This aligns with the broader CAP theorem \u2013 a database needs to balance Consistency, Availability, and Partition Tolerance, and the specific choices around storage engines (like columnar formats) heavily influence which aspects of that trade-off are prioritized.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say you\u2019re designing a data warehouse for an e-commerce company.  The analytics team primarily wants to run complex queries to understand customer purchasing patterns.  Considering the discussion in this chapter about different storage engine types, what considerations would you prioritize when selecting a storage engine, and why?\u201d"
  },
  {
    "chunk": "storage engines: log-structured  storage engines, and page-oriented  storage engines\nsuch as B-trees.\nData Structures That Power Your Database\nConsider the world\u2019s simplest database, implemented as two Bash functions:\n#!/bin/bash\ndb_set () {\n    echo \"$1,$2\" >> database\n}\ndb_get () {\n    grep \"^$1,\" database | sed -e \"s/^$1,//\" | tail -n 1\n}\nThese two functions implement a key-value store. You can call db_set key value ,\nwhich will store key and value  in the database. The key and value can be (almost)\nanything you like\u2014for example, the value could be a JSON document. You can then\ncall db_get key , which looks up the most recent value associated with that particular\nkey and returns it.\nAnd it works:\n$ db_set 123456 '{\"name\":\"London\",\"attractions\":[\"Big Ben\",\"London Eye\"]}'\n$ db_set 42 '{\"name\":\"San Francisco\",\"attractions\":[\"Golden Gate Bridge\"]}'\n$ db_get 42\n{\"name\":\"San Francisco\",\"attractions\":[\"Golden Gate Bridge\"]}\nThe underlying storage format is very simple: a text file where each line contains a\nkey-value pair, separated by a comma (roughly like a CSV file, ignoring escaping\nissues). Every call to db_set  appends to the end of the file, so if you update a key sev\u2010\neral times, the old versions of the value are not overwritten\u2014you need to look at the\nlast occurrence of a key in a file to find the latest value (hence the tail -n 1  in\ndb_get ):\n$ db_set 42 '{\"name\":\"San Francisco\",\"attractions\":[\"Exploratorium\"]}'\n$ db_get 42\n{\"name\":\"San Francisco\",\"attractions\":[\"Exploratorium\"]}\n$ cat database\n123456,{\"name\":\"London\",\"attractions\":[\"Big Ben\",\"London Eye\"]}\n42,{\"name\":\"San Francisco\",\"attractions\":[\"Golden Gate Bridge\"]}\n42,{\"name\":\"San Francisco\",\"attractions\":[\"Exploratorium\"]}\n70 | Chapter 3: Storage and Retrieval\n",
    "summary": "This chunk describes a simple key-value store implemented with a text file and demonstrates the challenges of maintaining data consistency and versioning in a naive system.",
    "sample_answer": "\u201cThis simple key-value store highlights several core data engineering challenges. The reliance on a single text file as storage, combined with appending writes, immediately introduces issues regarding data consistency and versioning \u2013 a problem we often see in early-stage systems. To address this, we\u2019d likely employ a more robust storage engine like a log-structured storage engine, or consider a database system with built-in concurrency control mechanisms, perhaps using a two-phase commit protocol (2PC) to ensure data integrity during updates, mirroring the need to maintain multiple versions of the data.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where a naive system design, similar to the one described in this excerpt, could lead to data inconsistencies. How would you architect a system to mitigate these risks, and what trade-offs would you consider?\u201d"
  },
  {
    "chunk": "seek. If that part of the data file is already in the filesystem cache, a read doesn\u2019t\nrequire any disk I/O at all.\nA storage engine like Bitcask is well suited to situations where the value for each key\nis updated frequently. For example, the key might be the URL of a cat video, and the\nvalue might be the number of times it has been played (incremented every time\nsomeone hits the play button). In this kind of workload, there are a lot of writes, but\nthere are not too many distinct keys\u2014you have a large number of writes per key, but\nit\u2019s feasible to keep all keys in memory.\nAs described so far, we only ever append to a file\u2014so how do we avoid eventually\nrunning out of disk space? A good solution is to break the log into segments of a cer\u2010\ntain size by closing a segment file when it reaches a certain size, and making subse\u2010\nquent writes to a new segment file. We can then perform compaction  on these\nsegments, as illustrated in Figure 3-2 . Compaction means throwing away duplicate\nkeys in the log, and keeping only the most recent update for each key.\nFigure 3-2. Compaction of a key-value update log (counting the number of times each\ncat video was played), retaining only the most recent value for each key.\nMoreover, since compaction often makes segments much smaller (assuming that a\nkey is overwritten several times on average within one segment), we can also merge\nseveral segments together at the same time as performing the compaction, as shown\nin Figure 3-3 . Segments are never modified after they have been written, so the\nmerged segment is written to a new file. The merging and compaction of frozen seg\u2010\nments can be done in a background thread, and while it is going on, we can still con\u2010\ntinue to serve read and write requests as normal, using the old segment files. After the\nmerging process is complete, we switch read requests to using the new merged seg\u2010\nment instead of the old segments\u2014and then the old segment files can simply be\ndeleted.\nData Structures That Power Your Database | 73\n",
    "summary": "The chunk discusses a key-value storage engine with compaction and segment merging strategies for handling frequent writes and scaling efficiently.",
    "sample_answer": "\u201cOkay, this describes a key-value store with a focus on write scalability. The use of a storage engine like Bitcask, combined with segment-based architecture, addresses a common challenge: frequent updates to the same key. The compaction strategy\u2014throwing away duplicate keys\u2014is a crucial element for maintaining performance as the dataset grows, effectively mitigating the risk of the system becoming overwhelmed by writes and aligning with the principles of eventual consistency, a key consideration for high-volume write scenarios. Furthermore, the concurrent read/write operation during compaction, leveraging a background thread, demonstrates an understanding of how to maintain availability while processing updates \u2013 mirroring best practices for distributed systems.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system to track the popularity of cat videos, as described in this chunk. What are some strategies you\u2019d employ to ensure the system remains performant as the number of play counts for each video increases? Consider concepts like compaction, concurrency, and segment management \u2013 specifically how would you handle potential schema evolution or key drift?\u201d"
  },
  {
    "chunk": "Figure 3-3. Performing compaction and segment merging simultaneously.\nEach segment now has its own in-memory hash table, mapping keys to file offsets. In\norder to find the value for a key, we first check the most recent segment\u2019s hash map;\nif the key is not present we check the second-most-recent segment, and so on. The\nmerging process keeps the number of segments small, so lookups don\u2019t need to check\nmany hash maps.\nLots of detail goes into making this simple idea work in practice. Briefly, some of the\nissues that are important in a real implementation are:\nFile format\nCSV is not the best format for a log. It\u2019s faster and simpler to use a binary format\nthat first encodes the length of a string in bytes, followed by the raw string\n(without need for escaping).\nDeleting records\nIf you want to delete a key and its associated value, you have to append a special\ndeletion record to the data file (sometimes called a tombstone ). When log seg\u2010\nments are merged, the tombstone tells the merging process to discard any previ\u2010\nous values for the deleted key.\nCrash recovery\nIf the database is restarted, the in-memory hash maps are lost. In principle, you\ncan restore each segment\u2019s hash map by reading the entire segment file from\nbeginning to end and noting the offset of the most recent value for every key as\nyou go along. However, that might take a long time if the segment files are large,\nwhich would make server restarts painful. Bitcask speeds up recovery by storing\n74 | Chapter 3: Storage and Retrieval\n",
    "summary": "The chunk discusses a storage engine (Bitcask) with a segmented architecture, emphasizing lookup strategies, schema evolution (deletion handling), and crash recovery mechanisms.",
    "sample_answer": "\u201cThis Bitcask design demonstrates several key system design principles. The segmented architecture, using in-memory hash tables for each segment, is a technique for optimizing lookup performance, mirroring the strategy of reducing the number of probes required to find a key. Furthermore, the handling of deletion records via tombstone entries highlights the need to consider schema evolution and maintain data consistency \u2013 if we didn\u2019t manage this, we\u2019d have duplicate entries and potential corruption. The slow recovery process mentioned suggests a focus on minimizing the amount of data that needs to be scanned during a crash, which is a core tenet of fault tolerance.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say you\u2019re designing a log storage system similar to Bitcask. How would you address the trade-offs between read performance (using in-memory hashes) and write latency (compaction and merging)? Also, what strategies could you employ to improve the speed of a crash recovery process, and what are the key considerations when choosing a file format like CSV versus a binary format?\u201d"
  },
  {
    "chunk": "ii. Inserting a new key into a B-tree is reasonably intuitive, but deleting one (while keeping the tree balanced)\nis somewhat more involved [ 2].Eventually we get down to a page containing individual keys (a leaf page ), which\neither contains the value for each key inline or contains references to the pages where\nthe values can be found.\nThe number of references to child pages in one page of the B-tree is called the\nbranching factor . For example, in Figure 3-6  the branching factor is six. In practice,\nthe branching factor depends on the amount of space required to store the page refer\u2010\nences and the range boundaries, but typically it is several hundred.\nIf you want to update the value for an existing key in a B-tree, you search for the leaf\npage containing that key, change the value in that page, and write the page back to\ndisk (any references to that page remain valid). If you want to add a new key, you\nneed to find the page whose range encompasses the new key and add it to that page.\nIf there isn\u2019t enough free space in the page to accommodate the new key, it is split\ninto two half-full pages, and the parent page is updated to account for the new subdi\u2010\nvision of key ranges\u2014see Figure 3-7 .ii\nFigure 3-7. Growing a B-tree by splitting a page.\nThis algorithm ensures that the tree remains balanced : a B-tree with n keys always\nhas a depth of O(log n). Most databases can fit into a B-tree that is three or four levels\ndeep, so you don\u2019t need to follow many page references to find the page you are look\u2010\ning for. (A four-level tree of 4 KB pages with a branching factor of 500 can store up to\n256 TB.)\nData Structures That Power Your Database | 81\n",
    "summary": "The text discusses the B-tree data structure and its implications for database design, particularly focusing on balancing and scaling.",
    "sample_answer": "\u201cThe B-tree\u2019s design\u2014specifically its branching factor and logarithmic depth\u2014directly impacts the database\u2019s ability to scale. Maintaining a balanced B-tree, as demonstrated by the splitting algorithm in Figure 3-7, is critical for ensuring efficient lookups, which is a primary goal for database performance.  Furthermore, the logarithmic depth\u2014O(log n)\u2014means the database can efficiently handle a large number of records without incurring excessive lookup latency.\u201d",
    "potential_interview_question": "\u201cExplain how the branching factor of a B-tree impacts database query performance. How does the splitting algorithm contribute to maintaining the tree\u2019s balance and ensuring logarithmic depth?\u201d"
  },
  {
    "chunk": "iii. This variant is sometimes known as a B+ tree, although the optimization is so common that it often isn\u2019t\ndistinguished from other B-tree variants.rency control, as we shall see in \u201cSnapshot Isolation and Repeatable Read\u201d on\npage 237 .\n\u2022We can save space in pages by not storing the entire key, but abbreviating it.\nEspecially in pages on the interior of the tree, keys only need to provide enough\ninformation to act as boundaries between key ranges. Packing more keys into a\npage allows the tree to have a higher branching factor, and thus fewer levels.iii\n\u2022In general, pages can be positioned anywhere on disk; there is nothing requiring\npages with nearby key ranges to be nearby on disk. If a query needs to scan over a\nlarge part of the key range in sorted order, that page-by-page layout can be ineffi\u2010\ncient, because a disk seek may be required for every page that is read. Many B-\ntree implementations therefore try to lay out the tree so that leaf pages appear in\nsequential order on disk. However, it\u2019s difficult to maintain that order as the tree\ngrows. By contrast, since LSM-trees rewrite large segments of the storage in one\ngo during merging, it\u2019s easier for them to keep sequential keys close to each other\non disk.\n\u2022Additional pointers have been added to the tree. For example, each leaf page may\nhave references to its sibling pages to the left and right, which allows scanning\nkeys in order without jumping back to parent pages.\n\u2022B-tree variants such as fractal trees  [22] borrow some log-structured ideas to\nreduce disk seeks (and they have nothing to do with fractals). \nComparing B-Trees and LSM-Trees\nEven though B-tree implementations are generally more mature than LSM-tree\nimplementations, LSM-trees are also interesting due to their performance character\u2010\nistics. As a rule of thumb, LSM-trees are typically faster for writes, whereas B-trees\nare thought to be faster for reads [ 23]. Reads are typically slower on LSM-trees\nbecause they have to check several different data structures and SSTables at different\nstages of compaction.\nHowever, benchmarks are often inconclusive and sensitive to details of the workload.\nYou need to test systems with your particular workload in order to make a valid com\u2010\nparison. In this section we will briefly discuss a few things that are worth considering\nwhen measuring the performance of a storage engine.\nData Structures That Power Your Database | 83\n",
    "summary": "The text contrasts B-trees and LSM-trees, highlighting differences in read/write performance and disk access patterns, emphasizing the importance of data structure layout for performance.",
    "sample_answer": "\u201cWhen designing a database storage engine, understanding the trade-offs between B-trees and LSM-trees is crucial. B-trees, with their balanced structure, excel in read performance due to their efficient key lookups, but can suffer during write operations due to the need for frequent updates and rebalancing \u2013 a challenge addressed by technologies like sharding to distribute the load. LSM-trees, conversely, are optimized for write performance by leveraging log-structured merging, as demonstrated by their ability to reduce disk seeks by keeping keys sequential on disk, but potentially at the cost of increased read latency due to the need to scan multiple SSTables, which speaks to the CAP theorem\u2019s consideration of consistency versus availability.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re building a system that needs to handle high write throughput while maintaining reasonable read latency. Describe the key differences in storage engine design considerations between a B-tree and an LSM-tree approach, and discuss how you would evaluate which approach is more suitable for our specific use case.  Specifically, how might we address the implications of the CAP theorem in this scenario?\u201d"
  },
  {
    "chunk": "iv. The meaning of online  in OLAP is unclear; it probably refers to the fact that queries are not just for prede\u2010\nfined reports, but that analysts use the OLAP system interactively for explorative queries.These queries are often written by business analysts, and feed into reports that help\nthe management of a company make better decisions ( business intelligence ). In order\nto differentiate this pattern of using databases from transaction processing, it has\nbeen called online analytic processing  (OLAP) [ 47].iv The difference between OLTP\nand OLAP is not always clear-cut, but some typical characteristics are listed in\nTable 3-1 .\nTable 3-1. Comparing characteristics of transaction processing versus analytic systems\nProperty Transaction processing systems (OLTP) Analytic systems (OLAP)\nMain read pattern Small number of records per query, fetched by key Aggregate over large number of records\nMain write pattern Random-access, low-latency writes from user input Bulk import (ETL) or event stream\nPrimarily used by End user/customer, via web application Internal analyst, for decision support\nWhat data represents Latest state of data (current point in time) History of events that happened over time\nDataset size Gigabytes to terabytes Terabytes to petabytes\nAt first, the same databases were used for both transaction processing and analytic\nqueries. SQL turned out to be quite flexible in this regard: it works well for OLTP-\ntype queries as well as OLAP-type queries. Nevertheless, in the late 1980s and early\n1990s, there was a trend for companies to stop using their OLTP systems for analytics\npurposes, and to run the analytics on a separate database instead. This separate data\u2010\nbase was called a data warehouse .\nData Warehousing\nAn enterprise may have dozens of different transaction processing systems: systems\npowering the customer-facing website, controlling point of sale (checkout) systems in\nphysical stores, tracking inventory in warehouses, planning routes for vehicles, man\u2010\naging suppliers, administering employees, etc. Each of these systems is complex and\nneeds a team of people to maintain it, so the systems end up operating mostly auton\u2010\nomously from each other.\nThese OLTP systems are usually expected to be highly available and to process trans\u2010\nactions with low latency, since they are often critical to the operation of the business.\nDatabase administrators therefore closely guard their OLTP databases. They are usu\u2010\nally reluctant to let business analysts run ad hoc analytic queries on an OLTP data\u2010\nbase, since those queries are often expensive, scanning large parts of the dataset,\nwhich can harm the performance of concurrently executing transactions.\nTransaction Processing or Analytics? | 91\n",
    "summary": "The text highlights the shift from using transactional databases (OLTP) for analytics, leading to the creation of separate data warehouses for analytical processing (OLAP), emphasizing the performance impact of ad-hoc queries on OLTP systems.",
    "sample_answer": "\u201cOkay, let\u2019s talk about the architectural shift here. Initially, companies were trying to shoehorn analytics directly into their OLTP systems, which is fundamentally problematic. The key difference between OLTP and OLAP \u2013 small, key-based reads versus aggregate analysis over large datasets \u2013 means that ad-hoc queries on an OLTP database would severely degrade transaction performance.  To mitigate this, the creation of a dedicated data warehouse, built for analytical workloads, is a classic pattern; this separation allows for optimized queries and avoids impacting the latency requirements of the operational systems.\u201d",
    "potential_interview_question": "\u201cDescribe the trade-offs between running analytics directly on OLTP systems versus creating a separate data warehouse.  Specifically, discuss the performance implications and how the characteristics of OLTP and OLAP systems contribute to this decision.\u201d"
  },
  {
    "chunk": "In the rest of this chapter we will look at storage engines that are optimized for ana\u2010\nlytics instead.\nThe divergence between OLTP databases and data warehouses\nThe data model of a data warehouse is most commonly relational, because SQL is\ngenerally a good fit for analytic queries. There are many graphical data analysis tools\nthat generate SQL queries, visualize the results, and allow analysts to explore the data\n(through operations such as drill-down  and slicing and dicing ).\nOn the surface, a data warehouse and a relational OLTP database look similar,\nbecause they both have a SQL query interface. However, the internals of the systems\ncan look quite different, because they are optimized for very different query patterns.\nMany database vendors now focus on supporting either transaction processing or\nanalytics workloads, but not both.\nSome databases, such as Microsoft SQL Server and SAP HANA, have support for\ntransaction processing and data warehousing in the same product. However, they are\nincreasingly becoming two separate storage and query engines, which happen to be\naccessible through a common SQL interface [ 49, 50, 51].\nData warehouse vendors such as Teradata, Vertica, SAP HANA, and ParAccel typi\u2010\ncally sell their systems under expensive commercial licenses. Amazon RedShift is a\nhosted version of ParAccel. More recently, a plethora of open source SQL-on-\nHadoop projects have emerged; they are young but aiming to compete with commer\u2010\ncial data warehouse systems. These include Apache Hive, Spark SQL, Cloudera\nImpala, Facebook Presto, Apache Tajo, and Apache Drill [ 52, 53]. Some of them are\nbased on ideas from Google\u2019s Dremel [ 54].\nStars and Snowflakes: Schemas for Analytics\nAs explored in Chapter 2 , a wide range of different data models are used in the realm\nof transaction processing, depending on the needs of the application. On the other\nhand, in analytics, there is much less diversity of data models. Many data warehouses\nare used in a fairly formulaic style, known as a star schema  (also known as dimen\u2010\nsional modeling  [55]).\nThe example schema in Figure 3-9  shows a data warehouse that might be found at a\ngrocery retailer. At the center of the schema is a so-called fact table  (in this example,\nit is called fact_sales ). Each row of the fact table represents an event that occurred\nat a particular time (here, each row represents a customer\u2019s purchase of a product). If\nwe were analyzing website traffic rather than retail sales, each row might represent a\npage view or a click by a user.\nTransaction Processing or Analytics? | 93\n",
    "summary": "The text discusses the divergence between OLTP and data warehousing, highlighting schema design (star schema) and the emergence of SQL-on-Hadoop projects like Hive and Presto.",
    "sample_answer": "\u201cOkay, so the key takeaway here is the fundamental difference in query patterns driving the design of these systems. Data warehouses, unlike OLTP databases, are optimized for analytical queries, typically involving aggregations and scans of large datasets. This leads to the common use of a star schema, where you have a central fact table (like `fact_sales`) surrounded by dimension tables \u2013 in our example, the retailer\u2019s sales data would be organized using dimensions like `customer`, `product`, and `time`.  The rise of SQL-on-Hadoop projects like Hive and Presto demonstrates a shift towards leveraging distributed processing for these analytical workloads, potentially using techniques inspired by Google's Dremel. \u201c",
    "potential_interview_question": "\u201cLet\u2019s say you\u2019re designing a data warehouse for a large e-commerce company. Describe the key considerations you\u2019d have when choosing between a traditional commercial data warehouse system and a SQL-on-Hadoop solution, focusing on factors like query performance, scalability, and cost. How would you address potential schema drift, particularly if the business requirements for analytics change over time?\""
  },
  {
    "chunk": "Figure 3-9. Example of a star schema for use in a data warehouse.\nUsually, facts are captured as individual events, because this allows maximum flexi\u2010\nbility of analysis later. However, this means that the fact table can become extremely\nlarge. A big enterprise like Apple, Walmart, or eBay may have tens of petabytes of\ntransaction history in its data warehouse, most of which is in fact tables [ 56].\nSome of the columns in the fact table are attributes, such as the price at which the\nproduct was sold and the cost of buying it from the supplier (allowing the profit mar\u2010\ngin to be calculated). Other columns in the fact table are foreign key references to\nother tables, called dimension tables . As each row in the fact table represents an event,\nthe dimensions represent the who, what , where , when , how, and why of the event.\nFor example, in Figure 3-9 , one of the dimensions is the product that was sold. Each\nrow in the dim_product  table represents one type of product that is for sale, including\n94 | Chapter 3: Storage and Retrieval\n",
    "summary": "The text discusses a star schema design for a data warehouse, highlighting the challenges of large fact tables and the use of dimension tables for context.",
    "sample_answer": "\u201cOkay, let\u2019s consider the implications of this star schema design. The text highlights the potential for fact tables to grow to petabytes in size, which immediately brings up scalability concerns \u2013 we\u2019d likely need to explore sharding strategies within the fact tables to distribute the data across multiple nodes. Furthermore, the use of dimension tables like `dim_product` allows us to efficiently query for sales by product, but it also introduces the need for robust dimension schema evolution strategies to handle changes in product attributes over time \u2013 a common challenge in retail environments.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where a large fact table in a data warehouse could become a bottleneck. What techniques could you employ to mitigate this, and how would you approach handling changes to the dimension tables over time?\u201d"
  },
  {
    "chunk": "its stock-keeping unit (SKU), description, brand name, category, fat content, package\nsize, etc. Each row in the fact_sales  table uses a foreign key to indicate which prod\u2010\nuct was sold in that particular transaction. (For simplicity, if the customer buys sev\u2010\neral different products at once, they are represented as separate rows in the fact\ntable.)\nEven date and time are often represented using dimension tables, because this allows\nadditional information about dates (such as public holidays) to be encoded, allowing\nqueries to differentiate between sales on holidays and non-holidays.\nThe name \u201cstar schema\u201d comes from the fact that when the table relationships are\nvisualized, the fact table is in the middle, surrounded by its dimension tables; the\nconnections to these tables are like the rays of a star.\nA variation of this template is known as the snowflake schema , where dimensions are\nfurther broken down into subdimensions. For example, there could be separate tables\nfor brands and product categories, and each row in the dim_product  table could ref\u2010\nerence the brand and category as foreign keys, rather than storing them as strings in\nthe dim_product  table. Snowflake schemas are more normalized than star schemas,\nbut star schemas are often preferred because they are simpler for analysts to work\nwith [ 55].\nIn a typical data warehouse, tables are often very wide: fact tables often have over 100\ncolumns, sometimes several hundred [ 51]. Dimension tables can also be very wide, as\nthey include all the metadata that may be relevant for analysis\u2014for example, the\ndim_store  table may include details of which services are offered at each store,\nwhether it has an in-store bakery, the square footage, the date when the store was first\nopened, when it was last remodeled, how far it is from the nearest highway, etc. \nColumn-Oriented Storage\nIf you have trillions of rows and petabytes of data in your fact tables, storing and\nquerying them efficiently becomes a challenging problem. Dimension tables are usu\u2010\nally much smaller (millions of rows), so in this section we will concentrate primarily\non storage of facts.\nAlthough fact tables are often over 100 columns wide, a typical data warehouse query\nonly accesses 4 or 5 of them at one time ( \"SELECT *\"  queries are rarely needed for\nanalytics) [ 51]. Take the query in Example 3-1 : it accesses a large number of rows\n(every occurrence of someone buying fruit or candy during the 2013 calendar year),\nbut it only needs to access three columns of the fact_sales  table: date_key ,\nproduct_sk , and quantity . The query ignores all other columns.\nColumn-Oriented Storage | 95\n",
    "summary": "The chunk describes a star and snowflake schema for data warehousing, highlighting trade-offs in query performance and data normalization. It also introduces column-oriented storage as a solution for large fact tables.",
    "sample_answer": "\u201cOkay, so we're dealing with a classic data warehousing scenario. The star schema, with its central fact table surrounded by dimension tables, is a common starting point for analytical queries, as evidenced by the example query only accessing a small subset of columns. However, as the data volume grows\u2014specifically, with fact tables potentially containing hundreds of columns\u2014traditional row-oriented storage becomes a bottleneck. Column-oriented storage, which organizes data by column rather than row, addresses this problem by allowing queries to only scan the relevant columns, significantly improving performance for analytical queries like the one illustrated.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019ve designed a data warehouse schema based on the star schema described in this chunk. As the business grows and the fact table starts to exceed 200 columns and contains 100TB of data, what trade-offs are you considering in terms of storage and query performance, and what architectural changes would you recommend to maintain efficient analytics?\u201d"
  },
  {
    "chunk": "Writing to Column-Oriented Storage\nThese optimizations make sense in data warehouses, because most of the load con\u2010\nsists of large read-only queries run by analysts. Column-oriented storage, compres\u2010\nsion, and sorting all help to make those read queries faster. However, they have the\ndownside of making writes more difficult.\nAn update-in-place approach, like B-trees use, is not possible with compressed col\u2010\numns. If you wanted to insert a row in the middle of a sorted table, you would most\nlikely have to rewrite all the column files. As rows are identified by their position\nwithin a column, the insertion has to update all columns consistently.\nFortunately, we have already seen a good solution earlier in this chapter: LSM-trees.\nAll writes first go to an in-memory store, where they are added to a sorted structure\nand prepared for writing to disk. It doesn\u2019t matter whether the in-memory store is\nrow-oriented or column-oriented. When enough writes have accumulated, they are\nmerged with the column files on disk and written to new files in bulk. This is essen\u2010\ntially what Vertica does [ 62].\nQueries need to examine both the column data on disk and the recent writes in mem\u2010\nory, and combine the two. However, the query optimizer hides this distinction from\nthe user. From an analyst\u2019s point of view, data that has been modified with inserts,\nupdates, or deletes is immediately reflected in subsequent queries. \nAggregation: Data Cubes and Materialized Views\nNot every data warehouse is necessarily a column store: traditional row-oriented\ndatabases and a few other architectures are also used. However, columnar storage can\nbe significantly faster for ad hoc analytical queries, so it is rapidly gaining popularity\n[51, 63].\nAnother aspect of data warehouses that is worth mentioning briefly is materialized\naggregates . As discussed earlier, data warehouse queries often involve an aggregate\nfunction, such as COUNT , SUM, AVG, MIN, or MAX in SQL. If the same aggregates are used\nby many different queries, it can be wasteful to crunch through the raw data every\ntime. Why not cache some of the counts or sums that queries use most often?\nOne way of creating such a cache is a materialized view . In a relational data model, it\nis often defined like a standard (virtual) view: a table-like object whose contents are\nthe results of some query. The difference is that a materialized view is an actual copy\nof the query results, written to disk, whereas a virtual view is just a shortcut for writ\u2010\ning queries. When you read from a virtual view, the SQL engine expands it into the\nview\u2019s underlying query on the fly and then processes the expanded query.\nWhen the underlying data changes, a materialized view needs to be updated, because\nit is a denormalized copy of the data. The database can do that automatically, but\nColumn-Oriented Storage | 101\n",
    "summary": "The chunk discusses column-oriented storage, LSM-trees, and materialized views, highlighting trade-offs in write performance versus read performance and the need for strategies to optimize analytical queries.",
    "sample_answer": "\u201cOkay, let's break this down. Column-oriented storage, like that used by Vertica, is really effective for analytical workloads because it prioritizes read performance through compression and sorting. However, updates are significantly more complex \u2013 you essentially have to rewrite column files, which is a bottleneck. The use of LSM-trees \u2013 initially writing to an in-memory sorted structure and then merging with column files on disk \u2013 addresses this by decoupling write and read operations.  Moreover, the concept of materialized views \u2013 caching pre-computed aggregates like sums or counts \u2013 directly addresses query optimization, mirroring the chunk's suggestion that the query optimizer hides the complexity of these underlying strategies from the end-user. This aligns with a focus on minimizing latency for commonly used analytical queries.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a data warehouse for a large e-commerce company.  Given the chunk\u2019s discussion of column-oriented storage and materialized views, how would you balance the performance requirements of analytical queries (like calculating monthly sales trends) with the operational challenges of maintaining a column-oriented storage system and ensuring the freshness of your aggregate data?\u201d"
  },
  {
    "chunk": "such updates make writes more expensive, which is why materialized views are not\noften used in OLTP databases. In read-heavy data warehouses they can make more\nsense (whether or not they actually improve read performance depends on the indi\u2010\nvidual case).\nA common special case of a materialized view is known as a data cube  or OLAP cube\n[64]. It is a grid of aggregates grouped by different dimensions. Figure 3-12  shows an\nexample.\nFigure 3-12. Two dimensions of a data cube, aggregating data by summing.\nImagine for now that each fact has foreign keys to only two dimension tables\u2014in\nFigure 3-12 , these are date  and product . You can now draw a two-dimensional table,\nwith dates along one axis and products along the other. Each cell contains the aggre\u2010\ngate (e.g., SUM) of an attribute (e.g., net_price ) of all facts with that date-product\ncombination. Then you can apply the same aggregate along each row or column and\nget a summary that has been reduced by one dimension (the sales by product regard\u2010\nless of date, or the sales by date regardless of product).\nIn general, facts often have more than two dimensions. In Figure 3-9  there are five\ndimensions: date, product, store, promotion, and customer. It\u2019s a lot harder to imag\u2010\nine what a five-dimensional hypercube would look like, but the principle remains the\nsame: each cell contains the sales for a particular date-product-store-promotion-\ncustomer combination. These values can then repeatedly be summarized along each\nof the dimensions.\nThe advantage of a materialized data cube is that certain queries become very fast\nbecause they have effectively been precomputed. For example, if you want to know\n102 | Chapter 3: Storage and Retrieval\n",
    "summary": "The text discusses materialized views and data cubes for optimizing queries in data warehouses by precomputing aggregations across multiple dimensions.",
    "sample_answer": "\u201cOkay, so we\u2019re looking at how to optimize query performance in a data warehouse scenario. Materialized views, particularly data cubes or OLAP cubes, represent a key architectural pattern here. The core idea is to precompute aggregates \u2013 like sums \u2013 across multiple dimensions, essentially building a pre-aggregated table. This approach leverages the concept of data cubes, which are grid-based structures where each cell holds an aggregate value, reducing the need for real-time calculations when querying. For example, we could pre-aggregate sales by date and product to speed up queries needing those specific combinations.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re designing a reporting system that frequently needs to analyze sales data by product, region, and time period. Describe how you might approach this using a materialized view \u2013 specifically, how would you design the data cube, considering factors like the number of dimensions and potential performance trade-offs?\u201d"
  },
  {
    "chunk": "[41] Michael Stonebraker, Samuel Madden, Daniel J. Abadi, et al.: \u201c The End of an\nArchitectural Era (It\u2019s Time for a Complete Rewrite) ,\u201d at 33rd International Confer\u2010\nence on Very Large Data Bases  (VLDB), September 2007.\n[42] \u201cVoltDB Technical Overview White Paper ,\u201d VoltDB, 2014.\n[43] Stephen M. Rumble, Ankita Kejriwal, and John K. Ousterhout: \u201c Log-Structured\nMemory for DRAM-Based Storage ,\u201d at 12th USENIX Conference on File and Storage\nTechnologies  (FAST), February 2014.\n[44] Stavros Harizopoulos, Daniel J. Abadi, Samuel Madden, and Michael Stone\u2010\nbraker: \u201c OLTP Through the Looking Glass, and What We Found There ,\u201d at ACM\nInternational Conference on Management of Data  (SIGMOD), June 2008. doi:\n10.1145/1376616.1376713\n[45] Justin DeBrabant, Andrew Pavlo, Stephen Tu, et al.: \u201c Anti-Caching: A New\nApproach to Database Management System Architecture ,\u201d Proceedings of the VLDB\nEndowment , volume 6, number 14, pages 1942\u20131953, September 2013.\n[46] Joy Arulraj, Andrew Pavlo, and Subramanya R. Dulloor: \u201c Let\u2019s Talk About Stor\u2010\nage & Recovery Methods for Non-Volatile Memory Database Systems ,\u201d at ACM\nInternational Conference on Management of Data  (SIGMOD), June 2015. doi:\n10.1145/2723372.2749441\n[47] Edgar F. Codd, S. B. Codd, and C. T. Salley: \u201c Providing OLAP to User-Analysts:\nAn IT Mandate ,\u201d E. F. Codd Associates, 1993.\n[48] Surajit Chaudhuri and Umeshwar Dayal: \u201c An Overview of Data Warehousing\nand OLAP Technology ,\u201d ACM SIGMOD Record , volume 26, number 1, pages 65\u201374,\nMarch 1997. doi:10.1145/248603.248616\n[49] Per-\u00c5ke Larson, Cipri Clinciu, Campbell Fraser, et al.: \u201c Enhancements to SQL\nServer Column Stores ,\u201d at ACM International Conference on Management of Data\n(SIGMOD), June 2013.\n[50] Franz F\u00e4rber, Norman May, Wolfgang Lehner, et al.: \u201c The SAP HANA Database\n\u2013 An Architecture Overview ,\u201d IEEE Data Engineering Bulletin , volume 35, number 1,\npages 28\u201333, March 2012.\n[51] Michael Stonebraker: \u201c The Traditional RDBMS Wisdom Is (Almost Certainly)\nAll Wrong ,\u201d presentation at EPFL , May 2013.\n[52] Daniel J. Abadi: \u201c Classifying the SQL-on-Hadoop Solutions ,\u201d hadapt.com , Octo\u2010\nber 2, 2013.\n[53] Marcel Kornacker, Alexander Behm, Victor Bittorf, et al.: \u201c Impala: A Modern,\nOpen-Source SQL Engine for Hadoop ,\u201d at 7th Biennial Conference on Innovative\nData Systems Research  (CIDR), January 2015.\nSummary | 107\n",
    "summary": "The text discusses historical shifts in database architecture, focusing on challenges with traditional RDBMS and emerging approaches like column-store databases (SAP HANA) and SQL-on-Hadoop solutions (Impala).",
    "sample_answer": "\u201cThis collection of papers highlights a significant evolution in database technology. The Stonebraker papers, particularly the 2007 VLDB presentation, directly challenge the traditional RDBMS model, arguing that its assumptions are often \u2018almost certainly wrong\u2019 \u2013 a key point for understanding why newer systems like HANA and Impala emerged.  The shift toward column-store databases, as demonstrated in the SAP HANA architecture, represents a deliberate move to improve performance for analytical workloads, acknowledging the limitations of row-based systems for tasks like aggregation and reporting.  Furthermore, the discussion of Impala demonstrates the attempt to bring SQL capabilities to the Hadoop ecosystem, illustrating a pragmatic response to the challenges of scaling analytical queries.\u201d",
    "potential_interview_question": "\u201cDescribe the trade-offs inherent in transitioning from a traditional RDBMS to a column-store database like SAP HANA. What factors should be considered when evaluating this type of architectural shift for a business intelligence application?\u201d"
  },
  {
    "chunk": "[54] Sergey Melnik, Andrey Gubarev, Jing Jing Long, et al.: \u201c Dremel: Interactive\nAnalysis of Web-Scale Datasets ,\u201d at 36th International Conference on Very Large Data\nBases  (VLDB), pages 330\u2013339, September 2010.\n[55] Ralph Kimball and Margy Ross: The Data Warehouse Toolkit: The Definitive\nGuide to Dimensional Modeling , 3rd edition. John Wiley & Sons, July 2013. ISBN:\n978-1-118-53080-1\n[56] Derrick Harris: \u201c Why Apple, eBay, and Walmart Have Some of the Biggest Data\nWarehouses You\u2019ve Ever Seen ,\u201d gigaom.com , March 27, 2013.\n[57] Julien Le Dem: \u201c Dremel Made Simple with Parquet ,\u201d blog.twitter.com , Septem\u2010\nber 11, 2013.\n[58] Daniel J. Abadi, Peter Boncz, Stavros Harizopoulos, et al.: \u201c The Design and\nImplementation of Modern Column-Oriented Database Systems ,\u201d Foundations and\nTrends in Databases , volume 5, number 3, pages 197\u2013280, December 2013. doi:\n10.1561/1900000024\n[59] Peter Boncz, Marcin Zukowski, and Niels Nes: \u201c MonetDB/X100: Hyper-\nPipelining Query Execution ,\u201d at 2nd Biennial Conference on Innovative Data Systems\nResearch  (CIDR), January 2005.\n[60] Jingren Zhou and Kenneth A. Ross: \u201c Implementing Database Operations Using\nSIMD Instructions ,\u201d at ACM International Conference on Management of Data  (SIG\u2010\nMOD), pages 145\u2013156, June 2002. doi:10.1145/564691.564709\n[61] Michael Stonebraker, Daniel J. Abadi, Adam Batkin, et al.: \u201c C-Store: A Column-\noriented DBMS ,\u201d at 31st International Conference on Very Large Data Bases  (VLDB),\npages 553\u2013564, September 2005.\n[62] Andrew Lamb, Matt Fuller, Ramakrishna Varadarajan, et al.: \u201c The Vertica Ana\u2010\nlytic Database: C-Store 7 Years Later ,\u201d Proceedings of the VLDB Endowment , volume\n5, number 12, pages 1790\u20131801, August 2012.\n[63] Julien Le Dem and Nong Li: \u201c Efficient Data Storage for Analytics with Apache\nParquet 2.0 ,\u201d at Hadoop Summit , San Jose, June 2014.\n[64] Jim Gray, Surajit Chaudhuri, Adam Bosworth, et al.: \u201c Data Cube: A Relational\nAggregation Operator Generalizing Group-By, Cross-Tab, and Sub-Totals ,\u201d Data\nMining and Knowledge Discovery , volume 1, number 1, pages 29\u201353, March 2007.\ndoi:10.1023/A:1009726021843\n108 | Chapter 3: Storage and Retrieval\n",
    "summary": "The text discusses the evolution of analytical database systems, including Dremel, column-oriented databases, and data warehousing techniques, with emphasis on storage formats like Parquet and aggregation operators like Data Cubes.",
    "sample_answer": "\u201cThis chunk highlights a progression in analytical database design, moving from interactive analysis systems like Dremel \u2013 which emphasized fast querying of web-scale data \u2013 towards more optimized storage solutions. The discussion of Parquet and Data Cubes points to a key trade-off: earlier systems often relied on inefficient aggregations like group-by, while modern columnar storage formats like Parquet allow for much more efficient query execution by pre-aggregating and filtering data at the column level, ultimately supporting faster and more cost-effective analytics.\u201d",
    "potential_interview_question": "\u201cDescribe the advantages and disadvantages of a columnar database compared to a row-oriented database, and give an example of a use case where a columnar database would be particularly well-suited.\u201d"
  },
  {
    "chunk": "CHAPTER 4\nEncoding and Evolution\nEverything changes and nothing stands still.\n\u2014Heraclitus of Ephesus, as quoted by Plato in Cratylus  (360 BCE)\nApplications inevitably change over time. Features are added or modified as new\nproducts are launched, user requirements become better understood, or business cir\u2010\ncumstances change. In Chapter 1  we introduced the idea of evolvability : we should\naim to build systems that make it easy to adapt to change (see \u201cEvolvability: Making\nChange Easy\u201d on page 21 ).\nIn most cases, a change to an application\u2019s features also requires a change to data that\nit stores: perhaps a new field or record type needs to be captured, or perhaps existing\ndata needs to be presented in a new way.\nThe data models we discussed in Chapter 2  have different ways of coping with such\nchange. Relational databases generally assume that all data in the database conforms\nto one schema: although that schema can be changed (through schema migrations;\ni.e., ALTER  statements), there is exactly one schema in force at any one point in time.\nBy contrast, schema-on-read (\u201cschemaless\u201d) databases don\u2019t enforce a schema, so the\ndatabase can contain a mixture of older and newer data formats written at different\ntimes (see \u201cSchema flexibility in the document model\u201d on page 39 ).\nWhen a data format or schema changes, a corresponding change to application code\noften needs to happen (for example, you add a new field to a record, and the applica\u2010\ntion code starts reading and writing that field). However, in a large application, code\nchanges often cannot happen instantaneously:\n111\n",
    "summary": "The text highlights the importance of evolvable systems and the challenges of schema changes in relational vs. schemaless databases, emphasizing the need for coordinated code and data changes.",
    "sample_answer": "\u201cThis chapter touches on a core principle in data engineering: the need for systems to gracefully handle schema evolution. We\u2019ve discussed that relational databases, with their \u2018schema-on-write\u2019 approach, often require a highly coordinated effort\u2014altering both the schema and the application code\u2014to accommodate changes.  Contrast this with schemaless databases, which offer greater flexibility but introduce a different set of challenges; without appropriate design, you risk data inconsistency.  Considering the CAP theorem, the choice of database architecture will heavily influence the tradeoffs in availability versus consistency as data evolves.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system that ingests customer data. The initial schema defines \u2018customer_id\u2019 as an integer. Later, you discover that user IDs are now long strings due to a change in the CRM system. How would you approach handling this schema evolution, considering potential impacts on downstream systems that rely on the original integer ID? What trade-offs would you consider?\u201d"
  },
  {
    "chunk": "\u2022With server-side applications you may want to perform a rolling upgrade  (also\nknown as a staged rollout ), deploying the new version to a few nodes at a time,\nchecking whether the new version is running smoothly, and gradually working\nyour way through all the nodes. This allows new versions to be deployed without\nservice downtime, and thus encourages more frequent releases and better evolva\u2010\nbility.\n\u2022With client-side applications you\u2019re at the mercy of the user, who may not install\nthe update for some time.\nThis means that old and new versions of the code, and old and new data formats,\nmay potentially all coexist in the system at the same time. In order for the system to\ncontinue running smoothly, we need to maintain compatibility in both directions:\nBackward compatibility\nNewer code can read data that was written by older code.\nForward compatibility\nOlder code can read data that was written by newer code.\nBackward compatibility is normally not hard to achieve: as author of the newer code,\nyou know the format of data written by older code, and so you can explicitly handle it\n(if necessary by simply keeping the old code to read the old data). Forward compati\u2010\nbility can be trickier, because it requires older code to ignore additions made by a\nnewer version of the code.\nIn this chapter we will look at several formats for encoding data, including JSON,\nXML, Protocol Buffers, Thrift, and Avro. In particular, we will look at how they han\u2010\ndle schema changes and how they support systems where old and new data and code\nneed to coexist. We will then discuss how those formats are used for data storage and\nfor communication: in web services, Representational State Transfer (REST), and\nremote procedure calls (RPC), as well as message-passing systems such as actors and\nmessage queues.\nFormats for Encoding Data\nPrograms usually work with data in (at least) two different representations:\n1.In memory, data is kept in objects, structs, lists, arrays, hash tables, trees, and so\non. These data structures are optimized for efficient access and manipulation by\nthe CPU (typically using pointers).\n2.When you want to write data to a file or send it over the network, you have to\nencode it as some kind of self-contained sequence of bytes (for example, a JSON\ndocument). Since a pointer wouldn\u2019t make sense to any other process, this\n112 | Chapter 4: Encoding and Evolution\n",
    "summary": "The chunk discusses staged rollouts for application upgrades and the need for backward and forward compatibility when managing evolving data formats and code versions.",
    "sample_answer": "\u201cOkay, this section highlights a crucial aspect of maintaining availability in a continuously evolving system. The staged rollout approach, similar to a rolling update, is a classic technique for minimizing downtime during upgrades, aligning with principles of gradual deployment and reducing risk.  Regarding compatibility, the requirement for both backward and forward compatibility \u2013 particularly when dealing with formats like JSON, Protocol Buffers, or Avro \u2013 speaks to the challenges of maintaining a system with potentially divergent code versions consuming and producing data.  This concept relates directly to the CAP theorem and the need for a system that guarantees strong consistency, requiring careful schema management and potentially leveraging techniques like data versioning or schema evolution strategies to accommodate differing needs.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re deploying a new version of a service that reads and writes data. What strategies would you employ to ensure a smooth rollout, considering the potential for divergent data formats and code versions?  Discuss the trade-offs involved in different approaches to maintaining backward and forward compatibility, and how you might use technologies like Protocol Buffers or Avro to mitigate risk.\u201d"
  },
  {
    "chunk": "i. With the exception of some special cases, such as certain memory-mapped files or when operating directly\non compressed data (as described in \u201cColumn Compression\u201d on page 97 ).\nii. Note that encoding  has nothing to do with encryption . We don\u2019t discuss encryption in this book.\nsequence-of-bytes representation looks quite different from the data structures\nthat are normally used in memory.i\nThus, we need some kind of translation between the two representations. The trans\u2010\nlation from the in-memory representation to a byte sequence is called encoding  (also\nknown as serialization  or marshalling ), and the reverse is called decoding  (parsing ,\ndeserialization , unmarshalling ).ii\nTerminology clash\nSerialization  is unfortunately also used in the context of transac\u2010\ntions (see Chapter 7 ), with a completely different meaning. To\navoid overloading the word we\u2019ll stick with encoding  in this book,\neven though serialization  is perhaps a more common term.\nAs this is such a common problem, there are a myriad different libraries and encod\u2010\ning formats to choose from. Let\u2019s do a brief overview.\nLanguage-Specific Formats\nMany programming languages come with built-in support for encoding in-memory\nobjects into byte sequences. For example, Java has java.io.Serializable  [1], Ruby\nhas Marshal  [2], Python has pickle  [3], and so on. Many third-party libraries also\nexist, such as Kryo for Java [ 4].\nThese encoding libraries are very convenient, because they allow in-memory objects\nto be saved and restored with minimal additional code. However, they also have a\nnumber of deep problems:\n\u2022The encoding is often tied to a particular programming language, and reading\nthe data in another language is very difficult. If you store or transmit data in such\nan encoding, you are committing yourself to your current programming lan\u2010\nguage for potentially a very long time, and precluding integrating your systems\nwith those of other organizations (which may use different languages).\n\u2022In order to restore data in the same object types, the decoding process needs to\nbe able to instantiate arbitrary classes. This is frequently a source of security\nproblems [ 5]: if an attacker can get your application to decode an arbitrary byte\nsequence, they can instantiate arbitrary classes, which in turn often allows them\nto do terrible things such as remotely executing arbitrary code [ 6, 7].\nFormats for Encoding Data | 113\n",
    "summary": "The text highlights the challenges of encoding and decoding data between in-memory representations and byte sequences, emphasizing the risks associated with language-specific encoding libraries.",
    "sample_answer": "\u201cWhen designing data pipelines, it\u2019s crucial to consider how data is encoded and decoded. Using language-specific encoding libraries like Java\u2019s `java.io.Serializable` introduces tight coupling and potential security vulnerabilities \u2013 an attacker could potentially instantiate arbitrary classes when decoding, leading to code execution. A more robust approach would be to utilize a platform-agnostic encoding format like Protocol Buffers or Apache Avro, which provide schema evolution capabilities and reduce the risk of these vulnerabilities.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where using a language-specific encoding library could introduce a significant security risk in a data pipeline. What are the potential mitigation strategies?\u201d"
  },
  {
    "chunk": "\u2022Versioning data is often an afterthought in these libraries: as they are intended\nfor quick and easy encoding of data, they often neglect the inconvenient prob\u2010\nlems of forward and backward compatibility.\n\u2022Efficiency (CPU time taken to encode or decode, and the size of the encoded\nstructure) is also often an afterthought. For example, Java\u2019s built-in serialization\nis notorious for its bad performance and bloated encoding [ 8].\nFor these reasons it\u2019s generally a bad idea to use your language\u2019s built-in encoding for\nanything other than very transient purposes.\nJSON, XML, and Binary Variants\nMoving to standardized encodings that can be written and read by many program\u2010\nming languages, JSON and XML are the obvious contenders. They are widely known,\nwidely supported, and almost as widely disliked. XML is often criticized for being too\nverbose and unnecessarily complicated [ 9]. JSON\u2019s popularity is mainly due to its\nbuilt-in support in web browsers (by virtue of being a subset of JavaScript) and sim\u2010\nplicity relative to XML. CSV is another popular language-independent format, albeit\nless powerful.\nJSON, XML, and CSV are textual formats, and thus somewhat human-readable\n(although the syntax is a popular topic of debate). Besides the superficial syntactic\nissues, they also have some subtle problems:\n\u2022There is a lot of ambiguity around the encoding of numbers. In XML and CSV,\nyou cannot distinguish between a number and a string that happens to consist of\ndigits (except by referring to an external schema). JSON distinguishes strings and\nnumbers, but it doesn\u2019t distinguish integers and floating-point numbers, and it\ndoesn\u2019t specify a precision.\nThis is a problem when dealing with large numbers; for example, integers greater\nthan 253 cannot be exactly represented in an IEEE 754 double-precision floating-\npoint number, so such numbers become inaccurate when parsed in a language\nthat uses floating-point numbers (such as JavaScript). An example of numbers\nlarger than 253 occurs on Twitter, which uses a 64-bit number to identify each\ntweet. The JSON returned by Twitter\u2019s API includes tweet IDs twice, once as a\nJSON number and once as a decimal string, to work around the fact that the\nnumbers are not correctly parsed by JavaScript applications [ 10].\n\u2022JSON and XML have good support for Unicode character strings (i.e., human-\nreadable text), but they don\u2019t support binary strings (sequences of bytes without\na character encoding). Binary strings are a useful feature, so people get around\nthis limitation by encoding the binary data as text using Base64. The schema is\nthen used to indicate that the value should be interpreted as Base64-encoded.\nThis works, but it\u2019s somewhat hacky and increases the data size by 33%.\n114 | Chapter 4: Encoding and Evolution\n",
    "summary": "The text highlights the challenges of data encoding, particularly regarding schema evolution, data representation ambiguities, and the need for strategies to handle binary data.",
    "sample_answer": "\u201cThis excerpt really underscores the importance of carefully considering schema evolution when choosing an encoding format. The issues with JSON and XML \u2013 specifically the inability to differentiate between integers and floating-point numbers \u2013 directly relates to the CAP theorem\u2019s implications for data consistency; if you\u2019re relying on a system like JavaScript to interpret the data, you\u2019re vulnerable to inaccuracies due to the lack of precise numeric representation.  Furthermore, the need to use Base64 encoding to handle binary data demonstrates a reactive approach\u2014it\u2019s a workaround to address a fundamental limitation, which points to a need for more robust data modeling strategies during the initial design phase.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system to ingest large-scale numerical data from a social media platform. Discuss potential schema evolution challenges you might face with JSON and how you might mitigate them, considering the platform's use of large numerical identifiers like tweet IDs. What trade-offs might you consider when choosing between different encoding formats?\u201d"
  },
  {
    "chunk": "\u2022There is optional schema support for both XML [ 11] and JSON [ 12]. These\nschema languages are quite powerful, and thus quite complicated to learn and\nimplement. Use of XML schemas is fairly widespread, but many JSON-based\ntools don\u2019t bother using schemas. Since the correct interpretation of data (such\nas numbers and binary strings) depends on information in the schema, applica\u2010\ntions that don\u2019t use XML/JSON schemas need to potentially hardcode the appro\u2010\npriate encoding/decoding logic instead.\n\u2022CSV does not have any schema, so it is up to the application to define the mean\u2010\ning of each row and column. If an application change adds a new row or column,\nyou have to handle that change manually. CSV is also a quite vague format (what\nhappens if a value contains a comma or a newline character?). Although its\nescaping rules have been formally specified [ 13], not all parsers implement them\ncorrectly.\nDespite these flaws, JSON, XML, and CSV are good enough for many purposes. It\u2019s\nlikely that they will remain popular, especially as data interchange formats (i.e., for\nsending data from one organization to another). In these situations, as long as people\nagree on what the format is, it often doesn\u2019t matter how pretty or efficient the format\nis. The difficulty of getting different organizations to agree on anything  outweighs\nmost other concerns.\nBinary encoding\nFor data that is used only internally within your organization, there is less pressure to\nuse a lowest-common-denominator encoding format. For example, you could choose\na format that is more compact or faster to parse. For a small dataset, the gains are\nnegligible, but once you get into the terabytes, the choice of data format can have a\nbig impact.\nJSON is less verbose than XML, but both still use a lot of space compared to binary\nformats. This observation led to the development of a profusion of binary encodings\nfor JSON (MessagePack, BSON, BJSON, UBJSON, BISON, and Smile, to name a few)\nand for XML (WBXML and Fast Infoset, for example). These formats have been\nadopted in various niches, but none of them are as widely adopted as the textual ver\u2010\nsions of JSON and XML.\nSome of these formats extend the set of datatypes (e.g., distinguishing integers and\nfloating-point numbers, or adding support for binary strings), but otherwise they\nkeep the JSON/XML data model unchanged. In particular, since they don\u2019t prescribe\na schema, they need to include all the object field names within the encoded data.\nThat is, in a binary encoding of the JSON document in Example 4-1 , they will need to\ninclude the strings userName , favoriteNumber , and interests  somewhere.\nFormats for Encoding Data | 115\n",
    "summary": "The text discusses schema evolution challenges with text-based formats (JSON, XML, CSV) and the trade-offs between using widely adopted but schema-less formats and more efficient binary encodings for internal data.",
    "sample_answer": "\u201cWhen dealing with data interchange, particularly between organizations, using schemas like JSON or XML is often necessary, but introduces complexity regarding schema evolution. For example, if a new field needs to be added, the schema must be updated and propagated, which could break existing applications. Conversely, for internal data, we can prioritize efficiency by employing binary encodings \u2013 formats like MessagePack \u2013 that don\u2019t require schema enforcement and can be more compact. This choice reflects a cost/performance trade-off, and the emphasis on widespread adoption suggests a focus on interoperability rather than raw efficiency.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you would choose a binary encoding format over a text-based format like JSON, and explain the potential challenges associated with your decision. How would you mitigate any risks related to maintaining compatibility with other systems?\u201d"
  },
  {
    "chunk": "Example 4-1. Example record which we will encode in several binary formats in this\nchapter\n{\n    \"userName\" : \"Martin\" ,\n    \"favoriteNumber\" : 1337,\n    \"interests\" : [\"daydreaming\" , \"hacking\" ]\n}\nLet\u2019s look at an example of MessagePack, a binary encoding for JSON. Figure 4-1\nshows the byte sequence that you get if you encode the JSON document in\nExample 4-1  with MessagePack [ 14]. The first few bytes are as follows:\n1.The first byte, 0x83 , indicates that what follows is an object (top four bits = 0x80 )\nwith three fields (bottom four bits = 0x03 ). (In case you\u2019re wondering what hap\u2010\npens if an object has more than 15 fields, so that the number of fields doesn\u2019t fit\nin four bits, it then gets a different type indicator, and the number of fields is\nencoded in two or four bytes.)\n2.The second byte, 0xa8 , indicates that what follows is a string (top four bits =\n0xa0 ) that is eight bytes long (bottom four bits = 0x08 ).\n3.The next eight bytes are the field name userName  in ASCII. Since the length was\nindicated previously, there\u2019s no need for any marker to tell us where the string\nends (or any escaping).\n4.The next seven bytes encode the six-letter string value Martin  with a prefix 0xa6 ,\nand so on.\nThe binary encoding is 66 bytes long, which is only a little less than the 81 bytes taken\nby the textual JSON encoding (with whitespace removed). All the binary encodings of\nJSON are similar in this regard. It\u2019s not clear whether such a small space reduction\n(and perhaps a speedup in parsing) is worth the loss of human-readability.\nIn the following sections we will see how we can do much better, and encode the\nsame record in just 32 bytes.\n116 | Chapter 4: Encoding and Evolution\n",
    "summary": "The text discusses encoding JSON data into binary formats like MessagePack, highlighting the size reduction and parsing speedup considerations. It touches upon schema evolution and the trade-offs between readability and efficiency.",
    "sample_answer": "\u201cThis illustrates a fundamental data engineering concern \u2013 serialization and deserialization. When dealing with data volumes, even a small reduction in the size of encoded records, like the 66-byte MessagePack version versus the 81-byte JSON, can lead to significant gains in storage costs and bandwidth consumption. Furthermore, the discussion about the length indicator and byte-counting highlights the need for careful schema design to avoid potential issues like schema drift \u2013 where the format of a field changes, requiring changes in the encoding scheme.\u201d",
    "potential_interview_question": "\u201cConsider a scenario where you need to efficiently store and transmit user profile data.  How would you approach the encoding of this data, considering factors like storage costs, parsing speed, and the potential for future schema changes?  What specific encoding techniques would you choose and why?\u201d"
  },
  {
    "chunk": "Figure 4-1. Example record ( Example 4-1 ) encoded using MessagePack.\nThrift and Protocol Buffers\nApache Thrift [ 15] and Protocol Buffers (protobuf) [ 16] are binary encoding libraries\nthat are based on the same principle. Protocol Buffers was originally developed at\nGoogle, Thrift was originally developed at Facebook, and both were made open\nsource in 2007\u201308 [ 17].\nBoth Thrift and Protocol Buffers require a schema for any data that is encoded. To\nencode the data in Example 4-1  in Thrift, you would describe the schema in the\nThrift interface definition language (IDL) like this:\nstruct Person {\n  1: required  string       userName ,\n  2: optional  i64          favoriteNumber ,\n  3: optional  list<string> interests\n}\nFormats for Encoding Data | 117\niii. Actually, it has three\u2014BinaryProtocol, CompactProtocol, and DenseProtocol\u2014although DenseProtocol\nis only supported by the C++ implementation, so it doesn\u2019t count as cross-language [ 18]. Besides those, it also\nhas two different JSON-based encoding formats [ 19]. What fun!The equivalent schema definition for Protocol Buffers looks very similar:\nmessage Person {\n    required  string user_name        = 1;\n    optional  int64  favorite_number  = 2;\n    repeated  string interests        = 3;\n}\nThrift and Protocol Buffers each come with a code generation tool that takes a\nschema definition like the ones shown here, and produces classes that implement the\nschema in various programming languages [ 18]. Your application code can call this\ngenerated code to encode or decode records of the schema.\nWhat does data encoded with this schema look like? Confusingly, Thrift has two dif\u2010\nferent binary encoding formats,iii called BinaryProtocol  and CompactProtocol , respec\u2010\ntively. Let\u2019s look at BinaryProtocol first. Encoding Example 4-1  in that format takes\n59 bytes, as shown in Figure 4-2  [19].\nFigure 4-2. Example record encoded using Thrift\u2019s BinaryProtocol.\n118 | Chapter 4: Encoding and Evolution\n",
    "summary": "The text discusses binary encoding libraries (Thrift and Protocol Buffers) and their schema-driven approach, highlighting the use of code generation and different encoding formats.",
    "sample_answer": "\u201cWhen designing data serialization, we need to consider the trade-offs between human-readability (like JSON) and efficiency. Binary formats like Protocol Buffers and Thrift, which utilize schema definition and code generation, offer significant performance improvements, especially for large-scale systems. The schema-driven approach, where we define the structure of our data upfront using a language like Protocol Buffers\u2019 `message` or Thrift\u2019s `struct`, allows for efficient encoding and decoding, and importantly enables data evolution by introducing new fields or modifying existing ones \u2013 a key consideration for long-lived systems.\u201d",
    "potential_interview_question": "\u201cLet's say we're building a system to ingest user profiles, and we're choosing between Protocol Buffers and JSON for serialization. What are the key factors you'd consider when making this decision, and how would you address potential schema evolution as the data model changes over time?\u201d"
  },
  {
    "chunk": "Similarly to Figure 4-1 , each field has a type annotation (to indicate whether it is a\nstring, integer, list, etc.) and, where required, a length indication (length of a string,\nnumber of items in a list). The strings that appear in the data (\u201cMartin\u201d, \u201cdaydream\u2010\ning\u201d, \u201chacking\u201d) are also encoded as ASCII (or rather, UTF-8), similar to before.\nThe big difference compared to Figure 4-1  is that there are no field names ( userName ,\nfavoriteNumber , interests ). Instead, the encoded data contains field tags , which are\nnumbers ( 1, 2, and 3). Those are the numbers that appear in the schema definition.\nField tags are like aliases for fields\u2014they are a compact way of saying what field we\u2019re\ntalking about, without having to spell out the field name.\nThe Thrift CompactProtocol encoding is semantically equivalent to BinaryProtocol,\nbut as you can see in Figure 4-3 , it packs the same information into only 34 bytes. It\ndoes this by packing the field type and tag number into a single byte, and by using\nvariable-length integers. Rather than using a full eight bytes for the number 1337, it is\nencoded in two bytes, with the top bit of each byte used to indicate whether there are\nstill more bytes to come. This means numbers between \u201364 and 63 are encoded in\none byte, numbers between \u20138192 and 8191 are encoded in two bytes, etc. Bigger\nnumbers use more bytes.\nFigure 4-3. Example record encoded using Thrift\u2019s CompactProtocol.\nFinally, Protocol Buffers (which has only one binary encoding format) encodes the\nsame data as shown in Figure 4-4 . It does the bit packing slightly differently, but is\nFormats for Encoding Data | 119\n",
    "summary": "The chunk discusses efficient data encoding techniques (CompactProtocol, Protocol Buffers) focusing on minimizing data size through variable-length integers and bit packing to optimize network transfer and storage.",
    "sample_answer": "\u201cThis illustrates a key consideration in data engineering: minimizing data size for efficient transmission and storage. Using CompactProtocol\u2019s variable-length integers, we\u2019re leveraging a technique similar to run-length encoding \u2013 where smaller numbers take fewer bytes, improving bandwidth and reducing storage costs. This is a fundamental design trade-off, especially when dealing with high-volume data streams, and aligns with principles of reducing latency and optimizing resource consumption.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system to send user profiles across a high-bandwidth network.  What encoding strategies would you consider, and why?  How might you balance data size reduction with processing overhead?\u201d"
  },
  {
    "chunk": "otherwise very similar to Thrift\u2019s CompactProtocol. Protocol Buffers fits the same\nrecord in 33 bytes.\nFigure 4-4. Example record encoded using Protocol Buffers.\nOne detail to note: in the schemas shown earlier, each field was marked either\nrequired  or optional , but this makes no difference to how the field is encoded\n(nothing in the binary data indicates whether a field was required). The difference is\nsimply that required  enables a runtime check that fails if the field is not set, which\ncan be useful for catching bugs.\nField tags and schema evolution\nWe said previously that schemas inevitably need to change over time. We call this\nschema evolution . How do Thrift and Protocol Buffers handle schema changes while\nkeeping backward and forward compatibility?\nAs you can see from the examples, an encoded record is just the concatenation of its\nencoded fields. Each field is identified by its tag number (the numbers 1, 2, 3 in the\nsample schemas) and annotated with a datatype (e.g., string or integer). If a field\nvalue is not set, it is simply omitted from the encoded record. From this you can see\nthat field tags are critical to the meaning of the encoded data. You can change the\nname of a field in the schema, since the encoded data never refers to field names, but\nyou cannot change a field\u2019s tag, since that would make all existing encoded data\ninvalid.\n120 | Chapter 4: Encoding and Evolution\n",
    "summary": "The chunk discusses schema evolution strategies in binary serialization formats (Protocol Buffers) focusing on tag-based identification and the implications for backward and forward compatibility.",
    "sample_answer": "\u201cOkay, so when dealing with binary serialization like Protocol Buffers, schema evolution is a critical consideration. The use of field tags is fundamental \u2013 they\u2019re the key to maintaining backward and forward compatibility. Because the encoded data doesn\u2019t contain field names, changing a field\u2019s name won\u2019t invalidate existing data, but changing its tag number will render all previous encoded records unusable. This approach aligns with the principles of avoiding data migration during schema changes.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re designing a system that uses Protocol Buffers for inter-service communication.  How would you ensure that older services can continue to receive messages generated by newer versions, and vice-versa?  Specifically, discuss the role of field tags and what potential pitfalls might arise if we change a tag number during the system\u2019s lifecycle.\u201d"
  },
  {
    "chunk": "You can add new fields to the schema, provided that you give each field a new tag\nnumber. If old code (which doesn\u2019t know about the new tag numbers you added)\ntries to read data written by new code, including a new field with a tag number it\ndoesn\u2019t recognize, it can simply ignore that field. The datatype annotation allows the\nparser to determine how many bytes it needs to skip. This maintains forward com\u2010\npatibility: old code can read records that were written by new code.\nWhat about backward compatibility? As long as each field has a unique tag number,\nnew code can always read old data, because the tag numbers still have the same\nmeaning. The only detail is that if you add a new field, you cannot make it required.\nIf you were to add a field and make it required, that check would fail if new code read\ndata written by old code, because the old code will not have written the new field that\nyou added. Therefore, to maintain backward compatibility, every field you add after\nthe initial deployment of the schema must be optional or have a default value.\nRemoving a field is just like adding a field, with backward and forward compatibility\nconcerns reversed. That means you can only remove a field that is optional (a\nrequired field can never be removed), and you can never use the same tag number\nagain (because you may still have data written somewhere that includes the old tag\nnumber, and that field must be ignored by new code). \nDatatypes and schema evolution\nWhat about changing the datatype of a field? That may be possible\u2014check the docu\u2010\nmentation for details\u2014but there is a risk that values will lose precision or get trunca\u2010\nted. For example, say you change a 32-bit integer into a 64-bit integer. New code can\neasily read data written by old code, because the parser can fill in any missing bits\nwith zeros. However, if old code reads data written by new code, the old code is still\nusing a 32-bit variable to hold the value. If the decoded 64-bit value won\u2019t fit in 32\nbits, it will be truncated.\nA curious detail of Protocol Buffers is that it does not have a list or array datatype,\nbut instead has a repeated  marker for fields (which is a third option alongside\nrequired  and optional ). As you can see in Figure 4-4 , the encoding of a repeated\nfield is just what it says on the tin: the same field tag simply appears multiple times in\nthe record. This has the nice effect that it\u2019s okay to change an optional  (single-\nvalued) field into a repeated  (multi-valued) field. New code reading old data sees a\nlist with zero or one elements (depending on whether the field was present); old code\nreading new data sees only the last element of the list.\nThrift has a dedicated list datatype, which is parameterized with the datatype of the\nlist elements. This does not allow the same evolution from single-valued to multi-\nvalued as Protocol Buffers does, but it has the advantage of supporting nested lists. \nFormats for Encoding Data | 121\n",
    "summary": "The chunk discusses schema evolution strategies, particularly around tag numbers for backward compatibility and the limitations of different encoding formats (Protocol Buffers vs. Thrift) in handling schema changes.",
    "sample_answer": "\u201cThis highlights a critical aspect of designing data systems \u2013 how to handle schema evolution gracefully. Maintaining backward compatibility through tag numbers is a standard pattern; we\u2019re essentially creating a mapping between old and new field representations. However, the limitations of Protocol Buffers, specifically the lack of native list support and the resulting inability to evolve from a single-valued to multi-valued field, underscores the importance of choosing the right serialization format based on anticipated future requirements. This ties into the CAP theorem \u2013 we\u2019re prioritizing consistency (backward compatibility) over availability in a specific way, and that decision has implications for the system\u2019s architecture.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a data pipeline that ingests data from a legacy system. The schema of the data is evolving rapidly. Describe your approach to handling schema changes, and explain how you would leverage concepts like tag numbers or alternative serialization formats like Protocol Buffers and Thrift to ensure data consistency and minimize disruption to downstream consumers.\u201d"
  },
  {
    "chunk": "Avro\nApache Avro [ 20] is another binary encoding format that is interestingly different\nfrom Protocol Buffers and Thrift. It was started in 2009 as a subproject of Hadoop, as\na result of Thrift not being a good fit for Hadoop\u2019s use cases [ 21].\nAvro also uses a schema to specify the structure of the data being encoded. It has two\nschema languages: one (Avro IDL) intended for human editing, and one (based on\nJSON) that is more easily machine-readable.\nOur example schema, written in Avro IDL, might look like this:\nrecord Person {\n    string               userName ;\n    union { null, long } favoriteNumber  = null;\n    array<string>        interests ;\n}\nThe equivalent JSON representation of that schema is as follows:\n{\n    \"type\": \"record\" ,\n    \"name\": \"Person\" ,\n    \"fields\" : [\n        {\"name\": \"userName\" ,       \"type\": \"string\" },\n        {\"name\": \"favoriteNumber\" , \"type\": [\"null\", \"long\"], \"default\" : null},\n        {\"name\": \"interests\" ,      \"type\": {\"type\": \"array\", \"items\": \"string\" }}\n    ]\n}\nFirst of all, notice that there are no tag numbers in the schema. If we encode our\nexample record ( Example 4-1 ) using this schema, the Avro binary encoding is just 32\nbytes long\u2014the most compact of all the encodings we have seen. The breakdown of\nthe encoded byte sequence is shown in Figure 4-5 .\nIf you examine the byte sequence, you can see that there is nothing to identify fields\nor their datatypes. The encoding simply consists of values concatenated together. A\nstring is just a length prefix followed by UTF-8 bytes, but there\u2019s nothing in the enco\u2010\nded data that tells you that it is a string. It could just as well be an integer, or some\u2010\nthing else entirely. An integer is encoded using a variable-length encoding (the same\nas Thrift\u2019s CompactProtocol).\n122 | Chapter 4: Encoding and Evolution\n",
    "summary": "This chunk discusses Avro, a binary encoding format with schema evolution capabilities, highlighting its compact encoding and schema definition using Avro IDL and JSON.",
    "sample_answer": "\u201cAvro\u2019s key strength here is its compact binary encoding, achieved by eliminating field tags and relying on length prefixes. This contrasts with Protocol Buffers or Thrift, where explicit tags add overhead. Furthermore, the schema evolution capabilities\u2014represented by the Avro IDL and JSON schema definitions\u2014allow us to handle schema drift gracefully, which is vital for long-lived data systems.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you might choose Avro over Protocol Buffers or Thrift for encoding data. Specifically, discuss the trade-offs related to schema evolution and data size.\u201d"
  },
  {
    "chunk": "Figure 4-5. Example record encoded using Avro.\nTo parse the binary data, you go through the fields in the order that they appear in\nthe schema and use the schema to tell you the datatype of each field. This means that\nthe binary data can only be decoded correctly if the code reading the data is using the\nexact same schema  as the code that wrote the data. Any mismatch in the schema\nbetween the reader and the writer would mean incorrectly decoded data.\nSo, how does Avro support schema evolution?\nThe writer\u2019s schema and the reader\u2019s schema\nWith Avro, when an application wants to encode some data (to write it to a file or\ndatabase, to send it over the network, etc.), it encodes the data using whatever version\nof the schema it knows about\u2014for example, that schema may be compiled into the\napplication. This is known as the writer\u2019s schema .\nWhen an application wants to decode some data (read it from a file or database,\nreceive it from the network, etc.), it is expecting the data to be in some schema, which\nis known as the reader\u2019s schema . That is the schema the application code is relying on\n\u2014code may have been generated from that schema during the application\u2019s build\nprocess.\nThe key idea with Avro is that the writer\u2019s schema and the reader\u2019s schema don\u2019t have\nto be the same \u2014they only need to be compatible. When data is decoded (read), the\nFormats for Encoding Data | 123\n",
    "summary": "The text discusses Avro\u2019s schema evolution mechanism, highlighting the importance of compatible writer and reader schemas to ensure data integrity. This relates to data consistency and handling schema drift.",
    "sample_answer": "\u201cAvro\u2019s approach to schema evolution is critical for building resilient data pipelines. The concept of having a \u2018writer\u2019s schema\u2019 and a \u2018reader\u2019s schema\u2019 allows for changes without requiring all consumers to be updated simultaneously. This is achieved by ensuring schema compatibility\u2014meaning the reader can understand the writer\u2019s data, even if the schema has evolved. This relates to the CAP theorem \u2013 specifically availability and consistency, as Avro helps manage data consistency across systems with differing schema versions.\u201d",
    "potential_interview_question": "\u201cDescribe how Avro\u2019s schema evolution mechanism addresses potential data inconsistencies in a distributed data system. How does it align with principles of data availability and consistency, and what potential challenges might arise when implementing it?\u201d"
  },
  {
    "chunk": "Avro library resolves the differences by looking at the writer\u2019s schema and the\nreader\u2019s schema side by side and translating the data from the writer\u2019s schema into\nthe reader\u2019s schema. The Avro specification [ 20] defines exactly how this resolution\nworks, and it is illustrated in Figure 4-6 .\nFor example, it\u2019s no problem if the writer\u2019s schema and the reader\u2019s schema have\ntheir fields in a different order, because the schema resolution matches up the fields\nby field name. If the code reading the data encounters a field that appears in the\nwriter\u2019s schema but not in the reader\u2019s schema, it is ignored. If the code reading the\ndata expects some field, but the writer\u2019s schema does not contain a field of that name,\nit is filled in with a default value declared in the reader\u2019s schema.\nFigure 4-6. An Avro reader resolves differences between the writer\u2019s schema and the\nreader\u2019s schema.\nSchema evolution rules\nWith Avro, forward compatibility means that you can have a new version of the\nschema as writer and an old version of the schema as reader. Conversely, backward\ncompatibility means that you can have a new version of the schema as reader and an\nold version as writer.\nTo maintain compatibility, you may only add or remove a field that has a default\nvalue. (The field favoriteNumber  in our Avro schema has a default value of null .)\nFor example, say you add a field with a default value, so this new field exists in the\nnew schema but not the old one. When a reader using the new schema reads a record\nwritten with the old schema, the default value is filled in for the missing field.\nIf you were to add a field that has no default value, new readers wouldn\u2019t be able to\nread data written by old writers, so you would break backward compatibility. If you\nwere to remove a field that has no default value, old readers wouldn\u2019t be able to read\ndata written by new writers, so you would break forward compatibility.\n124 | Chapter 4: Encoding and Evolution\n",
    "summary": "This chunk discusses schema evolution strategies within Avro, focusing on forward and backward compatibility achieved through default value handling.",
    "sample_answer": "\u201cAvro\u2019s schema resolution, as illustrated in Figure 4-6, is key to handling schema evolution. The core principle here is managing forward and backward compatibility\u2014allowing new readers to consume data written by older writers, and vice versa\u2014primarily through leveraging default values in the reader\u2019s schema. This addresses the CAP theorem concern around schema drift by providing a controlled mechanism for handling discrepancies between schemas, preventing data loss during consumption.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you might use default values in an Avro schema to maintain compatibility during schema evolution. How does this relate to the broader principles of designing resilient data pipelines?\u201d"
  },
  {
    "chunk": "iv. To be precise, the default value must be of the type of the first branch of the union, although this is a\nspecific limitation of Avro, not a general feature of union types.In some programming languages, null  is an acceptable default for any variable, but\nthis is not the case in Avro: if you want to allow a field to be null, you have to use a\nunion type . For example, union { null, long, string } field;  indicates that\nfield  can be a number, or a string, or null. You can only use null  as a default value if\nit is one of the branches of the union.iv This is a little more verbose than having every\u2010\nthing nullable by default, but it helps prevent bugs by being explicit about what can\nand cannot be null [ 22].\nConsequently, Avro doesn\u2019t have optional  and required  markers in the same way as\nProtocol Buffers and Thrift do (it has union types and default values instead).\nChanging the datatype of a field is possible, provided that Avro can convert the type.\nChanging the name of a field is possible but a little tricky: the reader\u2019s schema can\ncontain aliases for field names, so it can match an old writer\u2019s schema field names\nagainst the aliases. This means that changing a field name is backward compatible but\nnot forward compatible. Similarly, adding a branch to a union type is backward com\u2010\npatible but not forward compatible.\nBut what is the writer\u2019s schema?\nThere is an important question that we\u2019ve glossed over so far: how does the reader\nknow the writer\u2019s schema with which a particular piece of data was encoded? We\ncan\u2019t just include the entire schema with every record, because the schema would\nlikely be much bigger than the encoded data, making all the space savings from the\nbinary encoding futile.\nThe answer depends on the context in which Avro is being used. To give a few exam\u2010\nples:\nLarge file with lots of records\nA common use for Avro\u2014especially in the context of Hadoop\u2014is for storing a\nlarge file containing millions of records, all encoded with the same schema. (We\nwill discuss this kind of situation in Chapter 10 .) In this case, the writer of that\nfile can just include the writer\u2019s schema once at the beginning of the file. Avro\nspecifies a file format (object container files) to do this.\nDatabase with individually written records\nIn a database, different records may be written at different points in time using\ndifferent writer\u2019s schemas\u2014you cannot assume that all the records will have the\nsame schema. The simplest solution is to include a version number at the begin\u2010\nning of every encoded record, and to keep a list of schema versions in your data\u2010\nFormats for Encoding Data | 125\n",
    "summary": "The chunk discusses schema evolution strategies in Avro, highlighting the limitations and trade-offs of union types and versioning for schema compatibility.",
    "sample_answer": "\u201cAvro\u2019s schema evolution relies heavily on union types and versioning to handle changes over time. Because Avro doesn\u2019t have explicit \u2018optional\u2019 or \u2018required\u2019 markers like Protocol Buffers, we must use union types with default values. When dealing with large files encoded for Hadoop, we can include the writer\u2019s schema at the beginning of the file \u2013 this is a crucial architectural decision to ensure compatibility. However, if schemas are evolving independently, like in a database scenario, we need to incorporate version numbers into each record to maintain backwards compatibility, acknowledging that Avro\u2019s schema evolution is fundamentally about managing schema divergence.\u201d",
    "potential_interview_question": "\u201cAvro\u2019s schema evolution is a common challenge. Describe a scenario where you would utilize schema evolution strategies in Avro, and explain the specific techniques you'd employ, considering the potential trade-offs between backwards and forwards compatibility.\u201d"
  },
  {
    "chunk": "base. A reader can fetch a record, extract the version number, and then fetch the\nwriter\u2019s schema for that version number from the database. Using that writer\u2019s\nschema, it can decode the rest of the record. (Espresso [ 23] works this way, for\nexample.)\nSending records over a network connection\nWhen two processes are communicating over a bidirectional network connec\u2010\ntion, they can negotiate the schema version on connection setup and then use\nthat schema for the lifetime of the connection. The Avro RPC protocol (see\n\u201cDataflow Through Services: REST and RPC\u201d on page 131 ) works like this.\nA database of schema versions is a useful thing to have in any case, since it acts as\ndocumentation and gives you a chance to check schema compatibility [ 24]. As the\nversion number, you could use a simple incrementing integer, or you could use a\nhash of the schema.\nDynamically generated schemas\nOne advantage of Avro\u2019s approach, compared to Protocol Buffers and Thrift, is that\nthe schema doesn\u2019t contain any tag numbers. But why is this important? What\u2019s the\nproblem with keeping a couple of numbers in the schema?\nThe difference is that Avro is friendlier to dynamically generated  schemas. For exam\u2010\nple, say you have a relational database whose contents you want to dump to a file, and\nyou want to use a binary format to avoid the aforementioned problems with textual\nformats (JSON, CSV, SQL). If you use Avro, you can fairly easily generate an Avro\nschema (in the JSON representation we saw earlier) from the relational schema and\nencode the database contents using that schema, dumping it all to an Avro object\ncontainer file [ 25]. You generate a record schema for each database table, and each\ncolumn becomes a field in that record. The column name in the database maps to the\nfield name in Avro.\nNow, if the database schema changes (for example, a table has one column added and\none column removed), you can just generate a new Avro schema from the updated\ndatabase schema and export data in the new Avro schema. The data export process\ndoes not need to pay any attention to the schema change\u2014it can simply do the\nschema conversion every time it runs. Anyone who reads the new data files will see\nthat the fields of the record have changed, but since the fields are identified by name,\nthe updated writer\u2019s schema can still be matched up with the old reader\u2019s schema.\nBy contrast, if you were using Thrift or Protocol Buffers for this purpose, the field\ntags would likely have to be assigned by hand: every time the database schema\nchanges, an administrator would have to manually update the mapping from data\u2010\nbase column names to field tags. (It might be possible to automate this, but the\nschema generator would have to be very careful to not assign previously used field\n126 | Chapter 4: Encoding and Evolution\n",
    "summary": "The chunk discusses schema evolution in a data pipeline using Avro, emphasizing dynamic schema generation and compatibility, alongside the importance of network connections for schema negotiation.",
    "sample_answer": "\u201cThis design highlights a key challenge in building robust data pipelines \u2013 schema evolution. By leveraging Avro\u2019s dynamic schema generation, we can seamlessly adapt to changes in the source database schema without requiring manual intervention or re-encoding of existing data. This is particularly beneficial when migrating data from relational systems, as illustrated by generating an Avro schema directly from the relational database, aligning column names with Avro fields. The use of a bidirectional network connection, combined with schema negotiation via the Avro RPC protocol, creates a resilient data transfer layer, allowing for continuous schema compatibility checks and minimizing downtime during schema updates \u2013 aligning with the principles of availability and fault tolerance.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re building a data pipeline that ingests data from a relational database. The database schema evolves frequently, adding and removing columns. Describe how you would ensure compatibility between the data producers and consumers, referencing specific technologies or design patterns that would help you achieve this. What potential challenges might you encounter, and how would you address them?\u201d"
  },
  {
    "chunk": "tags.) This kind of dynamically generated schema simply wasn\u2019t a design goal of\nThrift or Protocol Buffers, whereas it was for Avro.\nCode generation and dynamically typed languages\nThrift and Protocol Buffers rely on code generation: after a schema has been defined,\nyou can generate code that implements this schema in a programming language of\nyour choice. This is useful in statically typed languages such as Java, C++, or C#,\nbecause it allows efficient in-memory structures to be used for decoded data, and it\nallows type checking and autocompletion in IDEs when writing programs that access\nthe data structures.\nIn dynamically typed programming languages such as JavaScript, Ruby, or Python,\nthere is not much point in generating code, since there is no compile-time type\nchecker to satisfy. Code generation is often frowned upon in these languages, since\nthey otherwise avoid an explicit compilation step. Moreover, in the case of a dynami\u2010\ncally generated schema (such as an Avro schema generated from a database table),\ncode generation is an unnecessarily obstacle to getting to the data.\nAvro provides optional code generation for statically typed programming languages,\nbut it can be used just as well without any code generation. If you have an object con\u2010\ntainer file (which embeds the writer\u2019s schema), you can simply open it using the Avro\nlibrary and look at the data in the same way as you could look at a JSON file. The file\nis self-describing  since it includes all the necessary metadata.\nThis property is especially useful in conjunction with dynamically typed data pro\u2010\ncessing languages like Apache Pig [ 26]. In Pig, you can just open some Avro files,\nstart analyzing them, and write derived datasets to output files in Avro format\nwithout even thinking about schemas. \nThe Merits of Schemas\nAs we saw, Protocol Buffers, Thrift, and Avro all use a schema to describe a binary\nencoding format. Their schema languages are much simpler than XML Schema or\nJSON Schema, which support much more detailed validation rules (e.g., \u201cthe string\nvalue of this field must match this regular expression\u201d or \u201cthe integer value of this\nfield must be between 0 and 100\u201d). As Protocol Buffers, Thrift, and Avro are simpler\nto implement and simpler to use, they have grown to support a fairly wide range of\nprogramming languages.\nThe ideas on which these encodings are based are by no means new. For example,\nthey have a lot in common with ASN.1, a schema definition language that was first\nstandardized in 1984 [ 27]. It was used to define various network protocols, and its\nbinary encoding (DER) is still used to encode SSL certificates (X.509), for example\n[28]. ASN.1 supports schema evolution using tag numbers, similar to Protocol Buf\u2010\nFormats for Encoding Data | 127\n",
    "summary": "The chunk discusses schema evolution strategies in binary data formats (Avro, Protocol Buffers, Thrift) and their use in conjunction with dynamically typed languages like Apache Pig, highlighting the importance of schema evolution and its impact on data processing.",
    "sample_answer": "\u201cOkay, so when designing data pipelines, especially with evolving schemas, we need to consider strategies beyond just a rigid schema enforcement. Avro\u2019s approach, providing a self-describing file format, combined with technologies like Apache Pig, offers a flexible way to handle schema changes. The key here is the self-describing nature of the Avro file, which eliminates the need for a separate schema definition during runtime, particularly beneficial when working with dynamically typed languages. Furthermore, the similarities to ASN.1, and its use in encoding SSL certificates, demonstrate the foundational principles of schema design and the long-standing need for robust, adaptable binary formats for data representation \u2013 mirroring the core challenges we\u2019re addressing today.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say you\u2019re building a data pipeline that ingests data from a rapidly changing source. The schema for that data evolves frequently. Describe your approach to handling this evolution, referencing any specific technologies or concepts (like Avro\u2019s self-describing nature or schema evolution) you would consider.\u201d"
  },
  {
    "chunk": "fers and Thrift [ 29]. However, it\u2019s also very complex and badly documented, so\nASN.1 is probably not a good choice for new applications.\nMany data systems also implement some kind of proprietary binary encoding for\ntheir data. For example, most relational databases have a network protocol over\nwhich you can send queries to the database and get back responses. Those protocols\nare generally specific to a particular database, and the database vendor provides a\ndriver (e.g., using the ODBC or JDBC APIs) that decodes responses from the data\u2010\nbase\u2019s network protocol into in-memory data structures.\nSo, we can see that although textual data formats such as JSON, XML, and CSV are\nwidespread, binary encodings based on schemas are also a viable option. They have a\nnumber of nice properties:\n\u2022They can be much more compact than the various \u201cbinary JSON\u201d variants, since\nthey can omit field names from the encoded data.\n\u2022The schema is a valuable form of documentation, and because the schema is\nrequired for decoding, you can be sure that it is up to date (whereas manually\nmaintained documentation may easily diverge from reality).\n\u2022Keeping a database of schemas allows you to check forward and backward com\u2010\npatibility of schema changes, before anything is deployed.\n\u2022For users of statically typed programming languages, the ability to generate code\nfrom the schema is useful, since it enables type checking at compile time.\nIn summary, schema evolution allows the same kind of flexibility as schemaless/\nschema-on-read JSON databases provide (see \u201cSchema flexibility in the document\nmodel\u201d  on page 39), while also providing better guarantees about your data and bet\u2010\nter tooling. \nModes of Dataflow\nAt the beginning of this chapter we said that whenever you want to send some data to\nanother process with which you don\u2019t share memory\u2014for example, whenever you\nwant to send data over the network or write it to a file\u2014you need to encode it as a\nsequence of bytes. We then discussed a variety of different encodings for doing this.\nWe talked about forward and backward compatibility, which are important for evolv\u2010\nability (making change easy by allowing you to upgrade different parts of your system\nindependently, and not having to change everything at once). Compatibility is a rela\u2010\ntionship between one process that encodes the data, and another process that decodes\nit.\n128 | Chapter 4: Encoding and Evolution\n",
    "summary": "The chunk discusses schema evolution, binary encodings, and compatibility considerations within data systems, highlighting the trade-offs between textual and binary formats.",
    "sample_answer": "\u201cOkay, let\u2019s analyze this from a system design perspective. The passage emphasizes the importance of schema evolution and compatibility when building data pipelines. Using binary encodings, like those often found in relational databases and their associated protocols (e.g., ODBC, JDBC), allows us to achieve compact data representation and maintain backward compatibility \u2013 crucial for evolving systems. This aligns with the CAP theorem, where we might prioritize availability over strict consistency if necessary, and the data encoding choices directly impact how we handle potential conflicts or schema changes.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system that ingests data from multiple sources with potentially different schemas over time. How would you approach schema evolution to ensure compatibility between the ingestion process and the downstream data consumers, and what considerations would you prioritize given the information in this excerpt?\u201d"
  },
  {
    "chunk": "That\u2019s a fairly abstract idea\u2014there are many ways data can flow from one process to\nanother. Who encodes the data, and who decodes it? In the rest of this chapter we\nwill explore some of the most common ways how data flows between processes:\n\u2022Via databases (see \u201cDataflow Through Databases\u201d on page 129 )\n\u2022Via service calls (see \u201cDataflow Through Services: REST and RPC\u201d on page 131 )\n\u2022Via asynchronous message passing (see \u201cMessage-Passing Dataflow\u201d on page 136 )\nDataflow Through Databases\nIn a database, the process that writes to the database encodes the data, and the pro\u2010\ncess that reads from the database decodes it. There may just be a single process\naccessing the database, in which case the reader is simply a later version of the same\nprocess\u2014in that case you can think of storing something in the database as sending a\nmessage to your future self .\nBackward compatibility is clearly necessary here; otherwise your future self won\u2019t be\nable to decode what you previously wrote.\nIn general, it\u2019s common for several different processes to be accessing a database at\nthe same time. Those processes might be several different applications or services, or\nthey may simply be several instances of the same service (running in parallel for scal\u2010\nability or fault tolerance). Either way, in an environment where the application is\nchanging, it is likely that some processes accessing the database will be running newer\ncode and some will be running older code\u2014for example because a new version is cur\u2010\nrently being deployed in a rolling upgrade, so some instances have been updated\nwhile others haven\u2019t yet.\nThis means that a value in the database may be written by a newer  version of the\ncode, and subsequently read by an older  version of the code that is still running.\nThus, forward compatibility is also often required for databases.\nHowever, there is an additional snag. Say you add a field to a record schema, and the\nnewer code writes a value for that new field to the database. Subsequently, an older\nversion of the code (which doesn\u2019t yet know about the new field) reads the record,\nupdates it, and writes it back. In this situation, the desirable behavior is usually for\nthe old code to keep the new field intact, even though it couldn\u2019t be interpreted.\nThe encoding formats discussed previously support such preservation of unknown\nfields, but sometimes you need to take care at an application level, as illustrated in\nFigure 4-7 . For example, if you decode a database value into model objects in the\napplication, and later reencode those model objects, the unknown field might be lost\nin that translation process. Solving this is not a hard problem; you just need to be\naware of it.\nModes of Dataflow | 129\n",
    "summary": "The chunk discusses dataflow between processes via databases, highlighting the need for both forward and backward compatibility due to schema evolution and concurrent access.",
    "sample_answer": "\u201cOkay, this excerpt really underscores the challenges inherent in designing systems that rely on database interactions. We\u2019re seeing a critical need for both forward and backward compatibility \u2013 the newer version of the code needs to be able to understand data written by older versions, and vice versa. This relates directly to the CAP theorem, specifically availability, as multiple processes accessing the same database concurrently can introduce potential conflicts if we don\u2019t account for schema evolution.\u201d",
    "potential_interview_question": "\u201cImagine a scenario where you\u2019re designing a data pipeline that ingests events from multiple services. How would you approach ensuring data consistency and handling potential schema changes when reading data written by older versions of those services? Specifically, how would you mitigate the risk of losing information during the translation from database records to application-level model objects?\u201d"
  },
  {
    "chunk": "v. Except for MySQL, which often rewrites an entire table even though it is not strictly necessary, as men\u2010\ntioned in \u201cSchema flexibility in the document model\u201d on page 39 .\nFigure 4-7. When an older version of the application updates data previously written\nby a newer version of the application, data may be lost if you\u2019re not careful.\nDifferent values written at different times\nA database generally allows any value to be updated at any time. This means that\nwithin a single database you may have some values that were written five milli\u2010\nseconds ago, and some values that were written five years ago.\nWhen you deploy a new version of your application (of a server-side application, at\nleast), you may entirely replace the old version with the new version within a few\nminutes. The same is not true of database contents: the five-year-old data will still be\nthere, in the original encoding, unless you have explicitly rewritten it since then. This\nobservation is sometimes summed up as data outlives code .\nRewriting ( migrating ) data into a new schema is certainly possible, but it\u2019s an expen\u2010\nsive thing to do on a large dataset, so most databases avoid it if possible. Most rela\u2010\ntional databases allow simple schema changes, such as adding a new column with a\nnull  default value, without rewriting existing data.v When an old row is read, the\ndatabase fills in null s for any columns that are missing from the encoded data on\ndisk. LinkedIn\u2019s document database Espresso uses Avro for storage, allowing it to use\nAvro\u2019s schema evolution rules [ 23].\n130 | Chapter 4: Encoding and Evolution\n",
    "summary": "The chunk highlights the challenges of schema evolution in databases, particularly concerning data outliving code and the potential for expensive data rewriting, alongside the use of Avro for schema evolution.",
    "sample_answer": "\u201cThis situation demonstrates a crucial design consideration: data durability versus application agility. The fact that data can persist long after a code change highlights the need for strategies to manage schema evolution gracefully.  For example, LinkedIn\u2019s use of Avro \u2013 a serialization system with built-in schema evolution capabilities \u2013 suggests a proactive approach to handling schema drift. Without systems like Avro, simply rewriting the entire database upon a new code deployment would be incredibly inefficient, and likely lead to data loss if not handled carefully, demonstrating the importance of choosing technologies that support flexible data models.\u201d",
    "potential_interview_question": "\u201cImagine a scenario where a new version of a web application introduces a new data field.  How would you approach the challenge of integrating this new data into an existing database that contains years of historical data? What design choices would you consider, and can you give an example of a technology (like Avro) that could assist in this process?\u201d"
  },
  {
    "chunk": "Schema evolution thus allows the entire database to appear as if it was encoded with a\nsingle schema, even though the underlying storage may contain records encoded with\nvarious historical versions of the schema.\nArchival storage\nPerhaps you take a snapshot of your database from time to time, say for backup pur\u2010\nposes or for loading into a data warehouse (see \u201cData Warehousing\u201d  on page 91). In\nthis case, the data dump will typically be encoded using the latest schema, even if the\noriginal encoding in the source database contained a mixture of schema versions\nfrom different eras. Since you\u2019re copying the data anyway, you might as well encode\nthe copy of the data consistently.\nAs the data dump is written in one go and is thereafter immutable, formats like Avro\nobject container files are a good fit. This is also a good opportunity to encode the data\nin an analytics-friendly column-oriented format such as Parquet (see \u201cColumn Com\u2010\npression\u201d on page 97 ).\nIn Chapter 10  we will talk more about using data in archival storage. \nDataflow Through Services: REST and RPC\nWhen you have processes that need to communicate over a network, there are a few\ndifferent ways of arranging that communication. The most common arrangement is\nto have two roles: clients  and servers . The servers expose an API over the network,\nand the clients can connect to the servers to make requests to that API. The API\nexposed by the server is known as a service .\nThe web works this way: clients (web browsers) make requests to web servers, mak\u2010\ning GET requests to download HTML, CSS, JavaScript, images, etc., and making POST\nrequests to submit data to the server. The API consists of a standardized set of proto\u2010\ncols and data formats (HTTP, URLs, SSL/TLS, HTML, etc.). Because web browsers,\nweb servers, and website authors mostly agree on these standards, you can use any\nweb browser to access any website (at least in theory!).\nWeb browsers are not the only type of client. For example, a native app running on a\nmobile device or a desktop computer can also make network requests to a server, and\na client-side JavaScript application running inside a web browser can use\nXMLHttpRequest to become an HTTP client (this technique is known as Ajax  [30]).\nIn this case, the server\u2019s response is typically not HTML for displaying to a human,\nbut rather data in an encoding that is convenient for further processing by the client-\nside application code (such as JSON). Although HTTP may be used as the transport\nprotocol, the API implemented on top is application-specific, and the client and\nserver need to agree on the details of that API.\nModes of Dataflow | 131\n",
    "summary": "The text discusses schema evolution and dataflow strategies, including using Avro and Parquet for data dumps and leveraging REST/RPC for data communication.",
    "sample_answer": "\u201cOkay, let\u2019s think about how we handle schema evolution \u2013 the key here is maintaining a single, consistent view of the data, even if it\u2019s stored across different versions. We can achieve this by using formats like Avro, which allows for schema evolution without requiring changes to existing data, and then encoding the data dump in a columnar format like Parquet for analytics efficiency. Regarding dataflow, RESTful APIs with JSON payloads are commonly used for client-server communication, but it's crucial to define a specific, agreed-upon API to manage this interaction.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you need to archive a large dataset that has undergone significant schema changes over time. What technologies would you consider for the data dump and encoding, and why? How would you ensure the data is accessible for analytics?\u201d"
  },
  {
    "chunk": "Moreover, a server can itself be a client to another service (for example, a typical web\napp server acts as client to a database). This approach is often used to decompose a\nlarge application into smaller services by area of functionality, such that one service\nmakes a request to another when it requires some functionality or data from that\nother service. This way of building applications has traditionally been called a service-\noriented architecture  (SOA), more recently refined and rebranded as microservices\narchitecture  [31, 32].\nIn some ways, services are similar to databases: they typically allow clients to submit\nand query data. However, while databases allow arbitrary queries using the query lan\u2010\nguages we discussed in Chapter 2 , services expose an application-specific API that\nonly allows inputs and outputs that are predetermined by the business logic (applica\u2010\ntion code) of the service [ 33]. This restriction provides a degree of encapsulation:\nservices can impose fine-grained restrictions on what clients can and cannot do.\nA key design goal of a service-oriented/microservices architecture is to make the\napplication easier to change and maintain by making services independently deploya\u2010\nble and evolvable. For example, each service should be owned by one team, and that\nteam should be able to release new versions of the service frequently, without having\nto coordinate with other teams. In other words, we should expect old and new ver\u2010\nsions of servers and clients to be running at the same time, and so the data encoding\nused by servers and clients must be compatible across versions of the service API\u2014\nprecisely what we\u2019ve been talking about in this chapter.\nWeb services\nWhen HTTP is used as the underlying protocol for talking to the service, it is called a\nweb service . This is perhaps a slight misnomer, because web services are not only used\non the web, but in several different contexts. For example:\n1.A client application running on a user\u2019s device (e.g., a native app on a mobile\ndevice, or JavaScript web app using Ajax) making requests to a service over\nHTTP. These requests typically go over the public internet.\n2.One service making requests to another service owned by the same organization,\noften located within the same datacenter, as part of a service-oriented/microser\u2010\nvices architecture. (Software that supports this kind of use case is sometimes\ncalled middleware .)\n3.One service making requests to a service owned by a different organization, usu\u2010\nally via the internet. This is used for data exchange between different organiza\u2010\ntions\u2019 backend systems. This category includes public APIs provided by online\nservices, such as credit card processing systems, or OAuth for shared access to\nuser data.\n132 | Chapter 4: Encoding and Evolution\n",
    "summary": "The text discusses service-oriented architecture (SOA) and microservices, emphasizing API design, version compatibility, and inter-service communication.",
    "sample_answer": "\u201cOkay, let\u2019s think about how we\u2019d architect this. From a design perspective, adopting a service-oriented architecture, particularly with microservices, is crucial for both scalability and maintainability. The key here is that each service should have a well-defined, application-specific API \u2013 this directly addresses schema evolution by limiting client-side queries to only what the service exposes. We need to ensure version compatibility, acknowledging that old and new versions of services will coexist, requiring careful encoding strategies, aligning with the concept of backward compatibility that we\u2019ve been discussing.  Furthermore, this approach reflects a pragmatic acknowledgement of the CAP theorem\u2014we can\u2019t simultaneously guarantee consistency and availability, but we can engineer around that by designing services to prioritize availability and eventual consistency within a specific bounded scope.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a new e-commerce platform using a microservices architecture. How would you approach data compatibility between different services, especially as they evolve independently? Consider the challenges posed by potentially conflicting schemas or data formats.\u201d"
  },
  {
    "chunk": "vi. Even within each camp there are plenty of arguments. For example, HATEOAS ( hypermedia as the engine\nof application state ), often provokes discussions [ 35].\nvii. Despite the similarity of acronyms, SOAP is not a requirement for SOA. SOAP is a particular technology,\nwhereas SOA is a general approach to building systems.There are two popular approaches to web services: REST  and SOAP . They are almost\ndiametrically opposed in terms of philosophy, and often the subject of heated debate\namong their respective proponents.vi\nREST is not a protocol, but rather a design philosophy that builds upon the principles\nof HTTP [ 34, 35]. It emphasizes simple data formats, using URLs for identifying\nresources and using HTTP features for cache control, authentication, and content\ntype negotiation. REST has been gaining popularity compared to SOAP, at least in\nthe context of cross-organizational service integration [ 36], and is often associated\nwith microservices [ 31]. An API designed according to the principles of REST is\ncalled RESTful .\nBy contrast, SOAP is an XML-based protocol for making network API requests.vii\nAlthough it is most commonly used over HTTP, it aims to be independent from\nHTTP and avoids using most HTTP features. Instead, it comes with a sprawling and\ncomplex multitude of related standards (the web service framework , known as WS-* )\nthat add various features [ 37].\nThe API of a SOAP web service is described using an XML-based language called the\nWeb Services Description Language, or WSDL. WSDL enables code generation so\nthat a client can access a remote service using local classes and method calls (which\nare encoded to XML messages and decoded again by the framework). This is useful in\nstatically typed programming languages, but less so in dynamically typed ones (see\n\u201cCode generation and dynamically typed languages\u201d on page 127 ).\nAs WSDL is not designed to be human-readable, and as SOAP messages are often too\ncomplex to construct manually, users of SOAP rely heavily on tool support, code\ngeneration, and IDEs [ 38]. For users of programming languages that are not sup\u2010\nported by SOAP vendors, integration with SOAP services is difficult.\nEven though SOAP and its various extensions are ostensibly standardized, interoper\u2010\nability between different vendors\u2019 implementations often causes problems [ 39]. For\nall of these reasons, although SOAP is still used in many large enterprises, it has fallen\nout of favor in most smaller companies.\nRESTful APIs tend to favor simpler approaches, typically involving less code genera\u2010\ntion and automated tooling. A definition format such as OpenAPI, also known as\nSwagger [ 40], can be used to describe RESTful APIs and produce documentation.\nModes of Dataflow | 133\n",
    "summary": "The text discusses the trade-offs between REST and SOAP architectural approaches for APIs, highlighting the importance of dataflow design and interoperability.",
    "sample_answer": "\u201cOkay, let's consider the implications of choosing between REST and SOAP for our API design. SOAP, as described here, relies heavily on a complex framework (WS-*) and often necessitates significant tooling and code generation, leading to increased operational complexity and potential interoperability issues \u2013 a classic example of a design choice impacting scalability and maintainability.  In contrast, REST, with its emphasis on simple data formats and standard HTTP features, offers a more streamlined approach, aligning with the principles of microservices and promoting easier dataflow, which is why it's gained prominence in modern system design.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing an API for a new data service.  Considering the text\u2019s discussion of REST and SOAP, what factors would you prioritize when deciding which architectural style to adopt, and why?  Specifically, how would you address potential interoperability challenges if you chose SOAP?\u201d"
  },
  {
    "chunk": "The problems with remote procedure calls (RPCs)\nWeb services are merely the latest incarnation of a long line of technologies for mak\u2010\ning API requests over a network, many of which received a lot of hype but have seri\u2010\nous problems. Enterprise JavaBeans (EJB) and Java\u2019s Remote Method Invocation\n(RMI) are limited to Java. The Distributed Component Object Model (DCOM) is\nlimited to Microsoft platforms. The Common Object Request Broker Architecture\n(CORBA) is excessively complex, and does not provide backward or forward compat\u2010\nibility [ 41].\nAll of these are based on the idea of a remote procedure call  (RPC), which has been\naround since the 1970s [ 42]. The RPC model tries to make a request to a remote net\u2010\nwork service look the same as calling a function or method in your programming lan\u2010\nguage, within the same process (this abstraction is called location transparency ).\nAlthough RPC seems convenient at first, the approach is fundamentally flawed [ 43,\n44]. A network request is very different from a local function call: \n\u2022A local function call is predictable and either succeeds or fails, depending only on\nparameters that are under your control. A network request is unpredictable: the\nrequest or response may be lost due to a network problem, or the remote\nmachine may be slow or unavailable, and such problems are entirely outside of\nyour control. Network problems are common, so you have to anticipate them,\nfor example by retrying a failed request.\n\u2022A local function call either returns a result, or throws an exception, or never\nreturns (because it goes into an infinite loop or the process crashes). A network\nrequest has another possible outcome: it may return without a result, due to a\ntimeout . In that case, you simply don\u2019t know what happened: if you don\u2019t get a\nresponse from the remote service, you have no way of knowing whether the\nrequest got through or not. (We discuss this issue in more detail in Chapter 8 .)\n\u2022If you retry a failed network request, it could happen that the requests are\nactually getting through, and only the responses are getting lost.  In that case,\nretrying  will cause the action to be performed multiple times, unless you build a\nmechanism for deduplication ( idempotence ) into the protocol. Local function\ncalls don\u2019t have this problem. (We discuss idempotence in more detail in Chap\u2010\nter 11 .)\n\u2022Every time you call a local function, it normally takes about the same time to exe\u2010\ncute. A network request is much slower than a function call, and its latency is\nalso wildly variable: at good times it may complete in less than a millisecond, but\nwhen the network is congested or the remote service is overloaded it may take\nmany seconds to do exactly the same thing.\n\u2022When you call a local function, you can efficiently pass it references (pointers) to\nobjects in local memory. When you make a network request, all those parameters\n134 | Chapter 4: Encoding and Evolution\n",
    "summary": "The text highlights the inherent challenges of RPCs compared to local function calls, focusing on unpredictability, latency, and the need for mechanisms like idempotence.",
    "sample_answer": "\u201cThe fundamental issue with RPCs, as illustrated here, is their inherent unpredictability compared to local function calls. The latency and potential for network issues introduce a significant variance that\u2019s difficult to manage \u2013 we\u2019re dealing with the CAP theorem implications without explicit mechanisms like timeouts or retries. Furthermore, the need for idempotence \u2013 ensuring a request is processed only once, even if retried \u2013 demonstrates a recognition that network requests aren\u2019t deterministic like local calls.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system where a microservice needs to update data in another microservice. Given the issues described in this passage about RPCs, what architectural considerations would you prioritize to mitigate the risks of unpredictable latency and potential data inconsistencies?\u201d"
  },
  {
    "chunk": "need to be encoded into a sequence of bytes that can be sent over the network.\nThat\u2019s okay if the parameters are primitives like numbers or strings, but quickly\nbecomes problematic with larger objects.\n\u2022The client and the service may be implemented in different programming lan\u2010\nguages, so the RPC framework must translate datatypes from one language into\nanother. This can end up ugly, since not all languages have the same types\u2014\nrecall JavaScript\u2019s problems with numbers greater than 253, for example (see\n\u201cJSON, XML, and Binary Variants\u201d  on page 114). This problem doesn\u2019t exist in a\nsingle process written in a single language.\nAll of these factors mean that there\u2019s no point trying to make a remote service look\ntoo much like a local object in your programming language, because it\u2019s a fundamen\u2010\ntally different thing. Part of the appeal of REST is that it doesn\u2019t try to hide the fact\nthat it\u2019s a network protocol (although this doesn\u2019t seem to stop people from building\nRPC libraries on top of REST).\nCurrent directions for RPC\nDespite all these problems, RPC isn\u2019t going away. Various RPC frameworks have\nbeen built on top of all the encodings mentioned in this chapter: for example, Thrift\nand Avro come with RPC support included, gRPC is an RPC implementation using\nProtocol Buffers, Finagle also uses Thrift, and Rest.li uses JSON over HTTP.\nThis new generation of RPC frameworks is more explicit about the fact that a remote\nrequest is different from a local function call. For example, Finagle and Rest.li use\nfutures  (promises ) to encapsulate asynchronous actions that may fail. Futures also\nsimplify situations where you need to make requests to multiple services in parallel,\nand combine their results [ 45]. gRPC supports streams , where a call consists of not\njust one request and one response, but a series of requests and responses over time\n[46].\nSome of these frameworks also provide service discovery \u2014that is, allowing a client to\nfind out at which IP address and port number it can find a particular service. We will\nreturn to this topic in \u201cRequest Routing\u201d on page 214 .\nCustom RPC protocols with a binary encoding format can achieve better perfor\u2010\nmance than something generic like JSON over REST. However, a RESTful API has\nother significant advantages: it is good for experimentation and debugging (you can\nsimply make requests to it using a web browser or the command-line tool curl ,\nwithout any code generation or software installation), it is supported by all main\u2010\nstream programming languages and platforms, and there is a vast ecosystem of tools\navailable (servers, caches, load balancers, proxies, firewalls, monitoring, debugging\ntools, testing tools, etc.).\nModes of Dataflow | 135\n",
    "summary": "The text discusses the challenges of remote procedure calls (RPC) due to differing languages, data encoding, and the need for explicit handling of asynchronous operations and dataflow.",
    "sample_answer": "\u201cOkay, so when building a remote service, the biggest design consideration is the difference between a local object and a network request. This necessitates careful handling of data serialization, likely utilizing a binary encoding format like Protocol Buffers (as employed by gRPC) to minimize overhead compared to something like JSON, which can lead to significant performance bottlenecks. Furthermore, the use of futures\u2014like those supported in Finagle\u2014is crucial for managing asynchronous calls, allowing us to handle failures gracefully and execute multiple service requests concurrently, mirroring the complexities of distributed systems.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re building a system that needs to call multiple microservices. Considering the challenges of RPC, how would you approach designing the architecture to handle potential failures and coordinate data flow, and what specific tools or techniques would you consider (e.g., futures, gRPC, Protocol Buffers)?\u201d"
  },
  {
    "chunk": "For these reasons, REST seems to be the predominant style for public APIs. The main\nfocus of RPC frameworks is on requests between services owned by the same organi\u2010\nzation, typically within the same datacenter.\nData encoding and evolution for RPC\nFor evolvability, it is important that RPC clients and servers can be changed and\ndeployed independently. Compared to data flowing through databases (as described\nin the last section), we can make a simplifying assumption in the case of dataflow\nthrough services: it is reasonable to assume that all the servers will be updated first,\nand all the clients second. Thus, you only need backward compatibility on requests,\nand forward compatibility on responses.\nThe backward and forward compatibility properties of an RPC scheme are inherited\nfrom whatever encoding it uses:\n\u2022Thrift, gRPC (Protocol Buffers), and Avro RPC can be evolved according to the\ncompatibility rules of the respective encoding format.\n\u2022In SOAP, requests and responses are specified with XML schemas. These can be\nevolved, but there are some subtle pitfalls [ 47].\n\u2022RESTful APIs most commonly use JSON (without a formally specified schema)\nfor responses, and JSON or URI-encoded/form-encoded request parameters for\nrequests. Adding optional request parameters and adding new fields to response\nobjects are usually considered changes that maintain compatibility.\nService compatibility is made harder by the fact that RPC is often used for communi\u2010\ncation across organizational boundaries, so the provider of a service often has no\ncontrol over its clients and cannot force them to upgrade. Thus, compatibility needs\nto be maintained for a long time, perhaps indefinitely. If a compatibility-breaking\nchange is required, the service provider often ends up maintaining multiple versions\nof the service API side by side.\nThere is no agreement on how API versioning should work (i.e., how a client can\nindicate which version of the API it wants to use [ 48]). For RESTful APIs, common\napproaches are to use a version number in the URL or in the HTTP Accept  header.\nFor services that use API keys to identify a particular client, another option is to store\na client\u2019s requested API version on the server and to allow this version selection to be\nupdated through a separate administrative interface [ 49]. \nMessage-Passing Dataflow\nWe have been looking at the different ways encoded data flows from one process to\nanother. So far, we\u2019ve discussed REST and RPC (where one process sends a request\nover the network to another process and expects a response as quickly as possible),\n136 | Chapter 4: Encoding and Evolution\n",
    "summary": "The text discusses API evolution strategies in RPC and RESTful systems, focusing on backward and forward compatibility, and versioning approaches.",
    "sample_answer": "\u201cWhen designing APIs, particularly in distributed systems like RPC, you have to carefully consider compatibility. The challenge arises because clients and servers might be deployed independently, leading to potential breaking changes. To address this, we employ backward and forward compatibility strategies, meaning that clients can continue to work with older versions while servers evolve, and newer servers can handle older client requests. A common approach is to version the API, for example, by using a version number in the URL, as this allows for controlled evolution and prevents service disruptions.\u201d",
    "potential_interview_question": "\u201cImagine you are designing a new microservice that uses RESTful APIs. How would you approach API versioning to handle future changes without impacting existing clients?  Specifically, discuss the tradeoffs between different versioning strategies (e.g., URL versioning, header versioning) and how you would ensure backward compatibility.\u201d"
  },
  {
    "chunk": "and databases (where one process writes encoded data, and another process reads it\nagain sometime in the future).\nIn this final section, we will briefly look at asynchronous message-passing  systems,\nwhich are somewhere between RPC and databases. They are similar to RPC in that a\nclient\u2019s request (usually called a message ) is delivered to another process with low\nlatency. They are similar to databases in that the message is not sent via a direct net\u2010\nwork connection, but goes via an intermediary called a message broker  (also called a\nmessage queue  or message-oriented middleware ), which stores the message temporar\u2010\nily.\nUsing a message broker has several advantages compared to direct RPC:\n\u2022It can act as a buffer if the recipient is unavailable or overloaded, and thus\nimprove system reliability.\n\u2022It can automatically redeliver messages to a process that has crashed, and thus\nprevent messages from being lost.\n\u2022It avoids the sender needing to know the IP address and port number of the\nrecipient (which is particularly useful in a cloud deployment where virtual\nmachines often come and go).\n\u2022It allows one message to be sent to several recipients.\n\u2022It logically decouples the sender from the recipient (the sender just publishes\nmessages and doesn\u2019t care who consumes them).\nHowever, a difference compared to RPC is that message-passing communication is\nusually one-way: a sender normally doesn\u2019t expect to receive a reply to its messages. It\nis possible for a process to send a response, but this would usually be done on a sepa\u2010\nrate channel. This communication pattern is asynchronous : the sender doesn\u2019t wait\nfor the message to be delivered, but simply sends it and then forgets about it.\nMessage brokers\nIn the past, the landscape of message brokers was dominated by commercial enter\u2010\nprise software from companies such as TIBCO, IBM WebSphere, and webMethods.\nMore recently, open source implementations such as RabbitMQ, ActiveMQ, Hor\u2010\nnetQ, NATS, and Apache Kafka have become popular. We will compare them in\nmore detail in Chapter 11 .\nThe detailed delivery semantics vary by implementation and configuration, but in\ngeneral, message brokers are used as follows: one process sends a message to a named\nqueue  or topic , and the broker ensures that the message is delivered to one or more\nconsumers  of or subscribers  to that queue or topic. There can be many producers and\nmany consumers on the same topic.\nModes of Dataflow | 137\n",
    "summary": "The text discusses the design considerations for asynchronous message-passing systems, highlighting the role of message brokers in enhancing system reliability and decoupling processes.",
    "sample_answer": "\u201cOkay, let\u2019s analyze this from a system design perspective. This excerpt describes a crucial pattern for building resilient, decoupled systems \u2013 asynchronous message-passing. The use of a message broker, such as RabbitMQ or Kafka (as mentioned in the text), addresses the potential for unavailability or overload in a recipient process, providing a buffer and significantly improving system reliability. Furthermore, this architecture avoids direct network connections and supports one-to-many message delivery, aligning with the principles of decoupling discussed in the CAP theorem \u2013 ensuring the system doesn\u2019t have to manage the consistency of a single connection.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system to ingest event data from IoT devices. How would you leverage asynchronous messaging, like a message broker, to ensure the system can handle intermittent network connectivity and potential device failures, and what considerations would you have regarding message ordering or guarantees?\u201d"
  },
  {
    "chunk": "A topic provides only one-way dataflow. However, a consumer may itself publish\nmessages to another topic (so you can chain them together, as we shall see in Chap\u2010\nter 11 ), or to a reply queue that is consumed by the sender of the original message\n(allowing a request/response dataflow, similar to RPC).\nMessage brokers typically don\u2019t enforce any particular data model\u2014a message is just\na sequence of bytes with some metadata, so you can use any encoding format. If the\nencoding is backward and forward compatible, you have the greatest flexibility to\nchange publishers and consumers independently and deploy them in any order.\nIf a consumer republishes messages to another topic, you may need to be careful to\npreserve unknown fields, to prevent the issue described previously in the context of\ndatabases ( Figure 4-7 ).\nDistributed actor frameworks\nThe actor model  is a programming model for concurrency in a single process. Rather\nthan dealing directly with threads (and the associated problems of race conditions,\nlocking, and deadlock), logic is encapsulated in actors . Each actor typically represents\none client or entity, it may have some local state (which is not shared with any other\nactor), and it communicates with other actors by sending and receiving asynchro\u2010\nnous messages. Message delivery is not guaranteed: in certain error scenarios, mes\u2010\nsages will be lost. Since each actor processes only one message at a time, it doesn\u2019t\nneed to worry about threads, and each actor can be scheduled independently by the\nframework.\nIn distributed actor frameworks , this programming model is used to scale an applica\u2010\ntion across multiple nodes. The same message-passing mechanism is used, no matter\nwhether the sender and recipient are on the same node or different nodes. If they are\non different nodes, the message is transparently encoded into a byte sequence, sent\nover the network, and decoded on the other side.\nLocation transparency works better in the actor model than in RPC, because the actor\nmodel already assumes that messages may be lost, even within a single process.\nAlthough latency over the network is likely higher than within the same process,\nthere is less of a fundamental mismatch between local and remote communication\nwhen using the actor model.\nA distributed actor framework essentially integrates a message broker and the actor\nprogramming model into a single framework. However, if you want to perform roll\u2010\ning upgrades of your actor-based application, you still have to worry about forward\nand backward compatibility, as messages may be sent from a node running the new\nversion to a node running the old version, and vice versa.\nThree popular distributed actor frameworks handle message encoding as follows:\n138 | Chapter 4: Encoding and Evolution\n",
    "summary": "The text discusses message brokers, distributed actor frameworks, and the importance of backward and forward compatibility in evolving message formats.",
    "sample_answer": "\u201cOkay, this chunk highlights a crucial consideration when designing distributed systems \u2013 message evolution and the inherent challenges of asynchronous, potentially unreliable communication. The use of message brokers, coupled with distributed actor frameworks, allows us to build loosely coupled systems, but it necessitates careful management of message formats to maintain compatibility across different versions of consumers and producers. Specifically, the actor model\u2019s reliance on asynchronous message passing and location transparency, combined with the need for encoding schemes that handle potential message loss, aligns with principles of resilience and fault tolerance, ensuring the system can continue operating even with component failures.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re building a system where microservices communicate via a message broker. How would you approach ensuring backward compatibility if both the producer and consumer microservices are updated independently? Specifically, discuss the trade-offs of different encoding strategies and how the actor model's asynchronous messaging fits into this scenario.\u201d"
  },
  {
    "chunk": "\u2022Akka  uses Java\u2019s built-in serialization by default, which does not provide forward\nor backward compatibility. However, you can replace it with something like Pro\u2010\ntocol Buffers, and thus gain the ability to do rolling upgrades [ 50].\n\u2022Orleans  by default uses a custom data encoding format that does not support\nrolling upgrade deployments; to deploy a new version of your application, you\nneed to set up a new cluster, move traffic from the old cluster to the new one, and\nshut down the old one [ 51, 52]. Like with Akka, custom serialization plug-ins can\nbe used.\n\u2022In Erlang OTP  it is surprisingly hard to make changes to record schemas (despite\nthe system having many features designed for high availability); rolling upgrades\nare possible but need to be planned carefully [ 53]. An experimental new maps\ndatatype (a JSON-like structure, introduced in Erlang R17 in 2014) may make\nthis easier in the future [ 54]. \nSummary\nIn this chapter we looked at several ways of turning data structures into bytes on the\nnetwork or bytes on disk. We saw how the details of these encodings affect not only\ntheir efficiency, but more importantly also the architecture of applications and your\noptions for deploying them.\nIn particular, many services need to support rolling upgrades, where a new version of\na service is gradually deployed to a few nodes at a time, rather than deploying to all\nnodes simultaneously. Rolling upgrades allow new versions of a service to be released\nwithout downtime (thus encouraging frequent small releases over rare big releases)\nand make deployments less risky (allowing faulty releases to be detected and rolled\nback before they affect a large number of users). These properties are hugely benefi\u2010\ncial for evolvability , the ease of making changes to an application.\nDuring rolling upgrades, or for various other reasons, we must assume that different\nnodes are running the different versions of our application\u2019s code. Thus, it is impor\u2010\ntant that all data flowing around the system is encoded in a way that provides back\u2010\nward compatibility (new code can read old data) and forward compatibility (old code\ncan read new data).\nWe discussed several data encoding formats and their compatibility properties:\n\u2022Programming language\u2013specific encodings are restricted to a single program\u2010\nming language and often fail to provide forward and backward compatibility.\n\u2022Textual formats like JSON, XML, and CSV are widespread, and their compatibil\u2010\nity depends on how you use them. They have optional schema languages, which\nare sometimes helpful and sometimes a hindrance. These formats are somewhat\nSummary | 139\n",
    "summary": "The text highlights the critical challenge of data encoding compatibility, particularly in the context of rolling upgrades and evolving application architectures. It emphasizes the need for backward and forward compatibility to support deployment strategies like rolling upgrades.",
    "sample_answer": "\u201cOkay, so this chunk really drills into a fundamental data engineering consideration: the impact of data encoding on system architecture. When you\u2019re dealing with distributed systems like Akka or Erlang, which often rely on serialization for network communication, you quickly run into the problem of schema evolution. The example of Akka using Java\u2019s default serialization, lacking compatibility, demonstrates a common pitfall \u2013 if you don\u2019t explicitly manage schema changes, you can\u2019t support rolling upgrades, which are essential for maintaining availability and reducing risk during deployments.\u201d Furthermore, \u201cThis ties directly into the CAP theorem; if you're prioritizing consistency, you need mechanisms to handle schema drift, and this chunk suggests you\u2019d need careful planning around upgrades.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say you\u2019re designing a system to ingest data from multiple sources into a distributed stream processing platform. The data schema is expected to evolve over time. What strategies would you employ to ensure data compatibility and support a rolling upgrade deployment approach, referencing any specific tools or techniques discussed in the provided text?\u201d"
  },
  {
    "chunk": "vague about datatypes, so you have to be careful with things like numbers and\nbinary strings.\n\u2022Binary schema\u2013driven formats like Thrift, Protocol Buffers, and Avro allow\ncompact, efficient encoding with clearly defined forward and backward compati\u2010\nbility semantics. The schemas can be useful for documentation and code genera\u2010\ntion in statically typed languages. However, they have the downside that data\nneeds to be decoded before it is human-readable.\nWe also discussed several modes of dataflow, illustrating different scenarios in which\ndata encodings are important:\n\u2022Databases, where the process writing to the database encodes the data and the\nprocess reading from the database decodes it\n\u2022RPC and REST APIs, where the client encodes a request, the server decodes the\nrequest and encodes a response, and the client finally decodes the response\n\u2022Asynchronous message passing (using message brokers or actors), where nodes\ncommunicate by sending each other messages that are encoded by the sender\nand decoded by the recipient\nWe can conclude that with a bit of care, backward/forward compatibility and rolling\nupgrades are quite achievable. May your application\u2019s evolution be rapid and your\ndeployments be frequent.\nReferences\n[1] \u201cJava Object Serialization Specification ,\u201d docs.oracle.com , 2010.\n[2] \u201cRuby 2.2.0 API Documentation ,\u201d ruby-doc.org , Dec 2014.\n[3] \u201cThe Python 3.4.3 Standard Library Reference Manual ,\u201d docs.python.org , Febru\u2010\nary 2015.\n[4] \u201cEsotericSoftware/kryo ,\u201d github.com , October 2014.\n[5] \u201cCWE-502: Deserialization of Untrusted Data ,\u201d Common Weakness Enumera\u2010\ntion, cwe.mitre.org , July 30, 2014.\n[6] Steve Breen: \u201c What Do WebLogic, WebSphere, JBoss, Jenkins, OpenNMS, and\nYour Application Have in Common? This Vulnerability ,\u201d foxglovesecurity.com ,\nNovember 6, 2015.\n[7] Patrick McKenzie: \u201c What the Rails Security Issue Means for Your Startup ,\u201d kalzu\u2010\nmeus.com , January 31, 2013.\n[8] Eishay Smith: \u201c jvm-serializers wiki ,\u201d github.com , November 2014.\n140 | Chapter 4: Encoding and Evolution\n",
    "summary": "The text discusses data encoding strategies, schema evolution, and the importance of handling deserialization vulnerabilities.",
    "sample_answer": "\u201cWhen dealing with evolving data formats, particularly across services or systems, careful consideration of schema evolution is crucial. We need to ensure backward and forward compatibility \u2013 for example, using binary schema-driven formats like Protocol Buffers or Avro, which provide clear semantics for data encoding and decoding, mitigating the risk of data corruption. Furthermore, the text highlights the critical security concern of deserialization vulnerabilities, such as CWE-502, emphasizing the need for robust input validation and sanitization when deserializing data from untrusted sources.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you might choose Protocol Buffers over JSON for data serialization, and explain how you would address potential schema evolution challenges within that scenario. What specific security considerations would be paramount?\u201d"
  },
  {
    "chunk": "[9] \u201cXML Is a Poor Copy of S-Expressions ,\u201d c2.com  wiki.\n[10] Matt Harris: \u201c Snowflake: An Update and Some Very Important Information ,\u201d\nemail to Twitter Development Talk  mailing list, October 19, 2010.\n[11] Shudi (Sandy) Gao, C. M. Sperberg-McQueen, and Henry S. Thompson: \u201c XML\nSchema 1.1 ,\u201d W3C Recommendation, May 2001.\n[12] Francis Galiegue, Kris Zyp, and Gary Court: \u201c JSON Schema ,\u201d IETF Internet-\nDraft, February 2013.\n[13] Yakov Shafranovich: \u201c RFC 4180: Common Format and MIME Type for\nComma-Separated Values (CSV) Files ,\u201d October 2005.\n[14] \u201cMessagePack Specification ,\u201d msgpack.org .\n[15] Mark Slee, Aditya Agarwal, and Marc Kwiatkowski: \u201c Thrift: Scalable Cross-\nLanguage Services Implementation ,\u201d Facebook technical report, April 2007.\n[16] \u201cProtocol Buffers Developer Guide ,\u201d Google, Inc., developers.google.com .\n[17] Igor Anishchenko: \u201c Thrift vs Protocol Buffers vs Avro - Biased Comparison ,\u201d\nslideshare.net , September 17, 2012.\n[18] \u201cA Matrix of the Features Each Individual Language Library Supports ,\u201d\nwiki.apache.org .\n[19] Martin Kleppmann: \u201c Schema Evolution in Avro, Protocol Buffers and Thrift ,\u201d\nmartin.kleppmann.com , December 5, 2012.\n[20] \u201cApache Avro 1.7.7 Documentation ,\u201d avro.apache.org , July 2014.\n[21] Doug Cutting, Chad Walters, Jim Kellerman, et al.: \u201c [PROPOSAL] New Subpro\u2010\nject: Avro ,\u201d email thread on hadoop-general  mailing list, mail-archives.apache.org ,\nApril 2009.\n[22] Tony Hoare: \u201c Null References: The Billion Dollar Mistake ,\u201d at QCon London ,\nMarch 2009.\n[23] Aditya Auradkar and Tom Quiggle: \u201c Introducing Espresso\u2014LinkedIn\u2019s Hot\nNew Distributed Document Store ,\u201d engineering.linkedin.com , January 21, 2015.\n[24] Jay Kreps: \u201c Putting Apache Kafka to Use: A Practical Guide to Building a Stream\nData Platform (Part 2) ,\u201d blog.confluent.io , February 25, 2015.\n[25] Gwen Shapira: \u201c The Problem of Managing Schemas ,\u201d radar.oreilly.com , Novem\u2010\nber 4, 2014.\n[26] \u201cApache Pig 0.14.0 Documentation ,\u201d pig.apache.org , November 2014.\n[27] John Larmouth: ASN.1 Complete . Morgan Kaufmann, 1999. ISBN:\n978-0-122-33435-1\nSummary | 141\n",
    "summary": "The text discusses schema evolution strategies in various data serialization formats (Avro, Protocol Buffers, Thrift) and highlights challenges related to schema management and data storage.",
    "sample_answer": "\u201cOkay, this chunk is really focused on data serialization and schema evolution, which is a critical area for any data engineering team. We see mentions of Avro, Protocol Buffers, Thrift, and Kafka, all of which deal with efficient data representation and transport. A key challenge, as highlighted by Kleppmann\u2019s piece on schema evolution, is managing changes to schemas while maintaining backward compatibility \u2013 a problem addressed, for example, through Avro\u2019s use of schema evolution. This highlights the importance of choosing a serialization format that supports flexible schema management, and we should consider the trade-offs between different options based on our specific needs.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re building a new data pipeline that consumes data from multiple sources, each with different data formats. How would you approach the schema evolution problem, and which serialization format would you consider for our use case, justifying your choice with specific considerations like backward compatibility and performance?\u201d"
  },
  {
    "chunk": "[28] Russell Housley, Warwick Ford, Tim Polk, and David Solo: \u201c RFC 2459: Internet\nX.509 Public Key Infrastructure: Certificate and CRL Profile ,\u201d IETF Network Work\u2010\ning Group, Standards Track, January 1999.\n[29] Lev Walkin: \u201c Question: Extensibility and Dropping Fields ,\u201d lionet.info , Septem\u2010\nber 21, 2010.\n[30] Jesse James Garrett: \u201c Ajax: A New Approach to Web Applications ,\u201d adaptive\u2010\npath.com , February 18, 2005.\n[31] Sam Newman: Building Microservices . O\u2019Reilly Media, 2015. ISBN:\n978-1-491-95035-7\n[32] Chris Richardson: \u201c Microservices: Decomposing Applications for Deployability\nand Scalability ,\u201d infoq.com , May 25, 2014.\n[33] Pat Helland: \u201c Data on the Outside Versus Data on the Inside ,\u201d at 2nd Biennial\nConference on Innovative Data Systems Research  (CIDR), January 2005.\n[34] Roy Thomas Fielding: \u201c Architectural Styles and the Design of Network-Based\nSoftware Architectures ,\u201d PhD Thesis, University of California, Irvine, 2000.\n[35] Roy Thomas Fielding: \u201c REST APIs Must Be Hypertext-Driven ,\u201d roy.gbiv.com ,\nOctober 20 2008.\n[36] \u201cREST in Peace, SOAP ,\u201d royal.pingdom.com , October 15, 2010.\n[37] \u201cWeb Services Standards as of Q1 2007 ,\u201d innoq.com , February 2007.\n[38] Pete Lacey: \u201c The S Stands for Simple ,\u201d harmful.cat-v.org , November 15, 2006.\n[39] Stefan Tilkov: \u201c Interview: Pete Lacey Criticizes Web Services ,\u201d infoq.com ,\nDecember 12, 2006.\n[40] \u201cOpenAPI Specification (fka Swagger RESTful API Documentation Specifica\u2010\ntion) Version 2.0 ,\u201d swagger.io , September 8, 2014.\n[41] Michi Henning: \u201c The Rise and Fall of CORBA ,\u201d ACM Queue , volume 4, number\n5, pages 28\u201334, June 2006. doi:10.1145/1142031.1142044\n[42] Andrew D. Birrell and Bruce Jay Nelson: \u201c Implementing Remote Procedure\nCalls ,\u201d ACM Transactions on Computer Systems  (TOCS), volume 2, number 1, pages\n39\u201359, February 1984. doi:10.1145/2080.357392\n[43] Jim Waldo, Geoff Wyant, Ann Wollrath, and Sam Kendall: \u201c A Note on Dis\u2010\ntributed Computing ,\u201d Sun Microsystems Laboratories, Inc., Technical Report\nTR-94-29, November 1994.\n[44] Steve Vinoski: \u201c Convenience over Correctness ,\u201d IEEE Internet Computing , vol\u2010\nume 12, number 4, pages 89\u201392, July 2008. doi:10.1109/MIC.2008.75\n142 | Chapter 4: Encoding and Evolution\n",
    "summary": "The text discusses various architectural styles and technologies related to distributed systems, APIs, and data evolution, referencing concepts like REST, microservices, RPC, and schema evolution.",
    "sample_answer": "\u201cThis collection of references highlights the evolution of architectural styles, particularly emphasizing the shift from monolithic systems to microservices and the increasing importance of well-defined APIs. The discussion of RPC (as evidenced by Birrell and Nelson's work) demonstrates a move towards more modular and loosely coupled systems compared to earlier approaches like CORBA. Furthermore, the references to REST and OpenAPI demonstrate a trend toward simpler, more discoverable APIs, which is crucial for system maintainability and scalability\u2014a key consideration when designing for evolution, as highlighted in Fielding\u2019s work.\u201d",
    "potential_interview_question": "\u201cDescribe the trade-offs between using RPC and RESTful APIs for microservice communication. What architectural patterns, referencing any specific technologies or concepts from these materials, would you employ to ensure eventual consistency and fault tolerance in a system utilizing this communication style?\u201d"
  },
  {
    "chunk": "[45] Marius Eriksen: \u201c Your Server as a Function ,\u201d at 7th Workshop on Programming\nLanguages and Operating Systems  (PLOS), November 2013. doi:\n10.1145/2525528.2525538\n[46] \u201cgrpc-common Documentation ,\u201d Google, Inc., github.com , February 2015.\n[47] Aditya Narayan and Irina Singh: \u201c Designing and Versioning Compatible Web\nServices ,\u201d ibm.com , March 28, 2007.\n[48] Troy Hunt: \u201c Your API Versioning Is Wrong, Which Is Why I Decided to Do It 3\nDifferent Wrong Ways ,\u201d troyhunt.com , February 10, 2014.\n[49] \u201cAPI Upgrades ,\u201d Stripe, Inc., April 2015.\n[50] Jonas Bon\u00e9r: \u201c Upgrade in an Akka Cluster ,\u201d email to akka-user  mailing list, grok\u2010\nbase.com , August 28, 2013.\n[51] Philip A. Bernstein, Sergey Bykov, Alan Geller, et al.: \u201c Orleans: Distributed Vir\u2010\ntual Actors for Programmability and Scalability ,\u201d Microsoft Research Technical\nReport MSR-TR-2014-41, March 2014.\n[52] \u201cMicrosoft Project Orleans Documentation ,\u201d Microsoft Research, dotnet.git\u2010\nhub.io , 2015.\n[53] David Mercer, Sean Hinde, Yinso Chen, and Richard A O\u2019Keefe: \u201c beginner:\nUpdating Data Structures ,\u201d email thread on erlang-questions  mailing list, erlang.com ,\nOctober 29, 2007.\n[54] Fred Hebert: \u201c Postscript: Maps ,\u201d learnyousomeerlang.com , April 9, 2014.\nSummary | 143\n",
    "summary": "This chunk discusses strategies for upgrading and maintaining distributed systems, particularly focusing on actor models and API versioning.",
    "sample_answer": "\u201cOkay, this excerpt highlights key considerations for building resilient, scalable systems. The Orleans actor model, as described, offers a way to manage state and concurrency in a distributed environment, potentially reducing the need for complex locking mechanisms \u2013 a core principle of fault tolerance. Furthermore, the discussion around API versioning (like the Stripe example) is critical; it\u2019s a proven strategy for handling schema evolution and ensuring backward compatibility, allowing for gradual updates without disrupting existing clients.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re building a new service using an actor model like Orleans. How would you approach designing for both resilience and the eventual need to change the service\u2019s API? Specifically, what considerations would you make regarding data consistency and handling potential client migrations?\u201d"
  },
  {
    "chunk": "PART II\nDistributed Data\nFor a successful technology, reality must take precedence over public relations, for nature\ncannot be fooled.\n\u2014Richard Feynman, Rogers Commission Report  (1986)\nIn Part I  of this book, we discussed aspects of data systems that apply when data is\nstored on a single machine. Now, in Part II , we move up a level and ask: what hap\u2010\npens if multiple machines are involved in storage and retrieval of data?\nThere are various reasons why you might want to distribute a database across multi\u2010\nple machines:\nScalability\nIf your data volume, read load, or write load grows bigger than a single machine\ncan handle, you can potentially spread the load across multiple machines.\nFault tolerance/high availability\nIf your application needs to continue working even if one machine (or several\nmachines, or the network, or an entire datacenter) goes down, you can use multi\u2010\nple machines to give you redundancy. When one fails, another one can take over.\nLatency\nIf you have users around the world, you might want to have servers at various\nlocations worldwide so that each user can be served from a datacenter that is geo\u2010\ngraphically close to them. That avoids the users having to wait for network pack\u2010\nets to travel halfway around the world.\n",
    "summary": "This chunk discusses the motivations for distributed data systems \u2013 scalability, fault tolerance, and latency reduction \u2013 and introduces key concepts like redundancy and geo-distribution.",
    "sample_answer": "\u201cOkay, so when dealing with growing data volumes and increased user demand, distributing data across multiple machines is crucial. This addresses scalability by allowing us to horizontally scale our read and write operations, as mentioned. Crucially, redundancy \u2013 achieved through replication across machines \u2013 provides fault tolerance; if one machine fails, another can seamlessly take over, ensuring high availability. Further, geo-distribution minimizes latency by placing data closer to users, aligning with the CAP theorem\u2019s trade-off between consistency and availability.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re building a globally distributed social media platform. We need to ensure high availability and low latency for user feeds. Describe your approach to data distribution considering the CAP theorem and potential failure scenarios.\u201d"
  },
  {
    "chunk": "i. In a large machine, although any CPU can access any part of memory, some banks of memory are closer to\none CPU than to others (this is called nonuniform memory access , or NUMA [ 1]). To make efficient use of\nthis architecture, the processing needs to be broken down so that each CPU mostly accesses memory that is\nnearby\u2014which means that partitioning is still required, even when ostensibly running on one machine.\nii.Network Attached Storage  (NAS) or Storage Area Network  (SAN).Scaling to Higher Load\nIf all you need is to scale to higher load, the simplest approach is to buy a more pow\u2010\nerful machine (sometimes called vertical scaling  or scaling up ). Many CPUs, many\nRAM chips, and many disks can be joined together under one operating system, and\na fast interconnect allows any CPU to access any part of the memory or disk. In this\nkind of shared-memory architecture , all the components can be treated as a single\nmachine [ 1].i\nThe problem with a shared-memory approach is that the cost grows faster than line\u2010\narly: a machine with twice as many CPUs, twice as much RAM, and twice as much\ndisk capacity as another typically costs significantly more than twice as much. And\ndue to bottlenecks, a machine twice the size cannot necessarily handle twice the load.\nA shared-memory architecture may offer limited fault tolerance\u2014high-end machines\nhave hot-swappable components (you can replace disks, memory modules, and even\nCPUs without shutting down the machines)\u2014but it is definitely limited to a single\ngeographic location.\nAnother approach is the shared-disk architecture , which uses several machines with\nindependent CPUs and RAM, but stores data on an array of disks that is shared\nbetween the machines, which are connected via a fast network.ii This architecture is\nused for some data warehousing workloads, but contention and the overhead of lock\u2010\ning limit the scalability of the shared-disk approach [ 2].\nShared-Nothing Architectures\nBy contrast, shared-nothing architectures  [3] (sometimes called horizontal scaling  or\nscaling out ) have gained a lot of popularity. In this approach, each machine or virtual\nmachine running the database software is called a node . Each node uses its CPUs,\nRAM, and disks independently. Any coordination between nodes is done at the soft\u2010\nware level, using a conventional network.\nNo special hardware is required by a shared-nothing system, so you can use whatever\nmachines have the best price/performance ratio. You can potentially distribute data\nacross multiple geographic regions, and thus reduce latency for users and potentially\nbe able to survive the loss of an entire datacenter. With cloud deployments of virtual\n",
    "summary": "The text discusses scaling strategies, highlighting shared-nothing architectures as a preferred approach due to their inherent resilience and scalability compared to shared-memory architectures.",
    "sample_answer": "\u201cOkay, let\u2019s consider the scaling challenges presented here. The core issue is that a purely shared-memory architecture, like the one described, suffers from diminishing returns \u2013 doubling the resources doesn\u2019t necessarily double the performance due to bottlenecks. Instead, the shared-nothing architecture, with independent nodes, provides a more scalable and resilient solution. This aligns with the CAP theorem \u2013 achieving both consistency and availability in a distributed system requires careful consideration and often involves trade-offs, which is why a distributed system like this relies on software-level coordination rather than relying on hardware for fault tolerance.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a data warehouse to handle a rapidly growing user base. Based on the architectural approaches discussed in this excerpt, what type of architecture would you recommend and why? Specifically, how would you address potential bottlenecks and ensure high availability, considering the limitations of a shared-memory system?\u201d"
  },
  {
    "chunk": "machines, you don\u2019t need to be operating at Google scale: even for small companies,\na multi-region distributed architecture is now feasible.\nIn this part of the book, we focus on shared-nothing architectures\u2014not because they\nare necessarily the best choice for every use case, but rather because they require the\nmost caution from you, the application developer. If your data is distributed across\nmultiple nodes, you need to be aware of the constraints and trade-offs that occur in\nsuch a distributed system\u2014the database cannot magically hide these from you.\nWhile a distributed shared-nothing architecture has many advantages, it usually also\nincurs additional complexity for applications and sometimes limits the expressive\u2010\nness of the data models you can use. In some cases, a simple single-threaded program\ncan perform significantly better than a cluster with over 100 CPU cores [ 4]. On the\nother hand, shared-nothing systems can be very powerful. The next few chapters go\ninto details on the issues that arise when data is distributed. \nReplication Versus Partitioning\nThere are two common ways data is distributed across multiple nodes:\nReplication\nKeeping a copy of the same data on several different nodes, potentially in differ\u2010\nent locations. Replication provides redundancy: if some nodes are unavailable,\nthe data can still be served from the remaining nodes. Replication can also help\nimprove performance. We discuss replication in Chapter 5 .\nPartitioning\nSplitting a big database into smaller subsets called partitions  so that different par\u2010\ntitions can be assigned to different nodes (also known as sharding ). We discuss\npartitioning in Chapter 6 .\nThese are separate mechanisms, but they often go hand in hand, as illustrated in\nFigure II-1 .\n",
    "summary": "The text highlights the increasing feasibility of multi-region distributed architectures and discusses replication and partitioning as common data distribution strategies, emphasizing their trade-offs and potential impact on application design.",
    "sample_answer": "\u201cOkay, let\u2019s think about this. The core point here is that while achieving Google-scale architectures isn\u2019t always necessary, adopting a multi-region, distributed system\u2014particularly a shared-nothing architecture\u2014demands careful consideration.  The text explicitly mentions replication as a key mechanism for providing redundancy and potentially improving performance, acknowledging that if nodes become unavailable, the system can still operate from the remaining ones. It contrasts this with partitioning, suggesting data can be split into subsets (shards) assigned to different nodes, which is vital for scaling \u2013 though it also acknowledges the added complexity.  The chapter mentions that a simpler, single-threaded program can outperform a massively parallel system, demonstrating a critical cost/performance trade-off in system design.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you might choose a shared-nothing architecture versus a monolithic database. What considerations would you weigh when deciding, and how would you address the potential challenges that arise with distributed data management \u2013 specifically regarding data consistency and availability?\u201d"
  },
  {
    "chunk": "Figure II-1. A database split into two partitions, with two replicas per partition.\nWith an understanding of those concepts, we can discuss the difficult trade-offs that\nyou need to make in a distributed system. We\u2019ll discuss transactions  in Chapter 7 , as\nthat will help you understand all the many things that can go wrong in a data system,\nand what you can do about them. We\u2019ll conclude this part of the book by discussing\nthe fundamental limitations of distributed systems in Chapters 8 and 9.\nLater, in Part III  of this book, we will discuss how you can take several (potentially\ndistributed) datastores and integrate them into a larger system, satisfying the needs of\na complex application. But first, let\u2019s talk about distributed data.\nReferences\n[1] Ulrich Drepper: \u201c What Every Programmer Should Know About Memory ,\u201d akka\u2010\ndia.org , November 21, 2007.\n[2] Ben Stopford: \u201c Shared Nothing vs. Shared Disk Architectures: An Independent\nView ,\u201d benstopford.com , November 24, 2009.\n[3] Michael Stonebraker: \u201c The Case for Shared Nothing ,\u201d IEEE Database Engineering\nBulletin , volume 9, number 1, pages 4\u20139, March 1986.\n[4] Frank McSherry, Michael Isard, and Derek G. Murray: \u201c Scalability! But at What\nCOST? ,\u201d at 15th USENIX Workshop on Hot Topics in Operating Systems  (HotOS),\nMay 2015.\n",
    "summary": "The text discusses distributed data architectures, highlighting trade-offs in scalability and fault tolerance, and references key architectural patterns like shared-nothing and shared-disk systems.",
    "sample_answer": "\u201cOkay, so this excerpt is laying the groundwork for understanding distributed data systems. The core challenge, as evidenced by references to \u2018Scalability! But at What COST?\u2019 and the discussion of shared-nothing versus shared-disk architectures, is balancing performance gains with the inherent complexities of managing data across multiple nodes. A shared-nothing architecture, like the one described in reference [3], is typically favored for scalability because each node has its own private data, reducing contention and allowing for independent scaling; however, this introduces the need for robust coordination mechanisms \u2013 likely something like a consensus algorithm \u2013 to ensure data consistency across the system. This touches on a fundamental limitation of distributed systems, the CAP theorem, where you\u2019re constantly making trade-offs between consistency, availability, and partition tolerance.\u201d",
    "potential_interview_question": "\u201cDescribe the trade-offs you would consider when choosing between a shared-disk and a shared-nothing architecture for a large-scale data warehouse. How might you address the challenges of ensuring data consistency in a shared-nothing environment?\u201d"
  },
  {
    "chunk": "CHAPTER 5\nReplication\nThe major difference between a thing that might go wrong and a thing that cannot possibly\ngo wrong is that when a thing that cannot possibly go wrong goes wrong it usually turns out\nto be impossible to get at or repair.\n\u2014Douglas Adams, Mostly Harmless  (1992)\nReplication  means keeping a copy of the same data on multiple machines that are\nconnected via a network. As discussed in the introduction to Part II , there are several\nreasons why you might want to replicate data:\n\u2022To keep data geographically close to your users (and thus reduce latency)\n\u2022To allow the system to continue working even if some of its parts have failed\n(and thus increase availability)\n\u2022To scale out the number of machines that can serve read queries (and thus\nincrease read throughput)\nIn this chapter we will assume that your dataset is so small that each machine can\nhold a copy of the entire dataset. In Chapter 6  we will relax that assumption and dis\u2010\ncuss partitioning  (sharding ) of datasets that are too big for a single machine. In later\nchapters we will discuss various kinds of faults that can occur in a replicated data sys\u2010\ntem, and how to deal with them.\nIf the data that you\u2019re replicating does not change over time, then replication is easy:\nyou just need to copy the data to every node once, and you\u2019re done. All of the diffi\u2010\nculty in replication lies in handling changes  to replicated data, and that\u2019s what this\n",
    "summary": "This chapter discusses the importance of data replication for availability, read throughput, and latency reduction, while acknowledging the challenges of handling data changes.",
    "sample_answer": "\u201cOkay, let\u2019s talk about replication. From a system design perspective, replicating data \u2013 as we see here \u2013 is fundamentally about increasing availability and read throughput. The core idea is that if one node fails, the system can continue serving requests from other replicas, leveraging the CAP theorem, where we prioritize availability over strong consistency in this scenario. We\u2019re essentially building redundancy; this aligns with the principles of fault tolerance.  Furthermore, if the dataset is too large for a single machine, we'll need to discuss partitioning\u2014or sharding\u2014as described, which directly addresses scalability concerns.\u201d",
    "potential_interview_question": "\u201cImagine you're designing a read-heavy application that requires low latency data access. How would you leverage replication to meet this requirement, and what considerations would you have regarding the trade-offs between consistency and availability?\u201d"
  },
  {
    "chunk": "chapter is about. We will discuss three popular algorithms for replicating changes\nbetween nodes: single-leader , multi-leader , and leaderless  replication. Almost all dis\u2010\ntributed databases use one of these three approaches. They all have various pros and\ncons, which we will examine in detail.\n151\ni. Different people have different definitions for hot, warm , and cold standby servers. In PostgreSQL, for\nexample, hot standby  is used to refer to a replica that accepts reads from clients, whereas a warm standby\nprocesses changes from the leader but doesn\u2019t process any queries from clients. For purposes of this book, the\ndifference isn\u2019t important.There are many trade-offs to consider with replication: for example, whether to use\nsynchronous or asynchronous replication, and how to handle failed replicas. Those\nare often configuration options in databases, and although the details vary by data\u2010\nbase, the general principles are similar across many different implementations. We\nwill discuss the consequences of such choices in this chapter.\nReplication of databases is an old topic\u2014the principles haven\u2019t changed much since\nthey were studied in the 1970s [ 1], because the fundamental constraints of networks\nhave remained the same. However, outside of research, many developers continued\nto assume for a long time that a database consisted of just one node. Mainstream use\nof distributed databases is more recent. Since many application developers are new to\nthis area, there has been a lot of misunderstanding around issues such as eventual\nconsistency . In \u201cProblems with Replication Lag\u201d  on page 161 we will get more precise\nabout eventual consistency and discuss things like the read-your-writes  and mono\u2010\ntonic reads  guarantees.\nLeaders and Followers\nEach node that stores a copy of the database is called a replica . With multiple replicas,\na question inevitably arises: how do we ensure that all the data ends up on all the rep\u2010\nlicas?\nEvery write to the database needs to be processed by every replica; otherwise, the rep\u2010\nlicas would no longer contain the same data. The most common solution for this is\ncalled leader-based replication  (also known as active/passive  or master\u2013slave replica\u2010\ntion) and is illustrated in Figure 5-1 . It works as follows:\n1.One of the replicas is designated the leader  (also known as master  or primary ).\nWhen clients want to write to the database, they must send their requests to the\nleader, which first writes the new data to its local storage.\n2.The other replicas are known as followers  (read replicas , slaves , secondaries , or hot\nstandbys ).i Whenever the leader writes new data to its local storage, it also sends\nthe data change to all of its followers as part of a replication log  or change stream .\nEach follower takes the log from the leader and updates its local copy of the data\u2010\nbase accordingly, by applying all writes in the same order as they were processed\non the leader.\n152 | Chapter 5: Replication\n",
    "summary": "The chapter discusses leader-based replication strategies for maintaining data consistency across multiple replicas, highlighting trade-offs between synchronous and asynchronous replication.",
    "sample_answer": "\u201cOkay, so this chapter is fundamentally about building resilient data systems using replication. The leader-based replication model, illustrated here, is a common approach where one node acts as the leader, handling all write requests, and then propagates those changes asynchronously to follower replicas. This addresses the problem of eventual consistency \u2013 which we'll delve into later \u2013 but also introduces a potential bottleneck at the leader. The key trade-off here is synchronous versus asynchronous replication, where synchronous replication provides stronger consistency guarantees but can impact write performance, while asynchronous replication offers better write speed but introduces a higher risk of data divergence, which is something we\u2019d want to mitigate through monitoring and potentially implementing conflict resolution strategies.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re building a system with multiple read replicas to handle increased traffic. The primary replica is experiencing high write latency. How would you approach this situation, considering the different replication approaches described in this chapter, and what monitoring would you implement to ensure data consistency?\u201d"
  },
  {
    "chunk": "3.When a client wants to read from the database, it can query either the leader or\nany of the followers. However, writes are only accepted on the leader (the follow\u2010\ners are read-only from the client\u2019s point of view).\nFigure 5-1. Leader-based (master\u2013slave) replication.\nThis mode of replication is a built-in feature of many relational databases, such as\nPostgreSQL (since version 9.0), MySQL, Oracle Data Guard [ 2], and SQL Server\u2019s\nAlwaysOn Availability Groups [ 3]. It is also used in some nonrelational databases,\nincluding MongoDB, RethinkDB, and Espresso [ 4]. Finally, leader-based replication\nis not restricted to only databases: distributed message brokers such as Kafka [ 5] and\nRabbitMQ highly available queues [ 6] also use it. Some network filesystems and\nreplicated block devices such as DRBD are similar.\nSynchronous Versus Asynchronous Replication\nAn important detail of a replicated system is whether the replication happens syn\u2010\nchronously  or asynchronously . (In relational databases, this is often a configurable\noption; other systems are often hardcoded to be either one or the other.)\nThink about what happens in Figure 5-1 , where the user of a website updates their\nprofile image. At some point in time, the client sends the update request to the leader;\nshortly afterward, it is received by the leader. At some point, the leader forwards the\ndata change to the followers. Eventually, the leader notifies the client that the update\nwas successful.\nFigure 5-2  shows the communication between various components of the system: the\nuser\u2019s client, the leader, and two followers. Time flows from left to right. A request or\nresponse message is shown as a thick arrow.\nLeaders and Followers | 153\n",
    "summary": "The text describes a leader-based replication architecture, highlighting synchronous replication and its implications for consistency and availability.",
    "sample_answer": "\u201cThis leader-based replication model is a common pattern, especially when we prioritize strong consistency. The key here is that synchronous replication \u2013 where the leader waits for confirmation from followers before acknowledging the write \u2013 ensures data integrity but introduces latency and potential for cascading failures if the leader becomes unavailable. We need to consider the CAP theorem here: in a system like this, we are likely trading off availability for consistency, a common challenge in distributed systems.\u201d",
    "potential_interview_question": "\u201cDescribe the trade-offs between synchronous and asynchronous replication in a distributed system. How might these choices impact the overall availability and consistency of your application, and what are some strategies you would employ to mitigate potential issues?\u201d"
  },
  {
    "chunk": "Figure 5-2. Leader-based replication with one synchronous and one asynchronous fol\u2010\nlower.\nIn the example of Figure 5-2 , the replication to follower 1 is synchronous : the leader\nwaits until follower 1 has confirmed that it received the write before reporting success\nto the user, and before making the write visible to other clients. The replication to\nfollower 2 is asynchronous : the leader sends the message, but doesn\u2019t wait for a\nresponse from the follower.\nThe diagram shows that there is a substantial delay before follower 2 processes the\nmessage. Normally, replication is quite fast: most database systems apply changes to\nfollowers in less than a second. However, there is no guarantee of how long it might\ntake. There are circumstances when followers might fall behind the leader by several\nminutes or more; for example, if a follower is recovering from a failure, if the system\nis operating near maximum capacity, or if there are network problems between the\nnodes.\nThe advantage of synchronous replication is that the follower is guaranteed to have\nan up-to-date copy of the data that is consistent with the leader. If the leader sud\u2010\ndenly fails, we can be sure that the data is still available on the follower. The disad\u2010\nvantage is that if the synchronous follower doesn\u2019t respond (because it has crashed,\nor there is a network fault, or for any other reason), the write cannot be processed.\nThe leader must block all writes and wait until the synchronous replica is available\nagain.\nFor that reason, it is impractical for all followers to be synchronous: any one node\noutage would cause the whole system to grind to a halt. In practice, if you enable syn\u2010\nchronous replication on a database, it usually means that one of the followers is syn\u2010\nchronous, and the others are asynchronous. If the synchronous follower becomes\nunavailable or slow, one of the asynchronous followers is made synchronous. This\nguarantees that you have an up-to-date copy of the data on at least two nodes: the\n154 | Chapter 5: Replication\n",
    "summary": "The text describes a leader-based replication strategy with synchronous and asynchronous followers, highlighting trade-offs in consistency and availability.",
    "sample_answer": "\u201cThis describes a classic approach to building a highly available database system. Using a leader-based replication with synchronous and asynchronous followers allows us to prioritize consistency \u2013 guaranteeing data is replicated before acknowledging a write \u2013 while still offering availability by allowing asynchronous replication for performance. The key trade-off here is reflected in the CAP theorem; the system prioritizes consistency, potentially sacrificing availability if the synchronous follower experiences a failure, which is why we typically only have one synchronous replica.\u201d",
    "potential_interview_question": "\u201cImagine you are designing a system for a high-volume e-commerce platform where data consistency is paramount. Describe your approach to replication, including the potential benefits and drawbacks of synchronous versus asynchronous replication, and justify your choice considering factors like latency and failure scenarios.\u201d"
  },
  {
    "chunk": "leader and one synchronous follower. This configuration is sometimes also called\nsemi-synchronous  [7].\nOften, leader-based replication is configured to be completely asynchronous. In this\ncase, if the leader fails and is not recoverable, any writes that have not yet been repli\u2010\ncated to followers are lost. This means that a write is not guaranteed to be durable,\neven if it has been confirmed to the client. However, a fully asynchronous configura\u2010\ntion has the advantage that the leader can continue processing writes, even if all of its\nfollowers have fallen behind.\nWeakening durability may sound like a bad trade-off, but asynchronous replication is\nnevertheless widely used, especially if there are many followers or if they are geo\u2010\ngraphically distributed. We will return to this issue in \u201cProblems with Replication\nLag\u201d on page 161 .\nResearch on Replication\nIt can be a serious problem for asynchronously replicated systems to lose data if the\nleader fails, so researchers have continued investigating replication methods that do\nnot lose data but still provide good performance and availability. For example, chain\nreplication  [8, 9] is a variant of synchronous replication that has been successfully\nimplemented in a few systems such as Microsoft Azure Storage [ 10, 11].\nThere is a strong connection between consistency of replication and consensus  (get\u2010\nting several nodes to agree on a value), and we will explore this area of theory in more\ndetail in Chapter 9 . In this chapter we will concentrate on the simpler forms of repli\u2010\ncation that are most commonly used in databases in practice. \nSetting Up New Followers\nFrom time to time, you need to set up new followers\u2014perhaps to increase the num\u2010\nber of replicas, or to replace failed nodes. How do you ensure that the new follower\nhas an accurate copy of the leader\u2019s data?\nSimply copying data files from one node to another is typically not sufficient: clients\nare constantly writing to the database, and the data is always in flux, so a standard file\ncopy would see different parts of the database at different points in time. The result\nmight not make any sense.\nYou could make the files on disk consistent by locking the database (making it\nunavailable for writes), but that would go against our goal of high availability. Fortu\u2010\nnately, setting up a follower can usually be done without downtime. Conceptually,\nthe process looks like this:\nLeaders and Followers | 155\n",
    "summary": "The text discusses asynchronous replication, its trade-offs regarding durability and availability, and techniques like chain replication to mitigate data loss during leader failures.",
    "sample_answer": "\u201cAsynchronous replication, as we see here, presents a classic CAP theorem trade-off: prioritizing availability over strong consistency.  The key challenge with a fully asynchronous setup, like the one described, is the potential for data loss if the leader fails before replication completes, and this highlights the need for robust recovery strategies \u2013 like chain replication \u2013 which leverage concepts of consensus to ensure eventual consistency.  Furthermore, the process of setting up new followers demonstrates the complexities of maintaining data consistency in a dynamic system, reinforcing the importance of techniques like eventual consistency models when prioritizing availability.\u201d",
    "potential_interview_question": "\u201cDescribe the trade-offs involved in choosing between synchronous and asynchronous replication. How might the CAP theorem influence your decision, and what techniques could you implement to mitigate potential data loss in an asynchronous system?\u201d"
  },
  {
    "chunk": "1.Take a consistent snapshot of the leader\u2019s database at some point in time\u2014if pos\u2010\nsible, without taking a lock on the entire database. Most databases have this fea\u2010\nture, as it is also required for backups. In some cases, third-party tools are\nneeded, such as innobackupex  for MySQL [ 12].\n2.Copy the snapshot to the new follower node.\n3.The follower connects to the leader and requests all the data changes that have\nhappened since the snapshot was taken. This requires that the snapshot is associ\u2010\nated with an exact position in the leader\u2019s replication log. That position has vari\u2010\nous names: for example, PostgreSQL calls it the log sequence number , and\nMySQL calls it the binlog coordinates .\n4.When the follower has processed the backlog of data changes since the snapshot,\nwe say it has caught up . It can now continue to process data changes from the\nleader as they happen.\nThe practical steps of setting up a follower vary significantly by database. In some\nsystems the process is fully automated, whereas in others it can be a somewhat arcane\nmulti-step workflow that needs to be manually performed by an administrator.\nHandling Node Outages\nAny node in the system can go down, perhaps unexpectedly due to a fault, but just as\nlikely due to planned maintenance (for example, rebooting a machine to install a ker\u2010\nnel security patch). Being able to reboot individual nodes without downtime is a big\nadvantage for operations and maintenance. Thus, our goal is to keep the system as a\nwhole running despite individual node failures, and to keep the impact of a node out\u2010\nage as small as possible.\nHow do you achieve high availability with leader-based replication?\nFollower failure: Catch-up recovery\nOn its local disk, each follower keeps a log of the data changes it has received from\nthe leader. If a follower crashes and is restarted, or if the network between the leader\nand the follower is temporarily interrupted, the follower can recover quite easily:\nfrom its log, it knows the last transaction that was processed before the fault occur\u2010\nred. Thus, the follower can connect to the leader and request all the data changes that\noccurred during the time when the follower was disconnected. When it has applied\nthese changes, it has caught up to the leader and can continue receiving a stream of\ndata changes as before.\n156 | Chapter 5: Replication\n",
    "summary": "This chunk discusses leader-based replication with focus on fault tolerance, catch-up recovery, and the importance of consistent snapshots for maintaining data consistency in a distributed system.",
    "sample_answer": "\u201cOkay, this describes a core concept in building highly available, leader-based replication systems. The key here is using consistent snapshots\u2014like the described innobackupex for MySQL \u2013 to create a known good state when a node fails, and then employing catch-up recovery. The follower utilizes its local log of changes to quickly \u2018catch up\u2019 to the leader after a failure, demonstrating a resilience strategy aligned with the CAP theorem \u2013 acknowledging eventual consistency in favor of availability in this scenario.\u201d  \u201cThis approach leverages the log (binlog coordinates or log sequence number) as a temporal index, enabling the system to maintain availability despite node outages and ensuring the follower can seamlessly integrate back into the replication stream.\u201d",
    "potential_interview_question": "\u201cImagine a leader-based replicated database experiencing a node failure. Describe the steps involved in recovering a failed follower, referencing the concepts of \u2018snapshot,\u2019 \u2018catch-up recovery,\u2019 and \u2018binlog coordinates\u2019 in your explanation.  How would you handle schema drift during this recovery process?\u201d"
  },
  {
    "chunk": "Leader failure: Failover\nHandling a failure of the leader is trickier: one of the followers needs to be promoted\nto be the new leader, clients need to be reconfigured to send their writes to the new\nleader, and the other followers need to start consuming data changes from the new\nleader. This process is called failover .\nFailover can happen manually (an administrator is notified that the leader has failed\nand takes the necessary steps to make a new leader) or automatically. An automatic\nfailover process usually consists of the following steps:\n1.Determining that the leader has failed.  There are many things that could poten\u2010\ntially go wrong: crashes, power outages, network issues, and more. There is no\nfoolproof way of detecting what has gone wrong, so most systems simply use a\ntimeout: nodes frequently bounce messages back and forth between each other,\nand if a node doesn\u2019t respond for some period of time\u2014say, 30 seconds\u2014it is\nassumed to be dead. (If the leader is deliberately taken down for planned mainte\u2010\nnance, this doesn\u2019t apply.)\n2.Choosing a new leader.  This could be done through an election process (where\nthe leader is chosen by a majority of the remaining replicas), or a new leader\ncould be appointed by a previously elected controller node . The best candidate for\nleadership is usually the replica with the most up-to-date data changes from the\nold leader (to minimize any data loss). Getting all the nodes to agree on a new\nleader is a consensus problem, discussed in detail in Chapter 9 .\n3.Reconfiguring the system to use the new leader.  Clients now need to send\ntheir write requests to the new leader (we discuss this in \u201cRequest Routing\u201d on\npage 214). If the old leader comes back, it might still believe that it is the leader,\nnot realizing that the other replicas have forced it to step down. The system\nneeds to ensure that the old leader becomes a follower and recognizes the new\nleader.\nFailover is fraught with things that can go wrong:\n\u2022If asynchronous replication is used, the new leader may not have received all the\nwrites from the old leader before it failed. If the former leader rejoins the cluster\nafter a new leader has been chosen, what should happen to those writes? The new\nleader may have received conflicting writes in the meantime. The most common\nsolution is for the old leader\u2019s unreplicated writes to simply be discarded, which\nmay violate clients\u2019 durability expectations.\n\u2022Discarding writes is especially dangerous if other storage systems outside of the\ndatabase need to be coordinated with the database contents. For example, in one\nincident at GitHub [ 13], an out-of-date MySQL follower was promoted to leader.\nThe database used an autoincrementing counter to assign primary keys to new\nLeaders and Followers | 157\n",
    "summary": "The chunk details the process of failover in a distributed system, emphasizing the challenges of consensus, data consistency during recovery, and potential data loss.",
    "sample_answer": "\u201cOkay, so failover is a critical element in designing resilient distributed systems.  We\u2019re seeing here that it\u2019s fundamentally a consensus problem \u2013 choosing a new leader requires agreement amongst the replicas, which is what we\u2019d discuss in Chapter 9.  The automatic failover process highlights the trade-off between speed and data consistency; if asynchronous replication is used, the new leader might receive conflicting writes, potentially leading to data loss\u2014a scenario that\u2019s particularly problematic if other systems are coordinating with the database content. This illustrates a key point: automatic failover isn\u2019t a silver bullet and requires careful consideration of the system\u2019s durability requirements.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where automatic failover might lead to data inconsistency. How could you mitigate this risk, and what considerations would you make when designing a system for handling such events?\u201d"
  },
  {
    "chunk": "ii. This approach is known as fencing  or, more emphatically, Shoot The Other Node In The Head  (STONITH).\nWe will discuss fencing in more detail in \u201cThe leader and the lock\u201d on page 301 .rows, but because the new leader\u2019s counter lagged behind the old leader\u2019s, it\nreused some primary keys that were previously assigned by the old leader. These\nprimary keys were also used in a Redis store, so the reuse of primary keys resul\u2010\nted in inconsistency between MySQL and Redis, which caused some private data\nto be disclosed to the wrong users.\n\u2022In certain fault scenarios (see Chapter 8 ), it could happen that two nodes both\nbelieve that they are the leader. This situation is called split brain , and it is dan\u2010\ngerous: if both leaders accept writes, and there is no process for resolving con\u2010\nflicts (see \u201cMulti-Leader Replication\u201d on page 168), data is likely to be lost or\ncorrupted. As a safety catch, some systems have a mechanism to shut down one\nnode if two leaders are detected.ii However, if this mechanism is not carefully\ndesigned, you can end up with both nodes being shut down [ 14].\n\u2022What is the right timeout before the leader is declared dead? A longer timeout\nmeans a longer time to recovery in the case where the leader fails. However, if the\ntimeout is too short, there could be unnecessary failovers. For example, a tempo\u2010\nrary load spike could cause a node\u2019s response time to increase above the timeout,\nor a network glitch could cause delayed packets. If the system is already strug\u2010\ngling with high load or network problems, an unnecessary failover is likely to\nmake the situation worse, not better.\nThere are no easy solutions to these problems. For this reason, some operations\nteams prefer to perform failovers manually, even if the software supports automatic\nfailover.\nThese issues\u2014node failures; unreliable networks; and trade-offs around replica con\u2010\nsistency, durability, availability, and latency\u2014are in fact fundamental problems in\ndistributed systems. In Chapter 8  and Chapter 9  we will discuss them in greater\ndepth.\nImplementation of Replication Logs\nHow does leader-based replication work under the hood? Several different replica\u2010\ntion methods are used in practice, so let\u2019s look at each one briefly.\nStatement-based replication\nIn the simplest case, the leader logs every write request ( statement ) that it executes\nand sends that statement log to its followers. For a relational database, this means\nthat every INSERT , UPDATE , or DELETE  statement is forwarded to followers, and each\n158 | Chapter 5: Replication\n",
    "summary": "The text highlights challenges in leader-based replication, specifically around split-brain scenarios, inconsistency due to stale data, and the importance of timeout configurations for failover.",
    "sample_answer": "\u201cThis situation illustrates a core challenge in distributed systems design \u2013 the CAP theorem. Specifically, we\u2019re dealing with the tension between consistency and availability, which is exacerbated by leader-based replication. The \u2018Shoot The Other Node In The Head\u2019 (STONITH) approach, referencing fencing, represents a forceful, albeit potentially disruptive, strategy to resolve a split-brain scenario, acknowledging the inherent risks of a non-deterministic failure.\u201d Further, \u201cThe timeout configuration problem highlights a critical trade-off: a long timeout increases recovery time during a leader failure, but a short timeout can trigger unnecessary failovers during transient network issues or load spikes \u2013 this underscores the need for careful monitoring and adaptive configuration.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where a leader-based replication system might experience a split-brain situation. What mechanisms could be implemented to mitigate this risk, and what are the key considerations when determining the appropriate timeout for failover?\u201d"
  },
  {
    "chunk": "When the follower processes this log, it builds a copy of the exact same data struc\u2010\ntures as found on the leader.\nThis method of replication is used in PostgreSQL and Oracle, among others [ 16]. The\nmain disadvantage is that the log describes the data on a very low level: a WAL con\u2010\ntains details of which bytes were changed in which disk blocks. This makes replica\u2010\ntion closely coupled to the storage engine. If the database changes its storage format\nfrom one version to another, it is typically not possible to run different versions of\nthe database software on the leader and the followers.\nThat may seem like a minor implementation detail, but it can have a big operational\nimpact. If the replication protocol allows the follower to use a newer software version\nthan the leader, you can perform a zero-downtime upgrade of the database software\nby first upgrading the followers and then performing a failover to make one of the\nupgraded nodes the new leader. If the replication protocol does not allow this version\nmismatch, as is often the case with WAL shipping, such upgrades require downtime.\nLogical (row-based) log replication\nAn alternative is to use different log formats for replication and for the storage\nengine, which allows the replication log to be decoupled from the storage engine\ninternals. This kind of replication log is called a logical log , to distinguish it from the\nstorage engine\u2019s ( physical ) data representation.\nA logical log for a relational database is usually a sequence of records describing\nwrites to database tables at the granularity of a row:\n\u2022For an inserted row, the log contains the new values of all columns.\n\u2022For a deleted row, the log contains enough information to uniquely identify the\nrow that was deleted. Typically this would be the primary key, but if there is no\nprimary key on the table, the old values of all columns need to be logged.\n\u2022For an updated row, the log contains enough information to uniquely identify\nthe updated row, and the new values of all columns (or at least the new values of\nall columns that changed).\nA transaction that modifies several rows generates several such log records, followed\nby a record indicating that the transaction was committed. MySQL\u2019s binlog (when\nconfigured to use row-based replication) uses this approach [ 17].\nSince a logical log is decoupled from the storage engine internals, it can more easily\nbe kept backward compatible, allowing the leader and the follower to run different\nversions of the database software, or even different storage engines.\nA logical log format is also easier for external applications to parse. This aspect is use\u2010\nful if you want to send the contents of a database to an external system, such as a data\n160 | Chapter 5: Replication\n",
    "summary": "The chunk discusses the trade-offs between physical and logical log replication, highlighting the impact of storage engine compatibility and the potential for zero-downtime upgrades.",
    "sample_answer": "\u201cThis illustrates a fundamental architectural decision: physical replication, like WAL shipping, is tightly coupled to the storage engine\u2019s internals, creating a hard dependency that prevents version upgrades without downtime. Conversely, a logical log, such as MySQL\u2019s binlog configured for row-based replication, decouples the replication process from the underlying storage engine, enabling version upgrades and potentially zero-downtime failover scenarios by allowing the leader and followers to operate with different software versions.\u201d",
    "potential_interview_question": "\u201cDescribe the differences between physical and logical replication strategies. Under what circumstances would you choose one over the other, and what are the operational implications of each choice, specifically regarding software version compatibility?\u201d"
  },
  {
    "chunk": "iii. The term eventual consistency  was coined by Douglas Terry et al. [ 24], popularized by Werner Vogels\n[22], and became the battle cry of many NoSQL projects. However, not only NoSQL databases are eventually\nconsistent: followers in an asynchronously replicated relational database have the same characteristics.unavailable for writing. And the more nodes you have, the likelier it is that one will\nbe down, so a fully synchronous configuration would be very unreliable.\nUnfortunately, if an application reads from an asynchronous  follower, it may see out\u2010\ndated information if the follower has fallen behind. This leads to apparent inconsis\u2010\ntencies in the database: if you run the same query on the leader and a follower at the\nsame time, you may get different results, because not all writes have been reflected in\nthe follower. This inconsistency is just a temporary state\u2014if you stop writing to the\ndatabase and wait a while, the followers will eventually catch up and become consis\u2010\ntent with the leader. For that reason, this effect is known as eventual consistency  [22,\n23].iii\nThe term \u201ceventually\u201d is deliberately vague: in general, there is no limit to how far a\nreplica can fall behind. In normal operation, the delay between a write happening on\nthe leader and being reflected on a follower\u2014the replication lag \u2014may be only a frac\u2010\ntion of a second, and not noticeable in practice. However, if the system is operating\nnear capacity or if there is a problem in the network, the lag can easily increase to\nseveral seconds or even minutes.\nWhen the lag is so large, the inconsistencies it introduces are not just a theoretical\nissue but a real problem for applications. In this section we will highlight three exam\u2010\nples of problems that are likely to occur when there is replication lag and outline\nsome approaches to solving them.\nReading Your Own Writes\nMany applications let the user submit some data and then view what they have sub\u2010\nmitted. This might be a record in a customer database, or a comment on a discussion\nthread, or something else of that sort. When new data is submitted, it must be sent to\nthe leader, but when the user views the data, it can be read from a follower. This is\nespecially appropriate if data is frequently viewed but only occasionally written.\nWith asynchronous replication, there is a problem, illustrated in Figure 5-3 : if the\nuser views the data shortly after making a write, the new data may not yet have\nreached the replica. To the user, it looks as though the data they submitted was lost,\nso they will be understandably unhappy.\n162 | Chapter 5: Replication\n",
    "summary": "The chunk discusses eventual consistency, replication lag, and the challenges associated with reading from asynchronous replicas in a distributed system.",
    "sample_answer": "\u201cOkay, let\u2019s talk about eventual consistency. The core issue here is that relying on asynchronous replication, like the example with reading user writes from a follower, introduces a risk of data inconsistency. The replication lag \u2013 the delay between a write and its reflection on a follower \u2013 can cause users to see outdated data, leading to a poor experience, highlighting the trade-off between availability and strong consistency.\u201d This demonstrates an understanding of a key distributed systems challenge and a potential solution (understanding the use case for eventual consistency).",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system for tracking user activity on a social media platform. You\u2019ve chosen asynchronous replication for read scaling, but a user reports that their new post isn't showing up correctly. How would you approach troubleshooting this issue, considering the concept of eventual consistency and replication lag?\u201d"
  },
  {
    "chunk": "Figure 5-3. A user makes a write, followed by a read from a stale replica. To prevent\nthis anomaly, we need read-after-write consistency.\nIn this situation, we need read-after-write consistency , also known as read-your-writes\nconsistency  [24]. This is a guarantee that if the user reloads the page, they will always\nsee any updates they submitted themselves. It makes no promises about other users:\nother users\u2019 updates may not be visible until some later time. However, it reassures\nthe user that their own input has been saved correctly.\nHow can we implement read-after-write consistency in a system with leader-based\nreplication? There are various possible techniques. To mention a few:\n\u2022When reading something that the user may have modified, read it from the\nleader; otherwise, read it from a follower. This requires that you have some way\nof knowing whether something might have been modified, without actually\nquerying it. For example, user profile information on a social network is nor\u2010\nmally only editable by the owner of the profile, not by anybody else. Thus, a sim\u2010\nple rule is: always read the user\u2019s own profile from the leader, and any other\nusers\u2019 profiles from a follower.\n\u2022If most things in the application are potentially editable by the user, that\napproach won\u2019t be effective, as most things would have to be read from the\nleader (negating the benefit of read scaling). In that case, other criteria may be\nused to decide whether to read from the leader. For example, you could track the\ntime of the last update and, for one minute after the last update, make all reads\nfrom the leader. You could also monitor the replication lag on followers and pre\u2010\nvent queries on any follower that is more than one minute behind the leader.\n\u2022The client can remember the timestamp of its most recent write\u2014then the sys\u2010\ntem can ensure that the replica serving any reads for that user reflects updates at\nleast until that timestamp. If a replica is not sufficiently up to date, either the read\ncan be handled by another replica or the query can wait until the replica has\nProblems with Replication Lag | 163\n",
    "summary": "The chunk discusses implementing read-after-write consistency in a leader-based replicated system, focusing on techniques for minimizing replication lag and handling stale reads.",
    "sample_answer": "\u201cOkay, let\u2019s analyze this scenario. The key here is understanding the trade-offs between consistency and availability. Implementing read-after-write consistency in a leader-based system, as the text suggests, requires careful consideration. We can achieve this by directing reads for user-specific data (like a profile) to the leader, guaranteeing that the user always sees their latest updates \u2013 this leverages the leader\u2019s role as the source of truth. However, if most operations are user-editable, simply reading from the leader becomes inefficient. Therefore, we might introduce techniques like tracking replication lag and potentially delaying reads on followers, mirroring approaches to mitigating latency\u2014essentially, a form of proactive fault tolerance.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system with leader-based replication for user profiles.  How would you balance the need for read-after-write consistency with the performance demands of a high-traffic social network?  Specifically, how might you handle scenarios where reads from followers are stale while still maintaining a reasonable level of availability?\u201d"
  },
  {
    "chunk": "caught up. The timestamp could be a logical timestamp  (something that indicates\nordering of writes, such as the log sequence number) or the actual system clock\n(in which case clock synchronization becomes critical; see \u201cUnreliable Clocks\u201d\non page 287 ).\n\u2022If your replicas are distributed across multiple datacenters (for geographical\nproximity to users or for availability), there is additional complexity. Any request\nthat needs to be served by the leader must be routed to the datacenter that con\u2010\ntains the leader.\nAnother complication arises when the same user is accessing your service from mul\u2010\ntiple devices, for example a desktop web browser and a mobile app. In this case you\nmay want to provide cross-device  read-after-write consistency: if the user enters some\ninformation on one device and then views it on another device, they should see the\ninformation they just entered.\nIn this case, there are some additional issues to consider:\n\u2022Approaches that require remembering the timestamp of the user\u2019s last update\nbecome more difficult, because the code running on one device doesn\u2019t know\nwhat updates have happened on the other device. This metadata will need to be\ncentralized.\n\u2022If your replicas are distributed across different datacenters, there is no guarantee\nthat connections from different devices will be routed to the same datacenter.\n(For example, if the user\u2019s desktop computer uses the home broadband connec\u2010\ntion and their mobile device uses the cellular data network, the devices\u2019 network\nroutes may be completely different.) If your approach requires reading from the\nleader, you may first need to route requests from all of a user\u2019s devices to the\nsame datacenter. \nMonotonic Reads\nOur second example of an anomaly that can occur when reading from asynchronous\nfollowers is that it\u2019s possible for a user to see things moving backward in time .\nThis can happen if a user makes several reads from different replicas. For example,\nFigure 5-4  shows user 2345 making the same query twice, first to a follower with little\nlag, then to a follower with greater lag. (This scenario is quite likely if the user\nrefreshes a web page, and each request is routed to a random server.) The first query\nreturns a comment that was recently added by user 1234, but the second query\ndoesn\u2019t return anything because the lagging follower has not yet picked up that write.\nIn effect, the second query is observing the system at an earlier point in time than the\nfirst query. This wouldn\u2019t be so bad if the first query hadn\u2019t returned anything,\nbecause user 2345 probably wouldn\u2019t know that user 1234 had recently added a com\u2010\n164 | Chapter 5: Replication\n",
    "summary": "The chunk discusses challenges related to replication, data consistency across devices and datacenters, and the impact of asynchronous reads on data consistency.",
    "sample_answer": "\u201cThis excerpt highlights a critical concern in designing replicated systems \u2013 ensuring consistency across devices and datacenters. The issue of observing the system at an earlier point in time due to asynchronous reads (monotic reads) demonstrates the complexities of maintaining data consistency in a distributed environment, specifically highlighting the need for strategies like optimistic concurrency control or eventual consistency, given that we can\u2019t rely on synchronous replication to maintain a single, authoritative view of the data.  Furthermore, the discussion about routing requests based on datacenter proximity underscores the importance of geographic distribution for availability, which then necessitates careful consideration of how to achieve a consistent view of data across those diverse locations.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where asynchronous reads in a replicated database system could lead to a user observing data at an earlier point in time. What architectural considerations would you implement to mitigate this potential issue, considering the challenges of geographically distributed replicas?\u201d"
  },
  {
    "chunk": "ment. However, it\u2019s very confusing for user 2345 if they first see user 1234\u2019s comment\nappear, and then see it disappear again.\nFigure 5-4. A user first reads from a fresh replica, then from a stale replica. Time\nappears to go backward. To prevent this anomaly, we need monotonic reads.\nMonotonic reads  [23] is a guarantee that this kind of anomaly does not happen. It\u2019s a\nlesser guarantee than strong consistency, but a stronger guarantee than eventual con\u2010\nsistency. When you read data, you may see an old value; monotonic reads only means\nthat if one user makes several reads in sequence, they will not see time go backward\u2014\ni.e., they will not read older data after having previously read newer data.\nOne way of achieving monotonic reads is to make sure that each user always makes\ntheir reads from the same replica (different users can read from different replicas).\nFor example, the replica can be chosen based on a hash of the user ID, rather than\nrandomly. However, if that replica fails, the user\u2019s queries will need to be rerouted to\nanother replica. \nConsistent Prefix Reads\nOur third example of replication lag anomalies concerns violation of causality. Imag\u2010\nine the following short dialog between Mr. Poons and Mrs. Cake:\nMr. Poons\nHow far into the future can you see, Mrs. Cake?\nMrs. Cake\nAbout ten seconds usually, Mr. Poons.\nProblems with Replication Lag | 165\n",
    "summary": "The text discusses replication lag anomalies and introduces the concept of monotonic reads to mitigate them, alongside strategies for choosing replicas to ensure causality.",
    "sample_answer": "\u201cThis scenario highlights a critical issue with replication \u2013 temporal inconsistencies and causality violations. The \u2018monotonic reads\u2019 approach, where each user consistently reads from the same replica, directly addresses the problem by guaranteeing that a user\u2019s sequence of reads progresses in a consistent temporal order, preventing the observed \u201ctime going backward\u201d anomaly.  This is a classic example of needing to ensure causality when replicating data, which is a fundamental challenge in distributed systems and closely relates to the CAP theorem \u2013 particularly the \u2018consistency\u2019 axis.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system that replicates data across multiple geographically dispersed data centers. How would you address the potential for temporal inconsistencies and causality violations observed in this scenario, and what mechanisms might you employ to ensure users always see data in the correct chronological order?\u201d"
  },
  {
    "chunk": "There is a causal dependency between those two sentences: Mrs. Cake heard Mr.\nPoons\u2019s question and answered it.\nNow, imagine a third person is listening to this conversation through followers. The\nthings said by Mrs. Cake go through a follower with little lag, but the things said by\nMr. Poons have a longer replication lag (see Figure 5-5 ). This observer would hear\nthe following:\nMrs. Cake\nAbout ten seconds usually, Mr. Poons.\nMr. Poons\nHow far into the future can you see, Mrs. Cake?\nTo the observer it looks as though Mrs. Cake is answering the question before Mr.\nPoons has even asked it. Such psychic powers are impressive, but very confusing [ 25].\nFigure 5-5. If some partitions are replicated slower than others, an observer may see the\nanswer before they see the question.\nPreventing this kind of anomaly requires another type of guarantee: consistent prefix\nreads  [23]. This guarantee says that if a sequence of writes happens in a certain order,\nthen anyone reading those writes will see them appear in the same order.\nThis is a particular problem in partitioned (sharded) databases, which we will discuss\nin Chapter 6 . If the database always applies writes in the same order, reads always see\na consistent prefix, so this anomaly cannot happen. However, in many distributed\n166 | Chapter 5: Replication\n",
    "summary": "The text discusses the issue of inconsistent data views in a partitioned database due to differing replication lags, and introduces the concept of consistent prefix reads as a mitigation strategy.",
    "sample_answer": "\u201cThis scenario highlights a critical challenge in partitioned database systems \u2013 data staleness due to varying replication lag, directly relating to the CAP theorem\u2019s potential conflict between consistency and availability. To address this, consistent prefix reads are essential; this means ensuring that if a sequence of writes occurs in a specific order, all readers will observe them in that same order. This is often achieved by applying writes in a specific order across partitions, which is a key consideration when designing sharded database systems, as highlighted in Chapter 6.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where data staleness could lead to a misleading observation in a partitioned database. How would you design a system to prevent this, and what architectural considerations would you prioritize?\u201d"
  },
  {
    "chunk": "databases, different partitions operate independently, so there is no global ordering of\nwrites: when a user reads from the database, they may see some parts of the database\nin an older state and some in a newer state.\nOne solution is to make sure that any writes that are causally related to each other are\nwritten to the same partition\u2014but in some applications that cannot be done effi\u2010\nciently. There are also algorithms that explicitly keep track of causal dependencies, a\ntopic that we will return to in \u201cThe \u201chappens-before\u201d relationship and concurrency\u201d\non page 186 . \nSolutions for Replication Lag\nWhen working with an eventually consistent system, it is worth thinking about how\nthe application behaves if the replication lag increases to several minutes or even\nhours. If the answer is \u201cno problem,\u201d that\u2019s great. However, if the result is a bad expe\u2010\nrience for users, it\u2019s important to design the system to provide a stronger guarantee,\nsuch as read-after-write. Pretending that replication is synchronous when in fact it is\nasynchronous is a recipe for problems down the line.\nAs discussed earlier, there are ways in which an application can provide a stronger\nguarantee than the underlying database\u2014for example, by performing certain kinds of\nreads on the leader. However, dealing with these issues in application code is com\u2010\nplex and easy to get wrong.\nIt would be better if application developers didn\u2019t have to worry about subtle replica\u2010\ntion issues and could just trust their databases to \u201cdo the right thing.\u201d This is why\ntransactions  exist: they are a way for a database to provide stronger guarantees so that\nthe application can be simpler.\nSingle-node transactions have existed for a long time. However, in the move to dis\u2010\ntributed (replicated and partitioned) databases, many systems have abandoned them,\nclaiming that transactions are too expensive in terms of performance and availability,\nand asserting that eventual consistency is inevitable in a scalable system. There is\nsome truth in that statement, but it is overly simplistic, and we will develop a more\nnuanced view over the course of the rest of this book. We will return to the topic of\ntransactions in Chapters 7 and 9, and we will discuss some alternative mechanisms in\n",
    "summary": "The text discusses the challenges of eventual consistency in distributed databases, particularly replication lag, and the trade-offs between strong consistency (transactions) and eventual consistency.",
    "sample_answer": "\u201cThis chunk highlights a crucial tension in designing distributed systems \u2013 the conflict between scalability and data consistency. The author correctly identifies that eventual consistency, achieved through asynchronous replication, introduces the risk of replication lag, potentially leading to users seeing stale data. To address this, the system needs to provide mechanisms, such as transactions, to enforce stronger consistency guarantees, however, these often come with significant performance and availability trade-offs \u2013 a direct consequence of the CAP theorem.\u201d",
    "potential_interview_question": "\u201cImagine you're designing a system for tracking user purchases. Given the potential for replication lag in a distributed database, describe two strategies you would employ to mitigate the risk of users seeing outdated purchase information, and explain the trade-offs associated with each approach.\u201d"
  },
  {
    "chunk": "Part III . \nProblems with Replication Lag | 167\niv. If the database is partitioned (see Chapter 6 ), each partition has one leader. Different partitions may have\ntheir leaders on different nodes, but each partition must nevertheless have one leader node.Multi-Leader Replication\nSo far in this chapter we have only considered replication architectures using a single\nleader. Although that is a common approach, there are interesting alternatives.\nLeader-based replication has one major downside: there is only one leader, and all\nwrites must go through it.iv If you can\u2019t connect to the leader for any reason, for\nexample due to a network interruption between you and the leader, you can\u2019t write to\nthe database.\nA natural extension of the leader-based replication model is to allow more than one\nnode to accept writes. Replication still happens in the same way: each node that pro\u2010\ncesses a write must forward that data change to all the other nodes. We call this a\nmulti-leader  configuration (also known as master\u2013master  or active/active replication ).\nIn this setup, each leader simultaneously acts as a follower to the other leaders.\nUse Cases for Multi-Leader Replication\nIt rarely makes sense to use a multi-leader setup within a single datacenter, because\nthe benefits rarely outweigh the added complexity. However, there are some situa\u2010\ntions in which this configuration is reasonable.\nMulti-datacenter operation\nImagine you have a database with replicas in several different datacenters (perhaps so\nthat you can tolerate failure of an entire datacenter, or perhaps in order to be closer\nto your users). With a normal leader-based replication setup, the leader has to be in\none of the datacenters, and all writes must go through that datacenter.\nIn a multi-leader configuration, you can have a leader in each  datacenter. Figure 5-6\nshows what this architecture might look like. Within each datacenter, regular leader\u2013\nfollower replication is used; between datacenters, each datacenter\u2019s leader replicates\nits changes to the leaders in other datacenters.\n168 | Chapter 5: Replication\n",
    "summary": "The text discusses multi-leader replication as a solution for tolerating datacenter failures and improving availability by distributing write leadership.",
    "sample_answer": "\u201cOkay, let's talk about multi-leader replication. The core problem this addresses is single points of failure \u2013 specifically, the leader in a traditional leader-based replication setup. If the leader goes down, all writes are blocked, leading to downtime.  Multi-leader replication mitigates this by distributing the write leadership across multiple nodes, ensuring that writes can continue even if one leader experiences an outage. This aligns with the CAP theorem; we\u2019re prioritizing availability (assuming eventual consistency) in a distributed system, acknowledging that strict consistency might be sacrificed for higher uptime.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you would choose multi-leader replication over traditional leader-based replication. What are the potential challenges and trade-offs you would consider, referencing any relevant design principles or theorems (e.g., CAP theorem)?\u201d"
  },
  {
    "chunk": "Figure 5-6. Multi-leader replication across multiple datacenters.\nLet\u2019s compare how the single-leader and multi-leader configurations fare in a multi-\ndatacenter deployment:\nPerformance\nIn a single-leader configuration, every write must go over the internet to the\ndatacenter with the leader. This can add significant latency to writes and might\ncontravene the purpose of having multiple datacenters in the first place. In a\nmulti-leader configuration, every write can be processed in the local datacenter\nand is replicated asynchronously to the other datacenters. Thus, the inter-\ndatacenter network delay is hidden from users, which means the perceived per\u2010\nformance may be better.\nTolerance of datacenter outages\nIn a single-leader configuration, if the datacenter with the leader fails, failover\ncan promote a follower in another datacenter to be leader. In a multi-leader con\u2010\nfiguration, each datacenter can continue operating independently of the others,\nand replication catches up when the failed datacenter comes back online.\nTolerance of network problems\nTraffic between datacenters usually goes over the public internet, which may be\nless reliable than the local network within a datacenter. A single-leader configu\u2010\nration is very sensitive to problems in this inter-datacenter link, because writes\nare made synchronously over this link. A multi-leader configuration with asyn\u2010\nchronous replication can usually tolerate network problems better: a temporary\nnetwork interruption does not prevent writes being processed.\nMulti-Leader Replication | 169\n",
    "summary": "The chunk discusses the trade-offs between single-leader and multi-leader replication architectures in a multi-datacenter environment, focusing on performance, fault tolerance, and network resilience.",
    "sample_answer": "\u201cOkay, so when designing a system like this, the key consideration is choosing the right replication strategy. A single-leader architecture, while simpler, introduces significant latency due to all writes traversing the internet to the leader, directly impacting user experience. Multi-leader replication, however, addresses this by allowing local writes to be processed asynchronously and replicated to other datacenters, effectively hiding network latency. This aligns with the CAP theorem \u2013 availability and partition tolerance are prioritized over consistency in a distributed system. Furthermore, the asynchronous replication helps the system tolerate datacenter outages and network issues, as each datacenter can continue to operate independently.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re building a global service and need to choose between a single-leader and multi-leader replication. Describe the potential drawbacks of a single-leader setup in a multi-datacenter environment, and how a multi-leader approach could mitigate those issues, referencing relevant concepts like the CAP theorem.\u201d"
  },
  {
    "chunk": "Some databases support multi-leader configurations by default, but it is also often\nimplemented with external tools, such as Tungsten Replicator for MySQL [ 26], BDR\nfor PostgreSQL [ 27], and GoldenGate for Oracle [ 19].\nAlthough multi-leader replication has advantages, it also has a big downside: the\nsame data may be concurrently modified in two different datacenters, and those write\nconflicts must be resolved (indicated as \u201cconflict resolution\u201d in Figure 5-6 ). We will\ndiscuss this issue in \u201cHandling Write Conflicts\u201d on page 171 .\nAs multi-leader replication is a somewhat retrofitted feature in many databases, there\nare often subtle configuration pitfalls and surprising interactions with other database\nfeatures. For example, autoincrementing keys, triggers, and integrity constraints can\nbe problematic. For this reason, multi-leader replication is often considered danger\u2010\nous territory that should be avoided if possible [ 28].\nClients with offline operation\nAnother situation in which multi-leader replication is appropriate is if you have an\napplication that needs to continue to work while it is disconnected from the internet.\nFor example, consider the calendar apps on your mobile phone, your laptop, and\nother devices. You need to be able to see your meetings (make read requests) and\nenter new meetings (make write requests) at any time, regardless of whether your\ndevice currently has an internet connection. If you make any changes while you are\noffline, they need to be synced with a server and your other devices when the device\nis next online.\nIn this case, every device has a local database that acts as a leader (it accepts write\nrequests), and there is an asynchronous multi-leader replication process (sync)\nbetween the replicas of your calendar on all of your devices. The replication lag may\nbe hours or even days, depending on when you have internet access available.\nFrom an architectural point of view, this setup is essentially the same as multi-leader\nreplication between datacenters, taken to the extreme: each device is a \u201cdatacenter,\u201d\nand the network connection between them is extremely unreliable. As the rich his\u2010\ntory of broken calendar sync implementations demonstrates, multi-leader replication\nis a tricky thing to get right.\nThere are tools that aim to make this kind of multi-leader configuration easier. For\nexample, CouchDB is designed for this mode of operation [ 29].\nCollaborative editing\nReal-time collaborative editing  applications allow several people to edit a document\nsimultaneously. For example, Etherpad [ 30] and Google Docs [ 31] allow multiple\npeople to concurrently edit a text document or spreadsheet (the algorithm is briefly\ndiscussed in \u201cAutomatic Conflict Resolution\u201d on page 174 ).\n170 | Chapter 5: Replication\n",
    "summary": "The text discusses multi-leader replication, highlighting its complexity and potential pitfalls, alongside its use cases in collaborative editing and applications requiring offline operation.",
    "sample_answer": "\u201cMulti-leader replication, as demonstrated in applications like Etherpad and Google Docs, presents a significant challenge due to the potential for write conflicts and data inconsistencies. This is because multiple leaders can concurrently modify data, necessitating careful conflict resolution strategies\u2014a core consideration when designing distributed systems, especially when dealing with scenarios like offline operation where network connectivity is intermittent. The core issue here is managing the \u2018conflict resolution\u2019\u2014a key aspect of designing robust, highly available systems.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you would consider using multi-leader replication, and outline the potential challenges you\u2019d anticipate, referencing specific architectural considerations related to conflict resolution.\u201d"
  },
  {
    "chunk": "We don\u2019t usually think of collaborative editing as a database replication problem, but\nit has a lot in common with the previously mentioned offline editing use case. When\none user edits a document, the changes are instantly applied to their local replica (the\nstate of the document in their web browser or client application) and asynchronously\nreplicated to the server and any other users who are editing the same document.\nIf you want to guarantee that there will be no editing conflicts, the application must\nobtain a lock on the document before a user can edit it. If another user wants to edit\nthe same document, they first have to wait until the first user has committed their\nchanges and released the lock. This collaboration model is equivalent to single-leader\nreplication with transactions on the leader.\nHowever, for faster collaboration, you may want to make the unit of change very\nsmall (e.g., a single keystroke) and avoid locking. This approach allows multiple users\nto edit simultaneously, but it also brings all the challenges of multi-leader replication,\nincluding requiring conflict resolution [ 32].\nHandling Write Conflicts\nThe biggest problem with multi-leader replication is that write conflicts can occur,\nwhich means that conflict resolution is required.\nFor example, consider a wiki page that is simultaneously being edited by two users, as\nshown in Figure 5-7 . User 1 changes the title of the page from A to B, and user 2\nchanges the title from A to C at the same time. Each user\u2019s change is successfully\napplied to their local leader. However, when the changes are asynchronously replica\u2010\nted, a conflict is detected [ 33]. This problem does not occur in a single-leader data\u2010\nbase.\nFigure 5-7. A write conflict caused by two leaders concurrently updating the same\nrecord.\nMulti-Leader Replication | 171\n",
    "summary": "The text discusses the challenges of multi-leader replication in collaborative editing, highlighting the need for conflict resolution and the trade-offs between consistency and performance.",
    "sample_answer": "\u201cThis scenario demonstrates a key challenge in distributed systems \u2013 multi-leader replication. The application is essentially implementing a form of single-leader replication with transactions on the leader, similar to how a traditional database handles concurrent updates. However, the asynchronous replication introduces the possibility of write conflicts, necessitating conflict resolution mechanisms, which is a fundamental consideration when designing systems like this.  The need for conflict resolution points to the CAP theorem; the system likely faces a trade-off between consistency and availability, as achieving strong consistency in a collaborative environment can significantly impact performance.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a real-time collaborative document editor, similar to Google Docs. Describe the key architectural considerations and potential challenges you\u2019d need to address regarding data consistency and conflict resolution. Specifically, how would you approach handling write conflicts in a multi-leader replication scenario, referencing any relevant distributed systems principles or theorems you\u2019ve learned.\u201d"
  },
  {
    "chunk": "Synchronous versus asynchronous conflict detection\nIn a single-leader database, the second writer will either block and wait for the first\nwrite to complete, or abort the second write transaction, forcing the user to retry the\nwrite. On the other hand, in a multi-leader setup, both writes are successful, and the\nconflict is only detected asynchronously at some later point in time. At that time, it\nmay be too late to ask the user to resolve the conflict.\nIn principle, you could make the conflict detection synchronous\u2014i.e., wait for the\nwrite to be replicated to all replicas before telling the user that the write was success\u2010\nful. However, by doing so, you would lose the main advantage of multi-leader repli\u2010\ncation: allowing each replica to accept writes independently. If you want synchronous\nconflict detection, you might as well just use single-leader replication.\nConflict avoidance\nThe simplest strategy for dealing with conflicts is to avoid them: if the application can\nensure that all writes for a particular record go through the same leader, then con\u2010\nflicts cannot occur. Since many implementations of multi-leader replication handle\nconflicts quite poorly, avoiding conflicts is a frequently recommended approach [ 34].\nFor example, in an application where a user can edit their own data, you can ensure\nthat requests from a particular user are always routed to the same datacenter and use\nthe leader in that datacenter for reading and writing. Different users may have differ\u2010\nent \u201chome\u201d datacenters (perhaps picked based on geographic proximity to the user),\nbut from any one user\u2019s point of view the configuration is essentially single-leader.\nHowever, sometimes you might want to change the designated leader for a record\u2014\nperhaps because one datacenter has failed and you need to reroute traffic to another\ndatacenter, or perhaps because a user has moved to a different location and is now\ncloser to a different datacenter. In this situation, conflict avoidance breaks down, and\nyou have to deal with the possibility of concurrent writes on different leaders.\nConverging toward a consistent state\nA single-leader database applies writes in a sequential order: if there are several\nupdates to the same field, the last write determines the final value of the field.\nIn a multi-leader configuration, there is no defined ordering of writes, so it\u2019s not clear\nwhat the final value should be. In Figure 5-7 , at leader 1 the title is first updated to B\nand then to C; at leader 2 it is first updated to C and then to B. Neither order is \u201cmore\ncorrect\u201d than the other.\nIf each replica simply applied writes in the order that it saw the writes, the database\nwould end up in an inconsistent state: the final value would be C at leader 1 and B at\nleader 2. That is not acceptable\u2014every replication scheme must ensure that the data\nis eventually the same in all replicas. Thus, the database must resolve the conflict in a\n172 | Chapter 5: Replication\n",
    "summary": "The chunk discusses the challenges of conflict resolution in multi-leader database replication, highlighting the trade-offs between synchronous and asynchronous conflict detection, and the importance of conflict avoidance.",
    "sample_answer": "\u201cOkay, this section really highlights a core challenge in multi-leader replication. The key takeaway here is the trade-off between synchronous and asynchronous conflict detection. Synchronous detection, as the text suggests, would essentially negate the benefits of multi-leader replication, because you\u2019d be blocking writes and losing the autonomy of the replicas.  Instead, multi-leader systems typically rely on asynchronous detection, which, as shown in the example, doesn\u2019t guarantee a single consistent state \u2013 a classic CAP theorem consideration. The fact that there's no inherent ordering of writes in a multi-leader system means we need to design for eventual consistency, and strategies like conflict avoidance are crucial.\u201d",
    "potential_interview_question": "\u201cImagine you're designing a key-value store with multiple leaders. How would you approach conflict resolution, and what design choices would you make to balance consistency and availability, referencing principles discussed in the text?\u201d"
  },
  {
    "chunk": "convergent  way, which means that all replicas must arrive at the same final value\nwhen all changes have been replicated.\nThere are various ways of achieving convergent conflict resolution:\n\u2022Give each write a unique ID (e.g., a timestamp, a long random number, a UUID,\nor a hash of the key and value), pick the write with the highest ID as the winner ,\nand throw away the other writes. If a timestamp is used, this technique is known\nas last write wins  (LWW). Although this approach is popular, it is dangerously\nprone to data loss [ 35]. We will discuss LWW in more detail at the end of this\nchapter ( \u201cDetecting Concurrent Writes\u201d on page 184 ).\n\u2022Give each replica a unique ID, and let writes that originated at a higher-\nnumbered replica always take precedence over writes that originated at a lower-\nnumbered replica. This approach also implies data loss.\n\u2022Somehow merge the values together\u2014e.g., order them alphabetically and then\nconcatenate them (in Figure 5-7 , the merged title might be something like\n\u201cB/C\u201d).\n\u2022Record the conflict in an explicit data structure that preserves all information,\nand write application code that resolves the conflict at some later time (perhaps\nby prompting the user).\nCustom conflict resolution logic\nAs the most appropriate way of resolving a conflict may depend on the application,\nmost multi-leader replication tools let you write conflict resolution logic using appli\u2010\ncation code. That code may be executed on write or on read:\nOn write\nAs soon as the database system detects a conflict in the log of replicated changes,\nit calls the conflict handler. For example, Bucardo allows you to write a snippet of\nPerl for this purpose. This handler typically cannot prompt a user\u2014it runs in a\nbackground process and it must execute quickly.\nOn read\nWhen a conflict is detected, all the conflicting writes are stored. The next time\nthe data is read, these multiple versions of the data are returned to the applica\u2010\ntion. The application may prompt the user or automatically resolve the conflict,\nand write the result back to the database. CouchDB works this way, for example.\nNote that conflict resolution usually applies at the level of an individual row or docu\u2010\nment, not for an entire transaction [ 36]. Thus, if you have a transaction that atomi\u2010\ncally makes several different writes (see Chapter 7 ), each write is still considered\nseparately for the purposes of conflict resolution.\nMulti-Leader Replication | 173\n",
    "summary": "This chunk discusses conflict resolution strategies in multi-leader replication, focusing on last-write-wins and application-level conflict handling.",
    "sample_answer": "\u201cOkay, let\u2019s talk about handling concurrent writes in a multi-leader replication setup. The core challenge is ensuring data consistency when multiple replicas are updating simultaneously \u2013 we need to address the potential for conflicts, and the \u2018last-write-wins\u2019 strategy is a common approach where the most recent write prevails, but that comes with the risk of data loss.  To mitigate this, we can implement application-level conflict resolution, allowing us to define custom logic\u2014for example, merging values or prompting the user for resolution\u2014and execute this logic on write or read, as demonstrated by Bucardo or CouchDB.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you would implement application-level conflict resolution in a multi-leader replication system. What considerations would you prioritize when designing this conflict handler, and how would you choose between executing it on write versus read?\u201d"
  },
  {
    "chunk": "Automatic Conflict Resolution\nConflict resolution rules can quickly become complicated, and custom code can be\nerror-prone. Amazon is a frequently cited example of surprising effects due to a con\u2010\nflict resolution handler: for some time, the conflict resolution logic on the shopping\ncart would preserve items added to the cart, but not items removed from the cart.\nThus, customers would sometimes see items reappearing in their carts even though\nthey had previously been removed [ 37].\nThere has been some interesting research into automatically resolving conflicts\ncaused by concurrent data modifications. A few lines of research are worth mention\u2010\ning:\n\u2022Conflict-free replicated datatypes  (CRDTs) [ 32, 38] are a family of data structures\nfor sets, maps, ordered lists, counters, etc. that can be concurrently edited by\nmultiple users, and which automatically resolve conflicts in sensible ways. Some\nCRDTs have been implemented in Riak 2.0 [ 39, 40].\n\u2022Mergeable persistent data structures  [41] track history explicitly, similarly to the\nGit version control system, and use a three-way merge function (whereas CRDTs\nuse two-way merges).\n\u2022Operational transformation  [42] is the conflict resolution algorithm behind col\u2010\nlaborative editing applications such as Etherpad [ 30] and Google Docs [ 31]. It\nwas designed particularly for concurrent editing of an ordered list of items, such\nas the list of characters that constitute a text document.\nImplementations of these algorithms in databases are still young, but it\u2019s likely that\nthey will be integrated into more replicated data systems in the future. Automatic\nconflict resolution could make multi-leader data synchronization much simpler for\napplications to deal with. \nWhat is a conflict?\nSome kinds of conflict are obvious. In the example in Figure 5-7 , two writes concur\u2010\nrently modified the same field in the same record, setting it to two different values.\nThere is little doubt that this is a conflict.\nOther kinds of conflict can be more subtle to detect. For example, consider a meeting\nroom booking system: it tracks which room is booked by which group of people at\nwhich time. This application needs to ensure that each room is only booked by one\ngroup of people at any one time (i.e., there must not be any overlapping bookings for\nthe same room). In this case, a conflict may arise if two different bookings are created\nfor the same room at the same time. Even if the application checks availability before\n174 | Chapter 5: Replication\n",
    "summary": "The text discusses conflict resolution strategies, particularly using CRDTs and Operational Transformation, highlighting the complexities and potential pitfalls of manual conflict resolution.",
    "sample_answer": "\u201cOkay, this excerpt highlights a crucial challenge in designing replicated systems \u2013 managing concurrent data modifications and resolving conflicts. The example of the shopping cart demonstrates how seemingly simple conflict resolution logic can lead to unexpected behavior, emphasizing the importance of robust strategies.  Using CRDTs, like those implemented in Riak 2.0, offers a more automated approach by leveraging data structures designed to automatically resolve conflicts, avoiding the complexity of custom rules. Operational Transformation, as seen in collaborative editing tools like Google Docs, provides another approach by tracking history and using a three-way merge function, which is important for ensuring data consistency across multiple replicas.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say you\u2019re designing a replicated database for a collaborative document editing application.  Discuss the potential challenges you foresee with traditional conflict resolution approaches and outline how you might leverage a strategy like Operational Transformation or CRDTs to mitigate these risks, specifically considering the trade-offs between complexity and consistency.\u201d"
  },
  {
    "chunk": "v. Not to be confused with a star schema  (see \u201cStars and Snowflakes: Schemas for Analytics\u201d on page 93 ),\nwhich describes the structure of a data model, not the communication topology between nodes.allowing a user to make a booking, there can be a conflict if the two bookings are\nmade on two different leaders.\nThere isn\u2019t a quick ready-made answer, but in the following chapters we will trace a\npath toward a good understanding of this problem. We will see some more examples\nof conflicts in Chapter 7 , and in Chapter 12  we will discuss scalable approaches for\ndetecting and resolving conflicts in a replicated system. \nMulti-Leader Replication Topologies\nA replication topology  describes the communication paths along which writes are\npropagated from one node to another. If you have two leaders, like in Figure 5-7 ,\nthere is only one plausible topology: leader 1 must send all of its writes to leader 2,\nand vice versa. With more than two leaders, various different topologies are possible.\nSome examples are illustrated in Figure 5-8 .\nFigure 5-8. Three example topologies in which multi-leader replication can be set up.\nThe most general topology is all-to-all  (Figure 5-8  [c]), in which every leader sends its\nwrites to every other leader. However, more restricted topologies are also used: for\nexample, MySQL by default supports only a circular topology  [34], in which each\nnode receives writes from one node and forwards those writes (plus any writes of its\nown) to one other node. Another popular topology has the shape of a star:v one desig\u2010\nnated root node forwards writes to all of the other nodes. The star topology can be\ngeneralized to a tree.\nIn circular and star topologies, a write may need to pass through several nodes before\nit reaches all replicas. Therefore, nodes need to forward data changes they receive\nfrom other nodes. To prevent infinite replication loops, each node is given a unique\nidentifier, and in the replication log, each write is tagged with the identifiers of all the\nnodes it has passed through [ 43]. When a node receives a data change that is tagged\nMulti-Leader Replication | 175\n",
    "summary": "The text discusses multi-leader replication topologies and conflict resolution strategies in replicated systems, highlighting the importance of a unique identifier and replication logs to prevent infinite loops.",
    "sample_answer": "\u201cOkay, this section is really focusing on the complexities of multi-leader replication. We\u2019re seeing a key challenge: ensuring data consistency across multiple leaders, particularly when dealing with conflicts. The use of a unique identifier, combined with a carefully constructed replication log \u2013 which tags each write with the nodes it\u2019s passed through \u2013 is a fundamental strategy for preventing infinite replication loops, directly addressing the CAP theorem\u2019s limitations regarding consistency. This is analogous to using a 2PC protocol to ensure transactional integrity across multiple nodes.\u201d",
    "potential_interview_question": "\u201cImagine you're designing a system with multiple data leaders. What are some strategies you\u2019d employ to handle potential conflicts during write operations, and how would you ensure data consistency across these leaders? Specifically, how would you design the replication log to prevent infinite loops?\u201d"
  },
  {
    "chunk": "with its own identifier, that data change is ignored, because the node knows that it\nhas already been processed.\nA problem with circular and star topologies is that if just one node fails, it can inter\u2010\nrupt the flow of replication messages between other nodes, causing them to be unable\nto communicate until the node is fixed. The topology could be reconfigured to work\naround the failed node, but in most deployments such reconfiguration would have to\nbe done manually. The fault tolerance of a more densely connected topology (such as\nall-to-all) is better because it allows messages to travel along different paths, avoiding\na single point of failure.\nOn the other hand, all-to-all topologies can have issues too. In particular, some net\u2010\nwork links may be faster than others (e.g., due to network congestion), with the result\nthat some replication messages may \u201covertake\u201d others, as illustrated in Figure 5-9 .\nFigure 5-9. With multi-leader replication, writes may arrive in the wrong order at some\nreplicas.\nIn Figure 5-9 , client A inserts a row into a table on leader 1, and client B updates that\nrow on leader 3. However, leader 2 may receive the writes in a different order: it may\nfirst receive the update (which, from its point of view, is an update to a row that does\nnot exist in the database) and only later receive the corresponding insert (which\nshould have preceded the update).\nThis is a problem of causality, similar to the one we saw in \u201cConsistent Prefix Reads\u201d\non page 165: the update depends on the prior insert, so we need to make sure that all\nnodes process the insert first, and then the update. Simply attaching a timestamp to\n176 | Chapter 5: Replication\n",
    "summary": "The text discusses the challenges of multi-leader replication, specifically regarding causality and potential ordering issues when updates and inserts are processed across multiple nodes.",
    "sample_answer": "\u201cThis scenario highlights the complexities of multi-leader replication and the need to carefully consider causality. To mitigate this, we\u2019d likely employ a technique like a quorum-based approach or a log-ordering mechanism, perhaps similar to Raft, to ensure that all nodes process updates and inserts in a consistent order before a read occurs. This would help guarantee data consistency, although it adds complexity to the write path and introduces latency.\u201d",
    "potential_interview_question": "\u201cDescribe a system design challenge you might encounter with multi-leader replication. How would you address the issue of potentially out-of-order writes when multiple nodes concurrently update a dataset? What architectural patterns or algorithms might you consider, and why?\u201d"
  },
  {
    "chunk": "vi. Dynamo is not available to users outside of Amazon. Confusingly, AWS offers a hosted database product\ncalled DynamoDB , which uses a completely different architecture: it is based on single-leader replication.every write is not sufficient, because clocks cannot be trusted to be sufficiently in sync\nto correctly order these events at leader 2 (see Chapter 8 ).\nTo order these events correctly, a technique called version vectors  can be used, which\nwe will discuss later in this chapter (see \u201cDetecting Concurrent Writes\u201d  on page 184).\nHowever, conflict detection techniques are poorly implemented in many multi-leader\nreplication systems. For example, at the time of writing, PostgreSQL BDR does not\nprovide causal ordering of writes [ 27], and Tungsten Replicator for MySQL doesn\u2019t\neven try to detect conflicts [ 34].\nIf you are using a system with multi-leader replication, it is worth being aware of\nthese issues, carefully reading the documentation, and thoroughly testing your data\u2010\nbase to ensure that it really does provide the guarantees you believe it to have. \nLeaderless Replication\nThe replication approaches we have discussed so far in this chapter\u2014single-leader\nand multi-leader replication\u2014are based on the idea that a client sends a write request\nto one node (the leader), and the database system takes care of copying that write to\nthe other replicas. A leader determines the order in which writes should be processed,\nand followers apply the leader\u2019s writes in the same order.\nSome data storage systems take a different approach, abandoning the concept of a\nleader and allowing any replica to directly accept writes from clients. Some of the ear\u2010\nliest replicated data systems were leaderless [ 1, 44], but the idea was mostly forgotten\nduring the era of dominance of relational databases. It once again became a fashiona\u2010\nble architecture for databases after Amazon used it for its in-house Dynamo  system\n[37].vi Riak, Cassandra, and Voldemort are open source datastores with leaderless\nreplication models inspired by Dynamo, so this kind of database is also known as\nDynamo-style .\nIn some leaderless implementations, the client directly sends its writes to several rep\u2010\nlicas, while in others, a coordinator node does this on behalf of the client. However,\nunlike a leader database, that coordinator does not enforce a particular ordering of\nwrites. As we shall see, this difference in design has profound consequences for the\nway the database is used.\nWriting to the Database When a Node Is Down\nImagine you have a database with three replicas, and one of the replicas is currently\nunavailable\u2014perhaps it is being rebooted to install a system update. In a leader-based\nLeaderless Replication | 177\n",
    "summary": "The text discusses the challenges of multi-leader replication, particularly concerning clock skew and conflict detection, and introduces Dynamo-style leaderless replication systems.",
    "sample_answer": "\u201cOkay, let\u2019s talk about the implications of multi-leader replication. The core issue, as highlighted with the clock skew and the lack of causal ordering in systems like PostgreSQL BDR and Tungsten Replicator, directly relates to the CAP theorem \u2013 specifically, the trade-off between consistency and availability.  Dynamo-style leaderless replication, like that used in Dynamo and Riak, avoids this problem by eliminating the central leader and allowing clients to write directly to multiple replicas, though this introduces its own complexities around conflict detection and handling, which is something we\u2019d need to thoroughly test for in any production system.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where a multi-leader replicated database might fail to provide consistent data. What are the key architectural considerations and potential challenges in such a system, and how does this relate to the CAP theorem?\u201d"
  },
  {
    "chunk": "configuration, if you want to continue processing writes, you may need to perform a\nfailover (see \u201cHandling Node Outages\u201d on page 156 ).\nOn the other hand, in a leaderless configuration, failover does not exist. Figure 5-10\nshows what happens: the client (user 1234) sends the write to all three replicas in par\u2010\nallel, and the two available replicas accept the write but the unavailable replica misses\nit. Let\u2019s say that it\u2019s sufficient for two out of three replicas to acknowledge the write:\nafter user 1234 has received two ok responses, we consider the write to be successful.\nThe client simply ignores the fact that one of the replicas missed the write.\nFigure 5-10. A quorum write, quorum read, and read repair after a node outage.\nNow imagine that the unavailable node comes back online, and clients start reading\nfrom it. Any writes that happened while the node was down are missing from that\nnode. Thus, if you read from that node, you may get stale  (outdated) values as\nresponses.\nTo solve that problem, when a client reads from the database, it doesn\u2019t just send its\nrequest to one replica: read requests are also sent to several nodes in parallel . The cli\u2010\nent may get different responses from different nodes; i.e., the up-to-date value from\none node and a stale value from another. Version numbers are used to determine\nwhich value is newer (see \u201cDetecting Concurrent Writes\u201d on page 184 ).\nRead repair and anti-entropy\nThe replication scheme should ensure that eventually all the data is copied to every\nreplica. After an unavailable node comes back online, how does it catch up on the\nwrites that it missed?\n178 | Chapter 5: Replication\n",
    "summary": "The text describes a quorum-based write and read strategy with conflict resolution using version numbers, highlighting the need for replication and handling node outages.",
    "sample_answer": "\u201cThis system employs a quorum-based approach for writes \u2013 requiring acknowledgement from a majority of replicas to consider a write successful. This inherently provides durability; if a node fails, the data remains consistent as long as the quorum is maintained.  Furthermore, the parallel reads with version number detection address the issue of stale reads after a node recovery, implementing a form of anti-entropy.  The parallel read strategy combined with version numbers represents a core strategy for building robust read-heavy systems.\u201d",
    "potential_interview_question": "\u201cDescribe a system design scenario where you would utilize a quorum-based write strategy. What are the key considerations for ensuring data consistency and availability in this scenario, particularly when dealing with potential node failures?\u201d"
  },
  {
    "chunk": "vii. Sometimes this kind of quorum is called a strict quorum , to contrast with sloppy quorums  (discussed in\n\u201cSloppy Quorums and Hinted Handoff\u201d on page 183 ).Two mechanisms are often used in Dynamo-style datastores:\nRead repair\nWhen a client makes a read from several nodes in parallel, it can detect any stale\nresponses. For example, in Figure 5-10 , user 2345 gets a version 6 value from rep\u2010\nlica 3 and a version 7 value from replicas 1 and 2. The client sees that replica 3\nhas a stale value and writes the newer value back to that replica. This approach\nworks well for values that are frequently read.\nAnti-entropy process\nIn addition, some datastores have a background process that constantly looks for\ndifferences in the data between replicas and copies any missing data from one\nreplica to another. Unlike the replication log in leader-based replication, this\nanti-entropy process  does not copy writes in any particular order, and there may\nbe a significant delay before data is copied.\nNot all systems implement both of these; for example, Voldemort currently does not\nhave an anti-entropy process. Note that without an anti-entropy process, values that\nare rarely read may be missing from some replicas and thus have reduced durability,\nbecause read repair is only performed when a value is read by the application.\nQuorums for reading and writing\nIn the example of Figure 5-10 , we considered the write to be successful even though it\nwas only processed on two out of three replicas. What if only one out of three replicas\naccepted the write? How far can we push this?\nIf we know that every successful write is guaranteed to be present on at least two out\nof three replicas, that means at most one replica can be stale. Thus, if we read from at\nleast two replicas, we can be sure that at least one of the two is up to date. If the third\nreplica is down or slow to respond, reads can nevertheless continue returning an up-\nto-date value.\nMore generally, if there are n replicas, every write must be confirmed by w nodes to\nbe considered successful, and we must query at least r nodes for each read. (In our\nexample, n = 3, w = 2, r = 2.) As long as w + r > n, we expect to get an up-to-date\nvalue when reading, because at least one of the r nodes we\u2019re reading from must be\nup to date. Reads and writes that obey these r and w values are called quorum  reads\nand writes [ 44].vii You can think of r and w as the minimum number of votes required\nfor the read or write to be valid.\nLeaderless Replication | 179\n",
    "summary": "This text discusses leaderless replication strategies using quorums for reads and writes, incorporating mechanisms like read repair and anti-entropy processes to ensure data consistency and availability in a distributed system.",
    "sample_answer": "\u201cThis system utilizes a leaderless replication model, which is critical for high availability and fault tolerance. The use of quorums \u2013 specifically, requiring \u2018r\u2019 nodes for reads and \u2018w\u2019 nodes for writes \u2013 represents a core principle of ensuring data consistency. The read repair mechanism addresses stale data by proactively updating replicas, while the anti-entropy process handles data divergence, though it\u2019s less frequent and more delayed than a traditional replication log. Critically, the quorums (r and w) represent a trade-off \u2013 increasing them enhances consistency but can negatively impact availability if the quorum is frequently unavailable, a consideration within the CAP theorem.\u201d",
    "potential_interview_question": "\u201cDescribe a system where you need to ensure data consistency across multiple replicas, but also prioritize availability. How would you design the system to achieve this, and what specific techniques (like quorums, read repair, or anti-entropy) would you leverage, and what are the potential trade-offs involved?\u201d"
  },
  {
    "chunk": "In Dynamo-style databases, the parameters n, w, and r are typically configurable. A\ncommon choice is to make n an odd number (typically 3 or 5) and to set w = r =\n(n + 1) / 2 (rounded up). However, you can vary the numbers as you see fit. For\nexample, a workload with few writes and many reads may benefit from setting w = n\nand r = 1. This makes reads faster, but has the disadvantage that just one failed node\ncauses all database writes to fail.\nThere may be more than n nodes in the cluster, but any given value\nis stored only on n nodes. This allows the dataset to be partitioned,\nsupporting datasets that are larger than you can fit on one node.\nWe will return to partitioning in Chapter 6 .\nThe quorum condition, w + r > n, allows the system to tolerate unavailable nodes as\nfollows:\n\u2022If w < n, we can still process writes if a node is unavailable.\n\u2022If r < n, we can still process reads if a node is unavailable.\n\u2022With n = 3, w = 2, r = 2 we can tolerate one unavailable node.\n\u2022With n = 5, w = 3, r = 3 we can tolerate two unavailable nodes. This case is illus\u2010\ntrated in Figure 5-11 .\n\u2022Normally, reads and writes are always sent to all n replicas in parallel. The\nparameters w and r determine how many nodes we wait for\u2014i.e., how many of\nthe n nodes need to report success before we consider the read or write to be suc\u2010\ncessful.\nFigure 5-11. If w + r > n, at least one of the r replicas you read from must have seen the\nmost recent successful write.\n180 | Chapter 5: Replication\n",
    "summary": "This section discusses the replication parameters (n, w, r) in a Dynamo-style database and how they impact fault tolerance and read/write performance.",
    "sample_answer": "\u201cOkay, let\u2019s analyze this replication strategy. The choice of `n`, `w`, and `r` is crucial for designing a fault-tolerant system. The `n` dictates the number of replicas, and `w` and `r` define the quorum size\u2014the minimum number of nodes that must confirm a successful operation. Setting `n` to an odd number (like 3 or 5) and `w = r = (n + 1) / 2` creates a system that\u2019s resilient to node failures, aligning with the CAP theorem \u2013 particularly prioritizing availability.  The quorum condition, `w + r > n`, is the key to tolerating failures; it ensures that even if some nodes are down, the system can still serve reads or writes based on the most recent data.\u201d",
    "potential_interview_question": "\u201cExplain the role of the parameters `n`, `w`, and `r` in a Dynamo-style database and how they contribute to the system\u2019s fault tolerance capabilities.  What are the trade-offs in choosing these parameters, and how does the quorum condition (`w + r > n`) impact the system\u2019s overall behavior?\u201d"
  },
  {
    "chunk": "If fewer than the required w or r nodes are available, writes or reads return an error.\nA node could be unavailable for many reasons: because the node is down (crashed,\npowered down), due to an error executing the operation (can\u2019t write because the disk\nis full), due to a network interruption between the client and the node, or for any\nnumber of other reasons. We only care whether the node returned a successful\nresponse and don\u2019t need to distinguish between different kinds of fault.\nLimitations of Quorum Consistency\nIf you have n replicas, and you choose w and r such that w + r > n, you can generally\nexpect every read to return the most recent value written for a key. This is the case\nbecause the set of nodes to which you\u2019ve written and the set of nodes from which\nyou\u2019ve read must overlap. That is, among the nodes you read there must be at least\none node with the latest value (illustrated in Figure 5-11 ).\nOften, r and w are chosen to be a majority (more than n/2) of nodes, because that\nensures w + r > n while still tolerating up to n/2 node failures. But quorums are not\nnecessarily majorities\u2014it only matters that the sets of nodes used by the read and\nwrite operations overlap in at least one node. Other quorum assignments are possi\u2010\nble, which allows some flexibility in the design of distributed algorithms [ 45].\nYou may also set w and r to smaller numbers, so that w + r \u2264 n (i.e., the quorum con\u2010\ndition is not satisfied). In this case, reads and writes will still be sent to n nodes, but a\nsmaller number of successful responses is required for the operation to succeed.\nWith a smaller w and r you are more likely to read stale values, because it\u2019s more\nlikely that your read didn\u2019t include the node with the latest value. On the upside, this\nconfiguration allows lower latency and higher availability: if there is a network inter\u2010\nruption and many replicas become unreachable, there\u2019s a higher chance that you can\ncontinue processing reads and writes. Only after the number of reachable replicas\nfalls below w or r does the database become unavailable for writing or reading,\nrespectively.\nHowever, even with w + r > n, there are likely to be edge cases where stale values are\nreturned. These depend on the implementation, but possible scenarios include:\n\u2022If a sloppy quorum is used (see \u201cSloppy Quorums and Hinted Handoff\u201d  on page\n183), the w writes may end up on different nodes than the r reads, so there is no\nlonger a guaranteed overlap between the r nodes and the w nodes [ 46].\n\u2022If two writes occur concurrently, it is not clear which one happened first. In this\ncase, the only safe solution is to merge the concurrent writes (see \u201cHandling\nWrite Conflicts\u201d on page 171). If a winner is picked based on a timestamp (last\nwrite wins), writes can be lost due to clock skew [ 35]. We will return to this topic\nin \u201cDetecting Concurrent Writes\u201d on page 184 .\nLeaderless Replication | 181\n",
    "summary": "This section discusses quorum consistency, fault tolerance through replication, and the trade-offs involved in choosing quorum parameters (w, r) for a distributed system.",
    "sample_answer": "\u201cOkay, this excerpt highlights some key considerations for designing a resilient, distributed system. The core concept here is quorum consistency, which relies on overlapping sets of read and write nodes to ensure eventual consistency. The choice of \u2018w\u2019 and \u2018r\u2019 \u2013 the write and read quorum sizes \u2013 is critical; a common practice is to select a majority (w + r > n) to tolerate up to n/2 node failures, mirroring the CAP theorem\u2019s availability focus. However, we see a deliberate discussion of potential drawbacks: smaller \u2018w\u2019 and \u2018r\u2019 values reduce latency and increase availability by prioritizing responsiveness even with stale data, aligning with a performance-oriented design. Furthermore, the text acknowledges scenarios like sloppy quorums and clock skew, emphasizing the need for careful consideration of potential data staleness.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a distributed key-value store. Describe the trade-offs involved in selecting the values for \u2018w\u2019 (write quorum) and \u2018r\u2019 (read quorum). How would you balance consistency, availability, and latency, and what potential failure scenarios would you need to account for?\u201d"
  },
  {
    "chunk": "\u2022If a write happens concurrently with a read, the write may be reflected on only\nsome of the replicas. In this case, it\u2019s undetermined whether the read returns the\nold or the new value.\n\u2022If a write succeeded on some replicas but failed on others (for example because\nthe disks on some nodes are full), and overall succeeded on fewer than w replicas,\nit is not rolled back on the replicas where it succeeded. This means that if a write\nwas reported as failed, subsequent reads may or may not return the value from\nthat write [ 47].\n\u2022If a node carrying a new value fails, and its data is restored from a replica carry\u2010\ning an old value, the number of replicas storing the new value may fall below w,\nbreaking the quorum condition.\n\u2022Even if everything is working correctly, there are edge cases in which you can get\nunlucky with the timing, as we shall see in \u201cLinearizability and quorums\u201d on\npage 334 .\nThus, although quorums appear to guarantee that a read returns the latest written\nvalue, in practice it is not so simple. Dynamo-style databases are generally optimized\nfor use cases that can tolerate eventual consistency. The parameters w and r allow you\nto adjust the probability of stale values being read, but it\u2019s wise to not take them as\nabsolute guarantees.\nIn particular, you usually do not get the guarantees discussed in \u201cProblems with Rep\u2010\nlication Lag\u201d on page 161 (reading your writes, monotonic reads, or consistent prefix\nreads), so the previously mentioned anomalies can occur in applications. Stronger\nguarantees generally require transactions or consensus. We will return to these topics\nin Chapter 7  and Chapter 9 . \nMonitoring staleness\nFrom an operational perspective, it\u2019s important to monitor whether your databases\nare returning up-to-date results. Even if your application can tolerate stale reads, you\nneed to be aware of the health of your replication. If it falls behind significantly, it\nshould alert you so that you can investigate the cause (for example, a problem in the\nnetwork or an overloaded node).\nFor leader-based replication, the database typically exposes metrics for the replication\nlag, which you can feed into a monitoring system. This is possible because writes are\napplied to the leader and to followers in the same order, and each node has a position\nin the replication log (the number of writes it has applied locally). By subtracting a\nfollower\u2019s current position from the leader\u2019s current position, you can measure the\namount of replication lag.\nHowever, in systems with leaderless replication, there is no fixed order in which\nwrites are applied, which makes monitoring more difficult. Moreover, if the database\n182 | Chapter 5: Replication\n",
    "summary": "The chunk discusses the challenges of eventual consistency in replicated databases, particularly regarding read staleness and the importance of monitoring replication lag.",
    "sample_answer": "\u201cOkay, this excerpt highlights a crucial consideration in designing replicated systems, specifically around eventual consistency. The core issue is that even with a quorum (w and r), reads can return stale data due to replication lag, emphasizing the need for applications to be tolerant of this inconsistency \u2013 this aligns with the CAP theorem, where we trade consistency for availability. To mitigate this, we need to actively monitor replication lag, and in leader-based systems, this is typically achieved by tracking the difference between the leader's and follower's replication log positions, allowing us to proactively identify and address potential issues.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system where data consistency is important, but network latency is a significant concern. How would you approach designing a data replication strategy to minimize read staleness, and what metrics would you monitor to ensure the system is behaving as expected? Specifically, how does understanding the replication lag relate to the CAP theorem?\u201d"
  },
  {
    "chunk": "only uses read repair (no anti-entropy), there is no limit to how old a value might be\n\u2014if a value is only infrequently read, the value returned by a stale replica may be\nancient.\nThere has been some research on measuring replica staleness in databases with lead\u2010\nerless replication and predicting the expected percentage of stale reads depending on\nthe parameters n, w, and r [48]. This is unfortunately not yet common practice, but it\nwould be good to include staleness measurements in the standard set of metrics for\ndatabases. Eventual consistency is a deliberately vague guarantee, but for operability\nit\u2019s important to be able to quantify \u201ceventual.\u201d \nSloppy Quorums and Hinted Handoff\nDatabases with appropriately configured quorums can tolerate the failure of individ\u2010\nual nodes without the need for failover. They can also tolerate individual nodes going\nslow, because requests don\u2019t have to wait for all n nodes to respond\u2014they can return\nwhen w or r nodes have responded. These characteristics make databases with leader\u2010\nless replication appealing for use cases that require high availability and low latency,\nand that can tolerate occasional stale reads.\nHowever, quorums (as described so far) are not as fault-tolerant as they could be. A\nnetwork interruption can easily cut off a client from a large number of database\nnodes. Although those nodes are alive, and other clients may be able to connect to\nthem, to a client that is cut off from the database nodes, they might as well be dead. In\nthis situation, it\u2019s likely that fewer than w or r reachable nodes remain, so the client\ncan no longer reach a quorum.\nIn a large cluster (with significantly more than n nodes) it\u2019s likely that the client can\nconnect to some  database nodes during the network interruption, just not to the\nnodes that it needs to assemble a quorum for a particular value. In that case, database\ndesigners face a trade-off:\n\u2022Is it better to return errors to all requests for which we cannot reach a quorum of\nw or r nodes?\n\u2022Or should we accept writes anyway, and write them to some nodes that are\nreachable but aren\u2019t among the n nodes on which the value usually lives?\nThe latter is known as a sloppy quorum  [37]: writes and reads still require w and r\nsuccessful responses, but those may include nodes that are not among the designated\nn \u201chome\u201d nodes for a value. By analogy, if you lock yourself out of your house, you\nmay knock on the neighbor\u2019s door and ask whether you may stay on their couch tem\u2010\nporarily.\nOnce the network interruption is fixed, any writes that one node temporarily\naccepted on behalf of another node are sent to the appropriate \u201chome\u201d nodes. This is\nLeaderless Replication | 183\n",
    "summary": "The text discusses the trade-offs of leaderless replication, particularly regarding staleness, sloppy quorums, and the implications for data consistency and availability.",
    "sample_answer": "\u201cThis excerpt highlights a critical consideration in designing systems with leaderless replication. The core issue is the potential for staleness due to the lack of strict quorums, which directly ties into the CAP theorem \u2013 specifically the trade-off between consistency and availability. The \u2018sloppy quorum\u2019 approach, while improving availability during network interruptions, introduces a risk of outdated data, necessitating careful monitoring of replica staleness, which is something that needs to be quantified.  This situation can be mitigated by measuring replica staleness and predicting the expected percentage of stale reads, aligning with best practices for operational observability.\u201d",
    "potential_interview_question": "\u201cImagine you're designing a highly available key-value store using leaderless replication. How would you approach handling the potential for stale reads, and what metrics would you monitor to ensure the system remains operational despite the inherent risks of eventual consistency?\u201d"
  },
  {
    "chunk": "called hinted handoff . (Once you find the keys to your house again, your neighbor\npolitely asks you to get off their couch and go home.)\nSloppy quorums are particularly useful for increasing write availability: as long as any\nw nodes are available, the database can accept writes. However, this means that even\nwhen w + r > n, you cannot be sure to read the latest value for a key, because the\nlatest value may have been temporarily written to some nodes outside of n [47].\nThus, a sloppy quorum actually isn\u2019t a quorum at all in the traditional sense. It\u2019s only\nan assurance of durability, namely that the data is stored on w nodes somewhere.\nThere is no guarantee that a read of r nodes will see it until the hinted handoff has\ncompleted.\nSloppy quorums are optional in all common Dynamo implementations. In Riak they\nare enabled by default, and in Cassandra and Voldemort they are disabled by default\n[46, 49, 50].\nMulti-datacenter operation\nWe previously discussed cross-datacenter replication as a use case for multi-leader\nreplication (see \u201cMulti-Leader Replication\u201d on page 168). Leaderless replication is\nalso suitable for multi-datacenter operation, since it is designed to tolerate conflicting\nconcurrent writes, network interruptions, and latency spikes.\nCassandra and Voldemort implement their multi-datacenter support within the nor\u2010\nmal leaderless model: the number of replicas n includes nodes in all datacenters, and\nin the configuration you can specify how many of the n replicas you want to have in\neach datacenter. Each write from a client is sent to all replicas, regardless of datacen\u2010\nter, but the client usually only waits for acknowledgment from a quorum of nodes\nwithin its local datacenter so that it is unaffected by delays and interruptions on the\ncross-datacenter link. The higher-latency writes to other datacenters are often config\u2010\nured to happen asynchronously, although there is some flexibility in the configura\u2010\ntion [ 50, 51].\nRiak keeps all communication between clients and database nodes local to one data\u2010\ncenter, so n describes the number of replicas within one datacenter. Cross-datacenter\nreplication between database clusters happens asynchronously in the background, in\na style that is similar to multi-leader replication [ 52].\nDetecting Concurrent Writes\nDynamo-style databases allow several clients to concurrently write to the same key,\nwhich means that conflicts will occur even if strict quorums are used. The situation is\nsimilar to multi-leader replication (see \u201cHandling Write Conflicts\u201d on page 171),\nalthough in Dynamo-style databases conflicts can also arise during read repair or\nhinted handoff.\n184 | Chapter 5: Replication\n",
    "summary": "The text discusses strategies for handling concurrent writes and data replication across datacenters, highlighting the trade-offs between write availability and data consistency.",
    "sample_answer": "\u201cOkay, so this excerpt describes the challenges of achieving strong consistency in a distributed system, particularly when dealing with high write loads and multi-datacenter deployments. The use of \u2018sloppy quorums,\u2019 as seen in Dynamo and Riak, represents a key architectural decision \u2013 prioritizing write availability over immediate consistency. The concept of \u2018hinted handoff\u2019 and \u2018concurrent writes\u2019 underscores the need for strategies to manage conflict resolution, and the asynchronous replication across datacenters is a classic approach to mitigate network latency and ensure high availability, even with conflicting updates. Furthermore, the emphasis on a \u2018sloppy quorum\u2019 and asynchronous replication highlights a core trade-off: accepting that reads might not always reflect the latest value, but guaranteeing durability by replicating to a sufficient number of nodes.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re building a globally distributed key-value store similar to Dynamo. We need to design a strategy for handling concurrent writes to the same key across multiple datacenters. Describe your approach, considering the trade-offs between write availability, data consistency, and potential conflict resolution strategies \u2013 specifically, how would you address the challenges presented by \u2018hinted handoff\u2019 and asynchronous replication?\u201d"
  },
  {
    "chunk": "The problem is that events may arrive in a different order at different nodes, due to\nvariable network delays and partial failures. For example, Figure 5-12  shows two cli\u2010\nents, A and B, simultaneously writing to a key X in a three-node datastore:\n\u2022Node 1 receives the write from A, but never receives the write from B due to a\ntransient outage.\n\u2022Node 2 first receives the write from A, then the write from B.\n\u2022Node 3 first receives the write from B, then the write from A.\nFigure 5-12. Concurrent writes in a Dynamo-style datastore: there is no well-defined\nordering.\nIf each node simply overwrote the value for a key whenever it received a write request\nfrom a client, the nodes would become permanently inconsistent, as shown by the\nfinal get request in Figure 5-12 : node 2 thinks that the final value of X is B, whereas\nthe other nodes think that the value is A.\nIn order to become eventually consistent, the replicas should converge toward the\nsame value. How do they do that? One might hope that replicated databases would\nhandle this automatically, but unfortunately most implementations are quite poor: if\nyou want to avoid losing data, you\u2014the application developer\u2014need to know a lot\nabout the internals of your database\u2019s conflict handling.\nWe briefly touched on some techniques for conflict resolution in \u201cHandling Write\nConflicts\u201d on page 171. Before we wrap up this chapter, let\u2019s explore the issue in a bit\nmore detail.\nLeaderless Replication | 185\n",
    "summary": "The text highlights the challenges of maintaining consistency in a distributed system with leaderless replication, specifically addressing the issue of out-of-order event arrival and its impact on data consistency.",
    "sample_answer": "\u201cThis scenario demonstrates a core challenge in distributed systems design \u2013 maintaining consistency when events arrive out of order due to network latency and node failures. Leaderless replication, as described here, inherently lacks a central authority to order events, leading to potential conflicts. To address this, application developers need to implement sophisticated conflict resolution strategies, potentially drawing on techniques like last-write-wins or employing version vectors, as discussed on page 171, to ensure eventual consistency.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re building a real-time event stream processing system. How would you design for eventual consistency in a leaderless replicated environment, considering the potential for out-of-order event arrival? What specific techniques would you employ, and why are they necessary?\u201d"
  },
  {
    "chunk": "Last write wins (discarding concurrent writes)\nOne approach for achieving eventual convergence is to declare that each replica need\nonly store the most \u201crecent\u201d value and allow \u201colder\u201d values to be overwritten and dis\u2010\ncarded. Then, as long as we have some way of unambiguously determining which\nwrite is more \u201crecent,\u201d and every write is eventually copied to every replica, the repli\u2010\ncas will eventually converge to the same value.\nAs indicated by the quotes around \u201crecent,\u201d this idea is actually quite misleading. In\nthe example of Figure 5-12 , neither client knew about the other one when it sent its\nwrite requests to the database nodes, so it\u2019s not clear which one happened first. In\nfact, it doesn\u2019t really make sense to say that either happened \u201cfirst\u201d: we say the writes\nare concurrent , so their order is undefined.\nEven though the writes don\u2019t have a natural ordering, we can force an arbitrary order\non them. For example, we can attach a timestamp to each write, pick the biggest\ntimestamp as the most \u201crecent,\u201d and discard any writes with an earlier timestamp.\nThis conflict resolution algorithm, called last write wins  (LWW), is the only sup\u2010\nported conflict resolution method in Cassandra [ 53], and an optional feature in Riak\n[35].\nLWW achieves the goal of eventual convergence, but at the cost of durability: if there\nare several concurrent writes to the same key, even if they were all reported as suc\u2010\ncessful to the client (because they were written to w replicas), only one of the writes\nwill survive and the others will be silently discarded. Moreover, LWW may even drop\nwrites that are not concurrent, as we shall discuss in \u201cTimestamps for ordering\nevents\u201d on page 291 .\nThere are some situations, such as caching, in which lost writes are perhaps accepta\u2010\nble. If losing data is not acceptable, LWW is a poor choice for conflict resolution.\nThe only safe way of using a database with LWW is to ensure that a key is only writ\u2010\nten once and thereafter treated as immutable, thus avoiding any concurrent updates\nto the same key. For example, a recommended way of using Cassandra is to use a\nUUID as the key, thus giving each write operation a unique key [ 53].\nThe \u201chappens-before\u201d relationship and concurrency\nHow do we decide whether two operations are concurrent or not? To develop an\nintuition, let\u2019s look at some examples:\n\u2022In Figure 5-9 , the two writes are not concurrent: A\u2019s insert happens before  B\u2019s\nincrement, because the value incremented by B is the value inserted by A. In\nother words, B\u2019s operation builds upon A\u2019s operation, so B\u2019s operation must have\nhappened later. We also say that B is causally dependent  on A.\n186 | Chapter 5: Replication\n",
    "summary": "The chunk discusses conflict resolution strategies in replicated databases, specifically Last Write Wins (LWW) and the implications for durability and data consistency.",
    "sample_answer": "\u201cOkay, let\u2019s analyze this. The core challenge here is how to handle concurrent writes in a replicated system. The text highlights Last Write Wins as a common conflict resolution strategy\u2014effectively, the most recent write wins, which is a straightforward approach for eventual consistency. However, the key trade-off is that LWW sacrifices durability; if multiple writes occur concurrently and are reported as successful, only one will survive, leading to potential data loss. This aligns with the CAP theorem \u2013 specifically, it demonstrates a system prioritizing Availability (by allowing writes to succeed quickly) over strong Consistency, as data is not necessarily durable. Using UUIDs as keys, as suggested, is a reasonable mitigation to avoid concurrent writes to the same key, mirroring a standard approach to minimize conflicts.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you would choose Last Write Wins (LWW) as a conflict resolution strategy in a replicated database system. What are the key trade-offs you\u2019d consider, and how might you mitigate the risks associated with this approach?\u201d"
  },
  {
    "chunk": "\u2022On the other hand, the two writes in Figure 5-12  are concurrent: when each cli\u2010\nent starts the operation, it does not know that another client is also performing\nan operation on the same key. Thus, there is no causal dependency between the\noperations.\nAn operation A happens before  another operation B if B knows about A, or depends\non A, or builds upon A in some way. Whether one operation happens before another\noperation is the key to defining what concurrency means. In fact, we can simply say\nthat two operations are concurrent  if neither happens before the other (i.e., neither\nknows about the other) [ 54].\nThus, whenever you have two operations A and B, there are three possibilities: either\nA happened before B, or B happened before A, or A and B are concurrent. What we\nneed is an algorithm to tell us whether two operations are concurrent or not. If one\noperation happened before another, the later operation should overwrite the earlier\noperation, but if the operations are concurrent, we have a conflict that needs to be\nresolved.\nConcurrency, Time, and Relativity\nIt may seem that two operations should be called concurrent if they occur \u201cat the\nsame time\u201d\u2014but in fact, it is not important whether they literally overlap in time.\nBecause of problems with clocks in distributed systems, it is actually quite difficult to\ntell whether two things happened at exactly the same time\u2014an issue we will discuss\nin more detail in Chapter 8 .\nFor defining concurrency, exact time doesn\u2019t matter: we simply call two operations\nconcurrent if they are both unaware of each other, regardless of the physical time at\nwhich they occurred. People sometimes make a connection between this principle\nand the special theory of relativity in physics [ 54], which introduced the idea that\ninformation cannot travel faster than the speed of light. Consequently, two events\nthat occur some distance apart cannot possibly affect each other if the time between\nthe events is shorter than the time it takes light to travel the distance between them.\nIn computer systems, two operations might be concurrent even though the speed of\nlight would in principle have allowed one operation to affect the other. For example,\nif the network was slow or interrupted at the time, two operations can occur some\ntime apart and still be concurrent, because the network problems prevented one\noperation from being able to know about the other.\nCapturing the happens-before relationship\nLet\u2019s look at an algorithm that determines whether two operations are concurrent, or\nwhether one happened before another. To keep things simple, let\u2019s start with a data\u2010\nLeaderless Replication | 187\n",
    "summary": "The text discusses defining concurrency in distributed systems, highlighting the importance of causal dependencies and the challenges posed by clock synchronization.",
    "sample_answer": "\u201cOkay, so when dealing with concurrent operations in a distributed system, the core challenge is defining \u2018happens-before\u2019 relationships \u2013 essentially, determining if one operation depends on another. Because we can\u2019t rely on precise timing due to clock skew, we need an algorithm that captures these dependencies, even if the operations occur at different physical times. This relates to the CAP theorem, specifically availability, because inconsistencies arise when operations aren't correctly ordered.\u201d",
    "potential_interview_question": "\u201cDescribe how you would approach defining and enforcing causal ordering between two concurrent operations in a distributed system where precise timing is unreliable. How would you handle potential conflicts that arise when operations are deemed concurrent?\u201d"
  },
  {
    "chunk": "base that has only one replica. Once we have worked out how to do this on a single\nreplica, we can generalize the approach to a leaderless database with multiple replicas.\nFigure 5-13  shows two clients concurrently adding items to the same shopping cart.\n(If that example strikes you as too inane, imagine instead two air traffic controllers\nconcurrently adding aircraft to the sector they are tracking.) Initially, the cart is\nempty. Between them, the clients make five writes to the database:\n1.Client 1 adds milk  to the cart. This is the first write to that key, so the server suc\u2010\ncessfully stores it and assigns it version 1. The server also echoes the value back\nto the client, along with the version number.\n2.Client 2 adds eggs  to the cart, not knowing that client 1 concurrently added milk\n(client 2 thought that its eggs  were the only item in the cart). The server assigns\nversion 2 to this write, and stores eggs  and milk  as two separate values. It then\nreturns both  values to the client, along with the version number of 2.\n3.Client 1, oblivious to client 2\u2019s write, wants to add flour  to the cart, so it thinks\nthe current cart contents should be [milk, flour] . It sends this value to the\nserver, along with the version number 1 that the server gave client 1 previously.\nThe server can tell from the version number that the write of [milk, flour]\nsupersedes the prior value of [milk]  but that it is concurrent with [eggs] . Thus,\nthe server assigns version 3 to [milk, flour] , overwrites the version 1 value\n[milk] , but keeps the version 2 value [eggs]  and returns both remaining values\nto the client.\n4.Meanwhile, client 2 wants to add ham to the cart, unaware that client 1 just added\nflour . Client 2 received the two values [milk]  and [eggs]  from the server in the\nlast response, so the client now merges those values and adds ham to form a new\nvalue, [eggs, milk, ham] . It sends that value to the server, along with the previ\u2010\nous version number 2. The server detects that version 2 overwrites [eggs]  but is\nconcurrent with [milk, flour] , so the two remaining values are [milk, flour]\nwith version 3, and [eggs, milk, ham]  with version 4.\n5.Finally, client 1 wants to add bacon . It previously received [milk, flour]  and\n[eggs]  from the server at version 3, so it merges those, adds bacon , and sends the\nfinal value [milk, flour, eggs, bacon]  to the server, along with the version\nnumber 3. This overwrites [milk, flour]  (note that [eggs]  was already over\u2010\nwritten in the last step) but is concurrent with [eggs, milk, ham] , so the server\nkeeps those two concurrent values.\n188 | Chapter 5: Replication\n",
    "summary": "This chunk describes a basic multi-replica system with versioning, demonstrating conflict resolution strategies and highlighting the importance of concurrency control and data consistency.",
    "sample_answer": "\u201cThis scenario illustrates a fundamental challenge in distributed systems \u2013 handling concurrent writes to the same key. The system employs versioning, which is crucial for resolving conflicts. The server's logic, using version numbers, effectively implements a last-write-wins strategy for this specific example. However, this approach isn't without its drawbacks, particularly regarding data loss if a write is lost before it\u2019s acknowledged. A more robust solution would involve employing a consensus algorithm like Raft or Paxos to ensure strong consistency, preventing this type of conflict.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where concurrent writes to the same key in a database could lead to data loss. How would you design a system to mitigate this risk, and what trade-offs would you consider between consistency and availability?\u201d"
  },
  {
    "chunk": "Figure 5-13. Capturing causal dependencies between two clients concurrently editing a\nshopping cart.\nThe dataflow between the operations in Figure 5-13  is illustrated graphically in\nFigure 5-14 . The arrows indicate which operation happened before  which other oper\u2010\nation, in the sense that the later operation knew about  or depended on  the earlier one.\nIn this example, the clients are never fully up to date with the data on the server, since\nthere is always another operation going on concurrently. But old versions of the value\ndo get overwritten eventually, and no writes are lost.\nFigure 5-14. Graph of causal dependencies in Figure 5-13 .\nNote that the server can determine whether two operations are concurrent by looking\nat the version numbers\u2014it does not need to interpret the value itself (so the value\ncould be any data structure). The algorithm works as follows:\nLeaderless Replication | 189\n\u2022The server maintains a version number for every key, increments the version\nnumber every time that key is written, and stores the new version number along\nwith the value written.\n\u2022When a client reads a key, the server returns all values that have not been over\u2010\nwritten, as well as the latest version number. A client must read a key before\nwriting.\n\u2022When a client writes a key, it must include the version number from the prior\nread, and it must merge together all values that it received in the prior read. (The\nresponse from a write request can be like a read, returning all current values,\nwhich allows us to chain several writes like in the shopping cart example.)\n\u2022When the server receives a write with a particular version number, it can over\u2010\nwrite all values with that version number or below (since it knows that they have\nbeen merged into the new value), but it must keep all values with a higher ver\u2010\nsion number (because those values are concurrent with the incoming write).\nWhen a write includes the version number from a prior read, that tells us which pre\u2010\nvious state the write is based on. If you make a write without including a version\nnumber, it is concurrent with all other writes, so it will not overwrite anything\u2014it\nwill just be returned as one of the values on subsequent reads.\nMerging concurrently written values\nThis algorithm ensures that no data is silently dropped, but it unfortunately requires\nthat the clients do some extra work: if several operations happen concurrently, clients\nhave to clean up afterward by merging the concurrently written values. Riak calls\nthese concurrent values siblings .\nMerging sibling values is essentially the same problem as conflict resolution in multi-\nleader replication, which we discussed previously (see \u201cHandling Write Conflicts\u201d  on\npage 171). A simple approach is to just pick one of the values based on a version\nnumber or timestamp (last write wins), but that implies losing data. So, you may\nneed to do something more intelligent in application code.\nWith the example of a shopping cart, a reasonable approach to merging siblings is to\njust take the union. In Figure 5-14 , the two final siblings are [milk, flour, eggs,\nbacon]  and [eggs, milk, ham] ; note that milk  and eggs  appear in both, even\nthough they were each only written once. The merged value might be something like\n[milk, flour, eggs, bacon, ham] , without duplicates.\nHowever, if you want to allow people to also remove  things from their carts, and not\njust add things, then taking the union of siblings may not yield the right result: if you\nmerge two sibling carts and an item has been removed in only one of them, then the\nremoved item will reappear in the union of the siblings [ 37]. To prevent this prob\u2010\n190 | Chapter 5: Replication\n",
    "summary": "This chunk describes a leaderless replication strategy with versioning and sibling merging for managing concurrent writes, highlighting the challenges and a potential solution (union merging).",
    "sample_answer": "\u201cThis architecture employs leaderless replication with versioning, a common strategy to handle concurrent writes and ensure durability. The versioning scheme, where each write increments a version number, is crucial for detecting and resolving conflicts. The \u2018sibling\u2019 merging strategy, which essentially performs a union operation on concurrent values, is a straightforward approach but carries the risk of introducing duplicates if items are removed from carts. This highlights a key trade-off: simplicity versus potential data loss; the design requires the application code to handle conflict resolution intelligently, perhaps by implementing a more sophisticated merging algorithm beyond simple union.\u201d",
    "potential_interview_question": "\u201cDescribe a system where multiple clients concurrently update a shared dataset. What strategies could you use to ensure data consistency and durability, and what are the potential challenges associated with each approach?\u201d"
  },
  {
    "chunk": "Summary\nIn this chapter we looked at the issue of replication. Replication can serve several\npurposes:\nHigh availability\nKeeping the system running, even when one machine (or several machines, or an\nentire datacenter) goes down\nDisconnected operation\nAllowing an application to continue working when there is a network interrup\u2010\ntion\nLatency\nPlacing data geographically close to users, so that users can interact with it faster\nScalability\nBeing able to handle a higher volume of reads than a single machine could han\u2010\ndle, by performing reads on replicas\nDespite being a simple goal\u2014keeping a copy of the same data on several machines\u2014\nreplication turns out to be a remarkably tricky problem. It requires carefully thinking\nabout concurrency and about all the things that can go wrong, and dealing with the\nconsequences of those faults. At a minimum, we need to deal with unavailable nodes\nand network interruptions (and that\u2019s not even considering the more insidious kinds\nof fault, such as silent data corruption due to software bugs).\nWe discussed three main approaches to replication:\nSingle-leader replication\nClients send all writes to a single node (the leader), which sends a stream of data\nchange events to the other replicas (followers). Reads can be performed on any\nreplica, but reads from followers might be stale.\nMulti-leader replication\nClients send each write to one of several leader nodes, any of which can accept\nwrites. The leaders send streams of data change events to each other and to any\nfollower nodes.\nLeaderless replication\nClients send each write to several nodes, and read from several nodes in parallel\nin order to detect and correct nodes with stale data.\nEach approach has advantages and disadvantages. Single-leader replication is popular\nbecause it is fairly easy to understand and there is no conflict resolution to worry\nabout. Multi-leader and leaderless replication can be more robust in the presence of\n192 | Chapter 5: Replication\n",
    "summary": "The text discusses three replication approaches \u2013 single-leader, multi-leader, and leaderless \u2013 focusing on high availability, latency reduction, and scalability, while acknowledging the complexities of managing concurrency and potential data corruption.",
    "sample_answer": "\u201cReplication is a fundamental component of building highly available and scalable systems, but it\u2019s surprisingly complex. Let\u2019s consider the tradeoffs. Single-leader replication, while simple, introduces a single point of failure and potential latency if the leader is unavailable. Multi-leader replication, as described, allows writes to multiple nodes but introduces the challenge of conflict resolution, potentially requiring a consensus algorithm like Paxos or Raft to maintain data consistency. Leaderless replication, in contrast, attempts to mitigate this by having clients read from multiple replicas, essentially leveraging a form of active-active consistency, although that approach necessitates careful consideration of read staleness and conflict detection.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you would choose single-leader replication versus a multi-leader or leaderless replication strategy. What are the key considerations that would drive your decision, and what potential challenges might you anticipate in each approach?\u201d"
  },
  {
    "chunk": "faulty nodes, network interruptions, and latency spikes\u2014at the cost of being harder\nto reason about and providing only very weak consistency guarantees.\nReplication can be synchronous or asynchronous, which has a profound effect on the\nsystem behavior when there is a fault. Although asynchronous replication can be fast\nwhen the system is running smoothly, it\u2019s important to figure out what happens\nwhen replication lag increases and servers fail. If a leader fails and you promote an\nasynchronously updated follower to be the new leader, recently committed data may\nbe lost.\nWe looked at some strange effects that can be caused by replication lag, and we dis\u2010\ncussed a few consistency models which are helpful for deciding how an application\nshould behave under replication lag:\nRead-after-write consistency\nUsers should always see data that they submitted themselves.\nMonotonic reads\nAfter users have seen the data at one point in time, they shouldn\u2019t later see the\ndata from some earlier point in time.\nConsistent prefix reads\nUsers should see the data in a state that makes causal sense: for example, seeing a\nquestion and its reply in the correct order.\nFinally, we discussed the concurrency issues that are inherent in multi-leader and\nleaderless replication approaches: because they allow multiple writes to happen con\u2010\ncurrently, conflicts may occur. We examined an algorithm that a database might use\nto determine whether one operation happened before another, or whether they hap\u2010\npened concurrently. We also touched on methods for resolving conflicts by merging\ntogether concurrent updates.\nIn the next chapter we will continue looking at data that is distributed across multiple\nmachines, through the counterpart of replication: splitting a large dataset into parti\u2010\ntions . \nReferences\n[1] Bruce G. Lindsay, Patricia Griffiths Selinger, C. Galtieri, et al.: \u201c Notes on Dis\u2010\ntributed Databases ,\u201d IBM Research, Research Report RJ2571(33471), July 1979.\n[2] \u201cOracle Active Data Guard Real-Time Data Protection and Availability ,\u201d Oracle\nWhite Paper, June 2013.\n[3] \u201cAlwaysOn Availability Groups ,\u201d in SQL Server Books Online , Microsoft, 2012.\nSummary | 193\n",
    "summary": "The text discusses the trade-offs between synchronous and asynchronous replication, consistency models, and conflict resolution strategies in distributed systems.",
    "sample_answer": "\u201cOkay, this section highlights a crucial area in designing distributed systems \u2013 replication. The choice between synchronous and asynchronous replication directly impacts consistency and availability; asynchronous replication offers speed but introduces the risk of data loss during failures, while synchronous replication provides stronger consistency but can severely limit throughput.  Furthermore, it\u2019s vital to consider consistency models like read-after-write and monotonic reads to align with application needs, and the potential for conflicts necessitates techniques like merging concurrent updates \u2013 potentially using algorithms like timestamps to determine causality.\u201d",
    "potential_interview_question": "\u201cLet's say we\u2019re building a distributed database and are choosing between synchronous and asynchronous replication. What are the key factors we need to consider, and how might the choice impact the system's availability and data consistency?  Specifically, how would you address the potential for conflict resolution if you select asynchronous replication?\u201d"
  },
  {
    "chunk": "[4] Lin Qiao, Kapil Surlaker, Shirshanka Das, et al.: \u201c On Brewing Fresh Espresso:\nLinkedIn\u2019s Distributed Data Serving Platform ,\u201d at ACM International Conference on\nManagement of Data  (SIGMOD), June 2013.\n[5] Jun Rao: \u201c Intra-Cluster Replication for Apache Kafka ,\u201d at ApacheCon North\nAmerica , February 2013.\n[6] \u201cHighly Available Queues ,\u201d in RabbitMQ Server Documentation , Pivotal Software,\nInc., 2014.\n[7] Yoshinori Matsunobu: \u201c Semi-Synchronous Replication at Facebook ,\u201d yoshinori\u2010\nmatsunobu.blogspot.co.uk , April 1, 2014.\n[8] Robbert van Renesse and Fred B. Schneider: \u201c Chain Replication for Supporting\nHigh Throughput and Availability ,\u201d at 6th USENIX Symposium on Operating System\nDesign and Implementation  (OSDI), December 2004.\n[9] Jeff Terrace and Michael J. Freedman: \u201c Object Storage on CRAQ: High-\nThroughput Chain Replication for Read-Mostly Workloads ,\u201d at USENIX Annual\nTechnical Conference  (ATC), June 2009.\n[10] Brad Calder, Ju Wang, Aaron Ogus, et al.: \u201c Windows Azure Storage: A Highly\nAvailable Cloud Storage Service with Strong Consistency ,\u201d at 23rd ACM Symposium\non Operating Systems Principles  (SOSP), October 2011.\n[11] Andrew Wang: \u201c Windows Azure Storage ,\u201d umbrant.com , February 4, 2016.\n[12] \u201cPercona Xtrabackup - Documentation ,\u201d Percona LLC, 2014.\n[13] Jesse Newland: \u201c GitHub Availability This Week ,\u201d github.com , September 14,\n2012.\n[14] Mark Imbriaco: \u201c Downtime Last Saturday ,\u201d github.com , December 26, 2012.\n[15] John Hugg: \u201c \u2018All in\u2019 with Determinism for Performance and Testing in Dis\u2010\ntributed Systems ,\u201d at Strange Loop , September 2015.\n[16] Amit Kapila: \u201c WAL Internals of PostgreSQL ,\u201d at PostgreSQL Conference\n(PGCon), May 2012.\n[17] MySQL Internals Manual . Oracle, 2014.\n[18] Yogeshwer Sharma, Philippe Ajoux, Petchean Ang, et al.: \u201c Wormhole: Reliable\nPub-Sub to Support Geo-Replicated Internet Services ,\u201d at 12th USENIX Symposium\non Networked Systems Design and Implementation  (NSDI), May 2015.\n[19] \u201cOracle GoldenGate 12c: Real-Time Access to Real-Time Information ,\u201d Oracle\nWhite Paper, October 2013.\n[20] Shirshanka Das, Chavdar Botev, Kapil Surlaker, et al.: \u201c All Aboard the Data\u2010\nbus!,\u201d at ACM Symposium on Cloud Computing  (SoCC), October 2012.\n194 | Chapter 5: Replication\n",
    "summary": "The text discusses various replication strategies and their application in large-scale distributed systems, focusing on high availability, throughput, and consistency. Key concepts include chain replication, semi-synchronous replication, and data bus architectures.",
    "sample_answer": "\u201cOkay, this document outlines several critical approaches to building highly available data systems. It\u2019s clear that LinkedIn and Facebook have invested heavily in sophisticated replication strategies. For example, chain replication, as described in [8] and [9], is a powerful technique for achieving both high throughput and availability \u2013 the data is replicated sequentially through a chain of nodes, mitigating the impact of individual node failures.  Furthermore, the discussion of semi-synchronous replication [7] highlights the trade-offs between consistency and latency \u2013 a key consideration when designing systems like Kafka.  It\u2019s important to consider the CAP theorem here, where choosing between consistency and availability dictates the overall system design.\u201d",
    "potential_interview_question": "\u201cLinkedIn's document mentions chain replication. Describe the advantages and disadvantages of chain replication compared to other replication methods like synchronous replication. How would you assess which approach is most appropriate for a new system with a read-mostly workload?\u201d"
  },
  {
    "chunk": "[21] Greg Sabino Mullane: \u201c Version 5 of Bucardo Database Replication System ,\u201d\nblog.endpoint.com , June 23, 2014.\n[22] Werner Vogels: \u201c Eventually Consistent ,\u201d ACM Queue , volume 6, number 6,\npages 14\u201319, October 2008. doi:10.1145/1466443.1466448\n[23] Douglas B. Terry: \u201c Replicated Data Consistency Explained Through Baseball ,\u201d\nMicrosoft Research, Technical Report MSR-TR-2011-137, October 2011.\n[24] Douglas B. Terry, Alan J. Demers, Karin Petersen, et al.: \u201c Session Guarantees for\nWeakly Consistent Replicated Data ,\u201d at 3rd International Conference on Parallel and\nDistributed Information Systems  (PDIS), September 1994. doi:10.1109/PDIS.\n1994.331722\n[25] Terry Pratchett: Reaper Man: A Discworld Novel . Victor Gollancz, 1991. ISBN:\n978-0-575-04979-6\n[26] \u201cTungsten Replicator ,\u201d Continuent, Inc., 2014.\n[27] \u201cBDR 0.10.0 Documentation ,\u201d The PostgreSQL Global Development Group,\nbdr-project.org , 2015.\n[28] Robert Hodges: \u201c If You *Must* Deploy Multi-Master Replication, Read This\nFirst ,\u201d scale-out-blog.blogspot.co.uk , March 30, 2012.\n[29] J. Chris Anderson, Jan Lehnardt, and Noah Slater: CouchDB: The Definitive\nGuide . O\u2019Reilly Media, 2010. ISBN: 978-0-596-15589-6\n[30] AppJet, Inc.: \u201c Etherpad and EasySync Technical Manual ,\u201d github.com , March 26,\n2011.\n[31] John Day-Richter: \u201c What\u2019s Different About the New Google Docs: Making Col\u2010\nlaboration Fast ,\u201d googledrive.blogspot.com , 23 September 2010.\n[32] Martin Kleppmann and Alastair R. Beresford: \u201c A Conflict-Free Replicated JSON\nDatatype ,\u201d arXiv:1608.03960, August 13, 2016.\n[33] Frazer Clement: \u201c Eventual Consistency \u2013 Detecting Conflicts ,\u201d messagepass\u2010\ning.blogspot.co.uk , October 20, 2011.\n[34] Robert Hodges: \u201c State of the Art for MySQL Multi-Master Replication ,\u201d at Per\u2010\ncona Live: MySQL Conference & Expo , April 2013.\n[35] John Daily: \u201c Clocks Are Bad, or, Welcome to the Wonderful World of Dis\u2010\ntributed Systems ,\u201d basho.com , November 12, 2013.\n[36] Riley Berton: \u201c Is Bi-Directional Replication (BDR) in Postgres Transactional? ,\u201d\nsdf.org , January 4, 2016.\nSummary | 195\n",
    "summary": "The chunk discusses eventual consistency, conflict resolution in replicated data, and the challenges of multi-master replication systems, referencing technologies like BDR and CouchDB.",
    "sample_answer": "\u201cOkay, this chunk highlights some critical considerations for designing resilient, distributed data systems. The core issue is that achieving strong consistency across multiple replicas is incredibly difficult and often impractical; we see this explicitly discussed in Vogels' \u2018Eventually Consistent\u2019 paper, where he advocates for accepting eventual consistency to improve availability and performance. Furthermore, the discussion around BDR (Continuous, BDR 0.10.0) and conflict-free replicated JSON data types illustrates the need for sophisticated conflict resolution strategies \u2013 a common problem that systems like CouchDB address, but one that always demands careful consideration during design.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you would choose an eventually consistent data model over a strongly consistent one, and outline the strategies you\u2019d employ to manage potential conflicts in that system.  Specifically, how would you address the challenges identified in Vogels\u2019 \u2018Eventually Consistent\u2019 paper?\u201d"
  },
  {
    "chunk": "[37] Giuseppe DeCandia, Deniz Hastorun, Madan Jampani, et al.: \u201c Dynamo: Ama\u2010\nzon\u2019s Highly Available Key-Value Store ,\u201d at 21st ACM Symposium on Operating Sys\u2010\ntems Principles  (SOSP), October 2007.\n[38] Marc Shapiro, Nuno Pregui\u00e7a, Carlos Baquero, and Marek Zawirski: \u201c A Com\u2010\nprehensive Study of Convergent and Commutative Replicated Data Types ,\u201d INRIA\nResearch Report no. 7506, January 2011.\n[39] Sam Elliott: \u201c CRDTs: An UPDATE (or Maybe Just a PUT) ,\u201d at RICON West ,\nOctober 2013.\n[40] Russell Brown: \u201c A Bluffers Guide to CRDTs in Riak ,\u201d gist.github.com , October\n28, 2013.\n[41] Benjamin Farinier, Thomas Gazagnaire, and Anil Madhavapeddy: \u201c Mergeable\nPersistent Data Structures ,\u201d at 26es Journ\u00e9es Francophones des Langages Applicatifs\n(JFLA), January 2015.\n[42] Chengzheng Sun and Clarence Ellis: \u201c Operational Transformation in Real-Time\nGroup Editors: Issues, Algorithms, and Achievements ,\u201d at ACM Conference on Com\u2010\nputer Supported Cooperative Work  (CSCW), November 1998.\n[43] Lars Hofhansl: \u201c HBASE-7709: Infinite Loop Possible in Master/Master Replica\u2010\ntion,\u201d issues.apache.org , January 29, 2013.\n[44] David K. Gifford: \u201c Weighted Voting for Replicated Data ,\u201d at 7th ACM Sympo\u2010\nsium on Operating Systems Principles  (SOSP), December 1979. doi:\n10.1145/800215.806583\n[45] Heidi Howard, Dahlia Malkhi, and Alexander Spiegelman: \u201c Flexible Paxos: Quo\u2010\nrum Intersection Revisited ,\u201d arXiv:1608.06696 , August 24, 2016.\n[46] Joseph Blomstedt: \u201c Re: Absolute Consistency ,\u201d email to riak-users  mailing list,\nlists.basho.com , January 11, 2012.\n[47] Joseph Blomstedt: \u201c Bringing Consistency to Riak ,\u201d at RICON West , October\n2012.\n[48] Peter Bailis, Shivaram Venkataraman, Michael J. Franklin, et al.: \u201c Quantifying\nEventual Consistency with PBS ,\u201d Communications of the ACM , volume 57, number 8,\npages 93\u2013102, August 2014. doi:10.1145/2632792\n[49] Jonathan Ellis: \u201c Modern Hinted Handoff ,\u201d datastax.com , December 11, 2012.\n[50] \u201cProject Voldemort Wiki ,\u201d github.com , 2013.\n[51] \u201cApache Cassandra 2.0 Documentation ,\u201d DataStax, Inc., 2014.\n[52] \u201cRiak Enterprise: Multi-Datacenter Replication .\u201d Technical whitepaper, Basho\nTechnologies, Inc., September 2014.\n196 | Chapter 5: Replication\n",
    "summary": "The text discusses various approaches to data replication, consistency models (eventual, strong), and related technologies like Cassandra and Riak, highlighting challenges like master-master replication loops and the trade-offs between consistency and availability.",
    "sample_answer": "\u201cThis document highlights several critical challenges in designing highly available, replicated data systems. The discussion of \u2018infinite loop\u2019 issues in master-master replication (HBASE-7709) underscores the importance of carefully considering coordination protocols and potential failure modes. The exploration of techniques like \u2018hinted handoff\u2019 in Cassandra and Riak illustrates the need for strategies to mitigate temporary unavailability and maintain eventual consistency. The use of CRDTs and the discussion of \u2018absolute consistency\u2019 shows an awareness of the trade-off between strong consistency guarantees and the operational complexity they introduce.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you might choose between strong consistency and eventual consistency in a replicated data system. Walk me through the design considerations and potential tradeoffs you'd evaluate.\u201d"
  },
  {
    "chunk": "[53] Jonathan Ellis: \u201c Why Cassandra Doesn\u2019t Need Vector Clocks ,\u201d datastax.com ,\nSeptember 2, 2013.\n[54] Leslie Lamport: \u201c Time, Clocks, and the Ordering of Events in a Distributed Sys\u2010\ntem,\u201d Communications of the ACM , volume 21, number 7, pages 558\u2013565, July 1978.\ndoi:10.1145/359545.359563\n[55] Joel Jacobson: \u201c Riak 2.0: Data Types ,\u201d blog.joeljacobson.com , March 23, 2014.\n[56] D. Stott Parker Jr., Gerald J. Popek, Gerard Rudisin, et al.: \u201c Detection of Mutual\nInconsistency in Distributed Systems ,\u201d IEEE Transactions on Software Engineering ,\nvolume 9, number 3, pages 240\u2013247, May 1983. doi:10.1109/TSE.1983.236733\n[57] Nuno Pregui\u00e7a, Carlos Baquero, Paulo S\u00e9rgio Almeida, et al.: \u201c Dotted Version\nVectors: Logical Clocks for Optimistic Replication ,\u201d arXiv:1011.5808, November 26,\n2010.\n[58] Sean Cribbs: \u201c A Brief History of Time in Riak ,\u201d at RICON , October 2014.\n[59] Russell Brown: \u201c Vector Clocks Revisited Part 2: Dotted Version Vectors ,\u201d\nbasho.com , November 10, 2015.\n[60] Carlos Baquero: \u201c Version Vectors Are Not Vector Clocks ,\u201d haslab.word\u2010\npress.com , July 8, 2011.\n[61] Reinhard Schwarz and Friedemann Mattern: \u201c Detecting Causal Relationships in\nDistributed Computations: In Search of the Holy Grail ,\u201d Distributed Computing , vol\u2010\nume 7, number 3, pages 149\u2013174, March 1994. doi:10.1007/BF02277859\nSummary | 197\n",
    "summary": "The text discusses the challenges of maintaining consistency in distributed systems, particularly focusing on the limitations of traditional vector clocks and exploring alternative approaches like dotted version vectors.",
    "sample_answer": "\u201cThis material highlights a core tension in designing distributed systems \u2013 achieving strong consistency versus availability. Traditional vector clocks, as described by Lamport, attempt to track causal relationships between events, but can become computationally expensive to maintain, especially as the system scales. The discussion of dotted version vectors, popularized by Pregui\u00e7a et al., represents a more efficient approach by focusing on detecting mutual inconsistency \u2013 a crucial step in achieving eventual consistency while avoiding the overhead of a full vector clock, reflecting a key trade-off in distributed system design.\u201d",
    "potential_interview_question": "\u201cExplain the difference between a vector clock and a dotted version vector.  In what scenarios might you choose one over the other, considering the trade-offs in terms of performance and consistency guarantees?\u201d"
  },
  {
    "chunk": "i. Partitioning, as discussed in this chapter, is a way of intentionally breaking a large database down into\nsmaller ones. It has nothing to do with network partitions  (netsplits), a type of fault in the network between\nnodes. We will discuss such faults in Chapter 8 .\nCHAPTER 6\nPartitioning\nClearly, we must break away from the sequential and not limit the computers. We must\nstate definitions and provide for priorities and descriptions of data. We must state relation\u2010\nships, not procedures.\n\u2014Grace Murray Hopper, Management and the Computer of the Future  (1962)\nIn Chapter 5  we discussed replication\u2014that is, having multiple copies of the same\ndata on different nodes. For very large datasets, or very high query throughput, that is\nnot sufficient: we need to break the data up into partitions , also known as sharding .i\nTerminological confusion\nWhat we call a partition  here is called a shard  in MongoDB, Elas\u2010\nticsearch, and SolrCloud; it\u2019s known as a region  in HBase, a tablet\nin Bigtable, a vnode  in Cassandra and Riak, and a vBucket  in\nCouchbase. However, partitioning  is the most established term, so\nwe\u2019ll stick with that.\nNormally, partitions are defined in such a way that each piece of data (each record,\nrow, or document) belongs to exactly one partition. There are various ways of achiev\u2010\ning this, which we discuss in depth in this chapter. In effect, each partition is a small\ndatabase of its own, although the database may support operations that touch multi\u2010\nple partitions at the same time.\nThe main reason for wanting to partition data is scalability . Different partitions can\nbe placed on different nodes in a shared-nothing cluster (see the introduction to\n199\n",
    "summary": "The text discusses data partitioning as a key strategy for achieving scalability in distributed systems, referencing concepts like sharding and different terminology across various databases.",
    "sample_answer": "\u201cData partitioning, as we\u2019re seeing here, is fundamentally about distributing a large dataset across multiple nodes to overcome scalability limitations. The text explicitly mentions \u2018sharding,\u2019 which is a common term across different database systems like MongoDB and Elasticsearch, signifying the division of data into smaller, more manageable pieces\u2014this aligns with the principles of a shared-nothing cluster.  The use of partitioning, combined with the ability to operate on multiple partitions concurrently, is a core design pattern for systems handling high query loads or very large datasets, and it\u2019s directly related to the CAP theorem's consideration of availability in the face of network partitions.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system to store and query user activity logs for a rapidly growing social media platform.  Considering the insights from this chunk about partitioning, how would you approach designing the partitioning strategy, and what considerations would be paramount in selecting the appropriate partitioning method?\u201d"
  },
  {
    "chunk": "Figure 6-1. Combining replication and partitioning: each node acts as leader for some\npartitions and follower for other partitions.\nPartitioning of Key-Value Data\nSay you have a large amount of data, and you want to partition it. How do you decide\nwhich records to store on which nodes?\nOur goal with partitioning is to spread the data and the query load evenly across\nnodes. If every node takes a fair share, then\u2014in theory\u201410 nodes should be able to\nhandle 10 times as much data and 10 times the read and write throughput of a single\nnode (ignoring replication for now).\nIf the partitioning is unfair, so that some partitions have more data or queries than\nothers, we call it skewed . The presence of skew makes partitioning much less effective.\nIn an extreme case, all the load could end up on one partition, so 9 out of 10 nodes\nare idle and your bottleneck is the single busy node. A partition with disproportion\u2010\nately high load is called a hot spot .\nThe simplest approach for avoiding hot spots would be to assign records to nodes\nrandomly. That would distribute the data quite evenly across the nodes, but it has a\nbig disadvantage: when you\u2019re trying to read a particular item, you have no way of\nknowing which node it is on, so you have to query all nodes in parallel.\nWe can do better. Let\u2019s assume for now that you have a simple key-value data model,\nin which you always access a record by its primary key. For example, in an old-\nfashioned paper encyclopedia, you look up an entry by its title; since all the entries\nare alphabetically sorted by title, you can quickly find the one you\u2019re looking for.\nPartitioning of Key-Value Data | 201\n",
    "summary": "The text discusses partitioning strategies for key-value data, highlighting the importance of avoiding skew and hot spots to achieve even load distribution and efficient querying.",
    "sample_answer": "\u201cOkay, this section is really about designing a robust key-value store. The core principle here is avoiding data skew, as described \u2013 if a single partition becomes a \u2018hot spot\u2019 due to uneven data distribution, it\u2019ll create a bottleneck, regardless of the number of nodes. To mitigate this, we need a partitioning strategy that distributes data based on the primary key, mirroring the example of an encyclopedia where access is determined by sorted titles \u2013 this ensures that related records are likely to reside on the same node, improving query performance and minimizing hot spot formation.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a key-value store for a social media platform. How would you approach partitioning the data, and what considerations would you make to avoid skew and ensure efficient read/write performance, referencing the concepts of partitioning and hot spots discussed in this text?\u201d"
  },
  {
    "chunk": "However, the downside of key range partitioning is that certain access patterns can\nlead to hot spots. If the key is a timestamp, then the partitions correspond to ranges\nof time\u2014e.g., one partition per day. Unfortunately, because we write data from the\nsensors to the database as the measurements happen, all the writes end up going to\nthe same partition (the one for today), so that partition can be overloaded with writes\nwhile others sit idle [ 5].\nTo avoid this problem in the sensor database, you need to use something other than\nthe timestamp as the first element of the key. For example, you could prefix each\ntimestamp with the sensor name so that the partitioning is first by sensor name and\nthen by time. Assuming you have many sensors active at the same time, the write\nload will end up more evenly spread across the partitions. Now, when you want to\nfetch the values of multiple sensors within a time range, you need to perform a sepa\u2010\nrate range query for each sensor name.\nPartitioning by Hash of Key\nBecause of this risk of skew and hot spots, many distributed datastores use a hash\nfunction to determine the partition for a given key.\nA good hash function takes skewed data and makes it uniformly distributed. Say you\nhave a 32-bit hash function that takes a string. Whenever you give it a new string, it\nreturns a seemingly random number between 0 and 232 \u2212 1. Even if the input strings\nare very similar, their hashes are evenly distributed across that range of numbers.\nFor partitioning purposes, the hash function need not be cryptographically strong:\nfor example, Cassandra and MongoDB use MD5, and Voldemort uses the Fowler\u2013\nNoll\u2013Vo function. Many programming languages have simple hash functions built in\n(as they are used for hash tables), but they may not be suitable for partitioning: for\nexample, in Java\u2019s Object.hashCode()  and Ruby\u2019s Object#hash , the same key may\nhave a different hash value in different processes [ 6].\nOnce you have a suitable hash function for keys, you can assign each partition a\nrange of hashes (rather than a range of keys), and every key whose hash falls within a\npartition\u2019s range will be stored in that partition. This is illustrated in Figure 6-3 .\nPartitioning of Key-Value Data | 203\n",
    "summary": "The text discusses the challenges of key-based partitioning, specifically hot spots caused by skewed data, and proposes using hash functions to distribute keys more evenly across partitions.",
    "sample_answer": "\u201cOkay, let\u2019s break down the key partitioning issue. The problem highlighted here is a classic hot spot scenario \u2013 when a key attribute (like a timestamp) leads to uneven data distribution across partitions, causing overload on one partition while others remain idle. To address this, using a hash function to partition keys is a standard approach, as shown in Figure 6-3. A good hash function, like those used in Cassandra (MD5) or Voldemort (Fowler\u2013Noll\u2013Vo), distributes keys uniformly across partitions, mitigating the skew problem. The key consideration is choosing a hash function that is robust against skewed data, which is crucial for maintaining high availability and performance.\u201d",
    "potential_interview_question": "\u201cImagine you're designing a data ingestion pipeline for sensor data. The data is timestamped, and you\u2019re concerned about hot spots arising from partitioning based on this timestamp. What strategies would you employ to mitigate this issue, and why? Be specific about the types of hash functions you might consider, and their potential trade-offs.\u201d"
  },
  {
    "chunk": "Strategies for Rebalancing\nThere are a few different ways of assigning partitions to nodes [ 23]. Let\u2019s briefly dis\u2010\ncuss each in turn.\nHow not to do it: hash mod N\nWhen partitioning by the hash of a key, we said earlier ( Figure 6-3 ) that it\u2019s best to\ndivide the possible hashes into ranges and assign each range to a partition (e.g., assign\nkey to partition 0 if 0 \u2264 hash (key) < b0, to partition 1 if b0 \u2264 hash (key) < b1, etc.).\nPerhaps you wondered why we don\u2019t just use mod  (the % operator in many program\u2010\nming languages). For example, hash (key) mod  10 would return a number between 0\nand 9 (if we write the hash as a decimal number, the hash mod  10 would be the last\ndigit). If we have 10 nodes, numbered 0 to 9, that seems like an easy way of assigning\neach key to a node.\nThe problem with the mod N  approach is that if the number of nodes N changes,\nmost of the keys will need to be moved from one node to another. For example, say\nhash (key) = 123456. If you initially have 10 nodes, that key starts out on node 6\n(because 123456 mod  10 = 6). When you grow to 11 nodes, the key needs to move to\nnode 3 (123456 mod  11 = 3), and when you grow to 12 nodes, it needs to move to\nnode 0 (123456 mod  12 = 0). Such frequent moves make rebalancing excessively\nexpensive.\nWe need an approach that doesn\u2019t move data around more than necessary.\nFixed number of partitions\nFortunately, there is a fairly simple solution: create many more partitions than there\nare nodes, and assign several partitions to each node. For example, a database run\u2010\nning on a cluster of 10 nodes may be split into 1,000 partitions from the outset so that\napproximately 100 partitions are assigned to each node.\nNow, if a node is added to the cluster, the new node can steal  a few partitions from\nevery existing node until partitions are fairly distributed once again. This process is\nillustrated in Figure 6-6 . If a node is removed from the cluster, the same happens in\nreverse.\nOnly entire partitions are moved between nodes. The number of partitions does not\nchange, nor does the assignment of keys to partitions. The only thing that changes is\nthe assignment of partitions to nodes. This change of assignment is not immediate\u2014\nit takes some time to transfer a large amount of data over the network\u2014so the old\nassignment of partitions is used for any reads and writes that happen while the trans\u2010\nfer is in progress.\n210 | Chapter 6: Partitioning\n",
    "summary": "The text discusses the pitfalls of simple hashing for partitioning and proposes a fixed-partition approach with minimal data movement during rebalancing.",
    "sample_answer": "\u201cOkay, let\u2019s analyze this from a system design perspective. The core issue here is that using a simple `hash (key) mod N` approach for partitioning creates a highly dynamic rebalancing scenario.  As the cluster scales, keys will constantly shift, incurring significant network overhead and impacting performance.  The proposed solution \u2013 creating a large number of partitions and assigning them to nodes \u2013 addresses this by minimizing the amount of data transferred during rebalancing. This aligns with the principle of reducing operational complexity and maintaining performance as the system scales, mirroring strategies like sharding and leveraging a fixed-partition scheme to avoid frequent data movement, a common concern during rebalancing.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where a naive partitioning strategy (like `hash (key) mod N`) could lead to a performance bottleneck. How would you address this, and what principles would guide your design choices?\u201d"
  },
  {
    "chunk": "Figure 6-6. Adding a new node to a database cluster with multiple partitions per node.\nIn principle, you can even account for mismatched hardware in your cluster: by\nassigning more partitions to nodes that are more powerful, you can force those nodes\nto take a greater share of the load.\nThis approach to rebalancing is used in Riak [ 15], Elasticsearch [ 24], Couchbase [ 10],\nand Voldemort [ 25].\nIn this configuration, the number of partitions is usually fixed when the database is\nfirst set up and not changed afterward. Although in principle it\u2019s possible to split and\nmerge partitions (see the next section), a fixed number of partitions is operationally\nsimpler, and so many fixed-partition databases choose not to implement partition\nsplitting. Thus, the number of partitions configured at the outset is the maximum\nnumber of nodes you can have, so you need to choose it high enough to accommo\u2010\ndate future growth. However, each partition also has management overhead, so it\u2019s\ncounterproductive to choose too high a number.\nChoosing the right number of partitions is difficult if the total size of the dataset is\nhighly variable (for example, if it starts small but may grow much larger over time).\nSince each partition contains a fixed fraction of the total data, the size of each parti\u2010\ntion grows proportionally to the total amount of data in the cluster. If partitions are\nvery large, rebalancing and recovery from node failures become expensive. But if par\u2010\ntitions are too small, they incur too much overhead. The best performance is\nachieved when the size of partitions is \u201cjust right,\u201d neither too big nor too small,\nwhich can be hard to achieve if the number of partitions is fixed but the dataset size\nvaries.\nRebalancing Partitions | 211\n",
    "summary": "The chunk discusses the design considerations for partitioning data in a database cluster, focusing on the trade-offs between partition size, rebalancing costs, and dataset variability.",
    "sample_answer": "\u201cThis illustrates a fundamental challenge in database design \u2013 managing data partitioning for scalability and performance. The example of Riak, Elasticsearch, Couchbase, and Voldemort highlights the common practice of fixed partitioning, acknowledging that it simplifies operations but creates a bottleneck if data volume significantly increases.  A key consideration is the \u2018just right\u2019 partition size, balancing rebalancing costs with overhead \u2013 larger partitions lead to slower rebalancing during failures, while smaller partitions increase the load from each node.\u201d",
    "potential_interview_question": "\u201cLet's say we're designing a search index for a rapidly growing e-commerce site. We initially choose a fixed number of partitions.  What factors should we consider to determine the optimal number of partitions, and what potential problems could arise if we make a poor choice, referencing concepts like rebalancing and partition size?\u201d"
  },
  {
    "chunk": "Dynamic partitioning\nFor databases that use key range partitioning (see \u201cPartitioning by Key Range\u201d on\npage 202), a fixed number of partitions with fixed boundaries would be very incon\u2010\nvenient: if you got the boundaries wrong, you could end up with all of the data in one\npartition and all of the other partitions empty. Reconfiguring the partition bound\u2010\naries manually would be very tedious.\nFor that reason, key range\u2013partitioned databases such as HBase and RethinkDB cre\u2010\nate partitions dynamically. When a partition grows to exceed a configured size (on\nHBase, the default is 10 GB), it is split into two partitions so that approximately half\nof the data ends up on each side of the split [ 26]. Conversely, if lots of data is deleted\nand a partition shrinks below some threshold, it can be merged with an adjacent par\u2010\ntition. This process is similar to what happens at the top level of a B-tree (see \u201cB-\nTrees\u201d on page 79 ).\nEach partition is assigned to one node, and each node can handle multiple partitions,\nlike in the case of a fixed number of partitions. After a large partition has been split,\none of its two halves can be transferred to another node in order to balance the load.\nIn the case of HBase, the transfer of partition files happens through HDFS, the\nunderlying distributed filesystem [ 3].\nAn advantage of dynamic partitioning is that the number of partitions adapts to the\ntotal data volume. If there is only a small amount of data, a small number of parti\u2010\ntions is sufficient, so overheads are small; if there is a huge amount of data, the size of\neach individual partition is limited to a configurable maximum [ 23].\nHowever, a caveat is that an empty database starts off with a single partition, since\nthere is no a priori  information about where to draw the partition boundaries. While\nthe dataset is small\u2014until it hits the point at which the first partition is split\u2014all\nwrites have to be processed by a single node while the other nodes sit idle. To miti\u2010\ngate this issue, HBase and MongoDB allow an initial set of partitions to be configured\non an empty database (this is called pre-splitting ). In the case of key-range partition\u2010\ning, pre-splitting requires that you already know what the key distribution is going to\nlook like [ 4, 26].\nDynamic partitioning is not only suitable for key range\u2013partitioned data, but can\nequally well be used with hash-partitioned data. MongoDB since version 2.4 supports\nboth key-range and hash partitioning, and it splits partitions dynamically in either\ncase.\nPartitioning proportionally to nodes\nWith dynamic partitioning, the number of partitions is proportional to the size of the\ndataset, since the splitting and merging processes keep the size of each partition\nbetween some fixed minimum and maximum. On the other hand, with a fixed num\u2010\n212 | Chapter 6: Partitioning\n",
    "summary": "This chunk discusses dynamic partitioning strategies for key-range and hash-partitioned databases, focusing on adapting partition counts to data volume and mitigating initial load issues.",
    "sample_answer": "\u201cOkay, so dynamic partitioning is a crucial design consideration when dealing with large, evolving datasets. The core principle is to automatically adjust the number of partitions based on the data volume, mirroring the behavior of a B-tree to maintain efficient data access. Specifically, the text highlights how HBase and RethinkDB dynamically split and merge partitions to avoid having all data concentrated in a single partition, which would lead to performance bottlenecks. The HBase example, using HDFS for partition file transfers, demonstrates a practical implementation, and the discussion about pre-splitting addresses the initial load imbalance when the database starts empty.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say you are designing a data ingestion pipeline for a new social media platform. The volume of user posts is expected to grow exponentially. Considering the dynamic partitioning strategies discussed in this chunk, what architectural choices would you make for the data storage layer to ensure scalability and efficient query performance as the data volume increases?\u201d"
  },
  {
    "chunk": "ber of partitions, the size of each partition is proportional to the size of the dataset. In\nboth of these cases, the number of partitions is independent of the number of nodes.\nA third option, used by Cassandra and Ketama, is to make the number of partitions\nproportional to the number of nodes\u2014in other words, to have a fixed number of par\u2010\ntitions per node  [23, 27, 28]. In this case, the size of each partition grows proportion\u2010\nally to the dataset size while the number of nodes remains unchanged, but when you\nincrease the number of nodes, the partitions become smaller again. Since a larger\ndata volume generally requires a larger number of nodes to store, this approach also\nkeeps the size of each partition fairly stable.\nWhen a new node joins the cluster, it randomly chooses a fixed number of existing\npartitions to split, and then takes ownership of one half of each of those split parti\u2010\ntions while leaving the other half of each partition in place. The randomization can\nproduce unfair splits, but when averaged over a larger number of partitions (in Cas\u2010\nsandra, 256 partitions per node by default), the new node ends up taking a fair share\nof the load from the existing nodes. Cassandra 3.0 introduced an alternative rebalanc\u2010\ning algorithm that avoids unfair splits [ 29].\nPicking partition boundaries randomly requires that hash-based partitioning is used\n(so the boundaries can be picked from the range of numbers produced by the hash\nfunction). Indeed, this approach corresponds most closely to the original definition\nof consistent hashing [ 7] (see \u201cConsistent Hashing\u201d on page 204). Newer hash func\u2010\ntions can achieve a similar effect with lower metadata overhead [ 8].\nOperations: Automatic or Manual Rebalancing\nThere is one important question with regard to rebalancing that we have glossed\nover: does the rebalancing happen automatically or manually?\nThere is a gradient between fully automatic rebalancing (the system decides automat\u2010\nically when to move partitions from one node to another, without any administrator\ninteraction) and fully manual (the assignment of partitions to nodes is explicitly con\u2010\nfigured by an administrator, and only changes when the administrator explicitly\nreconfigures it). For example, Couchbase, Riak, and Voldemort generate a suggested\npartition assignment automatically, but require an administrator to commit it before\nit takes effect.\nFully automated rebalancing can be convenient, because there is less operational\nwork to do for normal maintenance. However, it can be unpredictable. Rebalancing\nis an expensive operation, because it requires rerouting requests and moving a large\namount of data from one node to another. If it is not done carefully, this process can\noverload the network or the nodes and harm the performance of other requests while\nthe rebalancing is in progress.\nRebalancing Partitions | 213\n",
    "summary": "The chunk discusses partitioning strategies in distributed systems, particularly focusing on consistent hashing and the trade-offs between automatic and manual rebalancing.",
    "sample_answer": "\u201cOkay, so when designing a distributed system like Cassandra, you\u2019ll often encounter the challenge of partitioning data for scalability and performance. Consistent hashing, which we see referenced, is a key technique here \u2013 it allows us to minimize data movement when nodes are added or removed, unlike simpler approaches. Furthermore, the choice between automatic and manual rebalancing is crucial; while automatic rebalancing simplifies operations, it can introduce unpredictable performance impacts during the rebalancing process itself, potentially causing network congestion and node overload \u2013 a core consideration when assessing the system\u2019s availability.\u201d",
    "potential_interview_question": "\u201cDescribe the trade-offs between automatic and manual rebalancing in a distributed system. How does the concept of consistent hashing relate to this decision, and why is it important for maintaining system availability?\u201d"
  },
  {
    "chunk": "Such automation can be dangerous in combination with automatic failure detection.\nFor example, say one node is overloaded and is temporarily slow to respond to\nrequests. The other nodes conclude that the overloaded node is dead, and automati\u2010\ncally rebalance the cluster to move load away from it. This puts additional load on the\noverloaded node, other nodes, and the network\u2014making the situation worse and\npotentially causing a cascading failure.\nFor that reason, it can be a good thing to have a human in the loop for rebalancing.\nIt\u2019s slower than a fully automatic process, but it can help prevent operational\nsurprises. \nRequest Routing\nWe have now partitioned our dataset across multiple nodes running on multiple\nmachines. But there remains an open question: when a client wants to make a\nrequest, how does it know which node to connect to? As partitions are rebalanced,\nthe assignment of partitions to nodes changes. Somebody needs to stay on top of\nthose changes in order to answer the question: if I want to read or write the key \u201cfoo\u201d,\nwhich IP address and port number do I need to connect to?\nThis is an instance of a more general problem called service discovery , which isn\u2019t\nlimited to just databases. Any piece of software that is accessible over a network has\nthis problem, especially if it is aiming for high availability (running in a redundant\nconfiguration on multiple machines). Many companies have written their own in-\nhouse service discovery tools, and many of these have been released as open source\n[30].\nOn a high level, there are a few different approaches to this problem (illustrated in\nFigure 6-7 ):\n1.Allow clients to contact any node (e.g., via a round-robin load balancer). If that\nnode coincidentally owns the partition to which the request applies, it can handle\nthe request directly; otherwise, it forwards the request to the appropriate node,\nreceives the reply, and passes the reply along to the client.\n2.Send all requests from clients to a routing tier first, which determines the node\nthat should handle each request and forwards it accordingly. This routing tier\ndoes not itself handle any requests; it only acts as a partition-aware load balancer.\n3.Require that clients be aware of the partitioning and the assignment of partitions\nto nodes. In this case, a client can connect directly to the appropriate node,\nwithout any intermediary.\nIn all cases, the key problem is: how does the component making the routing decision\n(which may be one of the nodes, or the routing tier, or the client) learn about changes\nin the assignment of partitions to nodes?\n214 | Chapter 6: Partitioning\n",
    "summary": "The text highlights the dangers of automatic rebalancing and the need for service discovery to manage dynamic node assignments.",
    "sample_answer": "\u201cThis scenario illustrates a critical point in designing resilient systems \u2013 automatic rebalancing can exacerbate problems by overloading failing nodes. To address this, we need a mechanism for service discovery, which is the process of dynamically locating services within a distributed system. The text outlines three approaches: clients contacting any node, a routing tier, or client-aware routing, all of which aim to solve the problem of how components learn about changes in partition assignments, a key element in maintaining availability.\u201d",
    "potential_interview_question": "\u201cDescribe a system where nodes can fail and be automatically rebalanced. What are the potential pitfalls of a purely automatic rebalancing strategy, and how could you mitigate those risks? Consider the concepts of service discovery and the trade-offs involved in different routing approaches.\u201d"
  },
  {
    "chunk": "Figure 6-7. Three different ways of routing a request to the right node.\nThis is a challenging problem, because it is important that all participants agree\u2014\notherwise requests would be sent to the wrong nodes and not handled correctly.\nThere are protocols for achieving consensus in a distributed system, but they are hard\nto implement correctly (see Chapter 9 ).\nMany distributed data systems rely on a separate coordination service such as Zoo\u2010\nKeeper to keep track of this cluster metadata, as illustrated in Figure 6-8 . Each node\nregisters itself in ZooKeeper, and ZooKeeper maintains the authoritative mapping of\npartitions to nodes. Other actors, such as the routing tier or the partitioning-aware\nclient, can subscribe to this information in ZooKeeper. Whenever a partition changes\nownership, or a node is added or removed, ZooKeeper notifies the routing tier so that\nit can keep its routing information up to date.\nFigure 6-8. Using ZooKeeper to keep track of assignment of partitions to nodes.\nRequest Routing | 215\n",
    "summary": "The chunk discusses using ZooKeeper for maintaining cluster metadata and ensuring consensus in a distributed system, highlighting the importance of coordination services for routing and data assignment.",
    "sample_answer": "\u201cOkay, this section really highlights the critical need for coordination in a distributed system. The reliance on ZooKeeper to maintain partition-to-node assignments demonstrates a common architectural pattern \u2013 using a consensus service like ZooKeeper to resolve conflicts and ensure data is routed correctly. This aligns with the CAP theorem, where strong consistency \u2013 achieved through mechanisms like ZooKeeper\u2019s consensus protocol \u2013 is prioritized over availability in a partitioned environment.\u201d",
    "potential_interview_question": "\u201cLet's say we're designing a system where data needs to be consistently routed to different nodes based on a changing partition scheme. What are some of the challenges you anticipate, and how might you leverage a coordination service like ZooKeeper to address them, specifically considering the CAP theorem?\u201d"
  },
  {
    "chunk": "The goal of partitioning is to spread the data and query load evenly across multiple\nmachines, avoiding hot spots (nodes with disproportionately high load). This\nrequires choosing a partitioning scheme that is appropriate to your data, and reba\u2010\nlancing the partitions when nodes are added to or removed from the cluster.\nWe discussed two main approaches to partitioning:\n\u2022Key range partitioning , where keys are sorted, and a partition owns all the keys\nfrom some minimum up to some maximum. Sorting has the advantage that effi\u2010\ncient range queries are possible, but there is a risk of hot spots if the application\noften accesses keys that are close together in the sorted order.\nIn this approach, partitions are typically rebalanced dynamically by splitting the\nrange into two subranges when a partition gets too big.\n\u2022Hash partitioning , where a hash function is applied to each key, and a partition\nowns a range of hashes. This method destroys the ordering of keys, making range\nqueries inefficient, but may distribute load more evenly.\nWhen partitioning by hash, it is common to create a fixed number of partitions\nin advance, to assign several partitions to each node, and to move entire parti\u2010\ntions from one node to another when nodes are added or removed. Dynamic\npartitioning can also be used.\nHybrid approaches are also possible, for example with a compound key: using one\n",
    "summary": "The text discusses key range and hash partitioning strategies for distributing data and query load across a cluster, highlighting the trade-offs between ordering and even distribution. It also addresses the need for dynamic rebalancing and considerations for hybrid approaches.",
    "sample_answer": "\u201cOkay, so partitioning is fundamentally about avoiding bottlenecks in a distributed system. When we're talking about key range partitioning, like the text describes, we\u2019re aiming for efficient range queries, but we need to be mindful of potential hot spots if our application frequently accesses keys clustered together \u2013 this aligns with the CAP theorem where we might sacrifice consistency for availability in certain scenarios.  Dynamic rebalancing, where we split or move partitions as nodes scale, is crucial for maintaining that even distribution.  Furthermore, when using hash partitioning, like creating a fixed number of partitions as described, this allows us to predictably assign nodes, and then reactively rebalance partitions if the cluster size changes, a common pattern for ensuring availability.\u201d",
    "potential_interview_question": "\u201cDescribe the trade-offs inherent in key range and hash partitioning.  How would you handle a scenario where an application's query patterns shift significantly after deployment, potentially leading to an imbalance in the data distribution across your partitions?\u201d"
  },
  {
    "chunk": "to several partitions can be difficult to reason about: for example, what happens if the\nwrite to one partition succeeds, but another fails? We will address that question in the\nfollowing chapters. \nReferences\n[1] David J. DeWitt and Jim N. Gray: \u201c Parallel Database Systems: The Future of High\nPerformance Database Systems ,\u201d Communications of the ACM , volume 35, number 6,\npages 85\u201398, June 1992. doi:10.1145/129888.129894\n[2] Lars George: \u201c HBase vs. BigTable Comparison ,\u201d larsgeorge.com , November 2009.\n[3] \u201cThe Apache HBase Reference Guide ,\u201d Apache Software Foundation,\nhbase.apache.org , 2014.\n[4] MongoDB, Inc.: \u201c New Hash-Based Sharding Feature in MongoDB 2.4 ,\u201d blog.mon\u2010\ngodb.org , April 10, 2013.\n[5] Ikai Lan: \u201c App Engine Datastore Tip: Monotonically Increasing Values Are Bad ,\u201d\nikaisays.com , January 25, 2011.\n[6] Martin Kleppmann: \u201c Java\u2019s hashCode Is Not Safe for Distributed Systems ,\u201d mar\u2010\ntin.kleppmann.com , June 18, 2012.\n[7] David Karger, Eric Lehman, Tom Leighton, et al.: \u201c Consistent Hashing and Ran\u2010\ndom Trees: Distributed Caching Protocols for Relieving Hot Spots on the World\nWide Web ,\u201d at 29th Annual ACM Symposium on Theory of Computing  (STOC),\npages 654\u2013663, 1997. doi:10.1145/258533.258660\n[8] John Lamping and Eric Veach: \u201c A Fast, Minimal Memory, Consistent Hash Algo\u2010\nrithm ,\u201d arxiv.org , June 2014.\n[9] Eric Redmond: \u201c A Little Riak Book ,\u201d Version 1.4.0, Basho Technologies, Septem\u2010\nber 2013.\n[10] \u201cCouchbase 2.5 Administrator Guide ,\u201d Couchbase, Inc., 2014.\n[11] Avinash Lakshman and Prashant Malik: \u201c Cassandra \u2013 A Decentralized Struc\u2010\ntured Storage System ,\u201d at 3rd ACM SIGOPS International Workshop on Large Scale\nDistributed Systems and Middleware  (LADIS), October 2009.\n[12] Jonathan Ellis: \u201c Facebook\u2019s Cassandra Paper, Annotated and Compared to\nApache Cassandra 2.0 ,\u201d datastax.com , September 12, 2013.\n[13] \u201cIntroduction to Cassandra Query Language ,\u201d DataStax, Inc., 2014.\n[14] Samuel Axon: \u201c 3% of Twitter\u2019s Servers Dedicated to Justin Bieber ,\u201d masha\u2010\nble.com , September 7, 2010.\n[15] \u201cRiak 1.4.8 Docs ,\u201d Basho Technologies, Inc., 2014.\n218 | Chapter 6: Partitioning\n",
    "summary": "The text discusses partitioning challenges in distributed systems, specifically referencing consistent hashing and its implications for data distribution and fault tolerance.",
    "sample_answer": "\u201cWhen partitioning data across multiple nodes, one of the primary concerns is ensuring data consistency and availability during failures. Consistent hashing, as described in the Karger et al. paper [7], is a technique used to minimize data movement when partitions are added or removed, which is crucial for maintaining availability. Furthermore, the discussion about Twitter\u2019s server allocation [14] highlights the potential for hot spots and the need for careful data distribution strategies \u2013 something that\u2019s directly relevant to choosing a partitioning scheme and how we handle data skew.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where consistent hashing would be a suitable partitioning strategy. What are the key trade-offs you would consider when implementing this approach, and how would you monitor its performance to identify potential hot spots?\u201d"
  },
  {
    "chunk": "CHAPTER 7\nTransactions\nSome authors have claimed that general two-phase commit is too expensive to support,\nbecause of the performance or availability problems that it brings. We believe it is better to\nhave application programmers deal with performance problems due to overuse of transac\u2010\ntions as bottlenecks arise, rather than always coding around the lack of transactions.\n\u2014James Corbett et al., Spanner: Google\u2019s Globally-Distributed Database  (2012)\nIn the harsh reality of data systems, many things can go wrong:\n\u2022The database software or hardware may fail at any time (including in the middle\nof a write operation).\n\u2022The application may crash at any time (including halfway through a series of\noperations).\n\u2022Interruptions in the network can unexpectedly cut off the application from the\ndatabase, or one database node from another.\n\u2022Several clients may write to the database at the same time, overwriting each\nother\u2019s changes.\n\u2022A client may read data that doesn\u2019t make sense because it has only partially been\nupdated.\n\u2022Race conditions between clients can cause surprising bugs.\nIn order to be reliable, a system has to deal with these faults and ensure that they\ndon\u2019t cause catastrophic failure of the entire system. However, implementing fault-\ntolerance mechanisms is a lot of work. It requires a lot of careful thinking about all\nthe things that can go wrong, and a lot of testing to ensure that the solution actually\nworks.\n221\n",
    "summary": "The text highlights the challenges of distributed transactions and the need for robust fault tolerance strategies to prevent catastrophic system failures.",
    "sample_answer": "\u201cThe excerpt underscores a critical principle in distributed system design: the inherent difficulty and potential cost of maintaining strong consistency through traditional approaches like two-phase commit (2PC). Corbett et al. argue that it's often more effective to address performance bottlenecks caused by excessive transactions rather than constantly coding around limitations. This aligns with the CAP theorem \u2013 acknowledging that in a distributed system, you typically have to trade off consistency for availability or partition tolerance.  To mitigate the described failure modes \u2013 hardware/software failures, network interruptions, concurrent writes \u2013 a robust design would likely leverage replication and potentially consensus algorithms like Raft to provide durability and availability, while also incorporating strategies for handling schema evolution, particularly as noted by the author\u2019s point on dealing with inconsistencies.\u201d",
    "potential_interview_question": "\u201cConsider a globally distributed database system like Spanner.  Discuss the trade-offs between achieving strong consistency and high availability, referencing concepts such as the CAP theorem and potential strategies for building a resilient system against various failure scenarios, including network interruptions and concurrent writes.\u201d"
  },
  {
    "chunk": "For decades, transactions  have been the mechanism of choice for simplifying these\nissues. A transaction is a way for an application to group several reads and writes\ntogether into a logical unit. Conceptually, all the reads and writes in a transaction are\nexecuted as one operation: either the entire transaction succeeds ( commit ) or it fails\n(abort , rollback ). If it fails, the application can safely retry. With transactions, error\nhandling becomes much simpler for an application, because it doesn\u2019t need to worry\nabout partial failure\u2014i.e., the case where some operations succeed and some fail (for\nwhatever reason).\nIf you have spent years working with transactions, they may seem obvious, but we\nshouldn\u2019t take them for granted. Transactions are not a law of nature; they were cre\u2010\nated with a purpose, namely to simplify the programming model  for applications\naccessing a database. By using transactions, the application is free to ignore certain\npotential error scenarios and concurrency issues, because the database takes care of\nthem instead (we call these safety guarantees ).\nNot every application needs transactions, and sometimes there are advantages to\nweakening transactional guarantees or abandoning them entirely (for example, to\nachieve higher performance or higher availability). Some safety properties can be\nachieved without transactions.\nHow do you figure out whether you need transactions? In order to answer that ques\u2010\ntion, we first need to understand exactly what safety guarantees transactions can pro\u2010\nvide, and what costs are associated with them. Although transactions seem\nstraightforward at first glance, there are actually many subtle but important details\nthat come into play.\nIn this chapter, we will examine many examples of things that can go wrong, and\nexplore the algorithms that databases use to guard against those issues. We will go\nespecially deep in the area of concurrency control, discussing various kinds of race\nconditions that can occur and how databases implement isolation levels such as read\ncommitted , snapshot isolation , and serializability .\nThis chapter applies to both single-node and distributed databases; in Chapter 8  we\nwill focus the discussion on the particular challenges that arise only in distributed\nsystems.\nThe Slippery Concept of a Transaction\nAlmost all relational databases today, and some nonrelational databases, support\ntransactions. Most of them follow the style that was introduced in 1975 by IBM Sys\u2010\ntem R, the first SQL database [ 1, 2, 3]. Although some implementation details have\nchanged, the general idea has remained virtually the same for 40 years: the transac\u2010\ntion support in MySQL, PostgreSQL, Oracle, SQL Server, etc., is uncannily similar to\nthat of System R.\n222 | Chapter 7: Transactions\n",
    "summary": "The text discusses the use of transactions in databases to simplify application logic and provides a foundational understanding of concurrency control and isolation levels.",
    "sample_answer": "\u201cTransactions are a critical component of database design, primarily focused on simplifying application logic and providing safety guarantees against data corruption and concurrency issues. Specifically, the text highlights the concepts of transaction isolation levels \u2013 such as read committed and snapshot isolation \u2013 which are implemented through algorithms like serializability to manage concurrent access to data, a core challenge in distributed systems. It\u2019s important to understand these levels because different levels offer different guarantees and impacts on performance.\u201d",
    "potential_interview_question": "\u201cDescribe the trade-offs involved in choosing between different transaction isolation levels (e.g., read committed vs. snapshot isolation). How might the choice of isolation level impact the performance and consistency of a distributed system?\u201d"
  },
  {
    "chunk": "In the late 2000s, nonrelational (NoSQL) databases started gaining popularity. They\naimed to improve upon the relational status quo by offering a choice of new data\nmodels (see Chapter 2 ), and by including replication ( Chapter 5 ) and partitioning\n(Chapter 6 ) by default. Transactions were the main casualty of this movement: many\nof this new generation of databases abandoned transactions entirely, or redefined the\nword to describe a much weaker set of guarantees than had previously been under\u2010\nstood [ 4].\nWith the hype around this new crop of distributed databases, there emerged a popu\u2010\nlar belief that transactions were the antithesis of scalability, and that any large-scale\nsystem would have to abandon transactions in order to maintain good performance\nand high availability [ 5, 6]. On the other hand, transactional guarantees are some\u2010\ntimes presented by database vendors as an essential requirement for \u201cserious applica\u2010\ntions\u201d with \u201cvaluable data.\u201d Both viewpoints are pure hyperbole.\nThe truth is not that simple: like every other technical design choice, transactions\nhave advantages and limitations. In order to understand those trade-offs, let\u2019s go into\nthe details of the guarantees that transactions can provide\u2014both in normal operation\nand in various extreme (but realistic) circumstances.\nThe Meaning of ACID\nThe safety guarantees provided by transactions are often described by the well-\nknown acronym ACID , which stands for Atomicity , Consistency , Isolation , and Dura\u2010\nbility . It was coined in 1983 by Theo H\u00e4rder and Andreas Reuter [ 7] in an effort to\nestablish precise terminology for fault-tolerance mechanisms in databases.\nHowever, in practice, one database\u2019s implementation of ACID does not equal\nanother\u2019s implementation. For example, as we shall see, there is a lot of ambiguity\naround the meaning of isolation  [8]. The high-level idea is sound, but the devil is in\nthe details. Today, when a system claims to be \u201cACID compliant,\u201d it\u2019s unclear what\nguarantees you can actually expect. ACID has unfortunately become mostly a mar\u2010\nketing term.\n(Systems that do not meet the ACID criteria are sometimes called BASE , which\nstands for Basically Available , Soft state , and Eventual consistency  [9]. This is even\nmore vague than the definition of ACID. It seems that the only sensible definition of\nBASE is \u201cnot ACID\u201d; i.e., it can mean almost anything you want.)\nLet\u2019s dig into the definitions of atomicity, consistency, isolation, and durability, as\nthis will let us refine our idea of transactions.\nAtomicity\nIn general, atomic  refers to something that cannot be broken down into smaller parts.\nThe word means similar but subtly different things in different branches of comput\u2010\nThe Slippery Concept of a Transaction | 223\n",
    "summary": "The text discusses the shift from traditional relational databases to NoSQL databases, highlighting the abandonment of ACID transactions and the rise of BASE systems.",
    "sample_answer": "\u201cOkay, so we\u2019re seeing a significant shift in database design, particularly with the emergence of NoSQL. The core issue is the trade-off between strong consistency guarantees, represented by ACID transactions \u2013 specifically Atomicity, Consistency, Isolation, and Durability \u2013 and looser consistency models like BASE. The text\u2019s point about \u2018ACID compliance\u2019 being largely a marketing term is crucial; it means we need to deeply understand the *actual* guarantees offered by any distributed system, not just accept the label. For instance, Atomicity, as described here, represents the idea that a transaction either completes fully or rolls back entirely, ensuring data integrity \u2013 something inherently important when considering data consistency across a distributed system.\u201d",
    "potential_interview_question": "\u201cImagine you're designing a distributed system for processing financial transactions. The system needs to handle a high volume of transactions while maintaining data accuracy. What are the key considerations for ensuring data consistency, and what are some potential challenges related to using a distributed database compared to a traditional relational database? How would you address the \u2018ACID compliance\u2019 caveat mentioned in the text?\u201d"
  },
  {
    "chunk": "ing. For example, in multi-threaded programming, if one thread executes an atomic\noperation, that means there is no way that another thread could see the half-finished\nresult of the operation. The system can only be in the state it was before the operation\nor after the operation, not something in between.\nBy contrast, in the context of ACID, atomicity is not about concurrency. It does not\ndescribe what happens if several processes try to access the same data at the same\ntime, because that is covered under the letter I, for isolation  (see \u201cIsolation\u201d  on page\n225).\nRather, ACID atomicity describes what happens if a client wants to make several\nwrites, but a fault occurs after some of the writes have been processed\u2014for example,\na process crashes, a network connection is interrupted, a disk becomes full, or some\nintegrity constraint is violated. If the writes are grouped together into an atomic\ntransaction, and the transaction cannot be completed ( committed ) due to a fault, then\nthe transaction is aborted  and the database must discard or undo any writes it has\nmade so far in that transaction.\nWithout atomicity, if an error occurs partway through making multiple changes, it\u2019s\ndifficult to know which changes have taken effect and which haven\u2019t. The application\ncould try again, but that risks making the same change twice, leading to duplicate or\nincorrect data. Atomicity simplifies this problem: if a transaction was aborted, the\napplication can be sure that it didn\u2019t change anything, so it can safely be retried.\nThe ability to abort a transaction on error and have all writes from that transaction\ndiscarded is the defining feature of ACID atomicity. Perhaps abortability  would have\nbeen a better term than atomicity , but we will stick with atomicity  since that\u2019s the\nusual word.\nConsistency\nThe word consistency  is terribly overloaded:\n\u2022In Chapter 5  we discussed replica consistency  and the issue of eventual consis\u2010\ntency  that arises in asynchronously replicated systems (see \u201cProblems with Repli\u2010\ncation Lag\u201d on page 161 ).\n\u2022Consistent hashing  is an approach to partitioning that some systems use for reba\u2010\nlancing (see \u201cConsistent Hashing\u201d on page 204 ).\n\u2022In the CAP theorem (see Chapter 9 ), the word consistency  is used to mean linear\u2010\nizability  (see \u201cLinearizability\u201d on page 324 ).\n\u2022In the context of ACID, consistency  refers to an application-specific notion of the\ndatabase being in a \u201cgood state.\u201d\nIt\u2019s unfortunate that the same word is used with at least four different meanings.\n224 | Chapter 7: Transactions\n",
    "summary": "The text discusses ACID properties, particularly atomicity, and its role in ensuring data integrity during transactions, alongside concepts like consistency and CAP theorem.",
    "sample_answer": "\u201cLet\u2019s talk about how atomicity fits into a robust transaction system. The core idea is that if a transaction fails mid-way through, we don\u2019t end up in an inconsistent state \u2013 that's where the ability to abort the transaction and discard all partial writes comes in, aligning with the principles of ACID. This contrasts with approaches where partial updates would create a difficult-to-recover situation.\u201d  \u201cFurthermore, the discussion of consistency and the CAP theorem highlights the trade-offs involved in distributed systems; specifically, the definition of consistency as linearizability demonstrates a key architectural consideration when dealing with replicated data.\u201d",
    "potential_interview_question": "\u201cImagine you're designing a system to process financial transactions. What are the key considerations for ensuring data integrity, and how would you implement a mechanism to guarantee atomicity in the event of a system failure, referencing specific architectural principles like CAP theorem?\u201d"
  },
  {
    "chunk": "i. Joe Hellerstein has remarked that the C in ACID was \u201ctossed in to make the acronym work\u201d in H\u00e4rder and\nReuter\u2019s paper [ 7], and that it wasn\u2019t considered important at the time.The idea of ACID consistency is that you have certain statements about your data\n(invariants ) that must always be true\u2014for example, in an accounting system, credits\nand debits across all accounts must always be balanced. If a transaction starts with a\ndatabase that is valid according to these invariants, and any writes during the transac\u2010\ntion preserve the validity, then you can be sure that the invariants are always satisfied.\nHowever, this idea of consistency depends on the application\u2019s notion of invariants,\nand it\u2019s the application\u2019s responsibility to define its transactions correctly so that they\npreserve consistency. This is not something that the database can guarantee: if you\nwrite bad data that violates your invariants, the database can\u2019t stop you. (Some spe\u2010\ncific kinds of invariants can be checked by the database, for example using foreign\nkey constraints or uniqueness constraints. However, in general, the application\ndefines what data is valid or invalid\u2014the database only stores it.)\nAtomicity, isolation, and durability are properties of the database, whereas consis\u2010\ntency (in the ACID sense) is a property of the application. The application may rely\non the database\u2019s atomicity and isolation properties in order to achieve consistency,\nbut it\u2019s not up to the database alone. Thus, the letter C doesn\u2019t really belong in ACID.i\nIsolation\nMost databases are accessed by several clients at the same time. That is no problem if\nthey are reading and writing different parts of the database, but if they are accessing\nthe same database records, you can run into concurrency problems (race conditions).\nFigure 7-1  is a simple example of this kind of problem. Say you have two clients\nsimultaneously incrementing a counter that is stored in a database. Each client needs\nto read the current value, add 1, and write the new value back (assuming there is no\nincrement operation built into the database). In Figure 7-1  the counter should have\nincreased from 42 to 44, because two increments happened, but it actually only went\nto 43 because of the race condition.\nIsolation  in the sense of ACID means that concurrently executing transactions are\nisolated from each other: they cannot step on each other\u2019s toes. The classic database\ntextbooks formalize isolation as serializability , which means that each transaction can\npretend that it is the only transaction running on the entire database. The database\nensures that when the transactions have committed, the result is the same as if they\nhad run serially  (one after another), even though in reality they may have run con\u2010\ncurrently [ 10].\nThe Slippery Concept of a Transaction | 225\n",
    "summary": "The chunk discusses ACID properties, concurrency issues, and serializability, highlighting the application\u2019s responsibility for data consistency and the database\u2019s role in ensuring isolation.",
    "sample_answer": "\u201cLet\u2019s talk about ensuring data consistency in a distributed system. The \u2018C\u2019 in ACID wasn\u2019t always a central concern, but the key takeaway here is that consistency is fundamentally an *application-defined* property\u2014it's the application\u2019s job to manage invariants. This directly relates to the concurrency challenges you\u2019d see with multiple clients accessing and modifying the same data, which is why we need isolation, a property formalized as serializability. Serializability means the database should emulate the effect of running transactions one at a time, even if they\u2019re executed concurrently, preventing race conditions and ensuring data integrity.\u201d",
    "potential_interview_question": "\u201cImagine a scenario where two users simultaneously attempt to update the same account balance in a database. How would you explain the concept of serializability and its importance in preventing data corruption, and what potential solutions might you consider to enforce this isolation?\u201d"
  },
  {
    "chunk": "Figure 7-1. A race condition between two clients concurrently incrementing a counter.\nHowever, in practice, serializable isolation is rarely used, because it carries a perfor\u2010\nmance penalty. Some popular databases, such as Oracle 11g, don\u2019t even implement it.\nIn Oracle there is an isolation level called \u201cserializable,\u201d but it actually implements\nsomething called snapshot isolation , which is a weaker guarantee than serializability\n[8, 11]. We will explore snapshot isolation and other forms of isolation in \u201cWeak Iso\u2010\nlation Levels\u201d on page 233 .\nDurability\nThe purpose of a database system is to provide a safe place where data can be stored\nwithout fear of losing it. Durability  is the promise that once a transaction has com\u2010\nmitted successfully, any data it has written will not be forgotten, even if there is a\nhardware fault or the database crashes.\nIn a single-node database, durability typically means that the data has been written to\nnonvolatile storage such as a hard drive or SSD. It usually also involves a write-ahead\nlog or similar (see \u201cMaking B-trees reliable\u201d on page 82 ), which allows recovery in the\nevent that the data structures on disk are corrupted. In a replicated database, durabil\u2010\nity may mean that the data has been successfully copied to some number of nodes. In\norder to provide a durability guarantee, a database must wait until these writes or\nreplications are complete before reporting a transaction as successfully committed.\nAs discussed in \u201cReliability\u201d  on page 6, perfect durability does not exist: if all your\nhard disks and all your backups are destroyed at the same time, there\u2019s obviously\nnothing your database can do to save you.\n226 | Chapter 7: Transactions\n",
    "summary": "The text discusses transaction isolation levels, durability guarantees in databases, and the limitations of achieving perfect durability.",
    "sample_answer": "\u201cLet\u2019s talk about transaction isolation. The chunk highlights the trade-off between strict isolation levels like \u2018serializable\u2019 \u2013 which, as Oracle\u2019s implementation demonstrates, often relies on weaker forms like \u2018snapshot isolation\u2019 \u2013 and their performance impact. Snapshot isolation, by creating a consistent snapshot of data at commit, minimizes concurrency issues but requires careful consideration of potential read distortion. Furthermore, the text emphasizes the importance of durability \u2013 ensuring committed transactions are not lost due to failures, achieved through write-ahead logs and replication, acknowledging that perfect durability is fundamentally impossible.\u201d",
    "potential_interview_question": "\u201cDescribe the differences between \u2018serializable\u2019 and \u2018snapshot isolation\u2019 in the context of database transactions. What are the key advantages and disadvantages of each approach in terms of concurrency and potential data inconsistencies?\u201d"
  },
  {
    "chunk": "Replication and Durability\nHistorically, durability meant writing to an archive tape. Then it was understood as\nwriting to a disk or SSD. More recently, it has been adapted to mean replication.\nWhich implementation is better?\nThe truth is, nothing is perfect:\n\u2022If you write to disk and the machine dies, even though your data isn\u2019t lost, it is\ninaccessible until you either fix the machine or transfer the disk to another\nmachine. Replicated systems can remain available.\n\u2022A correlated fault\u2014a power outage or a bug that crashes every node on a particu\u2010\nlar input\u2014can knock out all replicas at once (see \u201cReliability\u201d  on page 6), losing\nany data that is only in memory. Writing to disk is therefore still relevant for in-\nmemory databases.\n\u2022In an asynchronously replicated system, recent writes may be lost when the\nleader becomes unavailable (see \u201cHandling Node Outages\u201d on page 156 ).\n\u2022When the power is suddenly cut, SSDs in particular have been shown to some\u2010\ntimes violate the guarantees they are supposed to provide: even fsync  isn\u2019t guar\u2010\nanteed to work correctly [ 12]. Disk firmware can have bugs, just like any other\nkind of software [ 13, 14].\n\u2022Subtle interactions between the storage engine and the filesystem implementa\u2010\ntion can lead to bugs that are hard to track down, and may cause files on disk to\nbe corrupted after a crash [ 15, 16].\n\u2022Data on disk can gradually become corrupted without this being detected [ 17]. If\ndata has been corrupted for some time, replicas and recent backups may also be\ncorrupted. In this case, you will need to try to restore the data from a historical\nbackup.\n\u2022One study of SSDs found that between 30% and 80% of drives develop at least\none bad block during the first four years of operation [ 18]. Magnetic hard drives\nhave a lower rate of bad sectors, but a higher rate of complete failure than SSDs.\n\u2022If an SSD is disconnected from power, it can start losing data within a few weeks,\ndepending on the temperature [ 19].\nIn practice, there is no one technique that can provide absolute guarantees. There are\nonly various risk-reduction techniques, including writing to disk, replicating to\nremote machines, and backups\u2014and they can and should be used together. As\nalways, it\u2019s wise to take any theoretical \u201cguarantees\u201d with a healthy grain of salt.\nThe Slippery Concept of a Transaction | 227\n",
    "summary": "The text highlights the challenges of achieving true data durability, emphasizing the fallibility of storage media and the need for layered risk reduction strategies.",
    "sample_answer": "\u201cDurability isn\u2019t a single solution; it\u2019s a spectrum of approaches. While writing to disk\u2014like a traditional fsync\u2014offers a layer of protection against machine failure, it\u2019s not a guarantee, as evidenced by the potential for filesystem bugs or SSD data loss, as highlighted in [12, 13, 14, 15, 16, 18, 19]. Therefore, we need to combine this with asynchronous replication to maintain availability, acknowledging the inherent risk of data loss during leader outages, as discussed in [156].\u201d",
    "potential_interview_question": "\u201cDescribe a system design scenario where you need to ensure high data durability and availability. What strategies would you employ, considering the potential vulnerabilities of storage media like SSDs, and how would you balance the trade-offs between these strategies?\u201d"
  },
  {
    "chunk": "ii. Arguably, an incorrect counter in an email application is not a particularly critical problem. Alternatively,\nthink of a customer account balance instead of an unread counter, and a payment transaction instead of an\nemail.Single-Object and Multi-Object Operations\nTo recap, in ACID, atomicity and isolation describe what the database should do if a\nclient makes several writes within the same transaction:\nAtomicity\nIf an error occurs halfway through a sequence of writes, the transaction should\nbe aborted, and the writes made up to that point should be discarded. In other\nwords, the database saves you from having to worry about partial failure, by giv\u2010\ning an all-or-nothing guarantee.\nIsolation\nConcurrently running transactions shouldn\u2019t interfere with each other. For\nexample, if one transaction makes several writes, then another transaction should\nsee either all or none of those writes, but not some subset.\nThese definitions assume that you want to modify several objects (rows, documents,\nrecords) at once. Such multi-object transactions  are often needed if several pieces of\ndata need to be kept in sync. Figure 7-2  shows an example from an email application.\nTo display the number of unread messages for a user, you could query something\nlike:\nSELECT COUNT(*) FROM emails WHERE recipient_id  = 2 AND unread_flag  = true\nHowever, you might find this query to be too slow if there are many emails, and\ndecide to store the number of unread messages in a separate field (a kind of denorm\u2010\nalization). Now, whenever a new message comes in, you have to increment the\nunread counter as well, and whenever a message is marked as read, you also have to\ndecrement the unread counter.\nIn Figure 7-2 , user 2 experiences an anomaly: the mailbox listing shows an unread\nmessage, but the counter shows zero unread messages because the counter increment\nhas not yet happened.ii Isolation would have prevented this issue by ensuring that\nuser 2 sees either both the inserted email and the updated counter, or neither, but not\nan inconsistent halfway point.\n228 | Chapter 7: Transactions\n",
    "summary": "The text discusses transaction isolation, atomicity, and denormalization strategies for maintaining data consistency in applications like email systems, highlighting the trade-offs involved.",
    "sample_answer": "\u201cOkay, this chunk really drills into the importance of transaction isolation and how it relates to data consistency. The example of the unread counter demonstrates a common scenario where denormalization\u2014storing the count directly in the user record\u2014can simplify read operations, but introduces complexity when updates need to be atomic. This touches on the CAP theorem: in a system like an email application, consistency is paramount, meaning that we must ensure that transactions are isolated to prevent situations like the unread counter anomaly. Furthermore, the discussion about atomicity underscores the need for ACID properties \u2013 specifically, ensuring that either the entire transaction completes successfully or it is rolled back entirely to maintain data integrity.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re designing a system to track user email subscriptions. We want to ensure that when a user subscribes to a new newsletter, the subscription record and the count of subscribed newsletters are updated atomically. What considerations would you make regarding transaction isolation and potential data anomalies, and what approach would you take to handle this scenario?\u201d"
  },
  {
    "chunk": "iii. This is not ideal. If the TCP connection is interrupted, the transaction must be aborted. If the interruption\nhappens after the client has requested a commit but before the server acknowledges that the commit hap\u2010\npened, the client doesn\u2019t know whether the transaction was committed or not. To solve this issue, a transac\u2010\ntion manager can group operations by a unique transaction identifier that is not bound to a particular TCP\nconnection. We will return to this topic in \u201cThe End-to-End Argument for Databases\u201d on page 516 .\nFigure 7-2. Violating isolation: one transaction reads another transaction\u2019s uncommit\u2010\nted writes (a \u201cdirty read\u201d).\nFigure 7-3  illustrates the need for atomicity: if an error occurs somewhere over the\ncourse of the transaction, the contents of the mailbox and the unread counter might\nbecome out of sync. In an atomic transaction, if the update to the counter fails, the\ntransaction is aborted and the inserted email is rolled back.\nFigure 7-3. Atomicity ensures that if an error occurs any prior writes from that transac\u2010\ntion are undone, to avoid an inconsistent state.\nMulti-object transactions require some way of determining which read and write\noperations belong to the same transaction. In relational databases, that is typically\ndone based on the client\u2019s TCP connection to the database server: on any particular\nconnection, everything between a BEGIN TRANSACTION  and a COMMIT  statement is\nconsidered to be part of the same transaction.iii\nThe Slippery Concept of a Transaction | 229\n",
    "summary": "The text highlights the challenges of distributed transactions, specifically around connection interruptions and ensuring atomicity, leading to the need for transaction managers and consistent transaction boundaries.",
    "sample_answer": "\u201cThis section really underscores the difficulties inherent in designing distributed transaction systems. The reliance on a single TCP connection to define a transaction is a classic example of a brittle design; as we\u2019ve discussed, an interrupted connection can lead to \u2018dirty reads\u2019 and a lack of atomicity.  To address this, transaction managers provide a layer of abstraction that allows grouping operations regardless of the underlying connection, mirroring a concept similar to a two-phase commit (2PC) where a coordinator ensures all participants acknowledge the transaction's completion. This concept directly relates to the CAP theorem, highlighting the trade-off between consistency and availability when dealing with network partitions \u2013 a problem that requires careful consideration for systems handling high-volume, potentially unreliable transactions.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where relying solely on a client\u2019s TCP connection to define a transaction could lead to data inconsistencies. What design patterns or mechanisms could be employed to mitigate this risk, and how would they relate to concepts like the CAP theorem?\u201d"
  },
  {
    "chunk": "iv. Strictly speaking, the term atomic increment  uses the word atomic  in the sense of multi-threaded pro\u2010\ngramming. In the context of ACID, it should actually be called isolated  or serializable  increment. But that\u2019s\ngetting nitpicky.On the other hand, many nonrelational databases don\u2019t have such a way of grouping\noperations together. Even if there is a multi-object API (for example, a key-value\nstore may have a multi-put  operation that updates several keys in one operation), that\ndoesn\u2019t necessarily mean it has transaction semantics: the command may succeed for\nsome keys and fail for others, leaving the database in a partially updated state.\nSingle-object writes\nAtomicity and isolation also apply when a single object is being changed. For exam\u2010\nple, imagine you are writing a 20 KB JSON document to a database:\n\u2022If the network connection is interrupted after the first 10 KB have been sent, does\nthe database store that unparseable 10 KB fragment of JSON?\n\u2022If the power fails while the database is in the middle of overwriting the previous\nvalue on disk, do you end up with the old and new values spliced together?\n\u2022If another client reads that document while the write is in progress, will it see a\npartially updated value?\nThose issues would be incredibly confusing, so storage engines almost universally\naim to provide atomicity and isolation on the level of a single object (such as a key-\nvalue pair) on one node. Atomicity can be implemented using a log for crash recov\u2010\nery (see \u201cMaking B-trees reliable\u201d on page 82), and isolation can be implemented\nusing a lock on each object (allowing only one thread to access an object at any one\ntime).\nSome databases also provide more complex atomic operations,iv such as an increment\noperation, which removes the need for a read-modify-write cycle like that in\nFigure 7-1 . Similarly popular is a compare-and-set operation, which allows a write to\nhappen only if the value has not been concurrently changed by someone else (see\n\u201cCompare-and-set\u201d on page 245 ).\nThese single-object operations are useful, as they can prevent lost updates when sev\u2010\neral clients try to write to the same object concurrently (see \u201cPreventing Lost\nUpdates\u201d  on page 242). However, they are not transactions in the usual sense of the\nword. Compare-and-set and other single-object operations have been dubbed \u201clight\u2010\nweight transactions\u201d or even \u201cACID\u201d for marketing purposes [ 20, 21, 22], but that\nterminology is misleading. A transaction is usually understood as a mechanism for\ngrouping multiple operations on multiple objects into one unit of execution.\n230 | Chapter 7: Transactions\n",
    "summary": "The chunk discusses single-object transaction semantics, emphasizing atomicity and isolation guarantees achieved through techniques like log-based recovery and object-level locking.",
    "sample_answer": "\u201cWhen designing data storage systems, it\u2019s crucial to consider the level of atomicity and isolation needed. As illustrated, we\u2019re aiming for guarantees at the single-object level \u2013 this is often achieved using a log for crash recovery, ensuring that if a write is interrupted, the system can roll back to a consistent state. Furthermore, object-level locking, similar to a 2PC, prevents concurrent modifications, mitigating the risk of lost updates.  The core concept here is that while these techniques provide ACID-like properties at the object level, they are fundamentally different from traditional transactions that span multiple objects.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where a single-object transaction approach, like using a log for crash recovery, might be preferable to a multi-object transaction. What are the potential downsides of this approach, and how would you mitigate them?\u201d"
  },
  {
    "chunk": "of violating its guarantee of atomicity, isolation, or durability, it would rather aban\u2010\ndon the transaction entirely than allow it to remain half-finished.\nNot all systems follow that philosophy, though. In particular, datastores with leader\u2010\nless replication (see \u201cLeaderless Replication\u201d on page 177) work much more on a\n\u201cbest effort\u201d basis, which could be summarized as \u201cthe database will do as much as it\ncan, and if it runs into an error, it won\u2019t undo something it has already done\u201d\u2014so it\u2019s\nthe application\u2019s responsibility to recover from errors.\nErrors will inevitably happen, but many software developers prefer to think only\nabout the happy path rather than the intricacies of error handling. For example, pop\u2010\nular object-relational mapping (ORM) frameworks such as Rails\u2019s ActiveRecord and\nDjango don\u2019t retry aborted transactions\u2014the error usually results in an exception\nbubbling up the stack, so any user input is thrown away and the user gets an error\nmessage. This is a shame, because the whole point of aborts is to enable safe retries.\nAlthough retrying an aborted transaction is a simple and effective error handling\nmechanism, it isn\u2019t perfect:\n\u2022If the transaction actually succeeded, but the network failed while the server tried\nto acknowledge the successful commit to the client (so the client thinks it failed),\nthen retrying the transaction causes it to be performed twice\u2014unless you have an\nadditional application-level deduplication mechanism in place.\n\u2022If the error is due to overload, retrying the transaction will make the problem\nworse, not better. To avoid such feedback cycles, you can limit the number of\nretries, use exponential backoff, and handle overload-related errors differently\nfrom other errors (if possible).\n\u2022It is only worth retrying after transient errors (for example due to deadlock, iso\u2010\nlation violation, temporary network interruptions, and failover); after a perma\u2010\nnent error (e.g., constraint violation) a retry would be pointless.\n\u2022If the transaction also has side effects outside of the database, those side effects\nmay happen even if the transaction is aborted. For example, if you\u2019re sending an\nemail, you wouldn\u2019t want to send the email again every time you retry the trans\u2010\naction. If you want to make sure that several different systems either commit or\nabort together, two-phase commit can help (we will discuss this in \u201cAtomic\nCommit and Two-Phase Commit (2PC)\u201d on page 354 ).\n\u2022If the client process fails while retrying, any data it was trying to write to the\ndatabase is lost. \n232 | Chapter 7: Transactions\n",
    "summary": "The text discusses the complexities of handling transaction retries, highlighting potential pitfalls like duplicate execution and the need for intelligent error handling strategies.",
    "sample_answer": "\u201cWhen considering transaction retries, it\u2019s crucial to recognize that a simple retry mechanism can introduce significant problems. The text correctly points out the risk of duplicate execution if the client and server disagree about the transaction\u2019s outcome, emphasizing the importance of understanding eventual consistency in distributed systems \u2013 a key element of the CAP theorem. Furthermore, the discussion of exponential backoff and limiting retries reflects a mature approach to handling transient errors, aligning with best practices for building resilient systems.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where a naive retry strategy could negatively impact a distributed transaction. How would you design a more robust error handling mechanism, incorporating concepts like exponential backoff and acknowledging the potential for eventual consistency?\u201d"
  },
  {
    "chunk": "Weak Isolation Levels\nIf two transactions don\u2019t touch the same data, they can safely be run in parallel,\nbecause neither depends on the other. Concurrency issues (race conditions) only\ncome into play when one transaction reads data that is concurrently modified by\nanother transaction, or when two transactions try to simultaneously modify the same\ndata.\nConcurrency bugs are hard to find by testing, because such bugs are only triggered\nwhen you get unlucky with the timing. Such timing issues might occur very rarely,\nand are usually difficult to reproduce. Concurrency is also very difficult to reason\nabout, especially in a large application where you don\u2019t necessarily know which other\npieces of code are accessing the database. Application development is difficult\nenough if you just have one user at a time; having many concurrent users makes it\nmuch harder still, because any piece of data could unexpectedly change at any time.\nFor that reason, databases have long tried to hide concurrency issues from applica\u2010\ntion developers by providing transaction isolation . In theory, isolation should make\nyour life easier by letting you pretend that no concurrency is happening: serializable\nisolation means that the database guarantees that transactions have the same effect as\nif they ran serially  (i.e., one at a time, without any concurrency).\nIn practice, isolation is unfortunately not that simple. Serializable isolation has a per\u2010\nformance cost, and many databases don\u2019t want to pay that price [ 8]. It\u2019s therefore\ncommon for systems to use weaker levels of isolation, which protect against some\nconcurrency issues, but not all. Those levels of isolation are much harder to under\u2010\nstand, and they can lead to subtle bugs, but they are nevertheless used in practice\n[23].\nConcurrency bugs caused by weak transaction isolation are not just a theoretical\nproblem. They have caused substantial loss of money [ 24, 25], led to investigation by\nfinancial auditors [ 26], and caused customer data to be corrupted [ 27]. A popular\ncomment on revelations of such problems is \u201cUse an ACID database if you\u2019re han\u2010\ndling financial data!\u201d\u2014but that misses the point. Even many popular relational data\u2010\nbase systems (which are usually considered \u201cACID\u201d) use weak isolation, so they\nwouldn\u2019t necessarily have prevented these bugs from occurring.\nRather than blindly relying on tools, we need to develop a good understanding of the\nkinds of concurrency problems that exist, and how to prevent them. Then we can\nbuild applications that are reliable and correct, using the tools at our disposal.\nIn this section we will look at several weak (nonserializable) isolation levels that are\nused in practice, and discuss in detail what kinds of race conditions can and cannot\noccur, so that you can decide what level is appropriate to your application. Once\nwe\u2019ve done that, we will discuss serializability in detail (see \u201cSerializability\u201d  on page\nWeak Isolation Levels | 233\n",
    "summary": "The text discusses the trade-offs between strong transaction isolation (serializability) and weaker isolation levels, highlighting the potential for concurrency bugs and their impact.",
    "sample_answer": "\u201cOkay, this chunk really underscores the importance of understanding concurrency issues when designing data systems. The key takeaway here is that while striving for strong isolation like serializability \u2013 aiming for a consistent view of data \u2013 can introduce significant performance overhead, weaker isolation levels are frequently used in practice.  The core problem is that relying solely on tools like an ACID database doesn\u2019t guarantee protection against concurrency bugs, because even \u2018ACID\u2019 databases may utilize weaker isolation. Therefore, a robust system design needs to carefully evaluate the risk-reward tradeoff, considering factors like the sensitivity of the data and the potential impact of race conditions, which is a fundamental principle in distributed systems.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say you\u2019re designing a payment processing system. Given the potential for concurrency issues and the impact of race conditions, at what level of transaction isolation would you initially prioritize, and why? How might you monitor for and mitigate the risks associated with a weaker isolation level compared to a stronger one?\u201d"
  },
  {
    "chunk": "v. Some databases support an even weaker isolation level called read uncommitted . It prevents dirty writes,\nbut does not prevent dirty reads.251). Our discussion of isolation levels will be informal, using examples. If you want\nrigorous definitions and analyses of their properties, you can find them in the aca\u2010\ndemic literature [ 28, 29, 30].\nRead Committed\nThe most basic level of transaction isolation is read committed .v It makes two guaran\u2010\ntees:\n1.When reading from the database, you will only see data that has been committed\n(no dirty reads ).\n2.When writing to the database, you will only overwrite data that has been com\u2010\nmitted (no dirty writes ).\nLet\u2019s discuss these two guarantees in more detail.\nNo dirty reads\nImagine a transaction has written some data to the database, but the transaction has\nnot yet committed or aborted. Can another transaction see that uncommitted data? If\nyes, that is called a dirty read  [2].\nTransactions running at the read committed isolation level must prevent dirty reads.\nThis means that any writes by a transaction only become visible to others when that\ntransaction commits (and then all of its writes become visible at once). This is illus\u2010\ntrated in Figure 7-4 , where user 1 has set x = 3, but user 2\u2019s get x  still returns the old\nvalue, 2, while user 1 has not yet committed.\nFigure 7-4. No dirty reads: user 2 sees the new value for x only after user 1\u2019s transaction\nhas committed.\n234 | Chapter 7: Transactions\n",
    "summary": "The text discusses transaction isolation levels, specifically \u201cread committed\u201d and its guarantee against \u201cdirty reads,\u201d highlighting the importance of data consistency in distributed systems.",
    "sample_answer": "\u201cOkay, let\u2019s consider the implications of this \u2018read committed\u2019 isolation level. The core principle here is preventing \u2018dirty reads,\u2019 meaning a transaction shouldn\u2019t see uncommitted data from another transaction. This is achieved by ensuring that a read only sees data that has already been committed, effectively creating a consistent snapshot.  A key consideration in system design is understanding how isolation levels impact concurrency; if we\u2019re operating in a distributed environment, we\u2019d need to carefully evaluate the trade-offs between consistency and availability \u2013 perhaps exploring techniques like two-phase commit (2PC) to ensure atomicity across transactions, but recognizing that it introduces potential bottlenecks.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where choosing a weaker transaction isolation level (like \u2018read committed\u2019) over a stronger one might be a valid design decision. What are the potential risks, and what monitoring strategies would you employ to mitigate those risks?\u201d"
  },
  {
    "chunk": "There are a few reasons why it\u2019s useful to prevent dirty reads:\n\u2022If a transaction needs to update several objects, a dirty read means that another\ntransaction may see some of the updates but not others. For example, in\nFigure 7-2 , the user sees the new unread email but not the updated counter. This\nis a dirty read of the email. Seeing the database in a partially updated state is con\u2010\nfusing to users and may cause other transactions to take incorrect decisions.\n\u2022If a transaction aborts, any writes it has made need to be rolled back (like in\nFigure 7-3 ). If the database allows dirty reads, that means a transaction may see\ndata that is later rolled back\u2014i.e., which is never actually committed to the data\u2010\nbase. Reasoning about the consequences quickly becomes mind-bending.\nNo dirty writes\nWhat happens if two transactions concurrently try to update the same object in a\ndatabase? We don\u2019t know in which order the writes will happen, but we normally\nassume that the later write overwrites the earlier write.\nHowever, what happens if the earlier write is part of a transaction that has not yet\ncommitted, so the later write overwrites an uncommitted value? This is called a dirty\nwrite  [28]. Transactions running at the read committed isolation level must prevent\ndirty writes, usually by delaying the second write until the first write\u2019s transaction has\ncommitted or aborted.\nBy preventing dirty writes, this isolation level avoids some kinds of concurrency\nproblems:\n\u2022If transactions update multiple objects, dirty writes can lead to a bad outcome.\nFor example, consider Figure 7-5 , which illustrates a used car sales website on\nwhich two people, Alice and Bob, are simultaneously trying to buy the same car.\nBuying a car requires two database writes: the listing on the website needs to be\nupdated to reflect the buyer, and the sales invoice needs to be sent to the buyer.\nIn the case of Figure 7-5 , the sale is awarded to Bob (because he performs the\nwinning update to the listings  table), but the invoice is sent to Alice (because\nshe performs the winning update to the invoices  table). Read committed pre\u2010\nvents such mishaps.\n\u2022However, read committed does not prevent the race condition between two\ncounter increments in Figure 7-1 . In this case, the second write happens after the\nfirst transaction has committed, so it\u2019s not a dirty write. It\u2019s still incorrect, but for\na different reason\u2014in \u201cPreventing Lost Updates\u201d on page 242  we will discuss how\nto make such counter increments safe.\nWeak Isolation Levels | 235\n",
    "summary": "The chunk discusses preventing dirty writes and the implications of different isolation levels on concurrent data updates, highlighting the need for strategies to avoid inconsistent states.",
    "sample_answer": "\u201cOkay, let's talk about mitigating concurrency issues. Preventing dirty writes is crucial for maintaining data consistency, particularly when multiple transactions are modifying the same data. The core problem is that without appropriate isolation levels, a transaction\u2019s changes might be visible to another transaction before the first transaction commits, leading to incorrect results. This relates to the CAP theorem \u2013 specifically, the \u2018Consistency\u2019 aspect; we\u2019re trying to ensure that our data reflects a consistent state, even under concurrent access.\u201d Furthermore, \u201cThe chunk illustrates how the read-committed isolation level attempts to balance concurrency and data integrity. It emphasizes that even with this level, race conditions can still occur if writes aren\u2019t properly coordinated \u2013 we need to consider strategies like optimistic locking or transactional IDs to truly avoid lost updates.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where using a read-committed isolation level might lead to an unexpected outcome. How would you address this issue in a system design, and what considerations would you make regarding concurrency control?\u201d"
  },
  {
    "chunk": "Figure 7-5. With dirty writes, conflicting writes from different transactions can be\nmixed up.\nImplementing read committed\nRead committed is a very popular isolation level. It is the default setting in Oracle\n11g, PostgreSQL, SQL Server 2012, MemSQL, and many other databases [ 8].\nMost commonly, databases prevent dirty writes by using row-level locks: when a\ntransaction wants to modify a particular object (row or document), it must first\nacquire a lock on that object. It must then hold that lock until the transaction is com\u2010\nmitted or aborted. Only one transaction can hold the lock for any given object; if\nanother transaction wants to write to the same object, it must wait until the first\ntransaction is committed or aborted before it can acquire the lock and continue. This\nlocking is done automatically by databases in read committed mode (or stronger iso\u2010\nlation levels).\nHow do we prevent dirty reads? One option would be to use the same lock, and to\nrequire any transaction that wants to read an object to briefly acquire the lock and\nthen release it again immediately after reading. This would ensure that a read\ncouldn\u2019t happen while an object has a dirty, uncommitted value (because during that\ntime the lock would be held by the transaction that has made the write).\nHowever, the approach of requiring read locks does not work well in practice,\nbecause one long-running write transaction can force many read-only transactions to\nwait until the long-running transaction has completed. This harms the response time\nof read-only transactions and is bad for operability: a slowdown in one part of an\napplication can have a knock-on effect in a completely different part of the applica\u2010\ntion, due to waiting for locks.\n236 | Chapter 7: Transactions\n",
    "summary": "The chunk discusses transaction isolation levels, specifically read committed, and the challenges of preventing dirty reads through row-level locking.",
    "sample_answer": "\u201cOkay, let\u2019s break down this scenario. The core issue here is managing concurrency and preventing data inconsistency during transactions. Using read committed isolation, coupled with row-level locking as described, aims to ensure that a transaction only sees committed data. However, the document highlights a critical trade-off: overly aggressive locking, as seen with row-level locks, can lead to significant performance bottlenecks. This relates to the CAP theorem \u2013 in a system with conflicts (like this scenario), you\u2019re likely prioritizing consistency over availability, and the row-level locks exacerbate this.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where aggressive locking strategies, like row-level locks, can negatively impact the performance and operability of a distributed system. How could you address this problem, and what alternative approaches might you consider to maintain data consistency while minimizing the impact on read-only transactions?\u201d"
  },
  {
    "chunk": "vi. At the time of writing, the only mainstream databases that use locks for read committed isolation are IBM\nDB2 and Microsoft SQL Server in the read_committed_snapshot=off  configuration [ 23, 36].For that reason, most databasesvi prevent dirty reads using the approach illustrated in\nFigure 7-4 : for every object that is written, the database remembers both the old com\u2010\nmitted value and the new value set by the transaction that currently holds the write\nlock. While the transaction is ongoing, any other transactions that read the object are\nsimply given the old value. Only when the new value is committed do transactions\nswitch over to reading the new value. \nSnapshot Isolation and Repeatable Read\nIf you look superficially at read committed isolation, you could be forgiven for think\u2010\ning that it does everything that a transaction needs to do: it allows aborts (required\nfor atomicity), it prevents reading the incomplete results of transactions, and it pre\u2010\nvents concurrent writes from getting intermingled. Indeed, those are useful features,\nand much stronger guarantees than you can get from a system that has no transac\u2010\ntions.\nHowever, there are still plenty of ways in which you can have concurrency bugs when\nusing this isolation level. For example, Figure 7-6  illustrates a problem that can occur\nwith read committed.\nFigure 7-6. Read skew: Alice observes the database in an inconsistent state.\nSay Alice has $1,000 of savings at a bank, split across two accounts with $500 each.\nNow a transaction transfers $100 from one of her accounts to the other. If she is\nunlucky enough to look at her list of account balances in the same moment as that\ntransaction is being processed, she may see one account balance at a time before the\nWeak Isolation Levels | 237\n",
    "summary": "The text discusses read committed isolation levels, dirty reads, and the use of snapshot isolation in databases like DB2 and SQL Server, highlighting a key trade-off in data consistency.",
    "sample_answer": "\u201cOkay, let\u2019s analyze this from a system design perspective. The key takeaway here is the limitation of read-committed isolation when `read_committed_snapshot=off` is used \u2013 it relies on remembering old committed values to prevent dirty reads. This approach introduces a significant state management overhead and potential for \u2018read skew,\u2019 where a user observes inconsistent data because the database is essentially maintaining multiple versions of each object concurrently, mirroring the concept of a logical clock.  Furthermore, the fact that it\u2019s using old values suggests a potential vulnerability to schema evolution and the need for robust versioning strategies to maintain backward compatibility, essentially aligning with the need for durable and highly available systems.\u201d",
    "potential_interview_question": "\"Let\u2019s say we're designing a banking system and are considering using a database with read-committed isolation (specifically, one that doesn\u2019t utilize snapshot isolation).  What are the key architectural considerations and potential failure modes we should be aware of regarding data consistency and how would you mitigate the risk of \u2018read skew\u2019?\""
  },
  {
    "chunk": "incoming payment has arrived (with a balance of $500), and the other account after\nthe outgoing transfer has been made (the new balance being $400). To Alice it now\nappears as though she only has a total of $900 in her accounts\u2014it seems that $100 has\nvanished into thin air.\nThis anomaly is called a nonrepeatable read  or read skew : if Alice were to read the\nbalance of account 1 again at the end of the transaction, she would see a different\nvalue ($600) than she saw in her previous query. Read skew is considered acceptable\nunder read committed isolation: the account balances that Alice saw were indeed\ncommitted at the time when she read them.\nThe term skew  is unfortunately overloaded: we previously used it in\nthe sense of an unbalanced workload with hot spots  (see \u201cSkewed\nWorkloads and Relieving Hot Spots\u201d on page 205), whereas here it\nmeans timing anomaly .\nIn Alice\u2019s case, this is not a lasting problem, because she will most likely see consis\u2010\ntent account balances if she reloads the online banking website a few seconds later.\nHowever, some situations cannot tolerate such temporary inconsistency:\nBackups\nTaking a backup requires making a copy of the entire database, which may take\nhours on a large database. During the time that the backup process is running,\nwrites will continue to be made to the database. Thus, you could end up with\nsome parts of the backup containing an older version of the data, and other parts\ncontaining a newer version. If you need to restore from such a backup, the\ninconsistencies (such as disappearing money) become permanent.\nAnalytic queries and integrity checks\nSometimes, you may want to run a query that scans over large parts of the data\u2010\nbase. Such queries are common in analytics (see \u201cTransaction Processing or Ana\u2010\nlytics?\u201d  on page 90), or may be part of a periodic integrity check that everything\nis in order (monitoring for data corruption). These queries are likely to return\nnonsensical results if they observe parts of the database at different points in\ntime. \nSnapshot isolation  [28] is the most common solution to this problem. The idea is that\neach transaction reads from a consistent snapshot  of the database\u2014that is, the trans\u2010\naction sees all the data that was committed in the database at the start of the transac\u2010\ntion. Even if the data is subsequently changed by another transaction, each\ntransaction sees only the old data from that particular point in time.\nSnapshot isolation is a boon for long-running, read-only queries such as backups and\nanalytics. It is very hard to reason about the meaning of a query if the data on which\n238 | Chapter 7: Transactions\n",
    "summary": "The chunk discusses the challenges of data consistency in distributed transactions, specifically read skew and the need for snapshot isolation to ensure data integrity during backups and analytical queries.",
    "sample_answer": "\u201cOkay, this section highlights a critical issue in distributed systems \u2013 read skew. The scenario with Alice\u2019s accounts perfectly illustrates how concurrent transactions can lead to inconsistent reads if not properly managed. To address this, we\u2019d employ snapshot isolation, which is a common solution where each transaction operates on a consistent snapshot of the database at its starting point. This ensures that the transaction sees a stable view of the data, avoiding the inconsistency we see with the initial read, which is crucial for operations like backups and analytics where a long-running, read-only query needs a reliable state.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where snapshot isolation might be the preferred transaction isolation level compared to other options (e.g., read committed). Explain the potential trade-offs in terms of performance and data consistency.\u201d"
  },
  {
    "chunk": "vii. To be precise, transaction IDs are 32-bit integers, so they overflow after approximately 4 billion transac\u2010\ntions. PostgreSQL\u2019s vacuum process performs cleanup which ensures that overflow does not affect the data.it operates is changing at the same time as the query is executing. When a transaction\ncan see a consistent snapshot of the database, frozen at a particular point in time, it is\nmuch easier to understand.\nSnapshot isolation is a popular feature: it is supported by PostgreSQL, MySQL with\nthe InnoDB storage engine, Oracle, SQL Server, and others [ 23, 31, 32].\nImplementing snapshot isolation\nLike read committed isolation, implementations of snapshot isolation typically use\nwrite locks to prevent dirty writes (see \u201cImplementing read committed\u201d on page 236 ),\nwhich means that a transaction that makes a write can block the progress of another\ntransaction that writes to the same object. However, reads do not require any locks.\nFrom a performance point of view, a key principle of snapshot isolation is readers\nnever block writers, and writers never block readers . This allows a database to handle\nlong-running read queries on a consistent snapshot at the same time as processing\nwrites normally, without any lock contention between the two.\nTo implement snapshot isolation, databases use a generalization of the mechanism\nwe saw for preventing dirty reads in Figure 7-4 . The database must potentially keep\nseveral different committed versions of an object, because various in-progress trans\u2010\nactions may need to see the state of the database at different points in time. Because it\nmaintains several versions of an object side by side, this technique is known as multi-\nversion concurrency control  (MVCC).\nIf a database only needed to provide read committed isolation, but not snapshot iso\u2010\nlation, it would be sufficient to keep two versions of an object: the committed version\nand the overwritten-but-not-yet-committed version. However, storage engines that\nsupport snapshot isolation typically use MVCC for their read committed isolation\nlevel as well. A typical approach is that read committed uses a separate snapshot for\neach query, while snapshot isolation uses the same snapshot for an entire transaction.\nFigure 7-7  illustrates how MVCC-based snapshot isolation is implemented in Post\u2010\ngreSQL [ 31] (other implementations are similar). When a transaction is started, it is\ngiven a unique, always-increasingvii transaction ID ( txid ). Whenever a transaction\nwrites anything to the database, the data it writes is tagged with the transaction ID of\nthe writer.\nWeak Isolation Levels | 239\n",
    "summary": "The text discusses transaction ID overflow, snapshot isolation, and MVCC, highlighting trade-offs in isolation levels and their impact on concurrency.",
    "sample_answer": "\u201cOkay, let's analyze this from a system design perspective. The 32-bit transaction ID limitation is a classic example of a potential bottleneck, emphasizing the importance of careful capacity planning and potentially sharding strategies to avoid overflows. Furthermore, the use of snapshot isolation and MVCC \u2013 particularly as implemented in PostgreSQL \u2013 demonstrates a commitment to high concurrency, allowing reads and writes to proceed concurrently without blocking each other, a key principle for optimizing performance in high-volume transactional systems.  The transaction ID tagging with `txid` and the use of MVCC to maintain different versions of objects for concurrent reads and writes exemplify how the database manages isolation levels.\u201d",
    "potential_interview_question": "\u201cDescribe the trade-offs between different isolation levels (like read committed vs. snapshot isolation) in a database system. How does the implementation of MVCC in PostgreSQL contribute to these trade-offs, and what are the potential performance implications?\u201d"
  },
  {
    "chunk": "Figure 7-7. Implementing snapshot isolation using multi-version objects.\nEach row in a table has a created_by  field, containing the ID of the transaction that\ninserted this row into the table. Moreover, each row has a deleted_by  field, which is\ninitially empty. If a transaction deletes a row, the row isn\u2019t actually deleted from the\ndatabase, but it is marked for deletion by setting the deleted_by  field to the ID of the\ntransaction that requested the deletion. At some later time, when it is certain that no\ntransaction can any longer access the deleted data, a garbage collection process in the\ndatabase removes any rows marked for deletion and frees their space.\nAn update is internally translated into a delete and a create. For example, in\nFigure 7-7 , transaction 13 deducts $100 from account 2, changing the balance from\n$500 to $400. The accounts  table now actually contains two rows for account 2: a\nrow with a balance of $500 which was marked as deleted by transaction 13, and a row\nwith a balance of $400 which was created by transaction 13.\nVisibility rules for observing a consistent snapshot\nWhen a transaction reads from the database, transaction IDs are used to decide\nwhich objects it can see and which are invisible. By carefully defining visibility rules,\n240 | Chapter 7: Transactions\n",
    "summary": "The chunk describes a multi-version object strategy combined with transaction ID tracking for implementing snapshot isolation, a technique to ensure data consistency during concurrent updates.",
    "sample_answer": "\u201cThis approach of using multi-version objects, combined with transaction IDs, directly addresses the challenge of maintaining data consistency in a concurrent environment. Specifically, the database tracks each row with a \u2018deleted_by\u2019 field, linking it to the transaction that initiated the deletion. This allows the system to reliably present a consistent snapshot of data, as a reader can filter out versions marked for deletion, aligning with the principles of snapshot isolation. This relates to the CAP theorem \u2013 the system is prioritizing Consistency over Availability; a core consideration when designing systems with strong transactional guarantees.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you would use a multi-version object strategy like the one outlined in Figure 7-7. What are the key trade-offs you would consider when implementing such a system, and how would you monitor its effectiveness?\u201d"
  },
  {
    "chunk": "Another approach is used in CouchDB, Datomic, and LMDB. Although they also use\nB-trees (see \u201cB-Trees\u201d  on page 79), they use an append-only/copy-on-write  variant\nthat does not overwrite pages of the tree when they are updated, but instead creates a\nnew copy of each modified page. Parent pages, up to the root of the tree, are copied\nand updated to point to the new versions of their child pages. Any pages that are not\naffected by a write do not need to be copied, and remain immutable [ 33, 34, 35].\nWith append-only B-trees, every write transaction (or batch of transactions) creates a\nnew B-tree root, and a particular root is a consistent snapshot of the database at the\npoint in time when it was created. There is no need to filter out objects based on\ntransaction IDs because subsequent writes cannot modify an existing B-tree; they can\nonly create new tree roots. However, this approach also requires a background pro\u2010\ncess for compaction and garbage collection.\nRepeatable read and naming confusion\nSnapshot isolation is a useful isolation level, especially for read-only transactions.\nHowever, many databases that implement it call it by different names. In Oracle it is\ncalled serializable , and in PostgreSQL and MySQL it is called repeatable read  [23].\nThe reason for this naming confusion is that the SQL standard doesn\u2019t have the con\u2010\ncept of snapshot isolation, because the standard is based on System R\u2019s 1975 defini\u2010\ntion of isolation levels [ 2] and snapshot isolation hadn\u2019t yet been invented then.\nInstead, it defines repeatable read, which looks superficially similar to snapshot isola\u2010\ntion. PostgreSQL and MySQL call their snapshot isolation level repeatable read\nbecause it meets the requirements of the standard, and so they can claim standards\ncompliance.\nUnfortunately, the SQL standard\u2019s definition of isolation levels is flawed\u2014it is ambig\u2010\nuous, imprecise, and not as implementation-independent as a standard should be\n[28]. Even though several databases implement repeatable read, there are big differ\u2010\nences in the guarantees they actually provide, despite being ostensibly standardized\n[23]. There has been a formal definition of repeatable read in the research literature\n[29, 30], but most implementations don\u2019t satisfy that formal definition. And to top it\noff, IBM DB2 uses \u201crepeatable read\u201d to refer to serializability [ 8].\nAs a result, nobody really knows what repeatable read means. \nPreventing Lost Updates\nThe read committed and snapshot isolation levels we\u2019ve discussed so far have been\nprimarily about the guarantees of what a read-only transaction can see in the pres\u2010\nence of concurrent writes. We have mostly ignored the issue of two transactions writ\u2010\ning concurrently\u2014we have only discussed dirty writes (see \u201cNo dirty writes\u201d on page\n235), one particular type of write-write conflict that can occur.\n242 | Chapter 7: Transactions\n",
    "summary": "The chunk discusses data consistency strategies, particularly focusing on append-only B-trees and the complexities of snapshot isolation levels, highlighting inconsistencies in naming and implementation.",
    "sample_answer": "\u201cThis section highlights a key trade-off in database design: using an append-only B-tree with copy-on-write for immutability, which avoids the overhead of overwriting entire pages but introduces the need for compaction and garbage collection. Furthermore, the discussion around snapshot isolation levels \u2013 particularly the naming variations across different databases like \u2018serializable\u2019 in Oracle versus \u2018repeatable read\u2019 in PostgreSQL and MySQL \u2013 demonstrates a significant problem in standardization, emphasizing the importance of deeply understanding the *actual* guarantees provided by each isolation level, rather than just relying on the terminology.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re building a system that requires strong consistency for reads, but you\u2019re working with a database that implements \u2018repeatable read.\u2019 Can you explain the potential pitfalls of using this isolation level and how you would verify its guarantees, considering the historical context of isolation level definitions?\u201d"
  },
  {
    "chunk": "viii. It is possible, albeit fairly complicated, to express the editing of a text document as a stream of atomic\nmutations. See \u201cAutomatic Conflict Resolution\u201d on page 174  for some pointers.There are several other interesting kinds of conflicts that can occur between concur\u2010\nrently writing transactions. The best known of these is the lost update  problem, illus\u2010\ntrated in Figure 7-1  with the example of two concurrent counter increments.\nThe lost update problem can occur if an application reads some value from the data\u2010\nbase, modifies it, and writes back the modified value (a read-modify-write cycle ). If\ntwo transactions do this concurrently, one of the modifications can be lost, because\nthe second write does not include the first modification. (We sometimes say that the\nlater write clobbers  the earlier write.) This pattern occurs in various different\nscenarios:\n\u2022Incrementing a counter or updating an account balance (requires reading the\ncurrent value, calculating the new value, and writing back the updated value)\n\u2022Making a local change to a complex value, e.g., adding an element to a list within\na JSON document (requires parsing the document, making the change, and writ\u2010\ning back the modified document)\n\u2022Two users editing a wiki page at the same time, where each user saves their\nchanges by sending the entire page contents to the server, overwriting whatever\nis currently in the database\nBecause this is such a common problem, a variety of solutions have been developed.\nAtomic write operations\nMany databases provide atomic update operations, which remove the need to imple\u2010\nment read-modify-write cycles in application code. They are usually the best solution\nif your code can be expressed in terms of those operations. For example, the follow\u2010\ning instruction is concurrency-safe in most relational databases:\nUPDATE counters  SET value = value + 1 WHERE key = 'foo';\nSimilarly, document databases such as MongoDB provide atomic operations for\nmaking local modifications to a part of a JSON document, and Redis provides atomic\noperations for modifying data structures such as priority queues. Not all writes can\neasily be expressed in terms of atomic operations\u2014for example, updates to a wiki\npage involve arbitrary text editingviii\u2014but in situations where atomic operations can\nbe used, they are usually the best choice.\nAtomic operations are usually implemented by taking an exclusive lock on the object\nwhen it is read so that no other transaction can read it until the update has been\nWeak Isolation Levels | 243\n",
    "summary": "The chunk discusses the lost update problem and how to mitigate it through atomic operations, highlighting the importance of concurrency control and data consistency.",
    "sample_answer": "\u201cOkay, the lost update problem is a classic concurrency issue, and this text accurately describes it \u2013 essentially, a read-modify-write cycle can lead to data loss if multiple transactions access the same data concurrently. To address this, the key takeaway is utilizing atomic operations, which are crucial for maintaining data consistency in systems handling concurrent writes.  Databases like PostgreSQL and document databases like MongoDB provide these operations, allowing us to eliminate the need for complex, error-prone application-level logic; furthermore, the text correctly notes that these operations usually rely on exclusive locks to ensure data integrity during the read-modify-write cycle.\u201d",
    "potential_interview_question": "\u201cDescribe the \u2018lost update\u2019 problem and explain how atomic operations in a database like PostgreSQL can be used to mitigate it.  How do they relate to concurrency control?\u201d"
  },
  {
    "chunk": "applied. This technique is sometimes known as cursor stability  [36, 37]. Another\noption is to simply force all atomic operations to be executed on a single thread.\nUnfortunately, object-relational mapping frameworks make it easy to accidentally\nwrite code that performs unsafe read-modify-write cycles instead of using atomic\noperations provided by the database [ 38]. That\u2019s not a problem if you know what you\nare doing, but it is potentially a source of subtle bugs that are difficult to find by\ntesting.\nExplicit locking\nAnother option for preventing lost updates, if the database\u2019s built-in atomic opera\u2010\ntions don\u2019t provide the necessary functionality, is for the application to explicitly lock\nobjects that are going to be updated. Then the application can perform a read-\nmodify-write cycle, and if any other transaction tries to concurrently read the same\nobject, it is forced to wait until the first read-modify-write cycle has completed.\nFor example, consider a multiplayer game in which several players can move the\nsame figure concurrently. In this case, an atomic operation may not be sufficient,\nbecause the application also needs to ensure that a player\u2019s move abides by the rules\nof the game, which involves some logic that you cannot sensibly implement as a data\u2010\nbase query. Instead, you may use a lock to prevent two players from concurrently\nmoving the same piece, as illustrated in Example 7-1 .\nExample 7-1. Explicitly locking rows to prevent lost updates\nBEGIN TRANSACTION ;\nSELECT * FROM figures\n  WHERE name = 'robot' AND game_id = 222\n  FOR UPDATE; \n-- Check whether move is valid, then update the position\n-- of the piece that was returned by the previous SELECT.\nUPDATE figures SET position  = 'c4' WHERE id = 1234;\nCOMMIT;\nThe FOR UPDATE  clause indicates that the database should take a lock on all rows\nreturned by this query.\nThis works, but to get it right, you need to carefully think about your application\nlogic. It\u2019s easy to forget to add a necessary lock somewhere in the code, and thus\nintroduce a race condition.\n244 | Chapter 7: Transactions\n",
    "summary": "The text discusses strategies for preventing lost updates in concurrent transactions, primarily through explicit locking and the importance of careful application logic.",
    "sample_answer": "\u201cOkay, this section highlights a critical concern in building systems that handle concurrent updates, specifically around preventing lost updates. The core problem is when multiple transactions attempt to modify the same data simultaneously, leading to inconsistent states. The text describes how the `FOR UPDATE` clause in SQL provides a mechanism to achieve this by acquiring locks on the rows being modified, effectively serializing access and preventing lost updates. However, it\u2019s crucial to emphasize that relying solely on database-level locking can be complex and requires meticulous attention to application logic to avoid introducing new race conditions \u2013 something I\u2019d always probe for during system design.\u201d",
    "potential_interview_question": "\u201cImagine a system where multiple users can concurrently update the inventory levels of products in a database. Describe the potential challenges you might face, and explain how you could mitigate them, specifically referencing techniques like the `FOR UPDATE` clause. How would you consider the implications of this approach on system performance and overall architecture?\u201d"
  },
  {
    "chunk": "Automatically detecting lost updates\nAtomic operations and locks are ways of preventing lost updates by forcing the read-\nmodify-write cycles to happen sequentially. An alternative is to allow them to execute\nin parallel and, if the transaction manager detects a lost update, abort the transaction\nand force it to retry its read-modify-write cycle.\nAn advantage of this approach is that databases can perform this check efficiently in\nconjunction with snapshot isolation. Indeed, PostgreSQL\u2019s repeatable read, Oracle\u2019s\nserializable, and SQL Server\u2019s snapshot isolation levels automatically detect when a\nlost update has occurred and abort the offending transaction. However, MySQL/\nInnoDB\u2019s repeatable read does not detect lost updates [ 23]. Some authors [ 28, 30]\nargue that a database must prevent lost updates in order to qualify as providing snap\u2010\nshot isolation, so MySQL does not provide snapshot isolation under this definition.\nLost update detection is a great feature, because it doesn\u2019t require application code to\nuse any special database features\u2014you may forget to use a lock or an atomic opera\u2010\ntion and thus introduce a bug, but lost update detection happens automatically and is\nthus less error-prone.\nCompare-and-set\nIn databases that don\u2019t provide transactions, you sometimes find an atomic compare-\nand-set operation (previously mentioned in \u201cSingle-object writes\u201d  on page 230). The\npurpose of this operation is to avoid lost updates by allowing an update to happen\nonly if the value has not changed since you last read it. If the current value does not\nmatch what you previously read, the update has no effect, and the read-modify-write\ncycle must be retried.\nFor example, to prevent two users concurrently updating the same wiki page, you\nmight try something like this, expecting the update to occur only if the content of the\npage hasn\u2019t changed since the user started editing it:\n-- This may or may not be safe, depending on the database implementation\nUPDATE wiki_pages  SET content = 'new content'\n  WHERE id = 1234 AND content = 'old content' ;\nIf the content has changed and no longer matches 'old content' , this update will\nhave no effect, so you need to check whether the update took effect and retry if neces\u2010\nsary. However, if the database allows the WHERE  clause to read from an old snapshot,\nthis statement may not prevent lost updates, because the condition may be true even\nthough another concurrent write is occurring. Check whether your database\u2019s\ncompare-and-set operation is safe before relying on it.\nWeak Isolation Levels | 245\n",
    "summary": "The text discusses lost update detection strategies, primarily through transaction isolation levels and compare-and-set operations, highlighting the trade-offs and potential pitfalls.",
    "sample_answer": "\u201cOkay, let\u2019s talk about preventing lost updates.  It\u2019s a fundamental challenge when dealing with concurrent access to data. We\u2019ve seen that transaction isolation levels like repeatable read in PostgreSQL and serializable in Oracle automatically detect and abort lost update transactions, leveraging snapshot isolation. However, it\u2019s crucial to understand that not all databases implement these features equally \u2013 as the text points out, MySQL\u2019s repeatable read doesn't reliably prevent lost updates, demonstrating the importance of validating the correctness of the chosen isolation level. Additionally, compare-and-set operations provide a mechanism to mitigate lost updates, but their safety is contingent on the database implementation and the underlying snapshot isolation level.\u201d",
    "potential_interview_question": "\u201cDescribe the potential challenges associated with relying solely on compare-and-set operations for lost update prevention. What factors would you consider when selecting an appropriate transaction isolation level to ensure data consistency in a concurrent environment?\u201d"
  },
  {
    "chunk": "Conflict resolution and replication\nIn replicated databases (see Chapter 5 ), preventing lost updates takes on another\ndimension: since they have copies of the data on multiple nodes, and the data can\npotentially be modified concurrently on different nodes, some additional steps need\nto be taken to prevent lost updates.\nLocks and compare-and-set operations assume that there is a single up-to-date copy\nof the data. However, databases with multi-leader or leaderless replication usually\nallow several writes to happen concurrently and replicate them asynchronously, so\nthey cannot guarantee that there is a single up-to-date copy of the data. Thus, techni\u2010\nques based on locks or compare-and-set do not apply in this context. (We will revisit\nthis issue in more detail in \u201cLinearizability\u201d on page 324 .)\nInstead, as discussed in \u201cDetecting Concurrent Writes\u201d on page 184, a common\napproach in such replicated databases is to allow concurrent writes to create several\nconflicting versions of a value (also known as siblings ), and to use application code or\nspecial data structures to resolve and merge these versions after the fact.\nAtomic operations can work well in a replicated context, especially if they are com\u2010\nmutative (i.e., you can apply them in a different order on different replicas, and still\nget the same result). For example, incrementing a counter or adding an element to a\nset are commutative operations. That is the idea behind Riak 2.0 datatypes, which\nprevent lost updates across replicas. When a value is concurrently updated by differ\u2010\nent clients, Riak automatically merges together the updates in such a way that no\nupdates are lost [ 39].\nOn the other hand, the last write wins  (LWW) conflict resolution method is prone to\nlost updates, as discussed in \u201cLast write wins (discarding concurrent writes)\u201d  on page\n",
    "summary": "The text discusses conflict resolution strategies in replicated databases, focusing on techniques beyond traditional locking and compare-and-set operations due to asynchronous replication and the potential for concurrent writes.",
    "sample_answer": "\u201cOkay, so when dealing with replicated databases, we need to move beyond simple locking mechanisms. Because updates are replicated asynchronously, we\u2019re inherently dealing with a situation where multiple nodes might have conflicting versions of the same data concurrently. A key principle here is acknowledging the CAP theorem \u2013 in a distributed system, you can\u2019t simultaneously guarantee Consistency and Availability. Our approach then would involve allowing conflicting versions, or \u2018siblings,\u2019 to exist, and relying on application logic to merge them after the fact.  Riak\u2019s datatypes, which utilize commutative atomic operations, exemplify this; they automatically merge updates to prevent lost data \u2013 a strategy that's particularly useful in systems where immediate consistency isn't paramount, but durability is.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system for tracking inventory across multiple warehouses using asynchronous replication. How would you approach conflict resolution to ensure data consistency, and what considerations would you make regarding the potential trade-offs between consistency and availability?\u201d"
  },
  {
    "chunk": "186. Unfortunately, LWW is the default in many replicated databases. \nWrite Skew and Phantoms\nIn the previous sections we saw dirty writes  and lost updates , two kinds of race condi\u2010\ntions that can occur when different transactions concurrently try to write to the same\nobjects. In order to avoid data corruption, those race conditions need to be prevented\n\u2014either automatically by the database, or by manual safeguards such as using locks\nor atomic write operations.\nHowever, that is not the end of the list of potential race conditions that can occur\nbetween concurrent writes. In this section we will see some subtler examples of\nconflicts.\nTo begin, imagine this example: you are writing an application for doctors to manage\ntheir on-call shifts at a hospital. The hospital usually tries to have several doctors on\ncall at any one time, but it absolutely must have at least one doctor on call. Doctors\n246 | Chapter 7: Transactions\ncan give up their shifts (e.g., if they are sick themselves), provided that at least one\ncolleague remains on call in that shift [ 40, 41].\nNow imagine that Alice and Bob are the two on-call doctors for a particular shift.\nBoth are feeling unwell, so they both decide to request leave. Unfortunately, they\nhappen to click the button to go off call at approximately the same time. What hap\u2010\npens next is illustrated in Figure 7-8 .\nFigure 7-8. Example of write skew causing an application bug.\nIn each transaction, your application first checks that two or more doctors are cur\u2010\nrently on call; if yes, it assumes it\u2019s safe for one doctor to go off call. Since the data\u2010\nbase is using snapshot isolation, both checks return 2, so both transactions proceed to\nthe next stage. Alice updates her own record to take herself off call, and Bob updates\nhis own record likewise. Both transactions commit, and now no doctor is on call.\nYour requirement of having at least one doctor on call has been violated.\nCharacterizing write skew\nThis anomaly is called write skew  [28]. It is neither a dirty write nor a lost update,\nbecause the two transactions are updating two different objects (Alice\u2019s and Bob\u2019s on-\ncall records, respectively). It is less obvious that a conflict occurred here, but it\u2019s defi\u2010\nnitely a race condition: if the two transactions had run one after another, the second\nWeak Isolation Levels | 247\n",
    "summary": "The chunk discusses write skew, a race condition caused by concurrent updates to replicated database records, highlighting the importance of isolation levels and their impact on data consistency.",
    "sample_answer": "\u201cThis scenario illustrates a classic write skew problem, which arises due to the use of snapshot isolation. Snapshot isolation provides each transaction with a consistent view of the data at a specific point in time, but doesn\u2019t guarantee that transactions will see the same data concurrently, leading to conflicting updates. To mitigate this, we need to consider stronger isolation levels like Serializable, which provides stricter guarantees by preventing conflicting transactions from proceeding concurrently, though at the cost of increased latency.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where using a snapshot isolation level in a replicated database could lead to a data inconsistency. How would you address this issue, and what are the trade-offs associated with different isolation levels?\u201d"
  },
  {
    "chunk": "doctor would have been prevented from going off call. The anomalous behavior was\nonly possible because the transactions ran concurrently.\nYou can think of write skew as a generalization of the lost update problem. Write\nskew can occur if two transactions read the same objects, and then update some of\nthose objects (different transactions may update different objects). In the special case\nwhere different transactions update the same object, you get a dirty write or lost\nupdate anomaly (depending on the timing).\nWe saw that there are various different ways of preventing lost updates. With write\nskew, our options are more restricted:\n\u2022Atomic single-object operations don\u2019t help, as multiple objects are involved.\n\u2022The automatic detection of lost updates that you find in some implementations\nof snapshot isolation unfortunately doesn\u2019t help either: write skew is not auto\u2010\nmatically detected in PostgreSQL\u2019s repeatable read, MySQL/InnoDB\u2019s repeatable\nread, Oracle\u2019s serializable, or SQL Server\u2019s snapshot isolation level [ 23]. Auto\u2010\nmatically preventing write skew requires true serializable isolation (see \u201cSerializa\u2010\nbility\u201d on page 251 ).\n\u2022Some databases allow you to configure constraints, which are then enforced by\nthe database (e.g., uniqueness, foreign key constraints, or restrictions on a partic\u2010\nular value). However, in order to specify that at least one doctor must be on call,\nyou would need a constraint that involves multiple objects. Most databases do\nnot have built-in support for such constraints, but you may be able to implement\nthem with triggers or materialized views, depending on the database [ 42].\n\u2022If you can\u2019t use a serializable isolation level, the second-best option in this case is\nprobably to explicitly lock the rows that the transaction depends on. In the doc\u2010\ntors example, you could write something like the following:\nBEGIN TRANSACTION ;\nSELECT * FROM doctors\n  WHERE on_call = true\n  AND shift_id  = 1234 FOR UPDATE; \nUPDATE doctors\n  SET on_call = false\n  WHERE name = 'Alice'\n  AND shift_id  = 1234;\nCOMMIT;\nAs before, FOR UPDATE  tells the database to lock all rows returned by this\nquery.\n248 | Chapter 7: Transactions\n",
    "summary": "The chunk discusses the challenges of write skew, lost update anomalies, and strategies for mitigating them, particularly focusing on the limitations of different transaction isolation levels and the use of row-level locking.",
    "sample_answer": "\u201cOkay, this section highlights a critical issue in distributed systems \u2013 write skew. The problem arises when multiple transactions concurrently update the same objects, leading to lost update anomalies, which are exacerbated by inconsistent transaction isolation levels like repeatable read. The example demonstrates a key mitigation strategy: using `FOR UPDATE` to explicitly lock the rows involved in the transaction, effectively serializing access and preventing conflicting updates \u2013 this directly addresses the CAP theorem\u2019s concerns about consistency in a distributed environment.\u201d",
    "potential_interview_question": "\u201cImagine you're designing a system where multiple users simultaneously update the availability status of doctors in a hospital using a database.  What are the potential risks you foresee regarding data consistency, and what specific strategies, drawing upon the concepts in this passage, would you employ to mitigate those risks?  Specifically, discuss the trade-offs between different transaction isolation levels.\u201d"
  },
  {
    "chunk": "ix. In PostgreSQL you can do this more elegantly using range types, but they are not widely supported in\nother databases.More examples of write skew\nWrite skew may seem like an esoteric issue at first, but once you\u2019re aware of it, you\nmay notice more situations in which it can occur. Here are some more examples:\nMeeting room booking system\nSay you want to enforce that there cannot be two bookings for the same meeting\nroom at the same time [ 43]. When someone wants to make a booking, you first\ncheck for any conflicting bookings (i.e., bookings for the same room with an\noverlapping time range), and if none are found, you create the meeting (see\nExample 7-2 ).ix\nExample 7-2. A meeting room booking system tries to avoid double-booking (not\nsafe under snapshot isolation)\nBEGIN TRANSACTION ;\n-- Check for any existing bookings that overlap with the period of noon-1pm\nSELECT COUNT(*) FROM bookings\n  WHERE room_id = 123 AND\n    end_time  > '2015-01-01 12:00'  AND start_time  < '2015-01-01 13:00' ;\n-- If the previous query returned zero:\nINSERT INTO bookings\n  (room_id, start_time , end_time , user_id)\n  VALUES (123, '2015-01-01 12:00' , '2015-01-01 13:00' , 666);\nCOMMIT;\nUnfortunately, snapshot isolation does not prevent another user from concur\u2010\nrently inserting a conflicting meeting. In order to guarantee you won\u2019t get sched\u2010\nuling conflicts, you once again need serializable isolation.\nMultiplayer game\nIn Example 7-1 , we used a lock to prevent lost updates (that is, making sure that\ntwo players can\u2019t move the same figure at the same time). However, the lock\ndoesn\u2019t prevent players from moving two different figures to the same position\non the board or potentially making some other move that violates the rules of the\ngame. Depending on the kind of rule you are enforcing, you might be able to use\na unique constraint, but otherwise you\u2019re vulnerable to write skew.\nWeak Isolation Levels | 249\n",
    "summary": "The chunk discusses write skew challenges in concurrent booking and game systems, highlighting the need for stronger isolation levels like serializable to prevent conflicts.",
    "sample_answer": "\u201cOkay, let\u2019s analyze this. The core issue here is write skew, which arises when multiple transactions attempt to modify the same data concurrently, leading to potential inconsistencies.  The example with the meeting room booking system demonstrates how snapshot isolation isn\u2019t sufficient; another user could insert a conflicting booking before the first transaction commits, creating a critical inconsistency.  This highlights the importance of considering isolation levels \u2013 serializable isolation, for instance, would prevent these conflicts by ensuring transactions are executed in a total order, demonstrating a fundamental understanding of CAP theorem and the trade-offs involved in choosing isolation levels.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system for managing online game state. Write skew is a potential concern. What isolation level would you choose and why? Discuss how this choice impacts the system\u2019s concurrency and the potential for data inconsistencies.\u201d"
  },
  {
    "chunk": "Claiming a username\nOn a website where each user has a unique username, two users may try to create\naccounts with the same username at the same time. You may use a transaction to\ncheck whether a name is taken and, if not, create an account with that name.\nHowever, like in the previous examples, that is not safe under snapshot isolation.\nFortunately, a unique constraint is a simple solution here (the second transaction\nthat tries to register the username will be aborted due to violating the constraint).\nPreventing double-spending\nA service that allows users to spend money or points needs to check that a user\ndoesn\u2019t spend more than they have. You might implement this by inserting a ten\u2010\ntative spending item into a user\u2019s account, listing all the items in the account, and\nchecking that the sum is positive [ 44]. With write skew, it could happen that two\nspending items are inserted concurrently that together cause the balance to go\nnegative, but that neither transaction notices the other.\nPhantoms causing write skew\nAll of these examples follow a similar pattern:\n1.A SELECT  query checks whether some requirement is satisfied by searching for\nrows that match some search condition (there are at least two doctors on call,\nthere are no existing bookings for that room at that time, the position on the\nboard doesn\u2019t already have another figure on it, the username isn\u2019t already taken,\nthere is still money in the account).\n2.Depending on the result of the first query, the application code decides how to\ncontinue (perhaps to go ahead with the operation, or perhaps to report an error\nto the user and abort).\n3.If the application decides to go ahead, it makes a write ( INSERT , UPDATE , or\nDELETE ) to the database and commits the transaction.\nThe effect of this write changes the precondition of the decision of step 2. In\nother words, if you were to repeat the SELECT  query from step 1 after commiting\nthe write, you would get a different result, because the write changed the set of\nrows matching the search condition (there is now one fewer doctor on call, the\nmeeting room is now booked for that time, the position on the board is now\ntaken by the figure that was moved, the username is now taken, there is now less\nmoney in the account).\nThe steps may occur in a different order. For example, you could first make the write,\nthen the SELECT  query, and finally decide whether to abort or commit based on the\nresult of the query.\n250 | Chapter 7: Transactions\n",
    "summary": "The chunk discusses transaction design, particularly around handling concurrency, write skew, and phantom reads, highlighting the importance of ACID properties and their implications for system architecture.",
    "sample_answer": "\u201cThis scenario really drills home the challenges of maintaining data consistency in concurrent environments. The core issue is that simply relying on a SELECT to determine availability or uniqueness isn\u2019t sufficient; we need to explicitly manage the preconditions of our operations using transactions. Specifically, the use of a transaction to check for name collisions exemplifies the need for ACID properties \u2013 atomicity, consistency, isolation, and durability \u2013 to prevent data corruption and ensure predictable behavior, even with concurrent writes.\u201d The concept of a \u2018phantom read\u2019 due to the modification of the SELECT condition after a commit illustrates the potential for data inconsistencies if isolation levels are not properly managed.",
    "potential_interview_question": "\u201cDescribe a scenario where a transaction might result in a \u2018phantom read\u2019 and explain how you would design the system to mitigate this issue, considering isolation levels and potential concurrency constraints.\u201d"
  },
  {
    "chunk": "In the case of the doctor on call example, the row being modified in step 3 was one of\nthe rows returned in step 1, so we could make the transaction safe and avoid write\nskew by locking the rows in step 1 ( SELECT FOR UPDATE ). However, the other four\nexamples are different: they check for the absence  of rows matching some search con\u2010\ndition, and the write adds  a row matching the same condition. If the query in step 1\ndoesn\u2019t return any rows, SELECT FOR UPDATE  can\u2019t attach locks to anything.\nThis effect, where a write in one transaction changes the result of a search query in\nanother transaction, is called a phantom  [3]. Snapshot isolation avoids phantoms in\nread-only queries, but in read-write transactions like the examples we discussed,\nphantoms can lead to particularly tricky cases of write skew. \nMaterializing conflicts\nIf the problem of phantoms is that there is no object to which we can attach the locks,\nperhaps we can artificially introduce a lock object into the database?\nFor example, in the meeting room booking case you could imagine creating a table of\ntime slots and rooms. Each row in this table corresponds to a particular room for a\nparticular time period (say, 15 minutes). You create rows for all possible combina\u2010\ntions of rooms and time periods ahead of time, e.g. for the next six months.\nNow a transaction that wants to create a booking can lock ( SELECT FOR UPDATE ) the\nrows in the table that correspond to the desired room and time period. After it has\nacquired the locks, it can check for overlapping bookings and insert a new booking as\nbefore. Note that the additional table isn\u2019t used to store information about the book\u2010\ning\u2014it\u2019s purely a collection of locks which is used to prevent bookings on the same\nroom and time range from being modified concurrently.\nThis approach is called materializing conflicts , because it takes a phantom and turns it\ninto a lock conflict on a concrete set of rows that exist in the database [ 11]. Unfortu\u2010\nnately, it can be hard and error-prone to figure out how to materialize conflicts, and\nit\u2019s ugly to let a concurrency control mechanism leak into the application data model.\nFor those reasons, materializing conflicts should be considered a last resort if no\nalternative is possible. A serializable isolation level is much preferable in most cases. \nSerializability\nIn this chapter we have seen several examples of transactions that are prone to race\nconditions. Some race conditions are prevented by the read committed and snapshot\nisolation levels, but others are not. We encountered some particularly tricky exam\u2010\nples with write skew and phantoms. It\u2019s a sad situation:\n\u2022Isolation levels are hard to understand, and inconsistently implemented in differ\u2010\nent databases (e.g., the meaning of \u201crepeatable read\u201d varies significantly).\nSerializability | 251\n",
    "summary": "The chunk discusses phantom reads, write skew, and strategies for mitigating concurrency issues in distributed transactions, particularly through conflict materialization and the implications of different isolation levels.",
    "sample_answer": "\u201cOkay, this excerpt highlights a critical challenge in building concurrent data systems: handling phantom reads and write skew. The core issue is that using `SELECT FOR UPDATE` to lock rows based on a search condition can lead to phantoms if the search query returns no rows, resulting in a race condition where a write modifies the state of a row that was previously un-locked. To combat this, the approach of materializing conflicts\u2014creating a separate table to hold lock objects\u2014demonstrates a complex solution that\u2019s generally discouraged due to its ugliness and potential for errors.  Crucially, the example emphasizes the need for careful consideration of isolation levels, specifically serializability, which is often the most robust solution, but also notes the inconsistencies in their implementations across different databases.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where a write transaction might cause a phantom read in a distributed system. What strategies could you employ to prevent this, and what are the trade-offs associated with each approach in terms of performance and consistency?\u201d"
  },
  {
    "chunk": "\u2022If you look at your application code, it\u2019s difficult to tell whether it is safe to run at\na particular isolation level\u2014especially in a large application, where you might not\nbe aware of all the things that may be happening concurrently.\n\u2022There are no good tools to help us detect race conditions. In principle, static\nanalysis may help [ 26], but research techniques have not yet found their way into\npractical use. Testing for concurrency issues is hard, because they are usually\nnondeterministic\u2014problems only occur if you get unlucky with the timing.\nThis is not a new problem\u2014it has been like this since the 1970s, when weak isolation\nlevels were first introduced [ 2]. All along, the answer from researchers has been sim\u2010\nple: use serializable  isolation!\nSerializable isolation is usually regarded as the strongest isolation level. It guarantees\nthat even though transactions may execute in parallel, the end result is the same as if\nthey had executed one at a time, serially , without any concurrency. Thus, the database\nguarantees that if the transactions behave correctly when run individually, they con\u2010\ntinue to be correct when run concurrently\u2014in other words, the database prevents all\npossible race conditions.\nBut if serializable isolation is so much better than the mess of weak isolation levels,\nthen why isn\u2019t everyone using it? To answer this question, we need to look at the\noptions for implementing serializability, and how they perform. Most databases that\nprovide serializability today use one of three techniques, which we will explore in the\nrest of this chapter:\n\u2022Literally executing transactions in a serial order (see \u201cActual Serial Execution\u201d on\npage 252 )\n\u2022Two-phase locking (see \u201cTwo-Phase Locking (2PL)\u201d on page 257 ), which for sev\u2010\neral decades was the only viable option\n\u2022Optimistic concurrency control techniques such as serializable snapshot isolation\n(see \u201cSerializable Snapshot Isolation (SSI)\u201d on page 261 )\nFor now, we will discuss these techniques primarily in the context of single-node\ndatabases; in Chapter 9  we will examine how they can be generalized to transactions\nthat involve multiple nodes in a distributed system.\nActual Serial Execution\nThe simplest way of avoiding concurrency problems is to remove the concurrency\nentirely: to execute only one transaction at a time, in serial order, on a single thread.\nBy doing so, we completely sidestep the problem of detecting and preventing con\u2010\nflicts between transactions: the resulting isolation is by definition serializable.\n252 | Chapter 7: Transactions\n",
    "summary": "The text discusses techniques for achieving serializable isolation in databases, primarily through serial execution, two-phase locking, and serializable snapshot isolation, highlighting the challenges and trade-offs involved.",
    "sample_answer": "\u201cOkay, this excerpt really highlights a core challenge in database design \u2013 guaranteeing data integrity under concurrent access. The difficulty in detecting race conditions, especially with weaker isolation levels, underscores the importance of choosing the appropriate isolation level. Implementing serializable isolation, whether through actual serial execution or techniques like two-phase locking or serializable snapshot isolation, is crucial to eliminate those potential conflicts.\u201d Furthermore, \u201cthe techniques discussed, particularly two-phase locking, demonstrate a well-established approach to managing concurrency, while acknowledging that different isolation levels represent different trade-offs between performance and data consistency.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say you\u2019re designing a system for processing financial transactions. What are the potential drawbacks of using a weaker isolation level compared to serializable isolation, and what strategies could you employ to mitigate those risks?\u201d"
  },
  {
    "chunk": "Even though this seems like an obvious idea, database designers only fairly recently\u2014\naround 2007\u2014decided that a single-threaded loop for executing transactions was fea\u2010\nsible [ 45]. If multi-threaded concurrency was considered essential for getting good\nperformance during the previous 30 years, what changed to make single-threaded\nexecution possible?\nTwo developments caused this rethink:\n\u2022RAM became cheap enough that for many use cases is now feasible to keep the\nentire active dataset in memory (see \u201cKeeping everything in memory\u201d on page\n88). When all data that a transaction needs to access is in memory, transactions\ncan execute much faster than if they have to wait for data to be loaded from disk.\n\u2022Database designers realized that OLTP transactions are usually short and only\nmake a small number of reads and writes (see \u201cTransaction Processing or Ana\u2010\nlytics?\u201d on page 90 ). By contrast, long-running analytic queries are typically read-\nonly, so they can be run on a consistent snapshot (using snapshot isolation)\noutside of the serial execution loop.\nThe approach of executing transactions serially is implemented in VoltDB/H-Store,\nRedis, and Datomic [ 46, 47, 48]. A system designed for single-threaded execution can\nsometimes perform better than a system that supports concurrency, because it can\navoid the coordination overhead of locking. However, its throughput is limited to\nthat of a single CPU core. In order to make the most of that single thread, transac\u2010\ntions need to be structured differently from their traditional form.\nEncapsulating transactions in stored procedures\nIn the early days of databases, the intention was that a database transaction could\nencompass an entire flow of user activity. For example, booking an airline ticket is a\nmulti-stage process (searching for routes, fares, and available seats; deciding on an\nitinerary; booking seats on each of the flights of the itinerary; entering passenger\ndetails; making payment). Database designers thought that it would be neat if that\nentire process was one transaction so that it could be committed atomically.\nUnfortunately, humans are very slow to make up their minds and respond. If a data\u2010\nbase transaction needs to wait for input from a user, the database needs to support a\npotentially huge number of concurrent transactions, most of them idle. Most data\u2010\nbases cannot do that efficiently, and so almost all OLTP applications keep transac\u2010\ntions short by avoiding interactively waiting for a user within a transaction. On the\nweb, this means that a transaction is committed within the same HTTP request\u2014a\ntransaction does not span multiple requests. A new HTTP request starts a new trans\u2010\naction.\nEven though the human has been taken out of the critical path, transactions have\ncontinued to be executed in an interactive client/server style, one statement at a time.\nSerializability | 253\n",
    "summary": "The shift to single-threaded transaction execution is driven by in-memory databases and the nature of short, interactive OLTP transactions, highlighting a core architectural trade-off.",
    "sample_answer": "\u201cThis change represents a significant shift in database design, moving away from the traditional assumption of multi-threaded concurrency. The key factors are the availability of sufficient RAM to hold the active dataset, enabling faster transaction execution, and the inherent characteristics of OLTP workloads \u2013 typically short, interactive transactions avoiding user interaction delays.  VoltDB, H-Store, and Redis exemplify this approach, showcasing a deliberate architectural choice to maximize throughput on a single core, mirroring the serializability constraints inherent in the design.\u201d",
    "potential_interview_question": "\u201cConsider a system like Redis or VoltDB.  Explain the trade-offs involved in designing a single-threaded transaction engine versus a multi-threaded one. How does the choice of in-memory data storage contribute to this decision, and what potential drawbacks might arise from prioritizing single-threaded execution?\u201d"
  },
  {
    "chunk": "An application makes a query, reads the result, perhaps makes another query\ndepending on the result of the first query, and so on. The queries and results are sent\nback and forth between the application code (running on one machine) and the data\u2010\nbase server (on another machine).\nIn this interactive style of transaction, a lot of time is spent in network communica\u2010\ntion between the application and the database. If you were to disallow concurrency in\nthe database and only process one transaction at a time, the throughput would be\ndreadful because the database would spend most of its time waiting for the applica\u2010\ntion to issue the next query for the current transaction. In this kind of database, it\u2019s\nnecessary to process multiple transactions concurrently in order to get reasonable\nperformance.\nFor this reason, systems with single-threaded serial transaction processing don\u2019t\nallow interactive multi-statement transactions. Instead, the application must submit\nthe entire transaction code to the database ahead of time, as a stored procedure . The\ndifferences between these approaches is illustrated in Figure 7-9 . Provided that all\ndata required by a transaction is in memory, the stored procedure can execute very\nfast, without waiting for any network or disk I/O.\nFigure 7-9. The difference between an interactive transaction and a stored procedure\n(using the example transaction of Figure 7-8 ).\n254 | Chapter 7: Transactions\n",
    "summary": "The text highlights the trade-offs between interactive, concurrent transactions and stored procedures, emphasizing the impact of network latency and I/O on performance.",
    "sample_answer": "\"This scenario illustrates a key architectural decision: choosing between an interactive, multi-statement transaction model and a stored procedure approach. The interactive model, while appearing intuitive, suffers from significant overhead due to network communication between the application and the database server for each statement. This is a classic example of how minimizing network latency is crucial for high-throughput systems \u2013 if we're constantly waiting for the application to send the next query, our throughput will be severely limited.  A stored procedure, where the entire transaction is submitted upfront, avoids this latency by executing entirely in memory, demonstrating the benefit of optimizing for single-threaded execution and reducing I/O.\"",
    "potential_interview_question": "\"Describe a situation where you might choose to implement a stored procedure over an interactive, multi-statement transaction. What are the key factors you would consider, and how would you address potential drawbacks, such as increased complexity or difficulty in debugging?\""
  },
  {
    "chunk": "Pros and cons of stored procedures\nStored procedures have existed for some time in relational databases, and they have\nbeen part of the SQL standard (SQL/PSM) since 1999. They have gained a somewhat\nbad reputation, for various reasons:\n\u2022Each database vendor has its own language for stored procedures (Oracle has PL/\nSQL, SQL Server has T-SQL, PostgreSQL has PL/pgSQL, etc.). These languages\nhaven\u2019t kept up with developments in general-purpose programming languages,\nso they look quite ugly and archaic from today\u2019s point of view, and they lack the\necosystem of libraries that you find with most programming languages.\n\u2022Code running in a database is difficult to manage: compared to an application\nserver, it\u2019s harder to debug, more awkward to keep in version control and deploy,\ntrickier to test, and difficult to integrate with a metrics collection system for\nmonitoring.\n\u2022A database is often much more performance-sensitive than an application server,\nbecause a single database instance is often shared by many application servers. A\nbadly written stored procedure (e.g., using a lot of memory or CPU time) in a\ndatabase can cause much more trouble than equivalent badly written code in an\napplication server.\nHowever, those issues can be overcome. Modern implementations of stored proce\u2010\ndures have abandoned PL/SQL and use existing general-purpose programming lan\u2010\nguages instead: VoltDB uses Java or Groovy, Datomic uses Java or Clojure, and Redis\nuses Lua.\nWith stored procedures and in-memory data, executing all transactions on a single\nthread becomes feasible. As they don\u2019t need to wait for I/O and they avoid the over\u2010\nhead of other concurrency control mechanisms, they can achieve quite good\nthroughput on a single thread.\nVoltDB also uses stored procedures for replication: instead of copying a transaction\u2019s\nwrites from one node to another, it executes the same stored procedure on each rep\u2010\nlica. VoltDB therefore requires that stored procedures are deterministic  (when run on\ndifferent nodes, they must produce the same result). If a transaction needs to use the\ncurrent date and time, for example, it must do so through special deterministic APIs. \nPartitioning\nExecuting all transactions serially makes concurrency control much simpler, but lim\u2010\nits the transaction throughput of the database to the speed of a single CPU core on a\nsingle machine. Read-only transactions may execute elsewhere, using snapshot isola\u2010\ntion, but for applications with high write throughput, the single-threaded transaction\nprocessor can become a serious bottleneck.\nSerializability | 255\n",
    "summary": "The chunk discusses the limitations of traditional stored procedures in relational databases, particularly regarding concurrency and performance, alongside a specific use case in VoltDB for replication.",
    "sample_answer": "\u201cStored procedures, while historically common, present challenges in modern systems due to their inherent limitations \u2013 primarily, their single-threaded execution severely restricts concurrency and throughput, which is exacerbated by the lack of a robust ecosystem like general-purpose programming languages. VoltDB\u2019s approach, utilizing stored procedures for replication, highlights the need for deterministic execution, as demonstrated by their requirement for deterministic APIs when handling time-sensitive operations, illustrating a key trade-off between simplicity and scalability.\u201d",
    "potential_interview_question": "\u201cVoltDB uses stored procedures for replication, requiring them to be deterministic. Explain how ensuring determinism in stored procedures, as exemplified by VoltDB, impacts the design choices for a system handling high-volume transactions. How might a failure to maintain determinism lead to data inconsistencies?\u201d"
  },
  {
    "chunk": "xi. Sometimes called strong strict two-phase locking  (SS2PL) to distinguish it from other variants of 2PL.\nTwo-Phase Locking (2PL)\nFor around 30 years, there was only one widely used algorithm for serializability in\ndatabases: two-phase locking  (2PL).xi\n2PL is not 2PC\nNote that while two-phase locking  (2PL) sounds very similar to\ntwo-phase commit  (2PC), they are completely different things. We\nwill discuss 2PC in Chapter 9 .\nWe saw previously that locks are often used to prevent dirty writes (see \u201cNo dirty\nwrites\u201d on page 235): if two transactions concurrently try to write to the same object,\nthe lock ensures that the second writer must wait until the first one has finished its\ntransaction (aborted or committed) before it may continue.\nTwo-phase locking is similar, but makes the lock requirements much stronger. Sev\u2010\neral transactions are allowed to concurrently read the same object as long as nobody\nis writing to it. But as soon as anyone wants to write (modify or delete) an object,\nexclusive access is required:\n\u2022If transaction A has read an object and transaction B wants to write to that\nobject, B must wait until A commits or aborts before it can continue. (This\nensures that B can\u2019t change the object unexpectedly behind A\u2019s back.)\n\u2022If transaction A has written an object and transaction B wants to read that object,\nB must wait until A commits or aborts before it can continue. (Reading an old\nversion of the object, like in Figure 7-1 , is not acceptable under 2PL.)\nIn 2PL, writers don\u2019t just block other writers; they also block readers and vice versa.\nSnapshot isolation has the mantra readers never block writers, and writers never block\nreaders  (see \u201cImplementing snapshot isolation\u201d on page 239 ), which captures this key\ndifference between snapshot isolation and two-phase locking. On the other hand,\nbecause 2PL provides serializability, it protects against all the race conditions dis\u2010\ncussed earlier, including lost updates and write skew.\nImplementation of two-phase locking\n2PL is used by the serializable isolation level in MySQL (InnoDB) and SQL Server,\nand the repeatable read isolation level in DB2 [ 23, 36].\nSerializability | 257\n",
    "summary": "The chunk describes Two-Phase Locking (2PL), contrasting it with Two-Phase Commit (2PC), and highlighting its strong locking requirements for serializability and protection against race conditions.",
    "sample_answer": "\u201cOkay, let\u2019s break down the 2PL strategy. This approach, as described, fundamentally addresses the issue of race conditions in concurrent transactions by enforcing strong serialization \u2013 writers block readers, and readers block writers. This is critical for ensuring data consistency, particularly when dealing with high concurrency, and aligns with the principles of preventing lost updates and write skew.  The fact that 2PL is used in isolation levels like serializable in MySQL (InnoDB) and repeatable read in DB2 demonstrates its importance in managing complex transactional scenarios.\u201d",
    "potential_interview_question": "\u201cImagine a system processing financial transactions concurrently. Explain the rationale behind using Two-Phase Locking (2PL) to ensure data integrity, referencing the core principles of the algorithm and how it addresses potential concurrency issues.  How would you compare its approach to a different isolation level like Snapshot Isolation?\u201d"
  },
  {
    "chunk": "The blocking of readers and writers is implemented by a having a lock on each object\nin the database. The lock can either be in shared mode  or in exclusive mode . The lock\nis used as follows:\n\u2022If a transaction wants to read an object, it must first acquire the lock in shared\nmode. Several transactions are allowed to hold the lock in shared mode simulta\u2010\nneously, but if another transaction already has an exclusive lock on the object,\nthese transactions must wait.\n\u2022If a transaction wants to write to an object, it must first acquire the lock in exclu\u2010\nsive mode. No other transaction may hold the lock at the same time (either in\nshared or in exclusive mode), so if there is any existing lock on the object, the\ntransaction must wait.\n\u2022If a transaction first reads and then writes an object, it may upgrade its shared\nlock to an exclusive lock. The upgrade works the same as getting an exclusive\nlock directly.\n\u2022After a transaction has acquired the lock, it must continue to hold the lock until\nthe end of the transaction (commit or abort). This is where the name \u201ctwo-\nphase\u201d comes from: the first phase (while the transaction is executing) is when\nthe locks are acquired, and the second phase (at the end of the transaction) is\nwhen all the locks are released.\nSince so many locks are in use, it can happen quite easily that transaction A is stuck\nwaiting for transaction B to release its lock, and vice versa. This situation is called\ndeadlock . The database automatically detects deadlocks between transactions and\naborts one of them so that the others can make progress. The aborted transaction\nneeds to be retried by the application.\nPerformance of two-phase locking\nThe big downside of two-phase locking, and the reason why it hasn\u2019t been used by\neverybody since the 1970s, is performance: transaction throughput and response\ntimes of queries are significantly worse under two-phase locking than under weak\nisolation.\nThis is partly due to the overhead of acquiring and releasing all those locks, but more\nimportantly due to reduced concurrency. By design, if two concurrent transactions\ntry to do anything that may in any way result in a race condition, one has to wait for\nthe other to complete.\nTraditional relational databases don\u2019t limit the duration of a transaction, because\nthey are designed for interactive applications that wait for human input. Conse\u2010\nquently, when one transaction has to wait on another, there is no limit on how long it\nmay have to wait. Even if you make sure that you keep all your transactions short, a\n258 | Chapter 7: Transactions\n",
    "summary": "The text describes a two-phase locking (2PL) strategy for managing concurrent access to database objects, highlighting the potential for deadlocks and its impact on performance.",
    "sample_answer": "\u201cOkay, so this describes a classic two-phase locking (2PL) strategy, which is a fundamental technique for managing concurrency in relational databases. The key is that each transaction acquires locks in either shared or exclusive mode to prevent conflicting updates, but this approach introduces a significant risk of deadlocks \u2013 where transactions are blocked indefinitely waiting for each other. This approach, while preventing data corruption, dramatically reduces transaction throughput and response times due to the inherent contention and limitations on concurrency, which is why alternatives like optimistic locking or more sophisticated isolation levels are often favored in modern systems.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re designing a system for a high-volume e-commerce platform where users simultaneously add items to their carts.  Describe the potential issues with using a 2PL strategy like the one described in this passage. How could these issues impact the system's performance and what alternative strategies might be better suited for this scenario?\u201d"
  },
  {
    "chunk": "queue may form if several transactions want to access the same object, so a transac\u2010\ntion may have to wait for several others to complete before it can do anything.\nFor this reason, databases running 2PL can have quite unstable latencies, and they\ncan be very slow at high percentiles (see \u201cDescribing Performance\u201d on page 13) if\nthere is contention in the workload. It may take just one slow transaction, or one\ntransaction that accesses a lot of data and acquires many locks, to cause the rest of the\nsystem to grind to a halt. This instability is problematic when robust operation is\nrequired.\nAlthough deadlocks can happen with the lock-based read committed isolation level,\nthey occur much more frequently under 2PL serializable isolation (depending on the\naccess patterns of your transaction). This can be an additional performance problem:\nwhen a transaction is aborted due to deadlock and is retried, it needs to do its work\nall over again. If deadlocks are frequent, this can mean significant wasted effort.\nPredicate locks\nIn the preceding description of locks, we glossed over a subtle but important detail.\nIn \u201cPhantoms causing write skew\u201d on page 250 we discussed the problem of phan\u2010\ntoms \u2014that is, one transaction changing the results of another transaction\u2019s search\nquery. A database with serializable isolation must prevent phantoms.\nIn the meeting room booking example this means that if one transaction has\nsearched for existing bookings for a room within a certain time window (see\nExample 7-2 ), another transaction is not allowed to concurrently insert or update\nanother booking for the same room and time range. (It\u2019s okay to concurrently insert\nbookings for other rooms, or for the same room at a different time that doesn\u2019t affect\nthe proposed booking.)\nHow do we implement this? Conceptually, we need a predicate lock  [3]. It works sim\u2010\nilarly to the shared/exclusive lock described earlier, but rather than belonging to a\nparticular object (e.g., one row in a table), it belongs to all objects that match some\nsearch condition, such as:\nSELECT * FROM bookings\n  WHERE room_id = 123 AND\n    end_time    > '2018-01-01 12:00'  AND\n    start_time  < '2018-01-01 13:00' ;\nA predicate lock restricts access as follows:\n\u2022If transaction A wants to read objects matching some condition, like in that\nSELECT  query, it must acquire a shared-mode predicate lock on the conditions of\nthe query. If another transaction B currently has an exclusive lock on any object\nmatching those conditions, A must wait until B releases its lock before it is\nallowed to make its query.\nSerializability | 259\n",
    "summary": "The text discusses the potential for instability in 2PL databases due to transaction contention and the use of predicate locks to manage phantom reads and ensure serializability.",
    "sample_answer": "\u201cThe core issue here is transaction contention, which is exacerbated by 2PL\u2019s serializable isolation level. The system\u2019s latency becomes unstable when multiple transactions compete for access to the same data, as evidenced by the potential for \u2018grinding to a halt\u2019 \u2013 this is a direct consequence of the CAP theorem, specifically relating to availability and partition tolerance. To mitigate this, we employ predicate locks, which provide a fine-grained locking mechanism based on query predicates. This prevents phantom reads and ensures serializable behavior, but it\u2019s crucial to understand that this locking strategy introduces performance overhead and contention points, necessitating careful monitoring and potentially, techniques like optimistic locking to reduce the frequency of blocking.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where a database\u2019s performance degrades significantly due to transaction contention. How would you address this problem, and what locking strategy would you consider implementing, explaining the trade-offs involved?\u201d"
  },
  {
    "chunk": "action is aborted and has to be retried. Only transactions that executed serializably\nare allowed to commit.\nOptimistic concurrency control is an old idea [ 52], and its advantages and disadvan\u2010\ntages have been debated for a long time [ 53]. It performs badly if there is high con\u2010\ntention (many transactions trying to access the same objects), as this leads to a high\nproportion of transactions needing to abort. If the system is already close to its maxi\u2010\nmum throughput, the additional transaction load from retried transactions can make\nperformance worse.\nHowever, if there is enough spare capacity, and if contention between transactions is\nnot too high, optimistic concurrency control techniques tend to perform better than\npessimistic ones. Contention can be reduced with commutative atomic operations:\nfor example, if several transactions concurrently want to increment a counter, it\ndoesn\u2019t matter in which order the increments are applied (as long as the counter isn\u2019t\nread in the same transaction), so the concurrent increments can all be applied\nwithout conflicting.\nAs the name suggests, SSI is based on snapshot isolation\u2014that is, all reads within a\ntransaction are made from a consistent snapshot of the database (see \u201cSnapshot Isola\u2010\ntion and Repeatable Read\u201d on page 237 ). This is the main difference compared to ear\u2010\nlier optimistic concurrency control techniques. On top of snapshot isolation, SSI adds\nan algorithm for detecting serialization conflicts among writes and determining\nwhich transactions to abort.\nDecisions based on an outdated premise\nWhen we previously discussed write skew in snapshot isolation (see \u201cWrite Skew and\nPhantoms\u201d  on page 246), we observed a recurring pattern: a transaction reads some\ndata from the database, examines the result of the query, and decides to take some\naction (write to the database) based on the result that it saw. However, under snap\u2010\nshot isolation, the result from the original query may no longer be up-to-date by the\ntime the transaction commits, because the data may have been modified in the mean\u2010\ntime.\nPut another way, the transaction is taking an action based on a premise  (a fact that\nwas true at the beginning of the transaction, e.g., \u201cThere are currently two doctors on\ncall\u201d). Later, when the transaction wants to commit, the original data may have\nchanged\u2014the premise may no longer be true.\nWhen the application makes a query (e.g., \u201cHow many doctors are currently on\ncall?\u201d), the database doesn\u2019t know how the application logic uses the result of that\nquery. To be safe, the database needs to assume that any change in the query result\n(the premise) means that writes in that transaction may be invalid. In other words,\nthere may be a causal dependency between the queries and the writes in the transac\u2010\ntion. In order to provide serializable isolation, the database must detect situations in\n262 | Chapter 7: Transactions\n",
    "summary": "The text discusses optimistic concurrency control, snapshot isolation, and the challenges of handling causal dependencies in transaction processing.",
    "sample_answer": "\u201cOkay, this section is really highlighting the trade-offs inherent in optimistic concurrency control. The key takeaway is that snapshot isolation, by creating consistent reads within a transaction, can lead to problems if the underlying data changes between the read and commit phases \u2013 essentially, the transaction is acting on an outdated premise. This necessitates a mechanism for detecting serialization conflicts, which is where the system needs to abort transactions when a causal dependency is detected, mirroring the principles of the CAP theorem \u2013 acknowledging that strong consistency might come at the cost of availability in a distributed environment.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re designing a system for updating inventory levels in a distributed e-commerce environment. We\u2019ve chosen an optimistic concurrency control strategy. What potential issues might we encounter related to causal dependencies, and what mechanisms would you employ to mitigate those risks? How does this relate to the concept of \u2018serializable isolation\u2019?\u201d"
  },
  {
    "chunk": "which a transaction may have acted on an outdated premise and abort the transac\u2010\ntion in that case.\nHow does the database know if a query result might have changed? There are two\ncases to consider:\n\u2022Detecting reads of a stale MVCC object version (uncommitted write occurred\nbefore the read)\n\u2022Detecting writes that affect prior reads (the write occurs after the read)\nDetecting stale MVCC reads\nRecall that snapshot isolation is usually implemented by multi-version concurrency\ncontrol (MVCC; see Figure 7-10 ). When a transaction reads from a consistent snap\u2010\nshot in an MVCC database, it ignores writes that were made by any other transac\u2010\ntions that hadn\u2019t yet committed at the time when the snapshot was taken. In\nFigure 7-10 , transaction 43 sees Alice as having on_call = true , because transaction\n42 (which modified Alice\u2019s on-call status) is uncommitted. However, by the time\ntransaction 43 wants to commit, transaction 42 has already committed. This means\nthat the write that was ignored when reading from the consistent snapshot has now\ntaken effect, and transaction 43\u2019s premise is no longer true.\nFigure 7-10. Detecting when a transaction reads outdated values from an MVCC\nsnapshot.\nSerializability | 263\n",
    "summary": "The text discusses detecting stale reads in an MVCC database system due to uncommitted transactions, highlighting the need for mechanisms to ensure data consistency and the potential for rollback. It relates to concepts like snapshot isolation and concurrency control.",
    "sample_answer": "\u201cOkay, this snippet describes a critical challenge in designing a database system with high concurrency. The core issue is that a transaction reading data can encounter a stale version of that data if another transaction has modified it but hasn't yet committed, a scenario addressed by snapshot isolation using MVCC. To mitigate this, the database needs a robust strategy to detect these stale reads and potentially rollback the transaction, upholding data consistency \u2013 this directly ties into the CAP theorem, specifically the availability aspect.\u201d",
    "potential_interview_question": "\u201cImagine you are designing a system that relies on MVCC for concurrency control. How would you approach detecting and handling stale reads to ensure data consistency, and what trade-offs would you consider in your design?\u201d"
  },
  {
    "chunk": "The rate of aborts significantly affects the overall performance of SSI. For example, a\ntransaction that reads and writes data over a long period of time is likely to run into\nconflicts and abort, so SSI requires that read-write transactions be fairly short (long-\nrunning read-only transactions may be okay). However, SSI is probably less sensitive\nto slow transactions than two-phase locking or serial execution. \nSummary\nTransactions are an abstraction layer that allows an application to pretend that cer\u2010\ntain concurrency problems and certain kinds of hardware and software faults don\u2019t\nexist. A large class of errors is reduced down to a simple transaction abort , and the\napplication just needs to try again.\nIn this chapter we saw many examples of problems that transactions help prevent.\nNot all applications are susceptible to all those problems: an application with very\nsimple access patterns, such as reading and writing only a single record, can probably\nmanage without transactions. However, for more complex access patterns, transac\u2010\ntions can hugely reduce the number of potential error cases you need to think about.\nWithout transactions, various error scenarios (processes crashing, network interrup\u2010\ntions, power outages, disk full, unexpected concurrency, etc.) mean that data can\nbecome inconsistent in various ways. For example, denormalized data can easily go\nout of sync with the source data. Without transactions, it becomes very difficult to\nreason about the effects that complex interacting accesses can have on the database.\nIn this chapter, we went particularly deep into the topic of concurrency control. We\ndiscussed several widely used isolation levels, in particular read committed , snapshot\nisolation  (sometimes called repeatable read ), and serializable . We characterized those\nisolation levels by discussing various examples of race conditions:\nDirty reads\nOne client reads another client\u2019s writes before they have been committed. The\nread committed isolation level and stronger levels prevent dirty reads.\nDirty writes\nOne client overwrites data that another client has written, but not yet committed.\nAlmost all transaction implementations prevent dirty writes.\nRead skew (nonrepeatable reads)\nA client sees different parts of the database at different points in time. This issue\nis most commonly prevented with snapshot isolation, which allows a transaction\nto read from a consistent snapshot at one point in time. It is usually implemented\nwith multi-version concurrency control  (MVCC).\n266 | Chapter 7: Transactions\n",
    "summary": "The chunk discusses transaction isolation levels, concurrency control, and their impact on system reliability, particularly concerning abort rates and data consistency. It highlights the use of MVCC for snapshot isolation.",
    "sample_answer": "\u201cOkay, so this section is really focused on understanding the trade-offs in transaction design and how they relate to system reliability. The high abort rate in SSI suggests that long-running, complex transactions are inherently problematic; this aligns with the CAP theorem, where availability might be compromised if we\u2019re overly focused on strong consistency.  Specifically, the mention of snapshot isolation \u2013 often implemented with Multi-Version Concurrency Control (MVCC) \u2013 demonstrates a technique to mitigate race conditions like dirty reads by providing a consistent view of the data at a specific point in time, which is critical for resilience against hardware or software faults.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say you\u2019re designing a system that processes financial transactions. How would you approach choosing an isolation level (read committed, snapshot isolation, or serializable) and why?  Specifically, how would you justify your decision considering potential abort rates and the need to maintain data consistency?\u201d"
  },
  {
    "chunk": "References\n[1] Donald D. Chamberlin, Morton M. Astrahan, Michael W. Blasgen, et al.: \u201c A His\u2010\ntory and Evaluation of System R ,\u201d Communications of the ACM , volume 24, number\n10, pages 632\u2013646, October 1981. doi:10.1145/358769.358784\n[2] Jim N. Gray, Raymond A. Lorie, Gianfranco R. Putzolu, and Irving L. Traiger:\n\u201cGranularity of Locks and Degrees of Consistency in a Shared Data Base ,\u201d in Model\u2010\nling in Data Base Management Systems: Proceedings of the IFIP Working Conference\non Modelling in Data Base Management Systems , edited by G. M. Nijssen, pages 364\u2013\n394, Elsevier/North Holland Publishing, 1976. Also in Readings in Database Systems ,\n4th edition, edited by Joseph M. Hellerstein and Michael Stonebraker, MIT Press,\n2005. ISBN: 978-0-262-69314-1\n[3] Kapali P. Eswaran, Jim N. Gray, Raymond A. Lorie, and Irving L. Traiger: \u201c The\nNotions of Consistency and Predicate Locks in a Database System ,\u201d Communications\nof the ACM , volume 19, number 11, pages 624\u2013633, November 1976.\n[4] \u201cACID Transactions Are Incredibly Helpful ,\u201d FoundationDB, LLC, 2013.\n[5] John D. Cook: \u201c ACID Versus BASE for Database Transactions ,\u201d johndcook.com ,\nJuly 6, 2009.\n[6] Gavin Clarke: \u201c NoSQL\u2019s CAP Theorem Busters: We Don\u2019t Drop ACID ,\u201d theregis\u2010\nter.co.uk , November 22, 2012.\n[7] Theo H\u00e4rder and Andreas Reuter: \u201c Principles of Transaction-Oriented Database\nRecovery ,\u201d ACM Computing Surveys , volume 15, number 4, pages 287\u2013317, Decem\u2010\nber 1983. doi:10.1145/289.291\n[8] Peter Bailis, Alan Fekete, Ali Ghodsi, et al.: \u201c HAT, not CAP: Towards Highly\nAvailable Transactions ,\u201d at 14th USENIX Workshop on Hot Topics in Operating Sys\u2010\ntems  (HotOS), May 2013.\n[9] Armando Fox, Steven D. Gribble, Yatin Chawathe, et al.: \u201c Cluster-Based Scalable\nNetwork Services ,\u201d at 16th ACM Symposium on Operating Systems Principles  (SOSP),\nOctober 1997.\n[10] Philip A. Bernstein, Vassos Hadzilacos, and Nathan Goodman: Concurrency\nControl and Recovery in Database Systems . Addison-Wesley, 1987. ISBN:\n978-0-201-10715-9, available online at research.microsoft.com .\n[11] Alan Fekete, Dimitrios Liarokapis, Elizabeth O\u2019Neil, et al.: \u201c Making Snapshot\nIsolation Serializable ,\u201d ACM Transactions on Database Systems , volume 30, number\n2, pages 492\u2013528, June 2005. doi:10.1145/1071610.1071615\n268 | Chapter 7: Transactions\n",
    "summary": "The chunk discusses transaction management, consistency models (ACID vs. BASE), and concurrency control strategies within database systems.",
    "sample_answer": "\u201cOkay, let\u2019s analyze this from a system design perspective. The core themes here revolve around transaction management and the trade-offs between strong consistency (ACID) and eventual consistency (BASE). The reference to \u2018ACID Transactions Are Incredibly Helpful\u2019 highlights the fundamental importance of atomicity, consistency, isolation, and durability in ensuring data integrity \u2013 particularly the need for rollback and recovery mechanisms as discussed by Bailis et al. in \u2018HAT, not CAP,\u2019 which suggests a move towards highly available transactions.  Furthermore, the discussion of snapshot isolation (Fekete et al.) demonstrates an advanced technique for managing concurrency, aiming to provide serializable isolation levels within a distributed environment.\u201d",
    "potential_interview_question": "\u201cDescribe the key differences between the ACID and BASE transaction models.  How might you design a system to support highly available transactions while still maintaining data integrity?  Reference specific concepts from the provided references.\u201d"
  },
  {
    "chunk": "[12] Mai Zheng, Joseph Tucek, Feng Qin, and Mark Lillibridge: \u201c Understanding the\nRobustness of SSDs Under Power Fault ,\u201d at 11th USENIX Conference on File and\nStorage Technologies  (FAST), February 2013.\n[13] Laurie Denness: \u201c SSDs: A Gift and a Curse ,\u201d laur.ie , June 2, 2015.\n[14] Adam Surak: \u201c When Solid State Drives Are Not That Solid ,\u201d blog.algolia.com ,\nJune 15, 2015.\n[15] Thanumalayan Sankaranarayana Pillai, Vijay Chidambaram, Ramnatthan Ala\u2010\ngappan, et al.: \u201c All File Systems Are Not Created Equal: On the Complexity of Craft\u2010\ning Crash-Consistent Applications ,\u201d at 11th USENIX Symposium on Operating\nSystems Design and Implementation  (OSDI), October 2014.\n[16] Chris Siebenmann: \u201c Unix\u2019s File Durability Problem ,\u201d utcc.utoronto.ca , April 14,\n2016.\n[17] Lakshmi N. Bairavasundaram, Garth R. Goodson, Bianca Schroeder, et al.: \u201c An\nAnalysis of Data Corruption in the Storage Stack ,\u201d at 6th USENIX Conference on File\nand Storage Technologies  (FAST), February 2008.\n[18] Bianca Schroeder, Raghav Lagisetty, and Arif Merchant: \u201c Flash Reliability in\nProduction: The Expected and the Unexpected ,\u201d at 14th USENIX Conference on File\nand Storage Technologies  (FAST), February 2016.\n[19] Don Allison: \u201c SSD Storage \u2013 Ignorance of Technology Is No Excuse ,\u201d blog.kore\u2010\nlogic.com , March 24, 2015.\n[20] Dave Scherer: \u201c Those Are Not Transactions (Cassandra 2.0) ,\u201d blog.founda\u2010\ntiondb.com , September 6, 2013.\n[21] Kyle Kingsbury: \u201c Call Me Maybe: Cassandra ,\u201d aphyr.com , September 24, 2013.\n[22] \u201cACID Support in Aerospike ,\u201d Aerospike, Inc., June 2014.\n[23] Martin Kleppmann: \u201c Hermitage: Testing the \u2018I\u2019 in ACID ,\u201d martin.klepp\u2010\nmann.com , November 25, 2014.\n[24] Tristan D\u2019Agosta: \u201c BTC Stolen from Poloniex ,\u201d bitcointalk.org , March 4, 2014.\n[25] bitcointhief2: \u201c How I Stole Roughly 100 BTC from an Exchange and How I\nCould Have Stolen More! ,\u201d reddit.com , February 2, 2014.\n[26] Sudhir Jorwekar, Alan Fekete, Krithi Ramamritham, and S. Sudarshan: \u201c Auto\u2010\nmating the Detection of Snapshot Isolation Anomalies ,\u201d at 33rd International Confer\u2010\nence on Very Large Data Bases  (VLDB), September 2007.\n[27] Michael Melanson: \u201c Transactions: The Limits of Isolation ,\u201d michaelmelan\u2010\nson.net , March 20, 2014.\nSummary | 269\n",
    "summary": "The chunk discusses data durability, consistency models (ACID vs. eventual consistency), and the challenges of maintaining data integrity in distributed systems, particularly concerning SSDs and exchange security.",
    "sample_answer": "\u201cThis material highlights a critical tension in modern data systems: achieving strong consistency guarantees like ACID transactions with SSDs, which have inherent limitations. The discussion of events like the Poloniex theft and the challenges outlined in the \u2018Transactions: The Limits of Isolation\u2019 piece emphasize the need for robust monitoring, understanding eventual consistency tradeoffs, and designing systems that can gracefully handle unexpected failures \u2013 something highlighted by the \u2018ACID Support in Aerospike\u2019 documentation.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a database for a cryptocurrency exchange. Discuss the consistency models you would consider, weighing the trade-offs between strong consistency and performance, and how you would mitigate potential risks, referencing the insights from the provided research papers on data durability and exchange security.\u201d"
  },
  {
    "chunk": "[28] Hal Berenson, Philip A. Bernstein, Jim N. Gray, et al.: \u201c A Critique of ANSI SQL\nIsolation Levels ,\u201d at ACM International Conference on Management of Data  (SIG\u2010\nMOD), May 1995.\n[29] Atul Adya: \u201c Weak Consistency: A Generalized Theory and Optimistic Imple\u2010\nmentations for Distributed Transactions ,\u201d PhD Thesis, Massachusetts Institute of\nTechnology, March 1999.\n[30] Peter Bailis, Aaron Davidson, Alan Fekete, et al.: \u201c Highly Available Transactions:\nVirtues and Limitations (Extended Version) ,\u201d at 40th International Conference on\nVery Large Data Bases  (VLDB), September 2014.\n[31] Bruce Momjian: \u201c MVCC Unmasked ,\u201d momjian.us , July 2014.\n[32] Annamalai Gurusami: \u201c Repeatable Read Isolation Level in InnoDB \u2013 How Con\u2010\nsistent Read View Works ,\u201d blogs.oracle.com , January 15, 2013.\n[33] Nikita Prokopov: \u201c Unofficial Guide to Datomic Internals ,\u201d tonsky.me , May 6,\n2014.\n[34] Baron Schwartz: \u201c Immutability, MVCC, and Garbage Collection ,\u201d xaprb.com ,\nDecember 28, 2013.\n[35] J. Chris Anderson, Jan Lehnardt, and Noah Slater: CouchDB: The Definitive\nGuide . O\u2019Reilly Media, 2010. ISBN: 978-0-596-15589-6\n[36] Rikdeb Mukherjee: \u201c Isolation in DB2 (Repeatable Read, Read Stability, Cursor\nStability, Uncommitted Read) with Examples ,\u201d mframes.blogspot.co.uk , July 4, 2013.\n[37] Steve Hilker: \u201c Cursor Stability (CS) \u2013 IBM DB2 Community ,\u201d toadworld.com ,\nMarch 14, 2013.\n[38] Nate Wiger: \u201c An Atomic Rant ,\u201d nateware.com , February 18, 2010.\n[39] Joel Jacobson: \u201c Riak 2.0: Data Types ,\u201d blog.joeljacobson.com , March 23, 2014.\n[40] Michael J. Cahill, Uwe R\u00f6hm, and Alan Fekete: \u201c Serializable Isolation for Snap\u2010\nshot Databases ,\u201d at ACM International Conference on Management of Data  (SIG\u2010\nMOD), June 2008. doi:10.1145/1376616.1376690\n[41] Dan R. K. Ports and Kevin Grittner: \u201c Serializable Snapshot Isolation in Post\u2010\ngreSQL ,\u201d at 38th International Conference on Very Large Databases  (VLDB), August\n2012.\n[42] Tony Andrews: \u201c Enforcing Complex Constraints in Oracle ,\u201d tonyandrews.blog\u2010\nspot.co.uk , October 15, 2004.\n[43] Douglas B. Terry, Marvin M. Theimer, Karin Petersen, et al.: \u201c Managing Update\nConflicts in Bayou, a Weakly Connected Replicated Storage System ,\u201d at 15th ACM\n270 | Chapter 7: Transactions\n",
    "summary": "The text discusses various transaction isolation levels, weak consistency models, and database internals, particularly focusing on MVCC and snapshot isolation.",
    "sample_answer": "\u201cThis chunk highlights the critical trade-offs involved in designing transaction systems. Specifically, it touches on concepts like MVCC \u2013 which allows multiple versions of a row to exist concurrently, reducing locking contention \u2013 and snapshot isolation, where each transaction sees a consistent snapshot of the database at the time it began. The discussion of weak consistency models, like those explored in Atul Adya's thesis, underscores the importance of understanding the level of data consistency required for a given application and the potential for conflicts that arise from relaxed consistency guarantees.  A key question here is how to choose an isolation level that balances data integrity with performance.\u201d",
    "potential_interview_question": "\u201cDescribe the trade-offs between different transaction isolation levels (e.g., Serializable, Read Committed, Read Uncommitted).  In what scenarios would you choose a weaker isolation level like Read Committed, and what potential downsides would you need to be aware of?\u201d"
  },
  {
    "chunk": "Symposium on Operating Systems Principles  (SOSP), December 1995. doi:\n10.1145/224056.224070\n[44] Gary Fredericks: \u201c Postgres Serializability Bug ,\u201d github.com , September 2015.\n[45] Michael Stonebraker, Samuel Madden, Daniel J. Abadi, et al.: \u201c The End of an\nArchitectural Era (It\u2019s Time for a Complete Rewrite) ,\u201d at 33rd International Confer\u2010\nence on Very Large Data Bases  (VLDB), September 2007.\n[46] John Hugg: \u201c H-Store/VoltDB Architecture vs. CEP Systems and Newer Stream\u2010\ning Architectures ,\u201d at Data @Scale Boston , November 2014.\n[47] Robert Kallman, Hideaki Kimura, Jonathan Natkins, et al.: \u201c H-Store: A High-\nPerformance, Distributed Main Memory Transaction Processing System ,\u201d Proceed\u2010\nings of the VLDB Endowment , volume 1, number 2, pages 1496\u20131499, August 2008.\n[48] Rich Hickey: \u201c The Architecture of Datomic ,\u201d infoq.com , November 2, 2012.\n[49] John Hugg: \u201c Debunking Myths About the VoltDB In-Memory Database ,\u201d\nvoltdb.com , May 12, 2014.\n[50] Joseph M. Hellerstein, Michael Stonebraker, and James Hamilton: \u201c Architecture\nof a Database System ,\u201d Foundations and Trends in Databases , volume 1, number 2,\npages 141\u2013259, November 2007. doi:10.1561/1900000002\n[51] Michael J. Cahill: \u201c Serializable Isolation for Snapshot Databases ,\u201d PhD Thesis,\nUniversity of Sydney, July 2009.\n[52] D. Z. Badal: \u201c Correctness of Concurrency Control and Implications in Dis\u2010\ntributed Databases ,\u201d at 3rd International IEEE Computer Software and Applications\nConference  (COMPSAC), November 1979.\n[53] Rakesh Agrawal, Michael J. Carey, and Miron Livny: \u201c Concurrency Control Per\u2010\nformance Modeling: Alternatives and Implications ,\u201d ACM Transactions on Database\nSystems  (TODS), volume 12, number 4, pages 609\u2013654, December 1987. doi:\n10.1145/32204.32220\n[54] Dave Rosenthal: \u201c Databases at 14.4MHz ,\u201d blog.foundationdb.com , December 10,\n2014.\nSummary | 271\n",
    "summary": "The chunk discusses database architectures, concurrency control, and data system design principles, referencing specific research and technologies like Postgres, VoltDB, and FoundationDB.",
    "sample_answer": "\u201cThis collection of papers highlights the evolution of database design, particularly around concurrency control and high-performance systems. The references to Postgres Serializability Bug and VoltDB illustrate the ongoing challenge of achieving strong consistency in distributed systems \u2013 a core concern when designing systems like H-Store, which aims for high-throughput transactions. The discussion around FoundationDB's architecture, emphasizing low latency, aligns with the broader trend of designing databases capable of operating at extremely high speeds, potentially impacting trade-offs between consistency and performance, as evidenced by the research on concurrency control performance modeling presented in the TODS paper.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you\u2019d need to balance strong consistency requirements with performance needs in a distributed database system.  What architectural considerations and potential technologies (like those mentioned in the references \u2013 Postgres, VoltDB, FoundationDB) would you explore, and why?\u201d"
  },
  {
    "chunk": "i. With one exception: we will assume that faults are non-Byzantine  (see \u201cByzantine Faults\u201d on page 304 ).CHAPTER 8\nThe Trouble with Distributed Systems\nHey I just met you\nThe network\u2019s laggy\nBut here\u2019s my data\nSo store it maybe\n\u2014Kyle Kingsbury, Carly Rae Jepsen and the Perils of Network Partitions  (2013)\nA recurring theme in the last few chapters has been how systems handle things going\nwrong. For example, we discussed replica failover ( \u201cHandling Node Outages\u201d on\npage 156), replication lag ( \u201cProblems with Replication Lag\u201d on page 161), and con\u2010\ncurrency control for transactions ( \u201cWeak Isolation Levels\u201d  on page 233). As we come\nto understand various edge cases that can occur in real systems, we get better at han\u2010\ndling them.\nHowever, even though we have talked a lot about faults, the last few chapters have\nstill been too optimistic. The reality is even darker. We will now turn our pessimism\nto the maximum and assume that anything that can go wrong will go wrong.i (Expe\u2010\nrienced systems operators will tell you that is a reasonable assumption. If you ask\nnicely, they might tell you some frightening stories while nursing their scars of past\nbattles.)\nWorking with distributed systems is fundamentally different from writing software\non a single computer\u2014and the main difference is that there are lots of new and excit\u2010\ning ways for things to go wrong [ 1, 2]. In this chapter, we will get a taste of the prob\u2010\nlems that arise in practice, and an understanding of the things we can and cannot rely\non.\n273\n",
    "summary": "The text highlights the importance of anticipating and handling faults, replication lag, and concurrency issues in distributed systems, emphasizing a pessimistic operational viewpoint.",
    "sample_answer": "\u201cOkay, let\u2019s break down the core issues here. The passage strongly suggests that we need to operate under a \u2018pessimistic\u2019 view of distributed systems, acknowledging that failures are almost inevitable. This aligns with a robust approach \u2013 instead of assuming everything works perfectly, we should design for the worst-case scenario. Specifically, replication lag is a critical concern; if data isn't synchronously replicated, there\u2019s a window of opportunity for inconsistencies to arise, requiring careful monitoring and potentially conflict resolution strategies, as discussed in \u2018Problems with Replication Lag.\u2019 Furthermore, the text implicitly acknowledges the need for concurrency control (as mentioned in \u2018Weak Isolation Levels\u2019) to manage simultaneous operations and prevent data corruption, a common challenge in distributed environments.\"",
    "potential_interview_question": "\u201cImagine you\u2019re building a system to store sensor data from millions of IoT devices. Given the potential for network partitions and replication lag, what key architectural considerations would you prioritize to ensure data durability and eventual consistency, and what monitoring strategies would you employ to detect and respond to these issues?\u201d"
  },
  {
    "chunk": "In the end, our task as engineers is to build systems that do their job (i.e., meet the\nguarantees that users are expecting), in spite of everything going wrong. In Chapter 9 ,\nwe will look at some examples of algorithms that can provide such guarantees in a\ndistributed system. But first, in this chapter, we must understand what challenges we\nare up against.\nThis chapter is a thoroughly pessimistic and depressing overview of things that may\ngo wrong in a distributed system. We will look into problems with networks ( \u201cUnre\u2010\nliable Networks\u201d on page 277); clocks and timing issues ( \u201cUnreliable Clocks\u201d on page\n287); and we\u2019ll discuss to what degree they are avoidable. The consequences of all\nthese issues are disorienting, so we\u2019ll explore how to think about the state of a dis\u2010\ntributed system and how to reason about things that have happened ( \u201cKnowledge,\nTruth, and Lies\u201d on page 300 ).\nFaults and Partial Failures\nWhen you are writing a program on a single computer, it normally behaves in a fairly\npredictable way: either it works or it doesn\u2019t. Buggy software may give the appearance\nthat the computer is sometimes \u201chaving a bad day\u201d (a problem that is often fixed by a\nreboot), but that is mostly just a consequence of badly written software.\nThere is no fundamental reason why software on a single computer should be flaky:\nwhen the hardware is working correctly, the same operation always produces the\nsame result (it is deterministic ). If there is a hardware problem (e.g., memory corrup\u2010\ntion or a loose connector), the consequence is usually a total system failure (e.g., ker\u2010\nnel panic, \u201cblue screen of death,\u201d failure to start up). An individual computer with\ngood software is usually either fully functional or entirely broken, but not something\nin between.\nThis is a deliberate choice in the design of computers: if an internal fault occurs, we\nprefer a computer to crash completely rather than returning a wrong result, because\nwrong results are difficult and confusing to deal with. Thus, computers hide the fuzzy\nphysical reality on which they are implemented and present an idealized system\nmodel that operates with mathematical perfection. A CPU instruction always does\nthe same thing; if you write some data to memory or disk, that data remains intact\nand doesn\u2019t get randomly corrupted. This design goal of always-correct computation\ngoes all the way back to the very first digital computer [ 3].\nWhen you are writing software that runs on several computers, connected by a net\u2010\nwork, the situation is fundamentally different. In distributed systems, we are no\nlonger operating in an idealized system model\u2014we have no choice but to confront\nthe messy reality of the physical world. And in the physical world, a remarkably wide\nrange of things can go wrong, as illustrated by this anecdote [ 4]:\n274 | Chapter 8: The Trouble with Distributed Systems\n",
    "summary": "The text emphasizes the challenges of building reliable distributed systems due to unreliable networks, clocks, and the inherent messiness of the physical world, highlighting the need for fault tolerance and understanding system state.",
    "sample_answer": "\u201cOkay, let\u2019s think about this from a design perspective. Unlike a single-machine system where a failure typically results in a clear, binary outcome, distributed systems inherently introduce partial failures. We need to acknowledge that network partitions, clock skew, and other issues can lead to inconsistent states \u2013 this directly relates to the CAP theorem, where we're likely dealing with a trade-off between consistency and availability. To build resilience, we need strategies like replication with consensus algorithms \u2013 perhaps Raft \u2013 to ensure data consistency, coupled with techniques for detecting and recovering from these partial failures, like timeout-based retries and potentially circuit breakers, to maintain system availability.\u201d",
    "potential_interview_question": "\u201cDescribe the key challenges in designing a distributed system compared to a single-machine system. How do these challenges relate to the CAP theorem, and what strategies might a data engineer employ to address them?\u201d"
  },
  {
    "chunk": "In my limited experience I\u2019ve dealt with long-lived network partitions in a single data\ncenter (DC), PDU [power distribution unit] failures, switch failures, accidental power\ncycles of whole racks, whole-DC backbone failures, whole-DC power failures, and a\nhypoglycemic driver smashing his Ford pickup truck into a DC\u2019s HVAC [heating, ven\u2010\ntilation, and air conditioning] system. And I\u2019m not even an ops guy.\n\u2014Coda Hale\nIn a distributed system, there may well be some parts of the system that are broken in\nsome unpredictable way, even though other parts of the system are working fine. This\nis known as a partial failure . The difficulty is that partial failures are nondeterministic :\nif you try to do anything involving multiple nodes and the network, it may sometimes\nwork and sometimes unpredictably fail. As we shall see, you may not even know\nwhether something succeeded or not, as the time it takes for a message to travel\nacross a network is also nondeterministic!\nThis nondeterminism and possibility of partial failures is what makes distributed sys\u2010\ntems hard to work with [ 5].\nCloud Computing and Supercomputing\nThere is a spectrum of philosophies on how to build large-scale computing systems:\n\u2022At one end of the scale is the field of high-performance computing  (HPC). Super\u2010\ncomputers with thousands of CPUs are typically used for computationally inten\u2010\nsive scientific computing tasks, such as weather forecasting or molecular\ndynamics (simulating the movement of atoms and molecules).\n\u2022At the other extreme is cloud computing , which is not very well defined [ 6] but is\noften associated with multi-tenant datacenters, commodity computers connected\nwith an IP network (often Ethernet), elastic/on-demand resource allocation, and\nmetered billing.\n\u2022Traditional enterprise datacenters lie somewhere between these extremes.\nWith these philosophies come very different approaches to handling faults. In a\nsupercomputer, a job typically checkpoints the state of its computation to durable\nstorage from time to time. If one node fails, a common solution is to simply stop the\nentire cluster workload. After the faulty node is repaired, the computation is restarted\nfrom the last checkpoint [ 7, 8]. Thus, a supercomputer is more like a single-node\ncomputer than a distributed system: it deals with partial failure by letting it escalate\ninto total failure\u2014if any part of the system fails, just let everything crash (like a kernel\npanic on a single machine).\nIn this book we focus on systems for implementing internet services, which usually\nlook very different from supercomputers:\nFaults and Partial Failures | 275\n",
    "summary": "The text highlights the challenges of partial failures in distributed systems, particularly in contrast to the single-node approach of supercomputers, and emphasizes the need for robust fault tolerance strategies.",
    "sample_answer": "\u201cOkay, this immediately highlights a key tension in designing systems for internet services versus HPC environments. The supercomputer approach\u2014checkpointing and simply restarting the entire cluster after a failure\u2014is a classic example of handling partial failures by escalating to total failure, which isn\u2019t feasible for dynamic, scalable internet services. We need strategies that can tolerate individual node failures without bringing down the entire system, which is why concepts like replication and consensus algorithms are so important, as well as techniques for eventual consistency.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say you\u2019re designing a system to serve user profiles. How would you approach designing for partial failures, considering the scenario described in this text \u2013 a single node failing within your datacenter? What architectural considerations would you prioritize, and why?\u201d"
  },
  {
    "chunk": "\u2022Many internet-related applications are online , in the sense that they need to be\nable to serve users with low latency at any time. Making the service unavailable\u2014\nfor example, stopping the cluster for repair\u2014is not acceptable. In contrast, off\u2010\nline (batch) jobs like weather simulations can be stopped and restarted with fairly\nlow impact.\n\u2022Supercomputers are typically built from specialized hardware, where each node\nis quite reliable, and nodes communicate through shared memory and remote\ndirect memory access (RDMA). On the other hand, nodes in cloud services are\nbuilt from commodity machines, which can provide equivalent performance at\nlower cost due to economies of scale, but also have higher failure rates.\n\u2022Large datacenter networks are often based on IP and Ethernet, arranged in Clos\ntopologies to provide high bisection bandwidth [ 9]. Supercomputers often use\nspecialized network topologies, such as multi-dimensional meshes and toruses\n[10], which yield better performance for HPC workloads with known communi\u2010\ncation patterns.\n\u2022The bigger a system gets, the more likely it is that one of its components is bro\u2010\nken. Over time, broken things get fixed and new things break, but in a system\nwith thousands of nodes, it is reasonable to assume that something  is always bro\u2010\nken [ 7]. When the error handling strategy consists of simply giving up, a large\nsystem can end up spending a lot of its time recovering from faults rather than\ndoing useful work [ 8].\n\u2022If the system can tolerate failed nodes and still keep working as a whole, that is a\nvery useful feature for operations and maintenance: for example, you can per\u2010\nform a rolling upgrade (see Chapter 4 ), restarting one node at a time, while the\nservice continues serving users without interruption. In cloud environments, if\none virtual machine is not performing well, you can just kill it and request a new\none (hoping that the new one will be faster).\n\u2022In a geographically distributed deployment (keeping data geographically close to\nyour users to reduce access latency), communication most likely goes over the\ninternet, which is slow and unreliable compared to local networks. Supercom\u2010\nputers generally assume that all of their nodes are close together.\nIf we want to make distributed systems work, we must accept the possibility of partial\nfailure and build fault-tolerance mechanisms into the software. In other words, we\nneed to build a reliable system from unreliable components. (As discussed in \u201cRelia\u2010\nbility\u201d  on page 6, there is no such thing as perfect reliability, so we\u2019ll need to under\u2010\nstand the limits of what we can realistically promise.)\nEven in smaller systems consisting of only a few nodes, it\u2019s important to think about\npartial failure. In a small system, it\u2019s quite likely that most of the components are\nworking correctly most of the time. However, sooner or later, some part of the system\n276 | Chapter 8: The Trouble with Distributed Systems\n",
    "summary": "The text highlights the challenges of designing for low-latency, always-available systems versus batch processing, and the trade-offs involved in using specialized vs. commodity hardware.",
    "sample_answer": "\u201cOkay, let\u2019s analyze this. The core challenge here is the difference between building a low-latency, always-available service \u2013 like a real-time recommendation engine \u2013 versus something like a weather simulation. The fact that internet-related applications require low latency at all times means we\u2019re dealing with a fundamentally different design constraint than, say, a batch job.  Furthermore, the shift from supercomputers built on specialized hardware to cloud services utilizing commodity machines introduces a higher failure rate, emphasizing the need for robust fault tolerance. This aligns with the CAP theorem; in a geographically distributed system, we might have to sacrifice consistency for availability, but we still need to design for the inherent unreliability of network communications.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you\u2019d prioritize availability over strict data consistency in a distributed system. How would you design the system to handle potential network failures and node outages, and what considerations would you make regarding the trade-off between consistency and availability?\u201d"
  },
  {
    "chunk": "will become faulty, and the software will have to somehow handle it. The fault han\u2010\ndling must be part of the software design, and you (as operator of the software) need\nto know what behavior to expect from the software in the case of a fault.\nIt would be unwise to assume that faults are rare and simply hope for the best. It is\nimportant to consider a wide range of possible faults\u2014even fairly unlikely ones\u2014and\nto artificially create such situations in your testing environment to see what happens.\nIn distributed systems, suspicion, pessimism, and paranoia pay off.\nBuilding a Reliable System from Unreliable Components\nYou may wonder whether this makes any sense\u2014intuitively it may seem like a system\ncan only be as reliable as its least reliable component (its weakest link ). This is not the\ncase: in fact, it is an old idea in computing to construct a more reliable system from a\nless reliable underlying base [ 11]. For example:\n\u2022Error-correcting codes allow digital data to be transmitted accurately across a\ncommunication channel that occasionally gets some bits wrong, for example due\nto radio interference on a wireless network [ 12].\n\u2022IP (the Internet Protocol) is unreliable: it may drop, delay, duplicate, or reorder\npackets. TCP (the Transmission Control Protocol) provides a more reliable\ntransport layer on top of IP: it ensures that missing packets are retransmitted,\nduplicates are eliminated, and packets are reassembled into the order in which\nthey were sent.\nAlthough the system can be more reliable than its underlying parts, there is always a\nlimit to how much more reliable it can be. For example, error-correcting codes can\ndeal with a small number of single-bit errors, but if your signal is swamped by inter\u2010\nference, there is a fundamental limit to how much data you can get through your\ncommunication channel [ 13]. TCP can hide packet loss, duplication, and reordering\nfrom you, but it cannot magically remove delays in the network.\nAlthough the more reliable higher-level system is not perfect, it\u2019s still useful because it\ntakes care of some of the tricky low-level faults, and so the remaining faults are usu\u2010\nally easier to reason about and deal with. We will explore this matter further in \u201cThe\nend-to-end argument\u201d on page 519 . \nUnreliable Networks\nAs discussed in the introduction to Part II , the distributed systems we focus on in this\nbook are shared-nothing systems : i.e., a bunch of machines connected by a network.\nThe network is the only way those machines can communicate\u2014we assume that each\nUnreliable Networks | 277\n",
    "summary": "The text emphasizes building reliable systems from unreliable components, leveraging techniques like error-correcting codes and TCP to handle network faults.",
    "sample_answer": "\u201cOkay, so the core principle here is that distributed systems are inherently unreliable due to the network. We need to build redundancy and fault tolerance at multiple layers, not just relying on a single component.  For instance, using TCP on top of IP handles network issues like packet loss and reordering, shielding the application layer from those low-level failures.  This aligns with the end-to-end argument \u2013 we\u2019re building higher-level abstractions that gracefully manage the underlying network\u2019s unreliability, allowing us to focus on more robust system design.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where you\u2019ve had to design a system to handle network unreliability. What specific strategies did you employ, and how did you consider the potential trade-offs between complexity and resilience?\u201d"
  },
  {
    "chunk": "machine has its own memory and disk, and one machine cannot access another\nmachine\u2019s memory or disk (except by making requests to a service over the network).\nShared-nothing is not the only way of building systems, but it has become the domi\u2010\nnant approach for building internet services, for several reasons: it\u2019s comparatively\ncheap because it requires no special hardware, it can make use of commoditized\ncloud computing services, and it can achieve high reliability through redundancy\nacross multiple geographically distributed datacenters.\nThe internet and most internal networks in datacenters (often Ethernet) are asyn\u2010\nchronous packet networks . In this kind of network, one node can send a message (a\npacket) to another node, but the network gives no guarantees as to when it will arrive,\nor whether it will arrive at all. If you send a request and expect a response, many\nthings could go wrong (some of which are illustrated in Figure 8-1 ):\n1.Your request may have been lost (perhaps someone unplugged a network cable).\n2.Your request may be waiting in a queue and will be delivered later (perhaps the\nnetwork or the recipient is overloaded).\n3.The remote node may have failed (perhaps it crashed or it was powered down).\n4.The remote node may have temporarily stopped responding (perhaps it is expe\u2010\nriencing a long garbage collection pause; see \u201cProcess Pauses\u201d on page 295 ), but it\nwill start responding again later.\n5.The remote node may have processed your request, but the response has been\nlost on the network (perhaps a network switch has been misconfigured).\n6.The remote node may have processed your request, but the response has been\ndelayed and will be delivered later (perhaps the network or your own machine is\noverloaded).\nFigure 8-1. If you send a request and don\u2019t get a response, it\u2019s not possible to distinguish\nwhether (a) the request was lost, (b) the remote node is down, or (c) the response was\nlost.\n278 | Chapter 8: The Trouble with Distributed Systems\n",
    "summary": "This text describes the challenges of building distributed systems due to the asynchronous, unreliable nature of packet networks and highlights the importance of redundancy and fault tolerance.",
    "sample_answer": "\u201cThis excerpt really underscores the core difficulties in designing distributed systems. The asynchronous, packet-based networks, like Ethernet, mean we can\u2019t rely on immediate responses \u2013 a request might be lost, delayed, or the remote node might be unavailable. To address this, we need to implement redundancy across multiple datacenters to ensure high availability, mirroring the challenges of understanding whether a failure occurred on our side, the remote side, or the network itself.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re building a service that needs to reliably process user data. Considering the asynchronous, unreliable nature of packet networks, what architectural strategies \u2013 beyond simply replicating the service \u2013 would you employ to achieve high availability and fault tolerance?\u201d"
  },
  {
    "chunk": "The sender can\u2019t even tell whether the packet was delivered: the only option is for the\nrecipient to send a response message, which may in turn be lost or delayed. These\nissues are indistinguishable in an asynchronous network: the only information you\nhave is that you haven\u2019t received a response yet. If you send a request to another node\nand don\u2019t receive a response, it is impossible  to tell why.\nThe usual way of handling this issue is a timeout : after some time you give up waiting\nand assume that the response is not going to arrive. However, when a timeout occurs,\nyou still don\u2019t know whether the remote node got your request or not (and if the\nrequest is still queued somewhere, it may still be delivered to the recipient, even if the\nsender has given up on it).\nNetwork Faults in Practice\nWe have been building computer networks for decades\u2014one might hope that by now\nwe would have figured out how to make them reliable. However, it seems that we\nhave not yet succeeded.\nThere are some systematic studies, and plenty of anecdotal evidence, showing that\nnetwork problems can be surprisingly common, even in controlled environments like\na datacenter operated by one company [ 14]. One study in a medium-sized datacenter\nfound about 12 network faults per month, of which half disconnected a single\nmachine, and half disconnected an entire rack [ 15]. Another study measured the fail\u2010\nure rates of components like top-of-rack switches, aggregation switches, and load bal\u2010\nancers [ 16]. It found that adding redundant networking gear doesn\u2019t reduce faults as\nmuch as you might hope, since it doesn\u2019t guard against human error (e.g., misconfig\u2010\nured switches), which is a major cause of outages.\nPublic cloud services such as EC2 are notorious for having frequent transient net\u2010\nwork glitches [ 14], and well-managed private datacenter networks can be stabler\nenvironments. Nevertheless, nobody is immune from network problems: for exam\u2010\nple, a problem during a software upgrade for a switch could trigger a network topol\u2010\nogy reconfiguration, during which network packets could be delayed for more than a\nminute [ 17]. Sharks might bite undersea cables and damage them [ 18]. Other surpris\u2010\ning faults include a network interface that sometimes drops all inbound packets but\nsends outbound packets successfully [ 19]: just because a network link works in one\ndirection doesn\u2019t guarantee it\u2019s also working in the opposite direction.\nNetwork partitions\nWhen one part of the network is cut off from the rest due to a net\u2010\nwork fault, that is sometimes called a network partition  or netsplit .\nIn this book we\u2019ll generally stick with the more general term net\u2010\nwork fault , to avoid confusion with partitions (shards) of a storage\nsystem, as discussed in Chapter 6 .\nUnreliable Networks | 279\n",
    "summary": "The text highlights the inherent unreliability of networks, emphasizing the need for timeout mechanisms and acknowledging the prevalence of network faults, including partitions and human error.",
    "sample_answer": "\u201cThis excerpt really underscores the importance of designing for failure in distributed systems. The reliance on timeouts, as you\u2019ve seen, is a common strategy to handle the unreliability of asynchronous networks, but it\u2019s crucial to understand that a timeout doesn\u2019t resolve the underlying issue \u2013 we\u2019re still assuming a failure.  Furthermore, the data regarding network faults, like the 12 per month observed in a datacenter, demonstrates the need for redundancy and monitoring, perhaps leveraging techniques to proactively detect and mitigate disruptions, as well as acknowledging the significant role of human error.  Considering network partitions \u2013 \u2018netsplits\u2019 \u2013 alongside the broader concept of dealing with unreliability is central to building resilient architectures.\u201d",
    "potential_interview_question": "\u201cDescribe a system design scenario where you need to build a service that relies on communication with an external, unreliable network. What strategies would you employ to handle network failures and ensure eventual consistency, and how would you monitor the system\u2019s health in this environment?\u201d"
  },
  {
    "chunk": "Even if network faults are rare in your environment, the fact that faults can occur\nmeans that your software needs to be able to handle them. Whenever any communi\u2010\ncation happens over a network, it may fail\u2014there is no way around it.\nIf the error handling of network faults is not defined and tested, arbitrarily bad things\ncould happen: for example, the cluster could become deadlocked and permanently\nunable to serve requests, even when the network recovers [ 20], or it could even delete\nall of your data [ 21]. If software is put in an unanticipated situation, it may do arbi\u2010\ntrary unexpected things.\nHandling network faults doesn\u2019t necessarily mean tolerating  them: if your network is\nnormally fairly reliable, a valid approach may be to simply show an error message to\nusers while your network is experiencing problems. However, you do need to know\nhow your software reacts to network problems and ensure that the system can\nrecover from them. It may make sense to deliberately trigger network problems and\ntest the system\u2019s response (this is the idea behind Chaos Monkey; see \u201cReliability\u201d on\npage 6 ).\nDetecting Faults\nMany systems need to automatically detect faulty nodes. For example:\n\u2022A load balancer needs to stop sending requests to a node that is dead (i.e., take it\nout of rotation ).\n\u2022In a distributed database with single-leader replication, if the leader fails, one of\nthe followers needs to be promoted to be the new leader (see \u201cHandling Node\nOutages\u201d on page 156 ).\nUnfortunately, the uncertainty about the network makes it difficult to tell whether a\nnode is working or not. In some specific circumstances you might get some feedback\nto explicitly tell you that something is not working:\n\u2022If you can reach the machine on which the node should be running, but no pro\u2010\ncess is listening on the destination port (e.g., because the process crashed), the\noperating system will helpfully close or refuse TCP connections by sending a RST\nor FIN packet in reply. However, if the node crashed while it was handling your\nrequest, you have no way of knowing how much data was actually processed by\nthe remote node [ 22].\n\u2022If a node process crashed (or was killed by an administrator) but the node\u2019s oper\u2010\nating system is still running, a script can notify other nodes about the crash so\nthat another node can take over quickly without having to wait for a timeout to\nexpire. For example, HBase does this [ 23].\n280 | Chapter 8: The Trouble with Distributed Systems\n",
    "summary": "The text emphasizes the importance of fault tolerance and detection mechanisms in distributed systems, particularly concerning network failures and node outages.",
    "sample_answer": "\u201cOkay, this is a fundamental point about building reliable distributed systems. The core issue here is acknowledging that network faults *will* occur, regardless of their frequency. This necessitates designing for fault tolerance, which isn\u2019t just about gracefully handling failures, but also about actively detecting them \u2013 like HBase does, where a script notifies other nodes about a crash. We can leverage techniques like single-leader replication, where a follower node can be promoted to leader upon failure \u2013 mirroring what we see in systems like Kafka, and ensuring data consistency despite the potential for network disruptions.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you\u2019d need to detect a node failure in a distributed system. What detection mechanisms would you employ, and why are they crucial for maintaining system availability?\u201d"
  },
  {
    "chunk": "\u2022If you have access to the management interface of the network switches in your\ndatacenter, you can query them to detect link failures at a hardware level (e.g., if\nthe remote machine is powered down). This option is ruled out if you\u2019re con\u2010\nnecting via the internet, or if you\u2019re in a shared datacenter with no access to the\nswitches themselves, or if you can\u2019t reach the management interface due to a net\u2010\nwork problem.\n\u2022If a router is sure that the IP address you\u2019re trying to connect to is unreachable, it\nmay reply to you with an ICMP Destination Unreachable packet. However, the\nrouter doesn\u2019t have a magic failure detection capability either\u2014it is subject to the\nsame limitations as other participants of the network.\nRapid feedback about a remote node being down is useful, but you can\u2019t count on it.\nEven if TCP acknowledges that a packet was delivered, the application may have\ncrashed before handling it. If you want to be sure that a request was successful, you\nneed a positive response from the application itself [ 24].\nConversely, if something has gone wrong, you may get an error response at some\nlevel of the stack, but in general you have to assume that you will get no response at\nall. You can retry a few times (TCP retries transparently, but you may also retry at the\napplication level), wait for a timeout to elapse, and eventually declare the node dead if\nyou don\u2019t hear back within the timeout. \nTimeouts and Unbounded Delays\nIf a timeout is the only sure way of detecting a fault, then how long should the time\u2010\nout be? There is unfortunately no simple answer.\nA long timeout means a long wait until a node is declared dead (and during this time,\nusers may have to wait or see error messages). A short timeout detects faults faster,\nbut carries a higher risk of incorrectly declaring a node dead when in fact it has only\nsuffered a temporary slowdown (e.g., due to a load spike on the node or the network).\nPrematurely declaring a node dead is problematic: if the node is actually alive and in\nthe middle of performing some action (for example, sending an email), and another\nnode takes over, the action may end up being performed twice. We will discuss this\nissue in more detail in \u201cKnowledge, Truth, and Lies\u201d on page 300, and in Chapters 9\nand 11.\nWhen a node is declared dead, its responsibilities need to be transferred to other\nnodes, which places additional load on other nodes and the network. If the system is\nalready struggling with high load, declaring nodes dead prematurely can make the\nproblem worse. In particular, it could happen that the node actually wasn\u2019t dead but\nonly slow to respond due to overload; transferring its load to other nodes can cause a\ncascading failure (in the extreme case, all nodes declare each other dead, and every\u2010\nthing stops working).\nUnreliable Networks | 281\n",
    "summary": "This section discusses the challenges of detecting failures in unreliable networks, highlighting the trade-offs between timeout durations and the risk of false positives, alongside the impact of declaring a node dead on system load.",
    "sample_answer": "\u201cOkay, so when designing for unreliable networks, we need to accept that absolute failure detection isn't possible. The key is to balance the risk of a false positive\u2014incorrectly declaring a node down\u2014with the potential for delay if we wait too long. We\u2019d likely employ timeouts, but choosing the right timeout value is critical; a short timeout increases the chance of falsely declaring a node dead, potentially leading to duplicated work or cascading failures. We need to consider that a brief network slowdown might be misinterpreted as a complete outage. This reinforces the importance of robust monitoring and alerting, not just relying on timeout detection.\u201d",
    "potential_interview_question": "\u201cDescribe the challenges of designing a system that needs to detect failures in an unreliable network. What factors should a data engineer consider when determining the appropriate timeout values for requests, and how could these choices impact the system\u2019s overall reliability?\u201d"
  },
  {
    "chunk": "Imagine a fictitious system with a network that guaranteed a maximum delay for\npackets\u2014every packet is either delivered within some time d, or it is lost, but delivery\nnever takes longer than d. Furthermore, assume that you can guarantee that a non-\nfailed node always handles a request within some time r. In this case, you could guar\u2010\nantee that every successful request receives a response within time 2 d + r\u2014and if you\ndon\u2019t receive a response within that time, you know that either the network or the\nremote node is not working. If this was true, 2 d + r would be a reasonable timeout to\nuse.\nUnfortunately, most systems we work with have neither of those guarantees: asyn\u2010\nchronous networks have unbounded delays  (that is, they try to deliver packets as\nquickly as possible, but there is no upper limit on the time it may take for a packet to\narrive), and most server implementations cannot guarantee that they can handle\nrequests within some maximum time (see \u201cResponse time guarantees\u201d  on page 298).\nFor failure detection, it\u2019s not sufficient for the system to be fast most of the time: if\nyour timeout is low, it only takes a transient spike in round-trip times to throw the\nsystem off-balance.\nNetwork congestion and queueing\nWhen driving a car, travel times on road networks often vary most due to traffic con\u2010\ngestion. Similarly, the variability of packet delays on computer networks is most often\ndue to queueing [ 25]:\n\u2022If several different nodes simultaneously try to send packets to the same destina\u2010\ntion, the network switch must queue them up and feed them into the destination\nnetwork link one by one (as illustrated in Figure 8-2 ). On a busy network link, a\npacket may have to wait a while until it can get a slot (this is called network con\u2010\ngestion ). If there is so much incoming data that the switch queue fills up, the\npacket is dropped, so it needs to be resent\u2014even though the network is function\u2010\ning fine.\n\u2022When a packet reaches the destination machine, if all CPU cores are currently\nbusy, the incoming request from the network is queued by the operating system\nuntil the application is ready to handle it. Depending on the load on the machine,\nthis may take an arbitrary length of time.\n\u2022In virtualized environments, a running operating system is often paused for tens\nof milliseconds while another virtual machine uses a CPU core. During this time,\nthe VM cannot consume any data from the network, so the incoming data is\nqueued (buffered) by the virtual machine monitor [ 26], further increasing the\nvariability of network delays.\n\u2022TCP performs flow control  (also known as congestion avoidance  or backpressure ),\nin which a node limits its own rate of sending in order to avoid overloading a\n282 | Chapter 8: The Trouble with Distributed Systems\n",
    "summary": "This chunk highlights the challenges of designing systems with unreliable networks and queues, emphasizing the impact of latency variability on response times and the need for robust timeout strategies.",
    "sample_answer": "\u201cOkay, this is a classic problem in distributed systems design. The key takeaway here is that relying solely on fast average response times isn\u2019t sufficient; we need to account for network latency variability. As illustrated, queuing at network switches and within operating systems introduces unpredictable delays. This is why a simple timeout based on an average network round-trip time won\u2019t be effective; a transient spike in latency can trigger a false alarm, leading to unnecessary system disruption. We need to implement timeouts that incorporate the expected latency *variation*, potentially using a statistical approach to estimate the upper bound on delay, and incorporate the TCP flow control mechanism to manage the queue at the source.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system that needs to reliably retrieve data from a remote server. The network connection is inherently unreliable, leading to variable delays. How would you approach setting a timeout value for a request to this server, and what considerations would you take into account to ensure the system remains resilient to network fluctuations?\u201d"
  },
  {
    "chunk": "network link or the receiving node [ 27]. This means additional queueing at the\nsender before the data even enters the network.\nFigure 8-2. If several machines send network traffic to the same destination, its switch\nqueue can fill up. Here, ports 1, 2, and 4 are all trying to send packets to port 3.\nMoreover, TCP considers a packet to be lost if it is not acknowledged within some\ntimeout (which is calculated from observed round-trip times), and lost packets are\nautomatically retransmitted. Although the application does not see the packet loss\nand retransmission, it does see the resulting delay (waiting for the timeout to expire,\nand then waiting for the retransmitted packet to be acknowledged).\nTCP Versus UDP\nSome latency-sensitive applications, such as videoconferencing and Voice over IP\n(VoIP), use UDP rather than TCP. It\u2019s a trade-off between reliability and variability\nof delays: as UDP does not perform flow control and does not retransmit lost packets,\nit avoids some of the reasons for variable network delays (although it is still suscepti\u2010\nble to switch queues and scheduling delays).\nUDP is a good choice in situations where delayed data is worthless. For example, in a\nVoIP phone call, there probably isn\u2019t enough time to retransmit a lost packet before\nits data is due to be played over the loudspeakers. In this case, there\u2019s no point in\nretransmitting the packet\u2014the application must instead fill the missing packet\u2019s time\nslot with silence (causing a brief interruption in the sound) and move on in the\nstream. The retry happens at the human layer instead. (\u201cCould you repeat that please?\nThe sound just cut out for a moment.\u201d)\nAll of these factors contribute to the variability of network delays. Queueing delays\nhave an especially wide range when a system is close to its maximum capacity: a sys\u2010\nUnreliable Networks | 283\n",
    "summary": "The text discusses network delays, queuing, and the trade-offs between TCP and UDP, highlighting the impact of network variability on application performance.",
    "sample_answer": "\u201cOkay, let's consider how network delays impact our system design. We\u2019re seeing here that queuing delays \u2013 particularly at the sender side \u2013 are a significant source of variability. This isn't just a simple delay; it\u2019s because TCP\u2019s flow control and retransmission mechanisms respond to packet loss, creating a feedback loop that amplifies the effect.  The choice between TCP and UDP is crucial; while TCP offers reliability, the retransmission process introduces latency that can be unacceptable in real-time applications like VoIP, demonstrating a fundamental cost/performance trade-off.\u201d",
    "potential_interview_question": "\u201cImagine we're building a real-time messaging system.  How would you approach latency considerations when designing the protocol, and specifically, what factors would influence your decision between using TCP and UDP, and how might you monitor and mitigate the potential impacts of network variability on the user experience?\u201d"
  },
  {
    "chunk": "tem with plenty of spare capacity can easily drain queues, whereas in a highly utilized\nsystem, long queues can build up very quickly.\nIn public clouds and multi-tenant datacenters, resources are shared among many\ncustomers: the network links and switches, and even each machine\u2019s network inter\u2010\nface and CPUs (when running on virtual machines), are shared. Batch workloads\nsuch as MapReduce (see Chapter 10 ) can easily saturate network links. As you have\nno control over or insight into other customers\u2019 usage of the shared resources, net\u2010\nwork delays can be highly variable if someone near you (a noisy neighbor ) is using a\nlot of resources [ 28, 29].\nIn such environments, you can only choose timeouts experimentally: measure the\ndistribution of network round-trip times over an extended period, and over many\nmachines, to determine the expected variability of delays. Then, taking into account\nyour application\u2019s characteristics, you can determine an appropriate trade-off\nbetween failure detection delay and risk of premature timeouts.\nEven better, rather than using configured constant timeouts, systems can continually\nmeasure response times and their variability ( jitter ), and automatically adjust time\u2010\nouts according to the observed response time distribution. This can be done with a\nPhi Accrual failure detector [ 30], which is used for example in Akka and Cassandra\n[31]. TCP retransmission timeouts also work similarly [ 27].\nSynchronous Versus Asynchronous Networks\nDistributed systems would be a lot simpler if we could rely on the network to deliver\npackets with some fixed maximum delay, and not to drop packets. Why can\u2019t we\nsolve this at the hardware level and make the network reliable so that the software\ndoesn\u2019t need to worry about it?\nTo answer this question, it\u2019s interesting to compare datacenter networks to the tradi\u2010\ntional fixed-line telephone network (non-cellular, non-VoIP), which is extremely\nreliable: delayed audio frames and dropped calls are very rare. A phone call requires a\nconstantly low end-to-end latency and enough bandwidth to transfer the audio sam\u2010\nples of your voice. Wouldn\u2019t it be nice to have similar reliability and predictability in\ncomputer networks?\nWhen you make a call over the telephone network, it establishes a circuit : a fixed,\nguaranteed amount of bandwidth is allocated for the call, along the entire route\nbetween the two callers. This circuit remains in place until the call ends [ 32]. For\nexample, an ISDN network runs at a fixed rate of 4,000 frames per second. When a\ncall is established, it is allocated 16 bits of space within each frame (in each direction).\nThus, for the duration of the call, each side is guaranteed to be able to send exactly 16\nbits of audio data every 250 microseconds [ 33, 34].\n284 | Chapter 8: The Trouble with Distributed Systems\n",
    "summary": "The chunk discusses the challenges of network variability in distributed systems, particularly concerning timeouts and the need for adaptive strategies.",
    "sample_answer": "\u201cThe key takeaway here is that in shared cloud environments, network latency and jitter are highly variable, posing a significant challenge for distributed systems. We need to move beyond fixed timeouts, which can lead to premature failures. A robust solution would involve continuously monitoring response times and their distribution, similar to how a system like Akka or Cassandra uses a Phi Accrual failure detector, dynamically adjusting timeouts based on observed jitter.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where a fixed timeout mechanism might be problematic in a distributed system. How would you design a solution to handle network variability, referencing specific techniques or algorithms that could be employed?\u201d"
  },
  {
    "chunk": "ii. Except perhaps for an occasional keepalive packet, if TCP keepalive is enabled.\niii.Asynchronous Transfer Mode  (ATM) was a competitor to Ethernet in the 1980s [ 32], but it didn\u2019t gain\nmuch adoption outside of telephone network core switches. It has nothing to do with automatic teller\nmachines (also known as cash machines), despite sharing an acronym. Perhaps, in some parallel universe, the\ninternet is based on something like ATM\u2014in that universe, internet video calls are probably a lot more relia\u2010\nble than they are in ours, because they don\u2019t suffer from dropped and delayed packets.This kind of network is synchronous : even as data passes through several routers, it\ndoes not suffer from queueing, because the 16 bits of space for the call have already\nbeen reserved in the next hop of the network. And because there is no queueing, the\nmaximum end-to-end latency of the network is fixed. We call this a bounded delay .\nCan we not simply make network delays predictable?\nNote that a circuit in a telephone network is very different from a TCP connection: a\ncircuit is a fixed amount of reserved bandwidth which nobody else can use while the\ncircuit is established, whereas the packets of a TCP connection opportunistically use\nwhatever network bandwidth is available. You can give TCP a variable-sized block of\ndata (e.g., an email or a web page), and it will try to transfer it in the shortest time\npossible. While a TCP connection is idle, it doesn\u2019t use any bandwidth.ii\nIf datacenter networks and the internet were circuit-switched networks, it would be\npossible to establish a guaranteed maximum round-trip time when a circuit was set\nup. However, they are not: Ethernet and IP are packet-switched protocols, which suf\u2010\nfer from queueing and thus unbounded delays in the network. These protocols do\nnot have the concept of a circuit.\nWhy do datacenter networks and the internet use packet switching? The answer is\nthat they are optimized for bursty traffic . A circuit is good for an audio or video call,\nwhich needs to transfer a fairly constant number of bits per second for the duration\nof the call. On the other hand, requesting a web page, sending an email, or transfer\u2010\nring a file doesn\u2019t have any particular bandwidth requirement\u2014we just want it to\ncomplete as quickly as possible.\nIf you wanted to transfer a file over a circuit, you would have to guess a bandwidth\nallocation. If you guess too low, the transfer is unnecessarily slow, leaving network\ncapacity unused. If you guess too high, the circuit cannot be set up (because the net\u2010\nwork cannot allow a circuit to be created if its bandwidth allocation cannot be guar\u2010\nanteed). Thus, using circuits for bursty data transfers wastes network capacity and\nmakes transfers unnecessarily slow. By contrast, TCP dynamically adapts the rate of\ndata transfer to the available network capacity.\nThere have been some attempts to build hybrid networks that support both circuit\nswitching and packet switching, such as ATM.iii InfiniBand has some similarities [ 35]:\nit implements end-to-end flow control at the link layer, which reduces the need for\nUnreliable Networks | 285\n",
    "summary": "The text discusses the differences between circuit-switched and packet-switched networks, highlighting the impact of packet switching on network latency and the optimization for bursty traffic.",
    "sample_answer": "\u201cThis excerpt really drives home the importance of understanding the underlying network characteristics when designing data delivery systems. The fundamental difference between circuit-switched (like ATM) and packet-switched networks \u2013 specifically packet switching\u2019s tolerance for bursty traffic \u2013 directly impacts latency and the need for mechanisms like TCP\u2019s dynamic rate adaptation.  If we were designing a system that required predictable, bounded delays \u2013 like a real-time video stream \u2013 we\u2019d need to consider a circuit-switched approach, though the cost and complexity of managing dedicated bandwidth would be significant.  Conversely, systems like web traffic or file transfers, which exhibit bursty traffic patterns, benefit greatly from the flexibility and efficiency of packet switching and protocols like TCP.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you might choose a circuit-switched network over a packet-switched network for a data application. What are the key trade-offs you would consider?\u201d"
  },
  {
    "chunk": "queueing in the network, although it can still suffer from delays due to link conges\u2010\ntion [ 36]. With careful use of quality of service  (QoS, prioritization and scheduling of\npackets) and admission control  (rate-limiting senders), it is possible to emulate circuit\nswitching on packet networks, or provide statistically bounded delay [ 25, 32].\nLatency and Resource Utilization\nMore generally, you can think of variable delays as a consequence of dynamic\nresource partitioning.\nSay you have a wire between two telephone switches that can carry up to 10,000\nsimultaneous calls. Each circuit that is switched over this wire occupies one of those\ncall slots. Thus, you can think of the wire as a resource that can be shared by up to\n10,000 simultaneous users. The resource is divided up in a static  way: even if you\u2019re\nthe only call on the wire right now, and all other 9,999 slots are unused, your circuit is\nstill allocated the same fixed amount of bandwidth as when the wire is fully utilized.\nBy contrast, the internet shares network bandwidth dynamically . Senders push and\njostle with each other to get their packets over the wire as quickly as possible, and the\nnetwork switches decide which packet to send (i.e., the bandwidth allocation) from\none moment to the next. This approach has the downside of queueing, but the advan\u2010\ntage is that it maximizes utilization of the wire. The wire has a fixed cost, so if you\nutilize it better, each byte you send over the wire is cheaper.\nA similar situation arises with CPUs: if you share each CPU core dynamically\nbetween several threads, one thread sometimes has to wait in the operating system\u2019s\nrun queue while another thread is running, so a thread can be paused for varying\nlengths of time. However, this utilizes the hardware better than if you allocated a\nstatic number of CPU cycles to each thread (see \u201cResponse time guarantees\u201d on page\n298). Better hardware utilization is also a significant motivation for using virtual\nmachines.\nLatency guarantees are achievable in certain environments, if resources are statically\npartitioned (e.g., dedicated hardware and exclusive bandwidth allocations). However,\nit comes at the cost of reduced utilization\u2014in other words, it is more expensive. On\nthe other hand, multi-tenancy with dynamic resource partitioning provides better\nutilization, so it is cheaper, but it has the downside of variable delays.\nVariable delays in networks are not a law of nature, but simply the result of a cost/\nbenefit trade-off. \n286 | Chapter 8: The Trouble with Distributed Systems\n",
    "summary": "The text discusses the trade-offs between static resource allocation (leading to latency guarantees) and dynamic resource partitioning (maximizing utilization but introducing variable delays) in network and CPU environments.",
    "sample_answer": "\u201cThis highlights a core system design consideration \u2013 achieving latency guarantees often necessitates static resource allocation, like dedicated hardware or exclusive bandwidth, which, while predictable, severely limits overall utilization. Conversely, dynamic resource partitioning, such as multi-tenancy or shared CPU cores, maximizes utilization but introduces variable delays due to contention, illustrating the CAP theorem\u2019s impact at the operational level. This demonstrates the importance of understanding the inherent trade-offs between throughput and latency, and choosing the appropriate architecture based on the application\u2019s needs.\u201d",
    "potential_interview_question": "\u201cImagine you are designing a real-time messaging system.  Describe the key architectural decisions you would make, specifically considering the trade-offs between guaranteeing low latency and maximizing throughput.  How would you approach resource allocation, and what potential challenges might you anticipate, relating it to concepts like dynamic resource partitioning and the CAP theorem?\u201d"
  },
  {
    "chunk": "iv. Peering agreements between internet service providers and the establishment of routes through the Bor\u2010\nder Gateway Protocol (BGP), bear closer resemblance to circuit switching than IP itself. At this level, it is pos\u2010\nsible to buy dedicated bandwidth. However, internet routing operates at the level of networks, not individual\nconnections between hosts, and at a much longer timescale.However, such quality of service is currently not enabled in multi-tenant datacenters\nand public clouds, or when communicating via the internet.iv Currently deployed\ntechnology does not allow us to make any guarantees about delays or reliability of the\nnetwork: we have to assume that network congestion, queueing, and unbounded\ndelays will happen. Consequently, there\u2019s no \u201ccorrect\u201d value for timeouts\u2014they need\nto be determined experimentally.\nUnreliable Clocks\nClocks and time are important. Applications depend on clocks in various ways to\nanswer questions like the following:\n1.Has this request timed out yet?\n2.What\u2019s the 99th percentile response time of this service?\n3.How many queries per second did this service handle on average in the last five\nminutes?\n4.How long did the user spend on our site?\n5.When was this article published?\n6.At what date and time should the reminder email be sent?\n7.When does this cache entry expire?\n8.What is the timestamp on this error message in the log file?\nExamples 1\u20134 measure durations  (e.g., the time interval between a request being sent\nand a response being received), whereas examples 5\u20138 describe points in time  (events\nthat occur on a particular date, at a particular time).\nIn a distributed system, time is a tricky business, because communication is not\ninstantaneous: it takes time for a message to travel across the network from one\nmachine to another. The time when a message is received is always later than the\ntime when it is sent, but due to variable delays in the network, we don\u2019t know how\nmuch later. This fact sometimes makes it difficult to determine the order in which\nthings happened when multiple machines are involved.\nMoreover, each machine on the network has its own clock, which is an actual hard\u2010\nware device: usually a quartz crystal oscillator. These devices are not perfectly accu\u2010\nrate, so each machine has its own notion of time, which may be slightly faster or\nUnreliable Clocks | 287\n",
    "summary": "This section highlights the challenges of distributed systems regarding time synchronization and network latency, emphasizing the need for experimentally determined timeouts and acknowledging the inherent unreliability of network communication.",
    "sample_answer": "\u201cOkay, this excerpt really underscores a core challenge in designing reliable distributed systems. The fact that network communication isn\u2019t instantaneous, and that each machine has its own, potentially inaccurate, clock, directly impacts how we handle timeouts and measure durations. We need to move beyond static timeout values \u2013 something like experimentally determining timeouts based on observed network latency is critical. This is related to the CAP theorem \u2013 we\u2019re recognizing that strong consistency (a \u2018correct\u2019 value for timeouts) is difficult to achieve in a distributed system where network unreliability is inherent.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where you\u2019ve had to determine timeout values for a system component, considering network latency and the potential for clock skew. What factors did you consider, and what methods did you employ to ensure the system remained functional despite these uncertainties?\u201d"
  },
  {
    "chunk": "v. Although the clock is called real-time , it has nothing to do with real-time operating systems, as discussed\nin \u201cResponse time guarantees\u201d on page 298 .slower than on other machines. It is possible to synchronize clocks to some degree:\nthe most commonly used mechanism is the Network Time Protocol (NTP), which\nallows the computer clock to be adjusted according to the time reported by a group of\nservers [ 37]. The servers in turn get their time from a more accurate time source,\nsuch as a GPS receiver.\nMonotonic Versus Time-of-Day Clocks\nModern computers have at least two different kinds of clocks: a time-of-day clock  and\na monotonic clock . Although they both measure time, it is important to distinguish\nthe two, since they serve different purposes.\nTime-of-day clocks\nA time-of-day clock does what you intuitively expect of a clock: it returns the current\ndate and time according to some calendar (also known as wall-clock time ). For exam\u2010\nple, clock_gettime(CLOCK_REALTIME)  on Linuxv and System.currentTimeMillis()\nin Java return the number of seconds (or milliseconds) since the epoch : midnight\nUTC on January 1, 1970, according to the Gregorian calendar, not counting leap sec\u2010\nonds. Some systems use other dates as their reference point.\nTime-of-day clocks are usually synchronized with NTP, which means that a time\u2010\nstamp from one machine (ideally) means the same as a timestamp on another\nmachine. However, time-of-day clocks also have various oddities, as described in the\nnext section. In particular, if the local clock is too far ahead of the NTP server, it may\nbe forcibly reset and appear to jump back to a previous point in time. These jumps, as\nwell as the fact that they often ignore leap seconds, make time-of-day clocks unsuita\u2010\nble for measuring elapsed time [ 38].\nTime-of-day clocks have also historically had quite a coarse-grained resolution, e.g.,\nmoving forward in steps of 10 ms on older Windows systems [ 39]. On recent sys\u2010\ntems, this is less of a problem.\nMonotonic clocks\nA monotonic clock is suitable for measuring a duration (time interval), such as a\ntimeout or a service\u2019s response time: clock_gettime(CLOCK_MONOTONIC)  on Linux\nand System.nanoTime()  in Java are monotonic clocks, for example. The name comes\nfrom the fact that they are guaranteed to always move forward (whereas a time-of-\nday clock may jump back in time).\n288 | Chapter 8: The Trouble with Distributed Systems\n",
    "summary": "The text discusses the differences between time-of-day (wall-clock) and monotonic clocks, highlighting their use cases and limitations for measuring durations versus tracking calendar time.",
    "sample_answer": "\u201cWhen designing a system that needs to accurately track the duration of a service call, like a timeout mechanism, you should always use a monotonic clock, such as `clock_gettime(CLOCK_MONOTONIC)` on Linux. Time-of-day clocks, like `clock_gettime(CLOCK_REALTIME)`, are susceptible to jumps and don\u2019t reliably represent elapsed time due to potential clock synchronization issues and the handling of leap seconds. This is a critical consideration when designing for reliability and accuracy in timing-sensitive applications.\u201d",
    "potential_interview_question": "\u201cDescribe the difference between a time-of-day clock and a monotonic clock. Give an example of when you would choose one over the other in a system design scenario, and explain why that choice impacts the system\u2019s reliability.\u201d"
  },
  {
    "chunk": "You can check the value of the monotonic clock at one point in time, do something,\nand then check the clock again at a later time. The difference  between the two values\ntells you how much time elapsed between the two checks. However, the absolute\nvalue of the clock is meaningless: it might be the number of nanoseconds since the\ncomputer was started, or something similarly arbitrary. In particular, it makes no\nsense to compare monotonic clock values from two different computers, because they\ndon\u2019t mean the same thing.\nOn a server with multiple CPU sockets, there may be a separate timer per CPU,\nwhich is not necessarily synchronized with other CPUs. Operating systems compen\u2010\nsate for any discrepancy and try to present a monotonic view of the clock to applica\u2010\ntion threads, even as they are scheduled across different CPUs. However, it is wise to\ntake this guarantee of monotonicity with a pinch of salt [ 40].\nNTP may adjust the frequency at which the monotonic clock moves forward (this is\nknown as slewing  the clock) if it detects that the computer\u2019s local quartz is moving\nfaster or slower than the NTP server. By default, NTP allows the clock rate to be spee\u2010\nded up or slowed down by up to 0.05%, but NTP cannot cause the monotonic clock\nto jump forward or backward. The resolution of monotonic clocks is usually quite\ngood: on most systems they can measure time intervals in microseconds or less.\nIn a distributed system, using a monotonic clock for measuring elapsed time (e.g.,\ntimeouts) is usually fine, because it doesn\u2019t assume any synchronization between dif\u2010\nferent nodes\u2019 clocks and is not sensitive to slight inaccuracies of measurement.\nClock Synchronization and Accuracy\nMonotonic clocks don\u2019t need synchronization, but time-of-day clocks need to be set\naccording to an NTP server or other external time source in order to be useful.\nUnfortunately, our methods for getting a clock to tell the correct time aren\u2019t nearly as\nreliable or accurate as you might hope\u2014hardware clocks and NTP can be fickle\nbeasts. To give just a few examples:\n\u2022The quartz clock in a computer is not very accurate: it drifts  (runs faster or\nslower than it should). Clock drift varies depending on the temperature of the\nmachine. Google assumes a clock drift of 200 ppm (parts per million) for its\nservers [ 41], which is equivalent to 6 ms drift for a clock that is resynchronized\nwith a server every 30 seconds, or 17 seconds drift for a clock that is resynchron\u2010\nized once a day. This drift limits the best possible accuracy you can achieve, even\nif everything is working correctly.\n\u2022If a computer\u2019s clock differs too much from an NTP server, it may refuse to syn\u2010\nchronize, or the local clock will be forcibly reset [ 37]. Any applications observing\nthe time before and after this reset may see time go backward or suddenly jump\nforward.\nUnreliable Clocks | 289\n",
    "summary": "The chunk discusses the challenges of using monotonic clocks for time measurement in distributed systems, highlighting clock drift and the need for external time sources like NTP.",
    "sample_answer": "\u201cOkay, let\u2019s talk about time measurement in a distributed system. Using a monotonic clock \u2013 one that only moves forward \u2013 is often a good starting point for things like timeouts. However, as the text highlights, monotonic clocks themselves aren\u2019t inherently accurate; they\u2019re just a mechanism for tracking elapsed time without relying on a global, synchronized time source.  The key challenge is clock drift \u2013 the quartz clock in a computer, for example, can drift by as much as 6ms per day. To mitigate this, we\u2019d likely leverage NTP to periodically synchronize our clocks, acknowledging that even with NTP, there\u2019s inherent uncertainty. This relates to the CAP theorem \u2013 we're trading consistency for availability in the context of time-based operations.\u201d",
    "potential_interview_question": "\u201cDescribe the challenges of relying on monotonic clocks for time-based operations in a distributed system. How would you address potential issues like clock drift, and what mechanisms would you use to ensure time-based operations are reliable?\u201d"
  },
  {
    "chunk": "\u2022If a node is accidentally firewalled off from NTP servers, the misconfiguration\nmay go unnoticed for some time. Anecdotal evidence suggests that this does hap\u2010\npen in practice.\n\u2022NTP synchronization can only be as good as the network delay, so there is a limit\nto its accuracy when you\u2019re on a congested network with variable packet delays.\nOne experiment showed that a minimum error of 35 ms is achievable when syn\u2010\nchronizing over the internet [ 42], though occasional spikes in network delay lead\nto errors of around a second. Depending on the configuration, large network\ndelays can cause the NTP client to give up entirely.\n\u2022Some NTP servers are wrong or misconfigured, reporting time that is off by\nhours [ 43, 44]. NTP clients are quite robust, because they query several servers\nand ignore outliers. Nevertheless, it\u2019s somewhat worrying to bet the correctness\nof your systems on the time that you were told by a stranger on the internet.\n\u2022Leap seconds result in a minute that is 59 seconds or 61 seconds long, which\nmesses up timing assumptions in systems that are not designed with leap seconds\nin mind [ 45]. The fact that leap seconds have crashed many large systems [ 38,\n46] shows how easy it is for incorrect assumptions about clocks to sneak into a\nsystem. The best way of handling leap seconds may be to make NTP servers \u201clie,\u201d\nby performing the leap second adjustment gradually over the course of a day\n(this is known as smearing ) [47, 48], although actual NTP server behavior varies\nin practice [ 49].\n\u2022In virtual machines, the hardware clock is virtualized, which raises additional\nchallenges for applications that need accurate timekeeping [ 50]. When a CPU\ncore is shared between virtual machines, each VM is paused for tens of milli\u2010\nseconds while another VM is running. From an application\u2019s point of view, this\npause manifests itself as the clock suddenly jumping forward [ 26].\n\u2022If you run software on devices that you don\u2019t fully control (e.g., mobile or\nembedded devices), you probably cannot trust the device\u2019s hardware clock at all.\nSome users deliberately set their hardware clock to an incorrect date and time,\nfor example to circumvent timing limitations in games. As a result, the clock\nmight be set to a time wildly in the past or the future.\nIt is possible to achieve very good clock accuracy if you care about it sufficiently to\ninvest significant resources. For example, the MiFID II draft European regulation for\nfinancial institutions requires all high-frequency trading funds to synchronize their\nclocks to within 100 microseconds of UTC, in order to help debug market anomalies\nsuch as \u201cflash crashes\u201d and to help detect market manipulation [ 51].\nSuch accuracy can be achieved using GPS receivers, the Precision Time Protocol\n(PTP) [ 52], and careful deployment and monitoring. However, it requires significant\neffort and expertise, and there are plenty of ways clock synchronization can go\n290 | Chapter 8: The Trouble with Distributed Systems\n",
    "summary": "The chunk discusses the challenges of achieving accurate time synchronization in distributed systems, particularly considering network delays, leap seconds, and virtualization impacts.",
    "sample_answer": "\u201cOkay, this is a really important consideration when designing any system that relies on precise timing. The core issue is that relying on external time sources like NTP introduces significant variability \u2013 as demonstrated by the 35ms minimum error achievable over the internet and the potential for spikes due to network congestion. This highlights the need for robust error handling and potentially buffering time differences. Furthermore, the impact of virtualization, particularly the \u2018clock jump\u2019 phenomenon, needs to be understood and addressed, potentially through techniques like time-stamping all events with high resolution and incorporating the estimated network delay into calculations.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where inaccurate time synchronization could lead to a critical issue in a distributed system. What steps would you take to mitigate this risk, considering factors like network latency, virtualization, and external time sources?\u201d"
  },
  {
    "chunk": "wrong. If your NTP daemon is misconfigured, or a firewall is blocking NTP traffic,\nthe clock error due to drift can quickly become large. \nRelying on Synchronized Clocks\nThe problem with clocks is that while they seem simple and easy to use, they have a\nsurprising number of pitfalls: a day may not have exactly 86,400 seconds, time-of-day\nclocks may move backward in time, and the time on one node may be quite different\nfrom the time on another node.\nEarlier in this chapter we discussed networks dropping and arbitrarily delaying pack\u2010\nets. Even though networks are well behaved most of the time, software must be\ndesigned on the assumption that the network will occasionally be faulty, and the soft\u2010\nware must handle such faults gracefully. The same is true with clocks: although they\nwork quite well most of the time, robust software needs to be prepared to deal with\nincorrect clocks.\nPart of the problem is that incorrect clocks easily go unnoticed. If a machine\u2019s CPU is\ndefective or its network is misconfigured, it most likely won\u2019t work at all, so it will\nquickly be noticed and fixed. On the other hand, if its quartz clock is defective or its\nNTP client is misconfigured, most things will seem to work fine, even though its\nclock gradually drifts further and further away from reality. If some piece of software\nis relying on an accurately synchronized clock, the result is more likely to be silent\nand subtle data loss than a dramatic crash [ 53, 54].\nThus, if you use software that requires synchronized clocks, it is essential that you\nalso carefully monitor the clock offsets between all the machines. Any node whose\nclock drifts too far from the others should be declared dead and removed from the\ncluster. Such monitoring ensures that you notice the broken clocks before they can\ncause too much damage.\nTimestamps for ordering events\nLet\u2019s consider one particular situation in which it is tempting, but dangerous, to rely\non clocks: ordering of events across multiple nodes. For example, if two clients write\nto a distributed database, who got there first? Which write is the more recent one?\nFigure 8-3  illustrates a dangerous use of time-of-day clocks in a database with multi-\nleader replication (the example is similar to Figure 5-9 ). Client A writes x = 1 on node\n1; the write is replicated to node 3; client B increments x on node 3 (we now have\nx = 2); and finally, both writes are replicated to node 2.\nUnreliable Clocks | 291\n",
    "summary": "The text highlights the dangers of relying on imprecise clocks in distributed systems and emphasizes the need for monitoring clock offsets and proactive failure detection.",
    "sample_answer": "\u201cOkay, this section really drives home the importance of clock synchronization in distributed systems. The core issue is that relying on time-of-day clocks without careful monitoring leads to subtle data loss, as demonstrated by the replicated writes scenario. To mitigate this, we need a strategy that detects clock drift \u2013 ideally, we\u2019d use NTP, but more importantly, we need a system to actively monitor clock offsets and, as the text suggests, \u2018declare dead\u2019 any node whose clock drifts beyond an acceptable threshold, effectively removing it from the cluster.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re building a distributed database with multi-leader replication. How would you design a system to ensure that events are ordered correctly across multiple nodes, considering the potential for clock drift and the dangers of relying solely on time-of-day clocks?\u201d"
  },
  {
    "chunk": "Figure 8-3. The write by client B is causally later than the write by client A, but B\u2019s\nwrite has an earlier timestamp.\nIn Figure 8-3 , when a write is replicated to other nodes, it is tagged with a timestamp\naccording to the time-of-day clock on the node where the write originated. The clock\nsynchronization is very good in this example: the skew between node 1 and node 3 is\nless than 3 ms, which is probably better than you can expect in practice.\nNevertheless, the timestamps in Figure 8-3  fail to order the events correctly: the write\nx = 1 has a timestamp of 42.004 seconds, but the write x = 2 has a timestamp of\n42.003 seconds, even though x = 2 occurred unambiguously later. When node 2\nreceives these two events, it will incorrectly conclude that x = 1 is the more recent\nvalue and drop the write x = 2. In effect, client B\u2019s increment operation will be lost.\nThis conflict resolution strategy is called last write wins  (LWW), and it is widely used\nin both multi-leader replication and leaderless databases such as Cassandra [ 53] and\nRiak [ 54] (see \u201cLast write wins (discarding concurrent writes)\u201d  on page 186). Some\nimplementations generate timestamps on the client rather than the server, but this\ndoesn\u2019t change the fundamental problems with LWW:\n\u2022Database writes can mysteriously disappear: a node with a lagging clock is unable\nto overwrite values previously written by a node with a fast clock until the clock\nskew between the nodes has elapsed [ 54, 55]. This scenario can cause arbitrary\namounts of data to be silently dropped without any error being reported to the\napplication.\n\u2022LWW cannot distinguish between writes that occurred sequentially in quick suc\u2010\ncession (in Figure 8-3 , client B\u2019s increment definitely occurs after  client A\u2019s\nwrite) and writes that were truly concurrent (neither writer was aware of the\nother). Additional causality tracking mechanisms, such as version vectors, are\n292 | Chapter 8: The Trouble with Distributed Systems\n",
    "summary": "The chunk discusses the challenges of using last-write-wins (LWW) conflict resolution in a distributed system, highlighting clock skew and its impact on data consistency and potential data loss.",
    "sample_answer": "\u201cThis scenario illustrates a critical trade-off in distributed systems \u2013 achieving high availability often comes at the cost of strict consistency. Using LWW, as seen in systems like Cassandra, prioritizes availability by quickly accepting the latest write, but it\u2019s vulnerable to clock skew, which can lead to data loss if a node\u2019s clock lags behind another. A robust system needs to consider how to handle these inconsistencies \u2013 for example, leveraging version vectors to track causality and mitigate the risk of silent data drops.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where a last-write-wins conflict resolution strategy could lead to data loss in a distributed system. What architectural considerations would you make to mitigate this risk, referencing specific concepts like clock skew or version vectors?\u201d"
  },
  {
    "chunk": "needed in order to prevent violations of causality (see \u201cDetecting Concurrent\nWrites\u201d on page 184 ).\n\u2022It is possible for two nodes to independently generate writes with the same time\u2010\nstamp, especially when the clock only has millisecond resolution. An additional\ntiebreaker value (which can simply be a large random number) is required to\nresolve such conflicts, but this approach can also lead to violations of causality\n[53].\nThus, even though it is tempting to resolve conflicts by keeping the most \u201crecent\u201d\nvalue and discarding others, it\u2019s important to be aware that the definition of \u201crecent\u201d\ndepends on a local time-of-day clock, which may well be incorrect. Even with tightly\nNTP-synchronized clocks, you could send a packet at timestamp 100 ms (according\nto the sender\u2019s clock) and have it arrive at timestamp 99 ms (according to the recipi\u2010\nent\u2019s clock)\u2014so it appears as though the packet arrived before it was sent, which is\nimpossible.\nCould NTP synchronization be made accurate enough that such incorrect orderings\ncannot occur? Probably not, because NTP\u2019s synchronization accuracy is itself limited\nby the network round-trip time, in addition to other sources of error such as quartz\ndrift. For correct ordering, you would need the clock source to be significantly more\naccurate than the thing you are measuring (namely network delay).\nSo-called logical clocks  [56, 57], which are based on incrementing counters rather\nthan an oscillating quartz crystal, are a safer alternative for ordering events (see\n\u201cDetecting Concurrent Writes\u201d  on page 184). Logical clocks do not measure the time\nof day or the number of seconds elapsed, only the relative ordering of events\n(whether one event happened before or after another). In contrast, time-of-day and\nmonotonic clocks, which measure actual elapsed time, are also known as physical\nclocks . We\u2019ll look at ordering a bit more in \u201cOrdering Guarantees\u201d on page 339 .\nClock readings have a confidence interval\nYou may be able to read a machine\u2019s time-of-day clock with microsecond or even\nnanosecond resolution. But even if you can get such a fine-grained measurement,\nthat doesn\u2019t mean the value is actually accurate to such precision. In fact, it most\nlikely is not\u2014as mentioned previously, the drift in an imprecise quartz clock can\neasily be several milliseconds, even if you synchronize with an NTP server on the\nlocal network every minute. With an NTP server on the public internet, the best pos\u2010\nsible accuracy is probably to the tens of milliseconds, and the error may easily spike\nto over 100 ms when there is network congestion [ 57].\nThus, it doesn\u2019t make sense to think of a clock reading as a point in time\u2014it is more\nlike a range of times, within a confidence interval: for example, a system may be 95%\nconfident that the time now is between 10.3 and 10.5 seconds past the minute, but it\nUnreliable Clocks | 293\n",
    "summary": "The text discusses the challenges of using physical clocks for ordering events in distributed systems, highlighting the limitations of NTP synchronization and the potential for causality violations. It proposes logical clocks as a safer alternative.",
    "sample_answer": "\u201cOkay, this chunk really drills into a fundamental problem in distributed systems: ensuring causality when dealing with concurrent writes. Using physical clocks \u2013 like quartz oscillators \u2013 introduces significant inaccuracies due to factors like NTP synchronization limitations and clock drift. The key takeaway here is that relying on a single, precise time-of-day clock for ordering events is fundamentally unreliable; the confidence interval around the clock reading represents a range of possible times. Instead, logical clocks, which increment counters without measuring actual time, offer a more robust approach to maintaining event order, avoiding the problems associated with physical clocks.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where relying on a physical clock for ordering events in a distributed system could lead to a causality violation. How could you mitigate this risk, and what alternative approaches would you consider?\u201d"
  },
  {
    "chunk": "doesn\u2019t know any more precisely than that [ 58]. If we only know the time +/\u2013 100 ms,\nthe microsecond digits in the timestamp are essentially meaningless.\nThe uncertainty bound can be calculated based on your time source. If you have a\nGPS receiver or atomic (caesium) clock directly attached to your computer, the\nexpected error range is reported by the manufacturer. If you\u2019re getting the time from\na server, the uncertainty is based on the expected quartz drift since your last sync\nwith the server, plus the NTP server\u2019s uncertainty, plus the network round-trip time\nto the server (to a first approximation, and assuming you trust the server).\nUnfortunately, most systems don\u2019t expose this uncertainty: for example, when you\ncall clock_gettime() , the return value doesn\u2019t tell you the expected error of the\ntimestamp, so you don\u2019t know if its confidence interval is five milliseconds or five\nyears.\nAn interesting exception is Google\u2019s TrueTime  API in Spanner [ 41], which explicitly\nreports the confidence interval on the local clock. When you ask it for the current\ntime, you get back two values: [earliest , latest], which are the earliest possible\nand the latest possible  timestamp. Based on its uncertainty calculations, the clock\nknows that the actual current time is somewhere within that interval. The width of\nthe interval depends, among other things, on how long it has been since the local\nquartz clock was last synchronized with a more accurate clock source. \nSynchronized clocks for global snapshots\nIn \u201cSnapshot Isolation and Repeatable Read\u201d on page 237 we discussed snapshot iso\u2010\nlation , which is a very useful feature in databases that need to support both small, fast\nread-write transactions and large, long-running read-only transactions (e.g., for\nbackups or analytics). It allows read-only transactions to see the database in a consis\u2010\ntent state at a particular point in time, without locking and interfering with read-\nwrite transactions.\nThe most common implementation of snapshot isolation requires a monotonically\nincreasing transaction ID. If a write happened later than the snapshot (i.e., the write\nhas a greater transaction ID than the snapshot), that write is invisible to the snapshot\ntransaction. On a single-node database, a simple counter is sufficient for generating\ntransaction IDs.\nHowever, when a database is distributed across many machines, potentially in multi\u2010\nple datacenters, a global, monotonically increasing transaction ID (across all parti\u2010\ntions) is difficult to generate, because it requires coordination. The transaction ID\nmust reflect causality: if transaction B reads a value that was written by transaction A,\nthen B must have a higher transaction ID than A\u2014otherwise, the snapshot would not\n294 | Chapter 8: The Trouble with Distributed Systems\n",
    "summary": "The text discusses timestamp uncertainty and snapshot isolation in distributed systems, highlighting the importance of accurately measuring time and maintaining consistent views of data across distributed databases.",
    "sample_answer": "\u201cTimestamp uncertainty is a fundamental challenge in distributed systems, particularly when coordinating actions based on time. As the chunk details, getting the timestamp from a server introduces a significant uncertainty due to factors like quartz drift and network latency, which can impact the reliability of distributed transactions. To address this, systems like Spanner utilize a \u2018TrueTime\u2019 API, which explicitly reports a confidence interval on the local clock, providing a more reliable basis for temporal ordering and consistency.\u201d Furthermore, \u201cSnapshot isolation relies on monotonically increasing transaction IDs to ensure consistent views of the database across partitions, preventing conflicting reads by isolating transactions to a consistent state at a point in time.\u201d",
    "potential_interview_question": "\u201cDescribe the challenges associated with relying on server-provided timestamps for distributed transactions. How does the \u2018TrueTime\u2019 API in Spanner attempt to mitigate these challenges, and what are the potential trade-offs of using such an approach compared to a simpler, locally-generated transaction ID?\u201d"
  },
  {
    "chunk": "vi. There are distributed sequence number generators, such as Twitter\u2019s Snowflake, that generate approxi\u2010\nmately  monotonically increasing unique IDs in a scalable way (e.g., by allocating blocks of the ID space to\ndifferent nodes). However, they typically cannot guarantee an ordering that is consistent with causality,\nbecause the timescale at which blocks of IDs are assigned is longer than the timescale of database reads and\nwrites. See also \u201cOrdering Guarantees\u201d on page 339 .be consistent. With lots of small, rapid transactions, creating transaction IDs in a dis\u2010\ntributed system becomes an untenable bottleneck.vi\nCan we use the timestamps from synchronized time-of-day clocks as transaction IDs?\nIf we could get the synchronization good enough, they would have the right proper\u2010\nties: later transactions have a higher timestamp. The problem, of course, is the uncer\u2010\ntainty about clock accuracy.\nSpanner implements snapshot isolation across datacenters in this way [ 59, 60]. It uses\nthe clock\u2019s confidence interval as reported by the TrueTime API, and is based on the\nfollowing observation: if you have two confidence intervals, each consisting of an ear\u2010\nliest and latest possible timestamp ( A = [Aearliest, Alatest] and B = [Bearliest, Blatest]), and\nthose two intervals do not overlap (i.e., Aearliest < Alatest < Bearliest < Blatest), then B defi\u2010\nnitely happened after A\u2014there can be no doubt. Only if the intervals overlap are we\nunsure in which order A and B happened.\nIn order to ensure that transaction timestamps reflect causality, Spanner deliberately\nwaits for the length of the confidence interval before committing a read-write trans\u2010\naction. By doing so, it ensures that any transaction that may read the data is at a suffi\u2010\nciently later time, so their confidence intervals do not overlap. In order to keep the\nwait time as short as possible, Spanner needs to keep the clock uncertainty as small as\npossible; for this purpose, Google deploys a GPS receiver or atomic clock in each\ndatacenter, allowing clocks to be synchronized to within about 7 ms [ 41].\nUsing clock synchronization for distributed transaction semantics is an area of active\nresearch [ 57, 61, 62]. These ideas are interesting, but they have not yet been imple\u2010\nmented in mainstream databases outside of Google. \nProcess Pauses\nLet\u2019s consider another example of dangerous clock use in a distributed system. Say\nyou have a database with a single leader per partition. Only the leader is allowed to\naccept writes. How does a node know that it is still leader (that it hasn\u2019t been declared\ndead by the others), and that it may safely accept writes?\nOne option is for the leader to obtain a lease  from the other nodes, which is similar to\na lock with a timeout [ 63]. Only one node can hold the lease at any one time\u2014thus,\nwhen a node obtains a lease, it knows that it is the leader for some amount of time,\nuntil the lease expires. In order to remain leader, the node must periodically renew\nUnreliable Clocks | 295\n",
    "summary": "The text discusses approaches to generating consistent transaction IDs in distributed systems, focusing on clock synchronization and lease-based leader election.",
    "sample_answer": "\u201cOkay, this is a really interesting problem. When you\u2019re dealing with distributed transactions, relying solely on timestamps for ordering is fundamentally unreliable due to clock skew. As the chunk explains, using the Snowflake approach isn't sufficient because the timescale of ID allocation doesn\u2019t align with the timescale of database operations.  Spanner\u2019s solution, leveraging the TrueTime API and its confidence intervals, demonstrates a more robust strategy \u2013 it acknowledges and addresses the inherent uncertainty in clock synchronization.  This concept aligns with understanding the CAP theorem, specifically the trade-off between consistency and availability, and the need to build systems that can handle eventual consistency while still providing strong guarantees where required, like Spanner\u2019s use of confidence intervals.\u201d",
    "potential_interview_question": "\u201cSpanner uses the TrueTime API to derive transaction IDs based on clock confidence intervals.  Explain the rationale behind this approach and how it addresses the challenge of clock skew in a distributed system.  Furthermore, how might the accuracy of the clock synchronization impact the performance and reliability of this system?\u201d"
  },
  {
    "chunk": "the lease before it expires. If the node fails, it stops renewing the lease, so another\nnode can take over when it expires.\nYou can imagine the request-handling loop looking something like this:\nwhile (true) {\n    request = getIncomingRequest ();\n    // Ensure that the lease always has at least 10 seconds remaining\n    if (lease.expiryTimeMillis  - System.currentTimeMillis () < 10000) {\n        lease = lease.renew();\n    }\n    if (lease.isValid()) {\n        process(request);\n    }\n}\nWhat\u2019s wrong with this code? Firstly, it\u2019s relying on synchronized clocks: the expiry\ntime on the lease is set by a different machine (where the expiry may be calculated as\nthe current time plus 30 seconds, for example), and it\u2019s being compared to the local\nsystem clock. If the clocks are out of sync by more than a few seconds, this code will\nstart doing strange things.\nSecondly, even if we change the protocol to only use the local monotonic clock, there\nis another problem: the code assumes that very little time passes between the point\nthat it checks the time ( System.currentTimeMillis() ) and the time when the\nrequest is processed ( process(request) ). Normally this code runs very quickly, so\nthe 10 second buffer is more than enough to ensure that the lease doesn\u2019t expire in\nthe middle of processing a request.\nHowever, what if there is an unexpected pause in the execution of the program? For\nexample, imagine the thread stops for 15 seconds around the line lease.isValid()\nbefore finally continuing. In that case, it\u2019s likely that the lease will have expired by the\ntime the request is processed, and another node has already taken over as leader.\nHowever, there is nothing to tell this thread that it was paused for so long, so this\ncode won\u2019t notice that the lease has expired until the next iteration of the loop\u2014by\nwhich time it may have already done something unsafe by processing the request.\nIs it crazy to assume that a thread might be paused for so long? Unfortunately not.\nThere are various reasons why this could happen:\n\u2022Many programming language runtimes (such as the Java Virtual Machine) have\na garbage collector  (GC) that occasionally needs to stop all running threads.\nThese \u201cstop-the-world\u201d GC pauses  have sometimes been known to last for several\nminutes [ 64]! Even so-called \u201cconcurrent\u201d garbage collectors like the HotSpot\nJVM\u2019s CMS cannot fully run in parallel with the application code\u2014even they\nneed to stop the world from time to time [ 65]. Although the pauses can often be\n296 | Chapter 8: The Trouble with Distributed Systems\n",
    "summary": "The chunk discusses the challenges of maintaining lease-based leadership in a distributed system, highlighting clock synchronization issues and the potential for unpredictable pauses impacting system stability.",
    "sample_answer": "\u201cThis scenario highlights a critical concern in distributed systems design \u2013 ensuring accurate timekeeping and handling unpredictable delays. The reliance on synchronized clocks, particularly when dealing with JVM garbage collection pauses (stop-the-world events), introduces a significant point of failure. This is a classic example of a system not adequately addressing the potential for non-idempotent operations when dealing with external clock sources, demonstrating the need for robust error handling and potentially retry logic\u2014a common mitigation strategy discussed under the CAP theorem.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where relying on synchronized clocks in a distributed system could lead to problems. How would you design a system to mitigate this risk, considering potential interruptions such as JVM garbage collection pauses?\u201d"
  },
  {
    "chunk": "reduced by changing allocation patterns or tuning GC settings [ 66], we must\nassume the worst if we want to offer robust guarantees.\n\u2022In virtualized environments, a virtual machine can be suspended  (pausing the\nexecution of all processes and saving the contents of memory to disk) and\nresumed  (restoring the contents of memory and continuing execution). This\npause can occur at any time in a process\u2019s execution and can last for an arbitrary\nlength of time. This feature is sometimes used for live migration  of virtual\nmachines from one host to another without a reboot, in which case the length of\nthe pause depends on the rate at which processes are writing to memory [ 67].\n\u2022On end-user devices such as laptops, execution may also be suspended and\nresumed arbitrarily, e.g., when the user closes the lid of their laptop.\n\u2022When the operating system context-switches to another thread, or when the\nhypervisor switches to a different virtual machine (when running in a virtual\nmachine), the currently running thread can be paused at any arbitrary point in\nthe code. In the case of a virtual machine, the CPU time spent in other virtual\nmachines is known as steal time . If the machine is under heavy load\u2014i.e., if there\nis a long queue of threads waiting to run\u2014it may take some time before the\npaused thread gets to run again.\n\u2022If the application performs synchronous disk access, a thread may be paused\nwaiting for a slow disk I/O operation to complete [ 68]. In many languages, disk\naccess can happen surprisingly, even if the code doesn\u2019t explicitly mention file\naccess\u2014for example, the Java classloader lazily loads class files when they are first\nused, which could happen at any time in the program execution. I/O pauses and\nGC pauses may even conspire to combine their delays [ 69]. If the disk is actually\na network filesystem or network block device (such as Amazon\u2019s EBS), the I/O\nlatency is further subject to the variability of network delays [ 29].\n\u2022If the operating system is configured to allow swapping to disk  (paging ), a simple\nmemory access may result in a page fault that requires a page from disk to be\nloaded into memory. The thread is paused while this slow I/O operation takes\nplace. If memory pressure is high, this may in turn require a different page to be\nswapped out to disk. In extreme circumstances, the operating system may spend\nmost of its time swapping pages in and out of memory and getting little actual\nwork done (this is known as thrashing ). To avoid this problem, paging is often\ndisabled on server machines (if you would rather kill a process to free up mem\u2010\nory than risk thrashing).\n\u2022A Unix process can be paused by sending it the SIGSTOP  signal, for example by\npressing Ctrl-Z in a shell. This signal immediately stops the process from getting\nany more CPU cycles until it is resumed with SIGCONT , at which point it contin\u2010\nues running where it left off. Even if your environment does not normally use\nSIGSTOP , it might be sent accidentally by an operations engineer.\nUnreliable Clocks | 297\n",
    "summary": "The text discusses unpredictable pauses in execution due to OS context switching, GC, I/O operations, and paging, highlighting the need for robust design to handle these delays.",
    "sample_answer": "\u201cOkay, this chunk really drives home the importance of understanding unpredictable latency in systems. The concept of \u2018steal time\u2019 in a virtualized environment, combined with potential pauses from GC and I/O operations, means we can\u2019t assume a consistent processing rate.  We need to design for worst-case scenarios, and using techniques like rate limiting, buffering, or even employing techniques to reduce GC pressure would be crucial. Furthermore, the mention of SIGSTOP and thrashing underscores the need for fault tolerance \u2013 we have to account for external signals impacting the process\u2019s execution.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where an unexpected pause in a process\u2019s execution could significantly impact a data pipeline. What architectural considerations would you make to mitigate this risk, referencing any specific techniques or concepts discussed in the text?\u201d"
  },
  {
    "chunk": "All of these occurrences can preempt  the running thread at any point and resume it at\nsome later time, without the thread even noticing. The problem is similar to making\nmulti-threaded code on a single machine thread-safe: you can\u2019t assume anything\nabout timing, because arbitrary context switches and parallelism may occur.\nWhen writing multi-threaded code on a single machine, we have fairly good tools for\nmaking it thread-safe: mutexes, semaphores, atomic counters, lock-free data struc\u2010\ntures, blocking queues, and so on. Unfortunately, these tools don\u2019t directly translate\nto distributed systems, because a distributed system has no shared memory\u2014only\nmessages sent over an unreliable network.\nA node in a distributed system must assume that its execution can be paused for a\nsignificant length of time at any point, even in the middle of a function. During the\npause, the rest of the world keeps moving and may even declare the paused node\ndead because it\u2019s not responding. Eventually, the paused node may continue running,\nwithout even noticing that it was asleep until it checks its clock sometime later. \nResponse time guarantees\nIn many programming languages and operating systems, threads and processes may\npause for an unbounded amount of time, as discussed. Those reasons for pausing can\nbe eliminated if you try hard enough.\nSome software runs in environments where a failure to respond within a specified\ntime can cause serious damage: computers that control aircraft, rockets, robots, cars,\nand other physical objects must respond quickly and predictably to their sensor\ninputs. In these systems, there is a specified deadline  by which the software must\nrespond; if it doesn\u2019t meet the deadline, that may cause a failure of the entire system.\nThese are so-called hard real-time  systems.\nIs real-time really real?\nIn embedded systems, real-time  means that a system is carefully\ndesigned and tested to meet specified timing guarantees in all cir\u2010\ncumstances. This meaning is in contrast to the more vague use of\nthe term real-time  on the web, where it describes servers pushing\ndata to clients and stream processing without hard response time\nconstraints (see Chapter 11 ).\nFor example, if your car\u2019s onboard sensors detect that you are currently experiencing\na crash, you wouldn\u2019t want the release of the airbag to be delayed due to an inoppor\u2010\ntune GC pause in the airbag release system.\nProviding real-time guarantees in a system requires support from all levels of the\nsoftware stack: a real-time operating system  (RTOS) that allows processes to be sched\u2010\nuled with a guaranteed allocation of CPU time in specified intervals is needed; library\n298 | Chapter 8: The Trouble with Distributed Systems\n",
    "summary": "The text discusses the challenges of achieving real-time guarantees in distributed systems, highlighting the impact of unpredictable latency and the need for robust fault tolerance.",
    "sample_answer": "\u201cThis excerpt really underscores the core problem of distributed systems \u2013 the inherent unreliability of networks and the difficulty of enforcing timing constraints. We need to design for potential pauses and failures, and that\u2019s where concepts like a real-time operating system (RTOS) become crucial. An RTOS allows us to schedule processes with guaranteed CPU time, which is critical for applications like automotive systems where meeting deadlines is paramount; otherwise, we risk a cascading failure.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where meeting strict deadlines is critical for a system. How would you approach designing a system to achieve those deadlines, considering the challenges presented by distributed systems and the need for fault tolerance?\u201d"
  },
  {
    "chunk": "functions must document their worst-case execution times; dynamic memory alloca\u2010\ntion may be restricted or disallowed entirely (real-time garbage collectors exist, but\nthe application must still ensure that it doesn\u2019t give the GC too much work to do);\nand an enormous amount of testing and measurement must be done to ensure that\nguarantees are being met.\nAll of this requires a large amount of additional work and severely restricts the range\nof programming languages, libraries, and tools that can be used (since most lan\u2010\nguages and tools do not provide real-time guarantees). For these reasons, developing\nreal-time systems is very expensive, and they are most commonly used in safety-\ncritical embedded devices. Moreover, \u201creal-time\u201d is not the same as \u201chigh-\nperformance\u201d\u2014in fact, real-time systems may have lower throughput, since they\nhave to prioritize timely responses above all else (see also \u201cLatency and Resource Uti\u2010\nlization\u201d on page 286 ).\nFor most server-side data processing systems, real-time guarantees are simply not\neconomical or appropriate. Consequently, these systems must suffer the pauses and\nclock instability that come from operating in a non-real-time environment.\nLimiting the impact of garbage collection\nThe negative effects of process pauses can be mitigated without resorting to expen\u2010\nsive real-time scheduling guarantees. Language runtimes have some flexibility\naround when they schedule garbage collections, because they can track the rate of\nobject allocation and the remaining free memory over time.\nAn emerging idea is to treat GC pauses like brief planned outages of a node, and to\nlet other nodes handle requests from clients while one node is collecting its garbage.\nIf the runtime can warn the application that a node soon requires a GC pause, the\napplication can stop sending new requests to that node, wait for it to finish process\u2010\ning outstanding requests, and then perform the GC while no requests are in progress.\nThis trick hides GC pauses from clients and reduces the high percentiles of response\ntime [ 70, 71]. Some latency-sensitive financial trading systems [ 72] use this approach.\nA variant of this idea is to use the garbage collector only for short-lived objects\n(which are fast to collect) and to restart processes periodically, before they accumu\u2010\nlate enough long-lived objects to require a full GC of long-lived objects [ 65, 73]. One\nnode can be restarted at a time, and traffic can be shifted away from the node before\nthe planned restart, like in a rolling upgrade (see Chapter 4 ).\nThese measures cannot fully prevent garbage collection pauses, but they can usefully\nreduce their impact on the application. \nUnreliable Clocks | 299\n",
    "summary": "The text discusses strategies for mitigating the impact of garbage collection pauses in real-time systems, focusing on techniques like planned node restarts and traffic shifting.",
    "sample_answer": "\u201cOkay, this section highlights a critical trade-off in system design \u2013 prioritizing low-latency responses often necessitates dealing with unpredictable garbage collection pauses. The approach of treating GC pauses as planned outages, similar to rolling upgrades, demonstrates an understanding of how to hide latency spikes from users. By shifting traffic away from a node undergoing a GC, we\u2019re leveraging a form of load shedding and effectively reducing the impact on service level objectives (SLOs), aligning with best practices for maintaining availability\u2014this is essentially a simplified version of a rolling restart strategy.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you\u2019d use a rolling restart strategy to mitigate latency spikes due to garbage collection. What metrics would you monitor to determine the effectiveness of the strategy, and what are potential failure modes to consider?\u201d"
  },
  {
    "chunk": "Knowledge, Truth, and Lies\nSo far in this chapter we have explored the ways in which distributed systems are dif\u2010\nferent from programs running on a single computer: there is no shared memory, only\nmessage passing via an unreliable network with variable delays, and the systems may\nsuffer from partial failures, unreliable clocks, and processing pauses.\nThe consequences of these issues are profoundly disorienting if you\u2019re not used to\ndistributed systems. A node in the network cannot know  anything for sure\u2014it can\nonly make guesses based on the messages it receives (or doesn\u2019t receive) via the net\u2010\nwork. A node can only find out what state another node is in (what data it has stored,\nwhether it is correctly functioning, etc.) by exchanging messages with it. If a remote\nnode doesn\u2019t respond, there is no way of knowing what state it is in, because prob\u2010\nlems in the network cannot reliably be distinguished from problems at a node.\nDiscussions of these systems border on the philosophical: What do we know to be\ntrue or false in our system? How sure can we be of that knowledge, if the mechanisms\nfor perception and measurement are unreliable? Should software systems obey the\nlaws that we expect of the physical world, such as cause and effect?\nFortunately, we don\u2019t need to go as far as figuring out the meaning of life. In a dis\u2010\ntributed system, we can state the assumptions we are making about the behavior (the\nsystem model ) and design the actual system in such a way that it meets those assump\u2010\ntions. Algorithms can be proved to function correctly within a certain system model.\nThis means that reliable behavior is achievable, even if the underlying system model\nprovides very few guarantees.\nHowever, although it is possible to make software well behaved in an unreliable sys\u2010\ntem model, it is not straightforward to do so. In the rest of this chapter we will further\nexplore the notions of knowledge and truth in distributed systems, which will help us\nthink about the kinds of assumptions we can make and the guarantees we may want\nto provide. In Chapter 9  we will proceed to look at some examples of distributed sys\u2010\ntems, algorithms that provide particular guarantees under particular assumptions.\nThe Truth Is Defined by the Majority\nImagine a network with an asymmetric fault: a node is able to receive all messages\nsent to it, but any outgoing messages from that node are dropped or delayed [ 19].\nEven though that node is working perfectly well, and is receiving requests from other\nnodes, the other nodes cannot hear its responses. After some timeout, the other\nnodes declare it dead, because they haven\u2019t heard from the node. The situation\nunfolds like a nightmare: the semi-disconnected node is dragged to the graveyard,\nkicking and screaming \u201cI\u2019m not dead!\u201d\u2014but since nobody can hear its screaming, the\nfuneral procession continues with stoic determination.\n300 | Chapter 8: The Trouble with Distributed Systems\n",
    "summary": "The chunk highlights the challenges of achieving reliable knowledge in distributed systems due to unreliable networks and the need to define system models and assumptions.",
    "sample_answer": "\u201cThis excerpt underscores a fundamental challenge in distributed system design: we can\u2019t assume perfect consistency or reliable communication. Because of the unreliability of the network \u2013 as exemplified by the \u2018asymmetric fault\u2019 where nodes lose outgoing messages \u2013 we have to explicitly define a system model, essentially stating our assumptions about the system's behavior. This is analogous to the CAP theorem, where we have to choose between consistency and availability in the face of network partitions; we are essentially imposing constraints based on what we *believe* to be true.  Furthermore, the example of the \u2018semi-disconnected node\u2019 demonstrates how crucial it is to design systems that can tolerate these discrepancies, perhaps by employing techniques like timeouts and heartbeat monitoring to detect and handle such situations \u2013 acknowledging that we\u2019re operating under an inherently flawed view of the system.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where a distributed system might operate under a flawed system model. How would you approach designing a system to mitigate the potential consequences of that model, and what monitoring strategies would you implement to detect when the system is operating outside of its defined assumptions?\u201d"
  },
  {
    "chunk": "In a slightly less nightmarish scenario, the semi-disconnected node may notice that\nthe messages it is sending are not being acknowledged by other nodes, and so realize\nthat there must be a fault in the network. Nevertheless, the node is wrongly declared\ndead by the other nodes, and the semi-disconnected node cannot do anything about\nit.\nAs a third scenario, imagine a node that experiences a long stop-the-world garbage\ncollection pause. All of the node\u2019s threads are preempted by the GC and paused for\none minute, and consequently, no requests are processed and no responses are sent.\nThe other nodes wait, retry, grow impatient, and eventually declare the node dead\nand load it onto the hearse. Finally, the GC finishes and the node\u2019s threads continue\nas if nothing had happened. The other nodes are surprised as the supposedly dead\nnode suddenly raises its head out of the coffin, in full health, and starts cheerfully\nchatting with bystanders. At first, the GCing node doesn\u2019t even realize that an entire\nminute has passed and that it was declared dead\u2014from its perspective, hardly any\ntime has passed since it was last talking to the other nodes.\nThe moral of these stories is that a node cannot necessarily trust its own judgment of\na situation. A distributed system cannot exclusively rely on a single node, because a\nnode may fail at any time, potentially leaving the system stuck and unable to recover.\nInstead, many distributed algorithms rely on a quorum , that is, voting among the\nnodes (see \u201cQuorums for reading and writing\u201d on page 179): decisions require some\nminimum number of votes from several nodes in order to reduce the dependence on\nany one particular node.\nThat includes decisions about declaring nodes dead. If a quorum of nodes declares\nanother node dead, then it must be considered dead, even if that node still very much\nfeels alive. The individual node must abide by the quorum decision and step down.\nMost commonly, the quorum is an absolute majority of more than half the nodes\n(although other kinds of quorums are possible). A majority quorum allows the sys\u2010\ntem to continue working if individual nodes have failed (with three nodes, one failure\ncan be tolerated; with five nodes, two failures can be tolerated). However, it is still\nsafe, because there can only be only one majority in the system\u2014there cannot be two\nmajorities with conflicting decisions at the same time. We will discuss the use of quo\u2010\nrums in more detail when we get to consensus algorithms  in Chapter 9 .\nThe leader and the lock\nFrequently, a system requires there to be only one of some thing. For example:\n\u2022Only one node is allowed to be the leader for a database partition, to avoid split\nbrain (see \u201cHandling Node Outages\u201d on page 156 ).\n\u2022Only one transaction or client is allowed to hold the lock for a particular resource\nor object, to prevent concurrently writing to it and corrupting it.\nKnowledge, Truth, and Lies | 301\n",
    "summary": "The text discusses the challenges of fault tolerance in distributed systems, emphasizing the need for quorum-based decision making and single-owner leadership to prevent split-brain scenarios.",
    "sample_answer": "\u201cThis scenario highlights a critical challenge in distributed systems: how to reliably determine node health when individual nodes can be misleading. To address this, we need to move away from relying solely on a node\u2019s self-assessment and implement a quorum-based approach, as described. Specifically, a quorum \u2013 typically a majority \u2013 is established to make decisions, like declaring a node dead, because individual nodes can be in an inconsistent state. This approach aligns with the CAP theorem, particularly emphasizing consistency over availability in the face of potential failures.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where a node in a distributed system might incorrectly report its health, and explain how a quorum-based strategy could be used to mitigate this issue, referencing relevant concepts like the CAP theorem.\u201d"
  },
  {
    "chunk": "\u2022Only one user is allowed to register a particular username, because a username\nmust uniquely identify a user.\nImplementing this in a distributed system requires care: even if a node believes that it\nis \u201cthe chosen one\u201d (the leader of the partition, the holder of the lock, the request\nhandler of the user who successfully grabbed the username), that doesn\u2019t necessarily\nmean a quorum of nodes agrees! A node may have formerly been the leader, but if\nthe other nodes declared it dead in the meantime (e.g., due to a network interruption\nor GC pause), it may have been demoted and another leader may have already been\nelected.\nIf a node continues acting as the chosen one, even though the majority of nodes have\ndeclared it dead, it could cause problems in a system that is not carefully designed.\nSuch a node could send messages to other nodes in its self-appointed capacity, and if\nother nodes believe it, the system as a whole may do something incorrect.\nFor example, Figure 8-4  shows a data corruption bug due to an incorrect implemen\u2010\ntation of locking. (The bug is not theoretical: HBase used to have this problem [ 74,\n75].) Say you want to ensure that a file in a storage service can only be accessed by\none client at a time, because if multiple clients tried to write to it, the file would\nbecome corrupted. You try to implement this by requiring a client to obtain a lease\nfrom a lock service before accessing the file.\nFigure 8-4. Incorrect implementation of a distributed lock: client 1 believes that it still\nhas a valid lease, even though it has expired, and thus corrupts a file in storage.\nThe problem is an example of what we discussed in \u201cProcess Pauses\u201d  on page 295: if\nthe client holding the lease is paused for too long, its lease expires. Another client can\nobtain a lease for the same file, and start writing to the file. When the paused client\ncomes back, it believes (incorrectly) that it still has a valid lease and proceeds to also\nwrite to the file. As a result, the clients\u2019 writes clash and corrupt the file.\n302 | Chapter 8: The Trouble with Distributed Systems\n",
    "summary": "This text highlights the dangers of assuming consistency in a distributed system, particularly regarding locks and lease management, and discusses the potential for data corruption due to process pauses.",
    "sample_answer": "\u201cThis chunk underscores a critical principle in distributed system design: assuming consensus is not sufficient. The example of the HBase bug demonstrates how a node incorrectly holding a lease\u2014due to a process pause\u2014can lead to data corruption because it\u2019s operating under outdated assumptions about the system\u2019s state. This relates directly to the CAP theorem; even if a system achieves consistency (C), it may sacrifice availability (A) or partition tolerance (P) if not carefully designed, and highlights the importance of robust failure detection and recovery mechanisms\u2014 perhaps through a consensus algorithm like Raft\u2014to ensure eventual consistency.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where a distributed system\u2019s assumption of a \u2018chosen one\u2019 node leads to data corruption. How could you design this system to mitigate this risk, considering concepts like CAP theorem and consensus algorithms?\u201d"
  },
  {
    "chunk": "Fencing tokens\nWhen using a lock or lease to protect access to some resource, such as the file storage\nin Figure 8-4 , we need to ensure that a node that is under a false belief of being \u201cthe\nchosen one\u201d cannot disrupt the rest of the system. A fairly simple technique that ach\u2010\nieves this goal is called fencing , and is illustrated in Figure 8-5 .\nFigure 8-5. Making access to storage safe by allowing writes only in the order of increas\u2010\ning fencing tokens.\nLet\u2019s assume that every time the lock server grants a lock or lease, it also returns a\nfencing token , which is a number that increases every time a lock is granted (e.g.,\nincremented by the lock service). We can then require that every time a client sends a\nwrite request to the storage service, it must include its current fencing token.\nIn Figure 8-5 , client 1 acquires the lease with a token of 33, but then it goes into a\nlong pause and the lease expires. Client 2 acquires the lease with a token of 34 (the\nnumber always increases) and then sends its write request to the storage service,\nincluding the token of 34. Later, client 1 comes back to life and sends its write to the\nstorage service, including its token value 33. However, the storage server remembers\nthat it has already processed a write with a higher token number (34), and so it rejects\nthe request with token 33.\nIf ZooKeeper is used as lock service, the transaction ID zxid  or the node version\ncversion  can be used as fencing token. Since they are guaranteed to be monotoni\u2010\ncally increasing, they have the required properties [ 74].\nNote that this mechanism requires the resource itself to take an active role in check\u2010\ning tokens by rejecting any writes with an older token than one that has already been\nprocessed\u2014it is not sufficient to rely on clients checking their lock status themselves.\nFor resources that do not explicitly support fencing tokens, you might still be able\nwork around the limitation (for example, in the case of a file storage service you\ncould include the fencing token in the filename). However, some kind of check is\nnecessary to avoid processing requests outside of the lock\u2019s protection.\nKnowledge, Truth, and Lies | 303\n",
    "summary": "The chunk describes a fencing token mechanism for protecting shared resources by ensuring that only requests with monotonically increasing tokens are processed, leveraging concepts like monotonic sequences for fault tolerance.",
    "sample_answer": "\u201cOkay, let\u2019s break down this fencing token approach. Essentially, it\u2019s a strategy to prevent race conditions when multiple clients are trying to access and modify shared resources. The core idea is to use a monotonically increasing token \u2013 in this example, a ZooKeeper transaction ID or node version \u2013 to verify that a request is processed in the correct order, guaranteeing that stale writes are rejected, aligning with the principles of distributed consensus. This approach mirrors the need for strong consistency in a system where multiple components need to agree on the state of data, considering the CAP theorem\u2019s trade-offs.\u201d",
    "potential_interview_question": "\u201cImagine you're designing a system where multiple services need to update a shared database record. How would you use a mechanism similar to this \u2018fencing token\u2019 approach to ensure data consistency and prevent conflicts, and what are potential challenges in implementing such a system?\u201d"
  },
  {
    "chunk": "Checking a token on the server side may seem like a downside, but it is arguably a\ngood thing: it is unwise for a service to assume that its clients will always be well\nbehaved, because the clients are often run by people whose priorities are very differ\u2010\nent from the priorities of the people running the service [ 76]. Thus, it is a good idea\nfor any service to protect itself from accidentally abusive clients. \nByzantine Faults\nFencing tokens can detect and block a node that is inadvertently  acting in error (e.g.,\nbecause it hasn\u2019t yet found out that its lease has expired). However, if the node delib\u2010\nerately wanted to subvert the system\u2019s guarantees, it could easily do so by sending\nmessages with a fake fencing token.\nIn this book we assume that nodes are unreliable but honest: they may be slow or\nnever respond (due to a fault), and their state may be outdated (due to a GC pause or\nnetwork delays), but we assume that if a node does  respond, it is telling the \u201ctruth\u201d: to\nthe best of its knowledge, it is playing by the rules of the protocol.\nDistributed systems problems become much harder if there is a risk that nodes may\n\u201clie\u201d (send arbitrary faulty or corrupted responses)\u2014for example, if a node may claim\nto have received a particular message when in fact it didn\u2019t. Such behavior is known\nas a Byzantine fault , and the problem of reaching consensus in this untrusting envi\u2010\nronment is known as the Byzantine Generals Problem  [77].\nThe Byzantine Generals Problem\nThe Byzantine Generals Problem is a generalization of the so-called Two Generals\nProblem  [78], which imagines a situation in which two army generals need to agree\non a battle plan. As they have set up camp on two different sites, they can only com\u2010\nmunicate by messenger, and the messengers sometimes get delayed or lost (like pack\u2010\nets in a network). We will discuss this problem of consensus  in Chapter 9 .\nIn the Byzantine version of the problem, there are n generals who need to agree, and\ntheir endeavor is hampered by the fact that there are some traitors in their midst.\nMost of the generals are loyal, and thus send truthful messages, but the traitors may\ntry to deceive and confuse the others by sending fake or untrue messages (while try\u2010\ning to remain undiscovered). It is not known in advance who the traitors are.\nByzantium was an ancient Greek city that later became Constantinople, in the place\nwhich is now Istanbul in Turkey. There isn\u2019t any historic evidence that the generals of\nByzantium were any more prone to intrigue and conspiracy than those elsewhere.\nRather, the name is derived from Byzantine  in the sense of excessively complicated,\nbureaucratic, devious , which was used in politics long before computers [ 79]. Lamp\u2010\nort wanted to choose a nationality that would not offend any readers, and he was\nadvised that calling it The Albanian Generals Problem  was not such a good idea [ 80].\n304 | Chapter 8: The Trouble with Distributed Systems\n",
    "summary": "The text discusses the challenges of designing resilient distributed systems, specifically addressing Byzantine faults and the need for mechanisms to detect and mitigate malicious or unreliable nodes.",
    "sample_answer": "\u201cThis excerpt highlights a critical concern in distributed systems design \u2013 Byzantine faults. The Byzantine Generals Problem illustrates the difficulty of achieving consensus when nodes can deliberately provide incorrect information, necessitating robust mechanisms like fencing tokens, or more sophisticated consensus algorithms. We need to consider the potential for adversarial behavior and design systems that can tolerate it, perhaps employing techniques like Raft or Paxos to ensure agreement even in the presence of faulty nodes, acknowledging that simply assuming honesty is a dangerous assumption.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where a distributed system might be vulnerable to Byzantine faults. What architectural choices would you make to mitigate this risk, and what principles would guide your decisions?\u201d"
  },
  {
    "chunk": "A system is Byzantine fault-tolerant  if it continues to operate correctly even if some\nof the nodes are malfunctioning and not obeying the protocol, or if malicious attack\u2010\ners are interfering with the network. This concern is relevant in certain specific cir\u2010\ncumstances. For example:\n\u2022In aerospace environments, the data in a computer\u2019s memory or CPU register\ncould become corrupted by radiation, leading it to respond to other nodes in\narbitrarily unpredictable ways. Since a system failure would be very expensive\n(e.g., an aircraft crashing and killing everyone on board, or a rocket colliding\nwith the International Space Station), flight control systems must tolerate Byzan\u2010\ntine faults [ 81, 82].\n\u2022In a system with multiple participating organizations, some participants may\nattempt to cheat or defraud others. In such circumstances, it is not safe for a\nnode to simply trust another node\u2019s messages, since they may be sent with mali\u2010\ncious intent. For example, peer-to-peer networks like Bitcoin and other block\u2010\nchains can be considered to be a way of getting mutually untrusting parties to\nagree whether a transaction happened or not, without relying on a central\nauthority [ 83].\nHowever, in the kinds of systems we discuss in this book, we can usually safely\nassume that there are no Byzantine faults. In your datacenter, all the nodes are con\u2010\ntrolled by your organization (so they can hopefully be trusted) and radiation levels\nare low enough that memory corruption is not a major problem. Protocols for mak\u2010\ning systems Byzantine fault-tolerant are quite complicated [ 84], and fault-tolerant\nembedded systems rely on support from the hardware level [ 81]. In most server-side\ndata systems, the cost of deploying Byzantine fault-tolerant solutions makes them\nimpractical.\nWeb applications do need to expect arbitrary and malicious behavior of clients that\nare under end-user control, such as web browsers. This is why input validation, sani\u2010\ntization, and output escaping are so important: to prevent SQL injection and cross-\nsite scripting, for example. However, we typically don\u2019t use Byzantine fault-tolerant\nprotocols here, but simply make the server the authority on deciding what client\nbehavior is and isn\u2019t allowed. In peer-to-peer networks, where there is no such cen\u2010\ntral authority, Byzantine fault tolerance is more relevant.\nA bug in the software could be regarded as a Byzantine fault, but if you deploy the\nsame software to all nodes, then a Byzantine fault-tolerant algorithm cannot save you.\nMost Byzantine fault-tolerant algorithms require a supermajority of more than two-\nthirds of the nodes to be functioning correctly (i.e., if you have four nodes, at most\none may malfunction). To use this approach against bugs, you would have to have\nfour independent implementations of the same software and hope that a bug only\nappears in one of the four implementations.\nKnowledge, Truth, and Lies | 305\n",
    "summary": "The chunk discusses Byzantine fault tolerance and its relevance in specific scenarios like aerospace and blockchain, contrasting it with typical data center environments.",
    "sample_answer": "\u201cOkay, let\u2019s talk about Byzantine fault tolerance. It\u2019s fundamentally about ensuring system operation even when nodes are behaving maliciously or erratically, which is critical in environments like blockchains where trust is distributed. In our datacenter, assuming a simple majority (e.g., 2/3 nodes) is typically sufficient for fault tolerance; we don\u2019t need the complexity of a full Byzantine algorithm. However, understanding the underlying principles\u2014like the need for supermajority agreement\u2014is important because it informs our decision-making when designing for resilience.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where Byzantine fault tolerance would be a necessary consideration in a data system design. What trade-offs would you have to make in terms of complexity and cost versus the level of resilience required?\u201d"
  },
  {
    "chunk": "Similarly, it would be appealing if a protocol could protect us from vulnerabilities,\nsecurity compromises, and malicious attacks. Unfortunately, this is not realistic\neither: in most systems, if an attacker can compromise one node, they can probably\ncompromise all of them, because they are probably running the same software. Thus,\ntraditional mechanisms (authentication, access control, encryption, firewalls, and so\non) continue to be the main protection against attackers.\nWeak forms of lying\nAlthough we assume that nodes are generally honest, it can be worth adding mecha\u2010\nnisms to software that guard against weak forms of \u201clying\u201d\u2014for example, invalid\nmessages due to hardware issues, software bugs, and misconfiguration. Such protec\u2010\ntion mechanisms are not full-blown Byzantine fault tolerance, as they would not\nwithstand a determined adversary, but they are nevertheless simple and pragmatic\nsteps toward better reliability. For example:\n\u2022Network packets do sometimes get corrupted due to hardware issues or bugs in\noperating systems, drivers, routers, etc. Usually, corrupted packets are caught by\nthe checksums built into TCP and UDP, but sometimes they evade detection [ 85,\n86, 87]. Simple measures are usually sufficient protection against such corrup\u2010\ntion, such as checksums in the application-level protocol.\n\u2022A publicly accessible application must carefully sanitize any inputs from users,\nfor example checking that a value is within a reasonable range and limiting the\nsize of strings to prevent denial of service through large memory allocations. An\ninternal service behind a firewall may be able to get away with less strict checks\non inputs, but some basic sanity-checking of values (e.g., in protocol parsing\n[85]) is a good idea.\n\u2022NTP clients can be configured with multiple server addresses. When synchroniz\u2010\ning, the client contacts all of them, estimates their errors, and checks that a\nmajority of servers agree on some time range. As long as most of the servers are\nokay, a misconfigured NTP server that is reporting an incorrect time is detected\nas an outlier and is excluded from synchronization [ 37]. The use of multiple\nservers makes NTP more robust than if it only uses a single server. \nSystem Model and Reality\nMany algorithms have been designed to solve distributed systems problems\u2014for\nexample, we will examine solutions for the consensus problem in Chapter 9 . In order\nto be useful, these algorithms need to tolerate the various faults of distributed systems\nthat we discussed in this chapter.\nAlgorithms need to be written in a way that does not depend too heavily on the\ndetails of the hardware and software configuration on which they are run. This in\n306 | Chapter 8: The Trouble with Distributed Systems\n",
    "summary": "The text discusses strategies for increasing system reliability through redundancy, input validation, and outlier detection, highlighting the need for algorithms to be fault-tolerant and independent of specific hardware configurations.",
    "sample_answer": "\u201cOkay, so this excerpt really underscores the importance of layered defenses in a distributed system. We\u2019re not aiming for Byzantine fault tolerance \u2013 that\u2019s overkill for many scenarios \u2013 but rather a pragmatic approach focusing on common vulnerabilities like packet corruption and malicious input. The use of multiple NTP servers, leveraging a majority consensus, is a classic example of reducing the impact of a single failing component, aligning with the CAP theorem\u2019s acknowledgment that you can\u2019t simultaneously achieve consistency and partition tolerance. Input validation, particularly checking ranges and sizes, represents a fundamental approach to preventing denial-of-service attacks or other issues stemming from bad data \u2013 it's about acknowledging that your system won\u2019t always get perfect inputs.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re building a distributed service that needs to maintain a consistent time reference. Describe the design considerations you\u2019d take to ensure resilience against NTP server failures, referencing specific techniques or algorithms relevant to mitigating these issues.\u201d"
  },
  {
    "chunk": "turn requires that we somehow formalize the kinds of faults that we expect to happen\nin a system. We do this by defining a system model , which is an abstraction that\ndescribes what things an algorithm may assume.\nWith regard to timing assumptions, three system models are in common use:\nSynchronous model\nThe synchronous model assumes bounded network delay, bounded process pau\u2010\nses, and bounded clock error. This does not imply exactly synchronized clocks or\nzero network delay; it just means you know that network delay, pauses, and clock\ndrift will never exceed some fixed upper bound [ 88]. The synchronous model is\nnot a realistic model of most practical systems, because (as discussed in this\nchapter) unbounded delays and pauses do occur.\nPartially synchronous model\nPartial synchrony means that a system behaves like a synchronous system most of\nthe time , but it sometimes exceeds the bounds for network delay, process pauses,\nand clock drift [ 88]. This is a realistic model of many systems: most of the time,\nnetworks and processes are quite well behaved\u2014otherwise we would never be\nable to get anything done\u2014but we have to reckon with the fact that any timing\nassumptions may be shattered occasionally. When this happens, network delay,\npauses, and clock error may become arbitrarily large.\nAsynchronous model\nIn this model, an algorithm is not allowed to make any timing assumptions\u2014in\nfact, it does not even have a clock (so it cannot use timeouts). Some algorithms\ncan be designed for the asynchronous model, but it is very restrictive.\nMoreover, besides timing issues, we have to consider node failures. The three most\ncommon system models for nodes are:\nCrash-stop faults\nIn the crash-stop model, an algorithm may assume that a node can fail in only\none way, namely by crashing. This means that the node may suddenly stop\nresponding at any moment, and thereafter that node is gone forever\u2014it never\ncomes back.\nCrash-recovery faults\nWe assume that nodes may crash at any moment, and perhaps start responding\nagain after some unknown time. In the crash-recovery model, nodes are assumed\nto have stable storage (i.e., nonvolatile disk storage) that is preserved across\ncrashes, while the in-memory state is assumed to be lost.\nByzantine (arbitrary) faults\nNodes may do absolutely anything, including trying to trick and deceive other\nnodes, as described in the last section.\nKnowledge, Truth, and Lies | 307\n",
    "summary": "The text outlines three system models \u2013 Synchronous, Partially Synchronous, and Asynchronous \u2013 each accounting for different timing and failure assumptions, crucial for designing robust algorithms.",
    "sample_answer": "\u201cOkay, this section highlights the importance of modeling system faults for algorithm design. The Synchronous model, while intuitive, is often unrealistic due to unbounded delays. Considering the Partially Synchronous model, we need to account for intermittent timing issues, which is a common reality.  Furthermore, understanding the failure models\u2014Crash-stop, Crash-recovery, and Byzantine\u2014is foundational to building resilient systems; the Crash-recovery model, in particular, where in-memory state is lost on failure, is a common assumption that influences the design of state management and data durability strategies.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say you're designing a system for processing financial transactions.  Based on the models described here, which system model would you choose and why? How would your approach to data durability and fault tolerance change depending on the model you select?\u201d"
  },
  {
    "chunk": "For modeling real systems, the partially synchronous model with crash-recovery\nfaults is generally the most useful model. But how do distributed algorithms cope\nwith that model?\nCorrectness of an algorithm\nTo define what it means for an algorithm to be correct , we can describe its properties .\nFor example, the output of a sorting algorithm has the property that for any two dis\u2010\ntinct elements of the output list, the element further to the left is smaller than the ele\u2010\nment further to the right. That is simply a formal way of defining what it means for a\nlist to be sorted.\nSimilarly, we can write down the properties we want of a distributed algorithm to\ndefine what it means to be correct. For example, if we are generating fencing tokens\nfor a lock (see \u201cFencing tokens\u201d on page 303), we may require the algorithm to have\nthe following properties:\nUniqueness\nNo two requests for a fencing token return the same value.\nMonotonic sequence\nIf request x returned token tx, and request y returned token ty, and x completed\nbefore y began, then tx < ty.\nAvailability\nA node that requests a fencing token and does not crash eventually receives a\nresponse.\nAn algorithm is correct in some system model if it always satisfies its properties in all\nsituations that we assume may occur in that system model. But how does this make\nsense? If all nodes crash, or all network delays suddenly become infinitely long, then\nno algorithm will be able to get anything done.\nSafety and liveness\nTo clarify the situation, it is worth distinguishing between two different kinds of\nproperties: safety  and liveness  properties. In the example just given, uniqueness  and\nmonotonic sequence  are safety properties, but availability  is a liveness property.\nWhat distinguishes the two kinds of properties? A giveaway is that liveness properties\noften include the word \u201ceventually\u201d in their definition. (And yes, you guessed it\u2014\neventual consistency  is a liveness property [ 89].)\nSafety is often informally defined as nothing bad happens , and liveness as something\ngood eventually happens . However, it\u2019s best to not read too much into those informal\ndefinitions, because the meaning of good and bad is subjective. The actual definitions\nof safety and liveness are precise and mathematical [ 90]:\n308 | Chapter 8: The Trouble with Distributed Systems\n",
    "summary": "The text discusses correctness properties for distributed algorithms, particularly in the context of crash-recovery faults and the distinction between safety and liveness properties.",
    "sample_answer": "\u201cOkay, let's unpack this. The core challenge with designing distributed systems is handling the partially synchronous model with crash-recovery faults. To ensure correctness, we need to define precise properties for our algorithms \u2013 like uniqueness and monotonicity for fencing tokens, as mentioned.  Critically, we must differentiate between safety properties, which guarantee nothing \u2018bad\u2019 happens (e.g., no duplicate tokens), and liveness properties, which ensure something \u2018good\u2019 eventually happens (e.g., availability of a token eventually after a crash).  The concept of eventual consistency, a liveness property, directly relates to this \u2013 it acknowledges that achieving immediate consistency isn\u2019t always possible, but the system will eventually converge to a consistent state.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say you\u2019re designing a system for generating fencing tokens in a distributed environment with crash-recovery. Describe the key properties you would define for the algorithm, differentiating between safety and liveness properties, and why each is important in this scenario.\u201d"
  },
  {
    "chunk": "\u2022If a safety property is violated, we can point at a particular point in time at which\nit was broken (for example, if the uniqueness property was violated, we can iden\u2010\ntify the particular operation in which a duplicate fencing token was returned).\nAfter a safety property has been violated, the violation cannot be undone\u2014the\ndamage is already done.\n\u2022A liveness property works the other way round: it may not hold at some point in\ntime (for example, a node may have sent a request but not yet received a\nresponse), but there is always hope that it may be satisfied in the future (namely\nby receiving a response).\nAn advantage of distinguishing between safety and liveness properties is that it helps\nus deal with difficult system models. For distributed algorithms, it is common to\nrequire that safety properties always  hold, in all possible situations of a system model\n[88]. That is, even if all nodes crash, or the entire network fails, the algorithm must\nnevertheless ensure that it does not return a wrong result (i.e., that the safety proper\u2010\nties remain satisfied).\nHowever, with liveness properties we are allowed to make caveats: for example, we\ncould say that a request needs to receive a response only if a majority of nodes have\nnot crashed, and only if the network eventually recovers from an outage. The defini\u2010\ntion of the partially synchronous model requires that eventually the system returns to\na synchronous state\u2014that is, any period of network interruption lasts only for a finite\nduration and is then repaired.\nMapping system models to the real world\nSafety and liveness properties and system models are very useful for reasoning about\nthe correctness of a distributed algorithm. However, when implementing an algo\u2010\nrithm in practice, the messy facts of reality come back to bite you again, and it\nbecomes clear that the system model is a simplified abstraction of reality.\nFor example, algorithms in the crash-recovery model generally assume that data in\nstable storage survives crashes. However, what happens if the data on disk is corrup\u2010\nted, or the data is wiped out due to hardware error or misconfiguration [ 91]? What\nhappens if a server has a firmware bug and fails to recognize its hard drives on\nreboot, even though the drives are correctly attached to the server [ 92]?\nQuorum algorithms (see \u201cQuorums for reading and writing\u201d  on page 179) rely on a\nnode remembering the data that it claims to have stored. If a node may suffer from\namnesia and forget previously stored data, that breaks the quorum condition, and\nthus breaks the correctness of the algorithm. Perhaps a new system model is needed,\nin which we assume that stable storage mostly survives crashes, but may sometimes\nbe lost. But that model then becomes harder to reason about.\nKnowledge, Truth, and Lies | 309\n",
    "summary": "The text discusses the importance of defining safety and liveness properties in distributed algorithms, highlighting potential model mismatches and the impact of factors like data corruption and node failures.",
    "sample_answer": "\u201cWhen designing a distributed system, it\u2019s crucial to start by clearly defining safety and liveness properties. Safety properties, like ensuring uniqueness, must *always* hold, regardless of failures \u2013 for example, a quorum algorithm relies on a node remembering the data it claims to have stored, and if that node suffers from amnesia, the quorum condition is broken. However, liveness properties, such as guaranteeing eventual response, allow for caveats, acknowledging that a request might not receive a response immediately but that recovery is possible.  This distinction mirrors the real-world challenge of accurately representing the system model, which often simplifies complex failure scenarios, and a mismatch can lead to incorrect results if factors like data corruption are not considered.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say you\u2019re designing a distributed key-value store. How would you approach defining safety and liveness properties for ensuring data consistency, and what potential real-world issues would you need to account for that might break those properties?\u201d"
  },
  {
    "chunk": "The theoretical description of an algorithm can declare that certain things are simply\nassumed not to happen\u2014and in non-Byzantine systems, we do have to make some\nassumptions about faults that can and cannot happen. However, a real implementa\u2010\ntion may still have to include code to handle the case where something happens that\nwas assumed to be impossible, even if that handling boils down to printf(\"Sucks to\nbe you\")  and exit(666) \u2014i.e., letting a human operator clean up the mess [ 93].\n(This is arguably the difference between computer science and software engineering.)\nThat is not to say that theoretical, abstract system models are worthless\u2014quite the\nopposite. They are incredibly helpful for distilling down the complexity of real sys\u2010\ntems to a manageable set of faults that we can reason about, so that we can under\u2010\nstand the problem and try to solve it systematically. We can prove algorithms correct\nby showing that their properties always hold in some system model.\nProving an algorithm correct does not mean its implementation  on a real system will\nnecessarily always behave correctly. But it\u2019s a very good first step, because the theo\u2010\nretical analysis can uncover problems in an algorithm that might remain hidden for a\nlong time in a real system, and that only come to bite you when your assumptions\n(e.g., about timing) are defeated due to unusual circumstances. Theoretical analysis\nand empirical testing are equally important. \nSummary\nIn this chapter we have discussed a wide range of problems that can occur in dis\u2010\ntributed systems, including:\n\u2022Whenever you try to send a packet over the network, it may be lost or arbitrarily\ndelayed. Likewise, the reply may be lost or delayed, so if you don\u2019t get a reply,\nyou have no idea whether the message got through.\n\u2022A node\u2019s clock may be significantly out of sync with other nodes (despite your\nbest efforts to set up NTP), it may suddenly jump forward or back in time, and\nrelying on it is dangerous because you most likely don\u2019t have a good measure of\nyour clock\u2019s error interval.\n\u2022A process may pause for a substantial amount of time at any point in its execu\u2010\ntion (perhaps due to a stop-the-world garbage collector), be declared dead by\nother nodes, and then come back to life again without realizing that it was\npaused.\nThe fact that such partial failures  can occur is the defining characteristic of dis\u2010\ntributed systems. Whenever software tries to do anything involving other nodes,\nthere is the possibility that it may occasionally fail, or randomly go slow, or not\nrespond at all (and eventually time out). In distributed systems, we try to build toler\u2010\n310 | Chapter 8: The Trouble with Distributed Systems\n",
    "summary": "The text highlights the importance of modeling potential failures in distributed systems, emphasizing the need for theoretical analysis alongside empirical testing to anticipate and handle network delays, clock skew, and process pauses.",
    "sample_answer": "\u201cOkay, this really underscores the difference between theoretical design and real-world implementation. We need to explicitly model potential failure scenarios \u2013 specifically, network delays, clock skew (which is why things like NTP are crucial for maintaining synchronization), and \u2018stop-the-world\u2019 pauses that can disrupt processes. These aren't just abstract concepts; they directly impact the availability and performance of our system. For example, if we\u2019re designing a distributed consensus algorithm, we\u2019d need to account for network delays when voting, potentially incorporating techniques like timeouts and retries to handle scenarios where a node isn\u2019t responding \u2013 this ties directly into the CAP theorem, where we have to balance consistency and availability.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re designing a system for updating a replicated database.  How would you account for network latency and potential node failures to ensure data consistency?  Specifically, what mechanisms would you employ, and why are they important in the context of the challenges described in this excerpt?\u201d"
  },
  {
    "chunk": "ance of partial failures into software, so that the system as a whole may continue\nfunctioning even when some of its constituent parts are broken.\nTo tolerate faults, the first step is to detect  them, but even that is hard. Most systems\ndon\u2019t have an accurate mechanism of detecting whether a node has failed, so most\ndistributed algorithms rely on timeouts to determine whether a remote node is still\navailable. However, timeouts can\u2019t distinguish between network and node failures,\nand variable network delay sometimes causes a node to be falsely suspected of crash\u2010\ning. Moreover, sometimes a node can be in a degraded state: for example, a Gigabit\nnetwork interface could suddenly drop to 1 Kb/s throughput due to a driver bug [ 94].\nSuch a node that is \u201climping\u201d but not dead can be even more difficult to deal with\nthan a cleanly failed node.\nOnce a fault is detected, making a system tolerate it is not easy either: there is no\nglobal variable, no shared memory, no common knowledge or any other kind of\nshared state between the machines. Nodes can\u2019t even agree on what time it is, let\nalone on anything more profound. The only way information can flow from one\nnode to another is by sending it over the unreliable network. Major decisions cannot\nbe safely made by a single node, so we require protocols that enlist help from other\nnodes and try to get a quorum to agree.\nIf you\u2019re used to writing software in the idealized mathematical perfection of a single\ncomputer, where the same operation always deterministically returns the same result,\nthen moving to the messy physical reality of distributed systems can be a bit of a\nshock. Conversely, distributed systems engineers will often regard a problem as triv\u2010\nial if it can be solved on a single computer [ 5], and indeed a single computer can do a\nlot nowadays [ 95]. If you can avoid opening Pandora\u2019s box and simply keep things on\na single machine, it is generally worth doing so.\nHowever, as discussed in the introduction to Part II , scalability is not the only reason\nfor wanting to use a distributed system. Fault tolerance and low latency (by placing\ndata geographically close to users) are equally important goals, and those things can\u2010\nnot be achieved with a single node.\nIn this chapter we also went on some tangents to explore whether the unreliability of\nnetworks, clocks, and processes is an inevitable law of nature. We saw that it isn\u2019t: it\nis possible to give hard real-time response guarantees and bounded delays in net\u2010\nworks, but doing so is very expensive and results in lower utilization of hardware\nresources. Most non-safety-critical systems choose cheap and unreliable over expen\u2010\nsive and reliable.\nWe also touched on supercomputers, which assume reliable components and thus\nhave to be stopped and restarted entirely when a component does fail. By contrast,\ndistributed systems can run forever without being interrupted at the service level,\nbecause all faults and maintenance can be handled at the node level\u2014at least in\nSummary | 311\n",
    "summary": "The text highlights the challenges of fault tolerance in distributed systems due to unreliable network conditions, clock skew, and process variability, emphasizing the trade-off between cheap/unreliable systems and expensive/reliable ones. It also touches on the concept of quorum-based decision-making for fault tolerance.",
    "sample_answer": "\u201cOkay, so the core issue here is that distributed systems fundamentally operate under assumptions of unreliability \u2013 network latency, clock skew, and process failures are common.  We\u2019re dealing with the CAP theorem, where we have to choose between Consistency, Availability, and Partition Tolerance. To build fault-tolerant systems, we need to use protocols like quorum-based decision-making, where we require a majority of nodes to agree on a value, acknowledging that reaching a quorum isn't always guaranteed due to network issues.  Furthermore, the choice between cheap, unreliable systems (like supercomputers) versus expensive, reliable ones depends on the criticality of the application and the acceptable level of latency.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you\u2019re designing a system for a high-throughput, low-latency message queue.  Considering the potential for network unreliability and clock skew, what architectural decisions would you make to ensure data durability and eventual consistency, and what trade-offs would you be weighing?\u201d"
  },
  {
    "chunk": "theory. (In practice, if a bad configuration change is rolled out to all nodes, that will\nstill bring a distributed system to its knees.)\nThis chapter has been all about problems, and has given us a bleak outlook. In the\nnext chapter we will move on to solutions, and discuss some algorithms that have\nbeen designed to cope with all the problems in distributed systems. \nReferences\n[1] Mark Cavage: \u201c There\u2019s Just No Getting Around It: You\u2019re Building a Distributed\nSystem ,\u201d ACM Queue , volume 11, number 4, pages 80-89, April 2013. doi:\n10.1145/2466486.2482856\n[2] Jay Kreps: \u201c Getting Real About Distributed System Reliability ,\u201d blog.empathy\u2010\nbox.com , March 19, 2012.\n[3] Sydney Padua: The Thrilling Adventures of Lovelace and Babbage: The (Mostly)\nTrue Story of the First Computer . Particular Books, April 2015. ISBN:\n978-0-141-98151-2\n[4] Coda Hale: \u201c You Can\u2019t Sacrifice Partition Tolerance ,\u201d codahale.com , October 7,\n2010.\n[5] Jeff Hodges: \u201c Notes on Distributed Systems for Young Bloods ,\u201d somethingsimi\u2010\nlar.com , January 14, 2013.\n[6] Antonio Regalado: \u201c Who Coined \u2018Cloud Computing\u2019? ,\u201d technologyreview.com ,\nOctober 31, 2011.\n[7] Luiz Andr\u00e9 Barroso, Jimmy Clidaras, and Urs H\u00f6lzle: \u201c The Datacenter as a Com\u2010\nputer: An Introduction to the Design of Warehouse-Scale Machines, Second Edi\u2010\ntion,\u201d Synthesis Lectures on Computer Architecture , volume 8, number 3, Morgan &\nClaypool Publishers, July 2013. doi:10.2200/S00516ED2V01Y201306CAC024 , ISBN:\n978-1-627-05010-4\n[8] David Fiala, Frank Mueller, Christian Engelmann, et al.: \u201c Detection and Correc\u2010\ntion of Silent Data Corruption for Large-Scale High-Performance Computing ,\u201d at\nInternational Conference for High Performance Computing, Networking, Storage and\nAnalysis  (SC12), November 2012.\n[9] Arjun Singh, Joon Ong, Amit Agarwal, et al.: \u201c Jupiter Rising: A Decade of Clos\nTopologies and Centralized Control in Google\u2019s Datacenter Network ,\u201d at Annual\nConference of the ACM Special Interest Group on Data Communication  (SIGCOMM),\nAugust 2015. doi:10.1145/2785956.2787508\n[10] Glenn K. Lockwood: \u201c Hadoop\u2019s Uncomfortable Fit in HPC ,\u201d glennklock\u2010\nwood.blogspot.co.uk , May 16, 2014.\n312 | Chapter 8: The Trouble with Distributed Systems\n",
    "summary": "The text discusses the challenges and complexities of designing and maintaining distributed systems, referencing concepts like data corruption detection and the limitations of Hadoop in high-performance computing.",
    "sample_answer": "\u201cOkay, this chapter highlights a critical point: distributed systems aren\u2019t just about building components; it\u2019s about proactively addressing potential failure modes. The reference to data corruption detection by Fiala et al. (SC12) underscores the need for robust mechanisms to handle silent errors \u2013 something Hadoop, as Lockwood points out, struggled with in HPC environments. This aligns with the broader principle of building for resilience, anticipating data integrity issues, and incorporating redundancy and error correction strategies.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where data corruption could significantly impact a large-scale distributed system. What specific strategies, drawing from the references provided, might you employ to mitigate this risk?\u201d"
  },
  {
    "chunk": "[11] John von Neumann: \u201c Probabilistic Logics and the Synthesis of Reliable Organ\u2010\nisms from Unreliable Components ,\u201d in Automata Studies (AM-34) , edited by Claude\nE. Shannon and John McCarthy, Princeton University Press, 1956. ISBN:\n978-0-691-07916-5\n[12] Richard W. Hamming: The Art of Doing Science and Engineering . Taylor & Fran\u2010\ncis, 1997. ISBN: 978-9-056-99500-3\n[13] Claude E. Shannon: \u201c A Mathematical Theory of Communication ,\u201d The Bell Sys\u2010\ntem Technical Journal , volume 27, number 3, pages 379\u2013423 and 623\u2013656, July 1948.\n[14] Peter Bailis and Kyle Kingsbury: \u201c The Network Is Reliable ,\u201d ACM Queue , vol\u2010\nume 12, number 7, pages 48-55, July 2014. doi:10.1145/2639988.2639988\n[15] Joshua B. Leners, Trinabh Gupta, Marcos K. Aguilera, and Michael Walfish:\n\u201cTaming Uncertainty in Distributed Systems with Help from the Network ,\u201d at 10th\nEuropean Conference on Computer Systems  (EuroSys), April 2015. doi:\n10.1145/2741948.2741976\n[16] Phillipa Gill, Navendu Jain, and Nachiappan Nagappan: \u201c Understanding Net\u2010\nwork Failures in Data Centers: Measurement, Analysis, and Implications ,\u201d at ACM\nSIGCOMM Conference , August 2011. doi:10.1145/2018436.2018477\n[17] Mark Imbriaco: \u201c Downtime Last Saturday ,\u201d github.com , December 26, 2012.\n[18] Will Oremus: \u201c The Global Internet Is Being Attacked by Sharks, Google Con\u2010\nfirms ,\u201d slate.com , August 15, 2014.\n[19] Marc A. Donges: \u201c Re: bnx2 cards Intermittantly Going Offline ,\u201d Message to\nLinux netdev  mailing list, spinics.net , September 13, 2012.\n[20] Kyle Kingsbury: \u201c Call Me Maybe: Elasticsearch ,\u201d aphyr.com , June 15, 2014.\n[21] Salvatore Sanfilippo: \u201c A Few Arguments About Redis Sentinel Properties and\nFail Scenarios ,\u201d antirez.com , October 21, 2014.\n[22] Bert Hubert: \u201c The Ultimate SO_LINGER Page, or: Why Is My TCP Not Relia\u2010\nble,\u201d blog.netherlabs.nl , January 18, 2009.\n[23] Nicolas Liochon: \u201c CAP: If All You Have Is a Timeout, Everything Looks Like a\nPartition ,\u201d blog.thislongrun.com , May 25, 2015.\n[24] Jerome H. Saltzer, David P. Reed, and David D. Clark: \u201c End-To-End Arguments\nin System Design ,\u201d ACM Transactions on Computer Systems , volume 2, number 4,\npages 277\u2013288, November 1984. doi:10.1145/357401.357402\n[25] Matthew P. Grosvenor, Malte Schwarzkopf, Ionel Gog, et al.: \u201c Queues Don\u2019t\nMatter When You Can JUMP Them! ,\u201d at 12th USENIX Symposium on Networked\nSystems Design and Implementation  (NSDI), May 2015.\nSummary | 313\n",
    "summary": "The text discusses reliability in distributed systems, referencing concepts like CAP theorem, end-to-end arguments, and network failures, alongside practical examples of debugging and system design considerations.",
    "sample_answer": "This collection of references highlights the fundamental challenges in building reliable distributed systems. The discussion of the CAP theorem (referenced by Nicolas Liochon) immediately points to the inherent trade-offs between consistency, availability, and partition tolerance\u2014a cornerstone of system design. Similarly, Jerome H. Saltzer's \u201cEnd-To-End Arguments\u201d underscores the importance of designing systems from the user\u2019s perspective to minimize the impact of network failures, suggesting a focus on resilience.  Furthermore, references to debugging specific network issues (like the bnx2 card problem) and practical techniques (such as queue jumping as described in Matthew P. Grosvenor\u2019s work) demonstrate a hands-on approach to understanding and mitigating these failures.",
    "potential_interview_question": "\u201cImagine you're designing a globally distributed key-value store. The team is debating whether to prioritize consistency or availability.  Using examples from the referenced material (particularly the CAP theorem and Saltzer\u2019s \u2018End-to-End Arguments\u2019), how would you approach this trade-off, and what design considerations would you prioritize?\u201d"
  },
  {
    "chunk": "[26] Guohui Wang and T. S. Eugene Ng: \u201c The Impact of Virtualization on Network\nPerformance of Amazon EC2 Data Center ,\u201d at 29th IEEE International Conference on\nComputer Communications  (INFOCOM), March 2010. doi:10.1109/INFCOM.\n2010.5461931\n[27] Van Jacobson: \u201c Congestion Avoidance and Control ,\u201d at ACM Symposium on\nCommunications Architectures and Protocols  (SIGCOMM), August 1988. doi:\n10.1145/52324.52356\n[28] Brandon Philips: \u201c etcd: Distributed Locking and Service Discovery ,\u201d at Strange\nLoop , September 2014.\n[29] Steve Newman: \u201c A Systematic Look at EC2 I/O ,\u201d blog.scalyr.com , October 16,\n2012.\n[30] Naohiro Hayashibara, Xavier D\u00e9fago, Rami Yared, and Takuya Katayama: \u201c The\n\u03d5 Accrual Failure Detector ,\u201d Japan Advanced Institute of Science and Technology,\nSchool of Information Science, Technical Report IS-RR-2004-010, May 2004.\n[31] Jeffrey Wang: \u201c Phi Accrual Failure Detector ,\u201d ternarysearch.blogspot.co.uk ,\nAugust 11, 2013.\n[32] Srinivasan Keshav: An Engineering Approach to Computer Networking: ATM\nNetworks, the Internet, and the Telephone Network . Addison-Wesley Professional,\nMay 1997. ISBN: 978-0-201-63442-6\n[33] Cisco, \u201c Integrated Services Digital Network ,\u201d docwiki.cisco.com .\n[34] Othmar Kyas: ATM Networks . International Thomson Publishing, 1995. ISBN:\n978-1-850-32128-6\n[35] \u201cInfiniBand FAQ ,\u201d Mellanox Technologies, December 22, 2014.\n[36] Jose Renato Santos, Yoshio Turner, and G. (John) Janakiraman: \u201c End-to-End\nCongestion Control for InfiniBand ,\u201d at 22nd Annual Joint Conference of the IEEE\nComputer and Communications Societies  (INFOCOM), April 2003. Also published by\nHP Laboratories Palo Alto, Tech Report HPL-2002-359. doi:10.1109/INFCOM.\n2003.1208949\n[37] Ulrich Windl, David Dalton, Marc Martinec, and Dale R. Worley: \u201c The NTP\nFAQ and HOWTO ,\u201d ntp.org , November 2006.\n[38] John Graham-Cumming: \u201c How and why the leap second affected Cloudflare\nDNS ,\u201d blog.cloudflare.com , January 1, 2017.\n[39] David Holmes: \u201c Inside the Hotspot VM: Clocks, Timers and Scheduling Events\n\u2013 Part I \u2013 Windows ,\u201d blogs.oracle.com , October 2, 2006.\n[40] Steve Loughran: \u201c Time on Multi-Core, Multi-Socket Servers ,\u201d stevelough\u2010\nran.blogspot.co.uk , September 17, 2015.\n314 | Chapter 8: The Trouble with Distributed Systems\n",
    "summary": "The chunk discusses network performance, congestion control, failure detection, and time synchronization in distributed systems, referencing research papers and blog posts.",
    "sample_answer": "\u201cThis chunk highlights several critical challenges in designing high-performance distributed systems. The research on EC2 virtualization and InfiniBand congestion control demonstrates the importance of understanding and mitigating network bottlenecks \u2013 a core concern for data engineering. Specifically, the \u2018\u03d5 Accrual Failure Detector\u2019 discussed in the Hayashibara et al. paper is a technique for detecting failures in a distributed system, which is essential for ensuring data durability and availability.  Furthermore, considering time synchronization like the NTP FAQ and the challenges with hot spots (as described by Holmes) is crucial for consistent data processing.\u201d",
    "potential_interview_question": "\u201cDescribe the \u03d5 Accrual Failure Detector. Explain its purpose and why it's used in designing reliable distributed systems.\u201d"
  },
  {
    "chunk": "[41] James C. Corbett, Jeffrey Dean, Michael Epstein, et al.: \u201c Spanner: Google\u2019s\nGlobally-Distributed Database ,\u201d at 10th USENIX Symposium on Operating System\nDesign and Implementation  (OSDI), October 2012.\n[42] M. Caporaloni and R. Ambrosini: \u201c How Closely Can a Personal Computer\nClock Track the UTC Timescale Via the Internet? ,\u201d European Journal of Physics , vol\u2010\nume 23, number 4, pages L17\u2013L21, June 2012. doi:10.1088/0143-0807/23/4/103\n[43] Nelson Minar: \u201c A Survey of the NTP Network ,\u201d alumni.media.mit.edu , Decem\u2010\nber 1999.\n[44] Viliam Holub: \u201c Synchronizing Clocks in a Cassandra Cluster Pt. 1 \u2013 The Prob\u2010\nlem,\u201d blog.logentries.com , March 14, 2014.\n[45] Poul-Henning Kamp: \u201c The One-Second War (What Time Will You Die?) ,\u201d\nACM Queue , volume 9, number 4, pages 44\u201348, April 2011. doi:\n10.1145/1966989.1967009\n[46] Nelson Minar: \u201c Leap Second Crashes Half the Internet ,\u201d somebits.com , July 3,\n2012.\n[47] Christopher Pascoe: \u201c Time, Technology and Leaping Seconds ,\u201d googleblog.blog\u2010\nspot.co.uk , September 15, 2011.\n[48] Mingxue Zhao and Jeff Barr: \u201c Look Before You Leap \u2013 The Coming Leap Second\nand AWS ,\u201d aws.amazon.com , May 18, 2015.\n[49] Darryl Veitch and Kanthaiah Vijayalayan: \u201c Network Timing and the 2015 Leap\nSecond ,\u201d at 17th International Conference on Passive and Active Measurement\n(PAM), April 2016. doi:10.1007/978-3-319-30505-9_29\n[50] \u201cTimekeeping in VMware Virtual Machines ,\u201d Information Guide, VMware, Inc.,\nDecember 2011.\n[51] \u201cMiFID II / MiFIR: Regulatory Technical and Implementing Standards \u2013 Annex\nI (Draft) ,\u201d European Securities and Markets Authority, Report ESMA/2015/1464,\nSeptember 2015.\n[52] Luke Bigum: \u201c Solving MiFID II Clock Synchronisation With Minimum Spend\n(Part 1) ,\u201d lmax.com , November 27, 2015.\n[53] Kyle Kingsbury: \u201c Call Me Maybe: Cassandra ,\u201d aphyr.com , September 24, 2013.\n[54] John Daily: \u201c Clocks Are Bad, or, Welcome to the Wonderful World of Dis\u2010\ntributed Systems ,\u201d basho.com , November 12, 2013.\n[55] Kyle Kingsbury: \u201c The Trouble with Timestamps ,\u201d aphyr.com , October 12, 2013.\nSummary | 315\n",
    "summary": "This chunk discusses the challenges of time synchronization across distributed systems, particularly regarding leap seconds and regulatory compliance in financial markets. It highlights the need for robust clock synchronization strategies and potential system-wide disruptions.",
    "sample_answer": "\u201cThe core issue here is the inherent difficulty in maintaining accurate time across geographically distributed systems, specifically focusing on the problem of leap seconds. As John Daily points out, \u2018Clocks Are Bad, or, Welcome to the Wonderful World of Distributed Systems,\u2019 and leap seconds exemplify this challenge\u2014they introduce a discontinuity in time that must be handled with extreme care. This requires a strategy like Cassandra\u2019s approach, where you're essentially accepting that perfect synchronization is unattainable and designing systems to mitigate the impact of this divergence.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system that needs to process financial transactions with millisecond accuracy. How would you approach the problem of clock synchronization, considering the potential for leap seconds and the inherent challenges of distributed systems? What architectural considerations would you prioritize, and what potential failure modes would you need to address?\u201d"
  },
  {
    "chunk": "[56] Leslie Lamport: \u201c Time, Clocks, and the Ordering of Events in a Distributed Sys\u2010\ntem,\u201d Communications of the ACM , volume 21, number 7, pages 558\u2013565, July 1978.\ndoi:10.1145/359545.359563\n[57] Sandeep Kulkarni, Murat Demirbas, Deepak Madeppa, et al.: \u201c Logical Physical\nClocks and Consistent Snapshots in Globally Distributed Databases ,\u201d State University\nof New York at Buffalo, Computer Science and Engineering Technical Report\n2014-04, May 2014.\n[58] Justin Sheehy: \u201c There Is No Now: Problems With Simultaneity in Distributed\nSystems ,\u201d ACM Queue , volume 13, number 3, pages 36\u201341, March 2015. doi:\n10.1145/2733108\n[59] Murat Demirbas: \u201c Spanner: Google\u2019s Globally-Distributed Database ,\u201d muratbuf\u2010\nfalo.blogspot.co.uk , July 4, 2013.\n[60] Dahlia Malkhi and Jean-Philippe Martin: \u201c Spanner\u2019s Concurrency Control ,\u201d\nACM SIGACT News , volume 44, number 3, pages 73\u201377, September 2013. doi:\n10.1145/2527748.2527767\n[61] Manuel Bravo, Nuno Diegues, Jingna Zeng, et al.: \u201c On the Use of Clocks to\nEnforce Consistency in the Cloud ,\u201d IEEE Data Engineering Bulletin , volume 38, num\u2010\nber 1, pages 18\u201331, March 2015.\n[62] Spencer Kimball: \u201c Living Without Atomic Clocks ,\u201d cockroachlabs.com , February\n17, 2016.\n[63] Cary G. Gray and David R. Cheriton: \u201c Leases: An Efficient Fault-Tolerant Mech\u2010\nanism for Distributed File Cache Consistency ,\u201d at 12th ACM Symposium on Operat\u2010\ning Systems Principles  (SOSP), December 1989. doi:10.1145/74850.74870\n[64] Todd Lipcon: \u201c Avoiding Full GCs in Apache HBase with MemStore-Local Allo\u2010\ncation Buffers: Part 1 ,\u201d blog.cloudera.com , February 24, 2011.\n[65] Martin Thompson: \u201c Java Garbage Collection Distilled ,\u201d mechanical-\nsympathy.blogspot.co.uk , July 16, 2013.\n[66] Alexey Ragozin: \u201c How to Tame Java GC Pauses? Surviving 16GiB Heap and\nGreater ,\u201d java.dzone.com , June 28, 2011.\n[67] Christopher Clark, Keir Fraser, Steven Hand, et al.: \u201c Live Migration of Virtual\nMachines ,\u201d at 2nd USENIX Symposium on Symposium on Networked Systems Design\n& Implementation  (NSDI), May 2005.\n[68] Mike Shaver: \u201c fsyncers and Curveballs ,\u201d shaver.off.net , May 25, 2008.\n[69] Zhenyun Zhuang and Cuong Tran: \u201c Eliminating Large JVM GC Pauses Caused\nby Background IO Traffic ,\u201d engineering.linkedin.com , February 10, 2016.\n316 | Chapter 8: The Trouble with Distributed Systems\n",
    "summary": "The chunk discusses techniques for handling concurrency, consistency, and performance challenges in distributed systems, particularly focusing on clock synchronization, fault tolerance, and JVM garbage collection.",
    "sample_answer": "\u201cOkay, this excerpt highlights several critical challenges in designing globally-distributed systems. The discussion of Leslie Lamport\u2019s work on \u2018Time, Clocks, and the Ordering of Events\u2019 underscores the fundamental difficulty of achieving a globally consistent view when clocks are inherently asynchronous.  Specifically, the mention of \u2018Leases\u2019 (Gray and Cheriton, 1989) presents a key fault-tolerant mechanism for managing concurrent access to data, essentially preventing conflicting updates by providing a time-ordered lock.  Furthermore, the challenges around JVM garbage collection (Thompson, 2013; Ragozin, 2011) demonstrate how system-level optimizations can dramatically impact performance and availability.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where you would employ a mechanism like \u2018Leases\u2019 to ensure data consistency in a distributed system. What are the potential drawbacks of using this approach, and how would you mitigate them?\u201d"
  },
  {
    "chunk": "[70] David Terei and Amit Levy: \u201c Blade: A Data Center Garbage Collector ,\u201d arXiv:\n1504.02578, April 13, 2015.\n[71] Martin Maas, Tim Harris, Krste Asanovi\u0107, and John Kubiatowicz: \u201c Trash Day:\nCoordinating Garbage Collection in Distributed Systems ,\u201d at 15th USENIX Workshop\non Hot Topics in Operating Systems  (HotOS), May 2015.\n[72] \u201cPredictable Low Latency ,\u201d Cinnober Financial Technology AB, cinnober.com ,\nNovember 24, 2013.\n[73] Martin Fowler: \u201c The LMAX Architecture ,\u201d martinfowler.com , July 12, 2011.\n[74] Flavio P. Junqueira and Benjamin Reed: ZooKeeper: Distributed Process Coordi\u2010\nnation . O\u2019Reilly Media, 2013. ISBN: 978-1-449-36130-3\n[75] Enis S\u00f6ztutar: \u201c HBase and HDFS: Understanding Filesystem Usage in HBase ,\u201d at\nHBaseCon , June 2013.\n[76] Caitie McCaffrey: \u201c Clients Are Jerks: AKA How Halo 4 DoSed the Services at\nLaunch & How We Survived ,\u201d caitiem.com , June 23, 2015.\n[77] Leslie Lamport, Robert Shostak, and Marshall Pease: \u201c The Byzantine Generals\nProblem ,\u201d ACM Transactions on Programming Languages and Systems  (TOPLAS),\nvolume 4, number 3, pages 382\u2013401, July 1982. doi:10.1145/357172.357176\n[78] Jim N. Gray: \u201c Notes on Data Base Operating Systems ,\u201d in Operating Systems: An\nAdvanced Course , Lecture Notes in Computer Science, volume 60, edited by R. Bayer,\nR. M. Graham, and G. Seegm\u00fcller, pages 393\u2013481, Springer-Verlag, 1978. ISBN:\n978-3-540-08755-7\n[79] Brian Palmer: \u201c How Complicated Was the Byzantine Empire? ,\u201d slate.com , Octo\u2010\nber 20, 2011.\n[80] Leslie Lamport: \u201c My Writings ,\u201d research.microsoft.com , December 16, 2014. This\npage can be found by searching the web for the 23-character string obtained by\nremoving the hyphens from the string allla-mport-spubso-ntheweb .\n[81] John Rushby: \u201c Bus Architectures for Safety-Critical Embedded Systems ,\u201d at 1st\nInternational Workshop on Embedded Software  (EMSOFT), October 2001.\n[82] Jake Edge: \u201c ELC: SpaceX Lessons Learned ,\u201d lwn.net , March 6, 2013.\n[83] Andrew Miller and Joseph J. LaViola, Jr.: \u201c Anonymous Byzantine Consensus\nfrom Moderately-Hard Puzzles: A Model for Bitcoin ,\u201d University of Central Florida,\nTechnical Report CS-TR-14-01, April 2014.\n[84] James Mickens: \u201c The Saddest Moment ,\u201d USENIX ;login: logout , May 2013.\n[85] Evan Gilman: \u201c The Discovery of Apache ZooKeeper\u2019s Poison Packet ,\u201d pagerd\u2010\nuty.com , May 7, 2015.\nSummary | 317\n",
    "summary": "The text discusses distributed system design challenges like coordination, consensus, and failure handling, referencing concepts like the Byzantine Generals Problem, ZooKeeper, and strategies for handling service disruptions.",
    "sample_answer": "\u201cOkay, this collection of papers highlights some really critical aspects of building resilient distributed systems. The Byzantine Generals Problem, as discussed in Lamport\u2019s work, demonstrates the fundamental challenge of achieving consensus in the face of potential malicious actors \u2013 a core issue when designing systems that need to operate reliably even if some components fail or are compromised. Similarly, ZooKeeper, as detailed in the book, provides a centralized coordination service, allowing services to discover each other and maintain a consistent state, which is essential for building systems like those described in the SpaceX ELC paper. The focus on understanding and mitigating disruptions, as seen in the ZooKeeper poison packet discussion, is a strong indicator of a sophisticated understanding of system reliability.\"",
    "potential_interview_question": "\"Let\u2019s say you\u2019re designing a distributed system for financial transactions. How would you approach ensuring that transactions are reliably committed across multiple nodes, acknowledging the potential for network failures or malicious nodes (drawing inspiration from concepts like the Byzantine Generals Problem)? What tools or techniques could you employ to achieve this?\""
  },
  {
    "chunk": "[86] Jonathan Stone and Craig Partridge: \u201c When the CRC and TCP Checksum Disa\u2010\ngree,\u201d at ACM Conference on Applications, Technologies, Architectures, and Protocols\nfor Computer Communication  (SIGCOMM), August 2000. doi:\n10.1145/347059.347561\n[87] Evan Jones: \u201c How Both TCP and Ethernet Checksums Fail ,\u201d evanjones.ca , Octo\u2010\nber 5, 2015.\n[88] Cynthia Dwork, Nancy Lynch, and Larry Stockmeyer: \u201c Consensus in the Pres\u2010\nence of Partial Synchrony ,\u201d Journal of the ACM , volume 35, number 2, pages 288\u2013\n323, April 1988. doi:10.1145/42282.42283\n[89] Peter Bailis and Ali Ghodsi: \u201c Eventual Consistency Today: Limitations, Exten\u2010\nsions, and Beyond ,\u201d ACM Queue , volume 11, number 3, pages 55-63, March 2013.\ndoi:10.1145/2460276.2462076\n[90] Bowen Alpern and Fred B. Schneider: \u201c Defining Liveness ,\u201d Information Process\u2010\ning Letters , volume 21, number 4, pages 181\u2013185, October 1985. doi:\n10.1016/0020-0190(85)90056-0\n[91] Flavio P. Junqueira: \u201c Dude, Where\u2019s My Metadata? ,\u201d fpj.me , May 28, 2015.\n[92] Scott Sanders: \u201c January 28th Incident Report ,\u201d github.com , February 3, 2016.\n[93] Jay Kreps: \u201c A Few Notes on Kafka and Jepsen ,\u201d blog.empathybox.com , Septem\u2010\nber 25, 2013.\n[94] Thanh Do, Mingzhe Hao, Tanakorn Leesatapornwongsa, et al.: \u201c Limplock:\nUnderstanding the Impact of Limpware on Scale-out Cloud Systems ,\u201d at 4th ACM\nSymposium on Cloud Computing  (SoCC), October 2013. doi:\n10.1145/2523616.2523627\n[95] Frank McSherry, Michael Isard, and Derek G. Murray: \u201c Scalability! But at What\nCOST? ,\u201d at 15th USENIX Workshop on Hot Topics in Operating Systems  (HotOS),\nMay 2015.\n318 | Chapter 8: The Trouble with Distributed Systems\n",
    "summary": "The text discusses challenges in distributed systems, particularly regarding eventual consistency, measurement issues, and the impact of \"limpware\" on scalability.",
    "sample_answer": "\u201cThis section highlights critical considerations for designing resilient, scalable distributed systems. Specifically, the references to Dwork et al. on consensus in the presence of partial synchrony underscores the difficulties of achieving strong consistency in systems where nodes operate at different speeds \u2013 a classic example of the CAP theorem. Furthermore, the \u201cLimpware\u201d study by Do et al. demonstrates the surprising impact of seemingly benign, low-bandwidth traffic on the performance of scale-out systems, necessitating careful monitoring and potentially specialized traffic management strategies. Addressing this requires a deep understanding of network latency and the potential for correlated failures.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where eventual consistency might be acceptable, and outline the monitoring strategies you would employ to ensure the system continues to operate correctly despite potential inconsistencies. How would you leverage the insights from the \u2018Limpware\u2019 study in this situation?\u201d"
  },
  {
    "chunk": "CHAPTER 9\nConsistency and Consensus\nIs it better to be alive and wrong or right and dead?\n\u2014Jay Kreps, A Few Notes on Kafka and Jepsen  (2013)\nLots of things can go wrong in distributed systems, as discussed in Chapter 8 . The\nsimplest way of handling such faults is to simply let the entire service fail, and show\nthe user an error message. If that solution is unacceptable, we need to find ways of\ntolerating  faults\u2014that is, of keeping the service functioning correctly, even if some\ninternal component is faulty.\nIn this chapter, we will talk about some examples of algorithms and protocols for\nbuilding fault-tolerant distributed systems. We will assume that all the problems\nfrom Chapter 8  can occur: packets can be lost, reordered, duplicated, or arbitrarily\ndelayed in the network; clocks are approximate at best; and nodes can pause (e.g., due\nto garbage collection) or crash at any time.\nThe best way of building fault-tolerant systems is to find some general-purpose\nabstractions with useful guarantees, implement them once, and then let applications\nrely on those guarantees. This is the same approach as we used with transactions in\n",
    "summary": "The text discusses building fault-tolerant distributed systems by leveraging general-purpose abstractions like consensus algorithms and focusing on guarantees for system resilience. It highlights the importance of abstractions like transactions and applying them consistently across the system.",
    "sample_answer": "\u201cOkay, let\u2019s talk about building resilient systems.  The core challenge, as illustrated here, is handling network issues like packet loss and delayed messages, as well as node failures \u2013 things we discussed in Chapter 8. To build a system that can tolerate these issues, we need to think about abstractions that provide guarantees, such as consensus algorithms like those described in Jepsen \u2013 essentially, mechanisms for agreeing on a single state across multiple nodes, even in the face of failures. This approach is similar to how we\u2019ve used transactions to ensure data consistency, but applied at a larger scale.\u201d",
    "potential_interview_question": "\u201cImagine you're designing a system that needs to reliably track events in a distributed environment.  What are some strategies you would consider to ensure data consistency and fault tolerance, referencing any relevant concepts like consensus or replication that we've discussed?\u201d"
  },
  {
    "chunk": "Chapter 7 : by using a transaction, the application can pretend that there are no\ncrashes (atomicity), that nobody else is concurrently accessing the database (isola\u2010\ntion), and that storage devices are perfectly reliable (durability). Even though crashes,\nrace conditions, and disk failures do occur, the transaction abstraction hides those\nproblems so that the application doesn\u2019t need to worry about them.\nWe will now continue along the same lines, and seek abstractions that can allow an\napplication to ignore some of the problems with distributed systems. For example,\none of the most important abstractions for distributed systems is consensus : that is,\ngetting all of the nodes to agree on something. As we shall see in this chapter, reliably\n321\nreaching consensus in spite of network faults and process failures is a surprisingly\ntricky problem.\nOnce you have an implementation of consensus, applications can use it for various\npurposes. For example, say you have a database with single-leader replication. If the\nleader dies and you need to fail over to another node, the remaining database nodes\ncan use consensus to elect a new leader. As discussed in \u201cHandling Node Outages\u201d on\npage 156 , it\u2019s important that there is only one leader, and that all nodes agree who the\nleader is. If two nodes both believe that they are the leader, that situation is called split\nbrain , and it often leads to data loss. Correct implementations of consensus help\navoid such problems.\nLater in this chapter, in \u201cDistributed Transactions and Consensus\u201d on page 352, we\nwill look into algorithms  to solve consensus and related problems. But first we first\nneed to explore the range of guarantees and abstractions that can be provided in a\ndistributed system.\nWe need to understand the scope of what can and cannot be done: in some situa\u2010\ntions, it\u2019s possible for the system to tolerate faults and continue working; in other sit\u2010\nuations, that is not possible. The limits of what is and isn\u2019t possible have been\nexplored in depth, both in theoretical proofs and in practical implementations. We\nwill get an overview of those fundamental limits in this chapter.\nResearchers in the field of distributed systems have been studying these topics for\ndecades, so there is a lot of material\u2014we\u2019ll only be able to scratch the surface. In this\nbook we don\u2019t have space to go into details of the formal models and proofs, so we\nwill stick with informal intuitions. The literature references offer plenty of additional\ndepth if you\u2019re interested.\nConsistency Guarantees\nIn \u201cProblems with Replication Lag\u201d on page 161  we looked at some timing issues that\noccur in a replicated database. If you look at two database nodes at the same moment\nin time, you\u2019re likely to see different data on the two nodes, because write requests\narrive on different nodes at different times. These inconsistencies occur no matter\nwhat replication method the database uses (single-leader, multi-leader, or leaderless\nreplication).\nMost replicated databases provide at least eventual consistency , which means that if\nyou stop writing to the database and wait for some unspecified length of time, then\neventually all read requests will return the same value [ 1]. In other words, the incon\u2010\nsistency is temporary, and it eventually resolves itself (assuming that any faults in the\nnetwork are also eventually repaired). A better name for eventual consistency may be\nconvergence , as we expect all replicas to eventually converge to the same value [ 2].\n322 | Chapter 9: Consistency and Consensus\n",
    "summary": "The text discusses transaction abstractions, consensus algorithms, and eventual consistency guarantees within a replicated distributed system.",
    "sample_answer": "\u201cOkay, let\u2019s talk about building a robust distributed system. The core idea here is to abstract away the inherent complexity of failures \u2013 we\u2019re leveraging transaction semantics to provide atomicity, isolation, and durability. But beyond that, the need for consensus is critical; we need to ensure nodes agree on state, which is why algorithms like Raft or Paxos would be relevant here. Furthermore, understanding eventual consistency is key; a system like this would likely offer eventual consistency, acknowledging the inherent lag in replicated data, and that's something we must account for in our design.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you would need to implement a consensus algorithm in a distributed system. What considerations would be most important, and what algorithm(s) might you choose and why?\u201d"
  },
  {
    "chunk": "However, this is a very weak guarantee\u2014it doesn\u2019t say anything about when  the repli\u2010\ncas will converge. Until the time of convergence, reads could return anything or\nnothing [ 1]. For example, if you write a value and then immediately read it again,\nthere is no guarantee that you will see the value you just wrote, because the read may\nbe routed to a different replica (see \u201cReading Your Own Writes\u201d on page 162 ).\nEventual consistency is hard for application developers because it is so different from\nthe behavior of variables in a normal single-threaded program. If you assign a value\nto a variable and then read it shortly afterward, you don\u2019t expect to read back the old\nvalue, or for the read to fail. A database looks superficially like a variable that you can\nread and write, but in fact it has much more complicated semantics [ 3].\nWhen working with a database that provides only weak guarantees, you need to be\nconstantly aware of its limitations and not accidentally assume too much. Bugs are\noften subtle and hard to find by testing, because the application may work well most\nof the time. The edge cases of eventual consistency only become apparent when there\nis a fault in the system (e.g., a network interruption) or at high concurrency.\nIn this chapter we will explore stronger consistency models that data systems may\nchoose to provide. They don\u2019t come for free: systems with stronger guarantees may\nhave worse performance or be less fault-tolerant than systems with weaker guaran\u2010\ntees. Nevertheless, stronger guarantees can be appealing because they are easier to use\ncorrectly. Once you have seen a few different consistency models, you\u2019ll be in a better\nposition to decide which one best fits your needs.\nThere is some similarity between distributed consistency models and the hierarchy of\ntransaction isolation levels we discussed previously [ 4, 5] (see \u201cWeak Isolation Lev\u2010\nels\u201d on page 233). But while there is some overlap, they are mostly independent con\u2010\ncerns: transaction isolation is primarily about avoiding race conditions due to\nconcurrently executing transactions, whereas distributed consistency is mostly about\ncoordinating the state of replicas in the face of delays and faults.\nThis chapter covers a broad range of topics, but as we shall see, these areas are in fact\ndeeply linked:\n\u2022We will start by looking at one of the strongest consistency models in common\nuse, linearizability , and examine its pros and cons.\n\u2022We\u2019ll then examine the issue of ordering events in a distributed system ( \u201cOrder\u2010\ning Guarantees\u201d on page 339 ), particularly around causality and total ordering.\n\u2022In the third section ( \u201cDistributed Transactions and Consensus\u201d on page 352) we\nwill explore how to atomically commit a distributed transaction, which will\nfinally lead us toward solutions for the consensus problem.\nConsistency Guarantees | 323\n",
    "summary": "The text discusses eventual consistency, highlighting the challenges of understanding and managing read inconsistencies in distributed systems, particularly when compared to single-threaded programming models. It also touches upon the trade-offs between stronger consistency models and performance/fault tolerance.",
    "sample_answer": "\u201cOkay, so this chapter is really driving home the point about eventual consistency, which is fundamentally different from how we typically think about data consistency. The key challenge here is that applications often assume strong consistency\u2014like a variable in a single-threaded program\u2014but in a distributed environment with replicas, reads can return stale data. This necessitates careful consideration of the read path and potential for inconsistencies, especially when dealing with high concurrency. We need to consider the implications of the CAP theorem and how eventual consistency impacts our application\u2019s ability to handle failures; we could potentially implement strategies like optimistic locking to mitigate risks.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where eventual consistency could lead to a significant bug in a distributed application. How would you design a system to mitigate this risk, considering potential trade-offs between consistency, availability, and performance?\u201d"
  },
  {
    "chunk": "Linearizability\nIn an eventually consistent database, if you ask two different replicas the same ques\u2010\ntion at the same time, you may get two different answers. That\u2019s confusing. Wouldn\u2019t\nit be a lot simpler if the database could give the illusion that there is only one replica\n(i.e., only one copy of the data)? Then every client would have the same view of the\ndata, and you wouldn\u2019t have to worry about replication lag.\nThis is the idea behind linearizability  [6] (also known as atomic consistency  [7], strong\nconsistency , immediate consistency , or external consistency  [8]). The exact definition\nof linearizability is quite subtle, and we will explore it in the rest of this section. But\nthe basic idea is to make a system appear as if there were only one copy of the data,\nand all operations on it are atomic. With this guarantee, even though there may be\nmultiple replicas in reality, the application does not need to worry about them.\nIn a linearizable system, as soon as one client successfully completes a write, all cli\u2010\nents reading from the database must be able to see the value just written. Maintaining\nthe illusion of a single copy of the data means guaranteeing that the value read is the\nmost recent, up-to-date value, and doesn\u2019t come from a stale cache or replica. In\nother words, linearizability is a recency guarantee . To clarify this idea, let\u2019s look at an\nexample of a system that is not linearizable.\nFigure 9-1. This system is not linearizable, causing football fans to be confused.\n324 | Chapter 9: Consistency and Consensus\n",
    "summary": "The text discusses linearizability as a consistency model, aiming to provide a single, consistent view of data for applications, and highlights the challenges of eventual consistency.",
    "sample_answer": "\u201cOkay, let\u2019s unpack this. The core challenge here is managing data across multiple replicas in a system like a global sports scores database. Achieving eventual consistency, as is common in many distributed systems, can lead to confusion for users \u2013 imagine a football fan seeing different scores reported by different replicas. Linearizability offers a solution by creating the *illusion* of a single, authoritative source of truth. This is achieved by ensuring that as soon as a write operation is complete, all subsequent reads will reflect that update, mirroring the concept of an atomic transaction. This relies on the system\u2019s ability to provide a strong consistency guarantee, which is a key difference from eventual consistency.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you might choose to implement a linearizable consistency model versus an eventually consistent model. What are the trade-offs you\u2019d consider in terms of performance, complexity, and the potential for user confusion?\u201d"
  },
  {
    "chunk": "Figure 9-1  shows an example of a nonlinearizable sports website [ 9]. Alice and Bob\nare sitting in the same room, both checking their phones to see the outcome of the\n2014 FIFA World Cup final. Just after the final score is announced, Alice refreshes\nthe page, sees the winner announced, and excitedly tells Bob about it. Bob incredu\u2010\nlously hits reload  on his own phone, but his request goes to a database replica that is\nlagging, and so his phone shows that the game is still ongoing.\nIf Alice and Bob had hit reload at the same time, it would have been less surprising if\nthey had gotten two different query results, because they wouldn\u2019t know at exactly\nwhat time their respective requests were processed by the server. However, Bob\nknows that he hit the reload button (initiated his query) after  he heard Alice exclaim\nthe final score, and therefore he expects his query result to be at least as recent as\nAlice\u2019s. The fact that his query returned a stale result is a violation of linearizability.\nWhat Makes a System Linearizable?\nThe basic idea behind linearizability is simple: to make a system appear as if there is\nonly a single copy of the data. However, nailing down precisely what that means\nactually requires some care. In order to understand linearizability better, let\u2019s look at\nsome more examples.\nFigure 9-2  shows three clients concurrently reading and writing the same key x in a\nlinearizable database. In the distributed systems literature, x is called a register \u2014in\npractice, it could be one key in a key-value store, one row in a relational database, or\none document in a document database, for example.\nFigure 9-2. If a read request is concurrent with a write request, it may return either the\nold or the new value.\nFor simplicity, Figure 9-2  shows only the requests from the clients\u2019 point of view, not\nthe internals of the database. Each bar is a request made by a client, where the start of\na bar is the time when the request was sent, and the end of a bar is when the response\nwas received by the client. Due to variable network delays, a client doesn\u2019t know\nLinearizability | 325\n",
    "summary": "The chunk discusses the concept of linearizability in distributed systems, particularly concerning data consistency and the challenges of achieving it when dealing with concurrent reads and writes.",
    "sample_answer": "\u201cThis scenario highlights a core challenge in distributed systems \u2013 achieving linearizability. Linearizability, as illustrated by the example, essentially demands that all clients perceive operations on data as if they were executed by a single, atomic transaction, regardless of their physical location or network delays. This contrasts with weaker consistency models like eventual consistency, where inconsistencies can exist temporarily before being reconciled, and directly relates to the CAP theorem; a system can only guarantee two out of consistency, availability, and partition tolerance.\u201d",
    "potential_interview_question": "\u201cDescribe the concept of linearizability in the context of distributed systems. How does it relate to the CAP theorem, and what are some potential implications of striving for linearizability in a system where network delays are significant?\u201d"
  },
  {
    "chunk": "i. A subtle detail of this diagram is that it assumes the existence of a global clock, represented by the horizon\u2010\ntal axis. Even though real systems typically don\u2019t have accurate clocks (see \u201cUnreliable Clocks\u201d on page 287 ),\nthis assumption is okay: for the purposes of analyzing a distributed algorithm, we may pretend that an accu\u2010\nrate global clock exists, as long as the algorithm doesn\u2019t have access to it [ 47]. Instead, the algorithm can only\nsee a mangled approximation of real time, as produced by a quartz oscillator and NTP.\nii. A register in which reads may return either the old or the new value if they are concurrent with a write is\nknown as a regular register  [7, 25].exactly when the database processed its request\u2014it only knows that it must have hap\u2010\npened sometime between the client sending the request and receiving the response.i\nIn this example, the register has two types of operations:\n\u2022read (x) \u21d2 v means the client requested to read the value of register x, and the\ndatabase returned the value v.\n\u2022write (x, v) \u21d2 r means the client requested to set the register x to value v, and the\ndatabase returned response r (which could be ok or error ).\nIn Figure 9-2 , the value of x is initially 0, and client C performs a write request to set\nit to 1. While this is happening, clients A and B are repeatedly polling the database to\nread the latest value. What are the possible responses that A and B might get for their\nread requests?\n\u2022The first read operation by client A completes before the write begins, so it must\ndefinitely return the old value 0.\n\u2022The last read by client A begins after the write has completed, so it must defi\u2010\nnitely return the new value 1 if the database is linearizable: we know that the\nwrite must have been processed sometime between the start and end of the write\noperation, and the read must have been processed sometime between the start\nand end of the read operation. If the read started after the write ended, then the\nread must have been processed after the write, and therefore it must see the new\nvalue that was written.\n\u2022Any read operations that overlap in time with the write operation might return\neither 0 or 1, because we don\u2019t know whether or not the write has taken effect at\nthe time when the read operation is processed. These operations are concurrent\nwith the write.\nHowever, that is not yet sufficient to fully describe linearizability: if reads that are\nconcurrent with a write can return either the old or the new value, then readers could\nsee a value flip back and forth between the old and the new value several times while\na write is going on. That is not what we expect of a system that emulates a \u201csingle\ncopy of the data.\u201dii\n326 | Chapter 9: Consistency and Consensus\n",
    "summary": "The text discusses the challenges of simulating linearizability in a distributed system with unreliable clocks, highlighting the potential for data inconsistency and the need for careful design considerations.",
    "sample_answer": "\u201cThis excerpt really underscores the fundamental difficulty of achieving linearizability in a distributed system. The reliance on a \u2018global clock,\u2019 even if simulated, introduces a significant point of failure, as the described scenario \u2013 where reads concurrent with a write can return either the old or new value \u2013 demonstrates. This directly relates to the CAP theorem; systems must make trade-offs between Consistency and Availability, and achieving strong consistency often comes at the expense of availability when dealing with unreliable clocks. To mitigate this, we\u2019d need to employ strategies like eventual consistency, where we accept that data may not be immediately consistent across all nodes, but eventually will converge\u2014which aligns with the trade-off we\u2019re discussing.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a distributed key-value store where nodes have unreliable clocks. How might the design need to accommodate the possibility that a read concurrent with a write could return an outdated or updated value? What techniques could you employ to minimize the risk of data inconsistency, and what assumptions would you need to make about the system\u2019s behavior?\u201d"
  },
  {
    "chunk": "To make the system linearizable, we need to add another constraint, illustrated in\nFigure 9-3 .\nFigure 9-3. After any one read has returned the new value, all following reads (on the\nsame or other clients) must also return the new value.\nIn a linearizable system we imagine that there must be some point in time (between\nthe start and end of the write operation) at which the value of x atomically flips from\n0 to 1. Thus, if one client\u2019s read returns the new value 1, all subsequent reads must\nalso return the new value, even if the write operation has not yet completed.\nThis timing dependency is illustrated with an arrow in Figure 9-3 . Client A is the first\nto read the new value, 1. Just after A\u2019s read returns, B begins a new read. Since B\u2019s\nread occurs strictly after A\u2019s read, it must also return 1, even though the write by C is\nstill ongoing. (It\u2019s the same situation as with Alice and Bob in Figure 9-1 : after Alice\nhas read the new value, Bob also expects to read the new value.)\nWe can further refine this timing diagram to visualize each operation taking effect\natomically at some point in time. A more complex example is shown in Figure 9-4\n[10].\nIn Figure 9-4  we add a third type of operation besides read  and write :\n\u2022cas(x, vold, vnew) \u21d2 r means the client requested an atomic compare-and-set  oper\u2010\nation (see \u201cCompare-and-set\u201d  on page 245). If the current value of the register x\nequals vold, it should be atomically set to vnew. If x \u2260 vold then the operation should\nleave the register unchanged and return an error. r is the database\u2019s response ( ok\nor error ).\nEach operation in Figure 9-4  is marked with a vertical line (inside the bar for each\noperation) at the time when we think the operation was executed. Those markers are\njoined up in a sequential order, and the result must be a valid sequence of reads and\nwrites for a register (every read must return the value set by the most recent write).\nThe requirement of linearizability is that the lines joining up the operation markers\nalways move forward in time (from left to right), never backward. This requirement\nLinearizability | 327\n",
    "summary": "The text describes a linearizable system requiring strict temporal ordering of operations, utilizing a visualization technique to enforce this constraint through a sequential operation timeline.",
    "sample_answer": "\u201cOkay, this describes a system striving for linearizability, which is a crucial aspect of data consistency. To achieve this, the system relies on a visualization \u2013 a sequential operation timeline \u2013 where each read and write operation is marked with a vertical bar representing its execution. The key constraint is that these bars must always progress forward in time, ensuring that reads always reflect the most recent write, directly addressing the CAP theorem\u2019s implications for consistency.\u201d",
    "potential_interview_question": "\u201cLet's say we\u2019re designing a system that requires strong consistency, similar to what\u2019s described here. How would you architect the system to guarantee linearizability, and what potential challenges might arise in maintaining this strict temporal ordering, particularly as the system scales?\u201d"
  },
  {
    "chunk": "ensures the recency guarantee we discussed earlier: once a new value has been written\nor read, all subsequent reads see the value that was written, until it is overwritten\nagain.\nFigure 9-4. Visualizing the points in time at which the reads and writes appear to have\ntaken effect. The final read by B is not linearizable.\nThere are a few interesting details to point out in Figure 9-4 :\n\u2022First client B sent a request to read x, then client D sent a request to set x to 0,\nand then client A sent a request to set x to 1. Nevertheless, the value returned to\nB\u2019s read is 1 (the value written by A). This is okay: it means that the database first\nprocessed D\u2019s write, then A\u2019s write, and finally B\u2019s read. Although this is not the\norder in which the requests were sent, it\u2019s an acceptable order, because the three\nrequests are concurrent. Perhaps B\u2019s read request was slightly delayed in the net\u2010\nwork, so it only reached the database after the two writes.\n\u2022Client B\u2019s read returned 1 before client A received its response from the database,\nsaying that the write of the value 1 was successful. This is also okay: it doesn\u2019t\nmean the value was read before it was written, it just means the ok response from\nthe database to client A was slightly delayed in the network.\n\u2022This model doesn\u2019t assume any transaction isolation: another client may change\na value at any time. For example, C first reads 1 and then reads 2, because the\nvalue was changed by B between the two reads. An atomic compare-and-set ( cas)\noperation can be used to check the value hasn\u2019t been concurrently changed by\nanother client: B and C\u2019s cas requests succeed, but D\u2019s cas request fails (by the\ntime the database processes it, the value of x is no longer 0).\n\u2022The final read by client B (in a shaded bar) is not linearizable. The operation is\nconcurrent with C\u2019s cas write, which updates x from 2 to 4. In the absence of\n328 | Chapter 9: Consistency and Consensus\n",
    "summary": "The chunk discusses consistency guarantees, particularly the challenges of achieving recency and the implications for read operations in a concurrent environment, referencing CAS operations and non-linearizable reads.",
    "sample_answer": "\u201cThis scenario highlights a key trade-off in designing data systems \u2013 achieving strong consistency often introduces latency and complexity. The non-linearizable reads, coupled with the use of CAS operations to handle concurrent updates, demonstrate the need for careful consideration of conflict resolution strategies. Specifically, the use of CAS operations to ensure data integrity during concurrent writes is critical; however, the system needs to be designed to manage the inevitable conflicts and potentially degraded read consistency.\u201d",
    "potential_interview_question": "\u201cImagine a system where multiple clients concurrently update a shared data value using CAS operations. Describe the potential challenges you\u2019d anticipate and what architectural approaches (e.g., conflict resolution strategies) you\u2019d consider to maintain data consistency while minimizing latency.\u201d"
  },
  {
    "chunk": "other requests, it would be okay for B\u2019s read to return 2. However, client A has\nalready read the new value 4 before B\u2019s read started, so B is not allowed to read\nan older value than A. Again, it\u2019s the same situation as with Alice and Bob in\nFigure 9-1 .\nThat is the intuition behind linearizability; the formal definition [ 6] describes it more\nprecisely. It is possible (though computationally expensive) to test whether a system\u2019s\nbehavior is linearizable by recording the timings of all requests and responses, and\nchecking whether they can be arranged into a valid sequential order [ 11]. \nLinearizability Versus Serializability\nLinearizability is easily confused with serializability (see \u201cSerializability\u201d on page 251 ),\nas both words seem to mean something like \u201ccan be arranged in a sequential order.\u201d\nHowever, they are two quite different guarantees, and it is important to distinguish\nbetween them:\nSerializability\nSerializability is an isolation property of transactions , where every transaction\nmay read and write multiple objects (rows, documents, records)\u2014see \u201cSingle-\nObject and Multi-Object Operations\u201d on page 228. It guarantees that transac\u2010\ntions behave the same as if they had executed in some  serial order (each\ntransaction running to completion before the next transaction starts). It is okay\nfor that serial order to be different from the order in which transactions were\nactually run [ 12].\nLinearizability\nLinearizability is a recency guarantee on reads and writes of a register (an indi\u2010\nvidual object ). It doesn\u2019t group operations together into transactions, so it does\nnot prevent problems such as write skew (see \u201cWrite Skew and Phantoms\u201d on\npage 246), unless you take additional measures such as materializing conflicts\n(see \u201cMaterializing conflicts\u201d on page 251 ).\nA database may provide both serializability and linearizability, and this combination\nis known as strict serializability  or strong one-copy serializability  (strong-1SR ) [4, 13].\nImplementations of serializability based on two-phase locking (see \u201cTwo-Phase Lock\u2010\ning (2PL)\u201d on page 257) or actual serial execution (see \u201cActual Serial Execution\u201d  on\npage 252 ) are typically linearizable.\nHowever, serializable snapshot isolation (see \u201cSerializable Snapshot Isolation (SSI)\u201d\non page 261) is not linearizable: by design, it makes reads from a consistent snapshot,\nto avoid lock contention between readers and writers. The whole point of a consistent\nsnapshot is that it does not include writes that are more recent than the snapshot, and\nthus reads from the snapshot are not linearizable.\nLinearizability | 329\n",
    "summary": "The text discusses the differences between linearizability and serializability, focusing on their implications for data consistency guarantees and the techniques (like 2PL) used to achieve them.",
    "sample_answer": "\u201cOkay, let\u2019s unpack this. The key distinction here is between serializability and linearizability. Serializability provides a transactional isolation guarantee, often achieved with two-phase locking, which aims to mimic a serial execution of transactions. However, linearizability offers a stronger, more granular guarantee\u2014it\u2019s a recency guarantee on reads and writes, essentially ensuring that a read always sees the most recent value, regardless of the underlying transaction isolation level. This is why SSI, which relies on consistent snapshots, isn\u2019t linearizable because it intentionally avoids capturing recent writes, sacrificing transactional guarantees for lower contention.\u201d",
    "potential_interview_question": "\u201cExplain the difference between serializability and linearizability in the context of database transactions. How would your choice of isolation level (e.g., 2PL, SSI) impact the linearizability guarantee, and why?\u201d"
  },
  {
    "chunk": "iii. Strictly speaking, ZooKeeper and etcd provide linearizable writes, but reads may be stale, since by default\nthey can be served by any one of the replicas. You can optionally request a linearizable read: etcd calls this a\nquorum read  [16], and in ZooKeeper you need to call sync()  before the read [ 15]; see \u201cImplementing linear\u2010\nizable storage using total order broadcast\u201d on page 350 .Relying on Linearizability\nIn what circumstances is linearizability useful? Viewing the final score of a sporting\nmatch is perhaps a frivolous example: a result that is outdated by a few seconds is\nunlikely to cause any real harm in this situation. However, there a few areas in which\nlinearizability is an important requirement for making a system work correctly.\nLocking and leader election\nA system that uses single-leader replication needs to ensure that there is indeed only\none leader, not several (split brain). One way of electing a leader is to use a lock: every\nnode that starts up tries to acquire the lock, and the one that succeeds becomes the\nleader [ 14]. No matter how this lock is implemented, it must be linearizable: all nodes\nmust agree which node owns the lock; otherwise it is useless.\nCoordination services like Apache ZooKeeper [ 15] and etcd [ 16] are often used to\nimplement distributed locks and leader election. They use consensus algorithms to\nimplement linearizable operations in a fault-tolerant way (we discuss such algorithms\nlater in this chapter, in \u201cFault-Tolerant Consensus\u201d on page 364).iii There are still\nmany subtle details to implementing locks and leader election correctly (see for\nexample the fencing issue in \u201cThe leader and the lock\u201d on page 301 ), and libraries like\nApache Curator [ 17] help by providing higher-level recipes on top of ZooKeeper.\nHowever, a linearizable storage service is the basic foundation for these coordination\ntasks.\nDistributed locking is also used at a much more granular level in some distributed\ndatabases, such as Oracle Real Application Clusters (RAC) [ 18]. RAC uses a lock per\ndisk page, with multiple nodes sharing access to the same disk storage system. Since\nthese linearizable locks are on the critical path of transaction execution, RAC deploy\u2010\nments usually have a dedicated cluster interconnect network for communication\nbetween database nodes.\nConstraints and uniqueness guarantees\nUniqueness constraints are common in databases: for example, a username or email\naddress must uniquely identify one user, and in a file storage service there cannot be\ntwo files with the same path and filename. If you want to enforce this constraint as\nthe data is written (such that if two people try to concurrently create a user or a file\nwith the same name, one of them will be returned an error), you need linearizability.\n330 | Chapter 9: Consistency and Consensus\n",
    "summary": "The chunk discusses the importance of linearizability for critical operations like leader election, distributed locking, and uniqueness constraints, often achieved through coordination services like ZooKeeper and etcd.",
    "sample_answer": "\u201cOkay, so this passage highlights a key consideration for building reliable distributed systems: ensuring consistency, particularly through linearizability. When you\u2019re implementing leader election or distributed locks \u2013 as shown with ZooKeeper and etcd \u2013 you absolutely *must* have linearizability to avoid split-brain scenarios and maintain data integrity. The use of ZooKeeper\u2019s quorum reads, or ZooKeeper\u2019s `sync()` calls, demonstrates a strategy to achieve this, reflecting a foundational understanding of consensus algorithms. Furthermore, the example with Oracle RAC and its per-disk page locking underscores that linearizability isn't just for coordinating services; it's a core requirement for any system where you need absolute guarantees on data uniqueness and consistency.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where linearizability is critical in a distributed system. Explain the technical approach you might take, referencing specific tools or concepts like ZooKeeper or consensus algorithms, to ensure this linearizability is achieved.\u201d"
  },
  {
    "chunk": "This situation is actually similar to a lock: when a user registers for your service, you\ncan think of them acquiring a \u201clock\u201d on their chosen username. The operation is also\nvery similar to an atomic compare-and-set, setting the username to the ID of the user\nwho claimed it, provided that the username is not already taken.\nSimilar issues arise if you want to ensure that a bank account balance never goes neg\u2010\native, or that you don\u2019t sell more items than you have in stock in the warehouse, or\nthat two people don\u2019t concurrently book the same seat on a flight or in a theater.\nThese constraints all require there to be a single up-to-date value (the account bal\u2010\nance, the stock level, the seat occupancy) that all nodes agree on.\nIn real applications, it is sometimes acceptable to treat such constraints loosely (for\nexample, if a flight is overbooked, you can move customers to a different flight and\noffer them compensation for the inconvenience). In such cases, linearizability may\nnot be needed, and we will discuss such loosely interpreted constraints in \u201cTimeliness\nand Integrity\u201d on page 524 .\nHowever, a hard uniqueness constraint, such as the one you typically find in rela\u2010\ntional databases, requires linearizability. Other kinds of constraints, such as foreign\nkey or attribute constraints, can be implemented without requiring linearizability\n[19].\nCross-channel timing dependencies\nNotice a detail in Figure 9-1 : if Alice hadn\u2019t exclaimed the score, Bob wouldn\u2019t have\nknown that the result of his query was stale. He would have just refreshed the page\nagain a few seconds later, and eventually seen the final score. The linearizability viola\u2010\ntion was only noticed because there was an additional communication channel in the\nsystem (Alice\u2019s voice to Bob\u2019s ears).\nSimilar situations can arise in computer systems. For example, say you have a website\nwhere users can upload a photo, and a background process resizes the photos to\nlower resolution for faster download (thumbnails). The architecture and dataflow of\nthis system is illustrated in Figure 9-5 .\nThe image resizer needs to be explicitly instructed to perform a resizing job, and this\ninstruction is sent from the web server to the resizer via a message queue (see Chap\u2010\nter 11 ). The web server doesn\u2019t place the entire photo on the queue, since most mes\u2010\nsage brokers are designed for small messages, and a photo may be several megabytes\nin size. Instead, the photo is first written to a file storage service, and once the write is\ncomplete, the instruction to the resizer is placed on the queue.\nLinearizability | 331\n",
    "summary": "The chunk discusses the need for data consistency guarantees, particularly linearizability, in distributed systems, alongside strategies for handling timing dependencies and potential data conflicts.",
    "sample_answer": "\u201cOkay, this situation really highlights the challenges of maintaining data consistency across a distributed system. The core issue is that when you have multiple nodes needing to access and update a single piece of data \u2013 like a username or a bank account balance \u2013 you need a way to ensure that everyone sees the same, consistent view, which is where linearizability comes in. It's essentially a guarantee that operations appear to happen in a single, sequential order, regardless of which node you're interacting with, and this is often critical for ensuring data integrity.\u201d Furthermore, \u201cThe example about the photo resizer demonstrates how timing dependencies can introduce conflicts; the system needs mechanisms to handle asynchronous updates and potentially loose constraints as illustrated with the photo example where the resizer relies on a message queue to avoid directly updating the database, acknowledging the inherent latency and potential for stale data.\u201d",
    "potential_interview_question": "\u201cDescribe the concept of linearizability and explain why it might be necessary \u2013 or not \u2013 in a distributed system. Give an example of a scenario where linearizability is crucial, and another where a looser consistency model might be acceptable.\u201d"
  },
  {
    "chunk": "Figure 9-5. The web server and image resizer communicate both through file storage\nand a message queue, opening the potential for race conditions.\nIf the file storage service is linearizable, then this system should work fine. If it is not\nlinearizable, there is the risk of a race condition: the message queue (steps 3 and 4 in\nFigure 9-5 ) might be faster than the internal replication inside the storage service. In\nthis case, when the resizer fetches the image (step 5), it might see an old version of the\nimage, or nothing at all. If it processes an old version of the image, the full-size and\nresized images in the file storage become permanently inconsistent.\nThis problem arises because there are two different communication channels\nbetween the web server and the resizer: the file storage and the message queue.\nWithout the recency guarantee of linearizability, race conditions between these two\nchannels are possible. This situation is analogous to Figure 9-1 , where there was also\na race condition between two communication channels: the database replication and\nthe real-life audio channel between Alice\u2019s mouth and Bob\u2019s ears.\nLinearizability is not the only way of avoiding this race condition, but it\u2019s the simplest\nto understand. If you control the additional communication channel (like in the case\nof the message queue, but not in the case of Alice and Bob), you can use alternative\napproaches similar to what we discussed in \u201cReading Your Own Writes\u201d on page 162 ,\nat the cost of additional complexity. \nImplementing Linearizable Systems\nNow that we\u2019ve looked at a few examples in which linearizability is useful, let\u2019s think\nabout how we might implement a system that offers linearizable semantics.\nSince linearizability essentially means \u201cbehave as though there is only a single copy of\nthe data, and all operations on it are atomic,\u201d the simplest answer would be to really\nonly use a single copy of the data. However, that approach would not be able to toler\u2010\nate faults: if the node holding that one copy failed, the data would be lost, or at least\ninaccessible until the node was brought up again.\n332 | Chapter 9: Consistency and Consensus\n",
    "summary": "The chunk discusses potential race conditions in a system with dual communication channels (file storage and message queue) and the need for linearizability or alternative approaches to ensure data consistency.",
    "sample_answer": "\u201cThis scenario highlights a critical issue in distributed systems \u2013 race conditions arising from concurrent access to data through different channels. The presence of the message queue introduces a potential conflict with the file storage service, as the message queue could process updates faster than the internal replication within the storage service, leading to inconsistent states. To address this, we\u2019d aim for linearizability, which guarantees that operations appear to happen atomically, preventing these inconsistencies, though this comes with the challenge of fault tolerance \u2013 a single point of failure would still lead to data loss.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re designing a system where a web server requests image resizing. We use both file storage and a message queue for communication. Explain the potential race conditions we might encounter, and discuss how you would design a system to mitigate them, considering factors like consistency and fault tolerance.\u201d"
  },
  {
    "chunk": "iv. Partitioning (sharding) a single-leader database, so that there is a separate leader per partition, does not\naffect linearizability, since it is only a single-object guarantee. Cross-partition transactions are a different mat\u2010\nter (see \u201cDistributed Transactions and Consensus\u201d on page 352 ).The most common approach to making a system fault-tolerant is to use replication.\nLet\u2019s revisit the replication methods from Chapter 5 , and compare whether they can\nbe made linearizable:\nSingle-leader replication (potentially linearizable)\nIn a system with single-leader replication (see \u201cLeaders and Followers\u201d on page\n152), the leader has the primary copy of the data that is used for writes, and the\nfollowers maintain backup copies of the data on other nodes. If you make reads\nfrom the leader, or from synchronously updated followers, they have the poten\u2010\ntial to be linearizable.iv However, not every single-leader database is actually line\u2010\narizable, either by design (e.g., because it uses snapshot isolation) or due to\nconcurrency bugs [ 10].\nUsing the leader for reads relies on the assumption that you know for sure who\nthe leader is. As discussed in \u201cThe Truth Is Defined by the Majority\u201d on page\n300, it is quite possible for a node to think that it is the leader, when in fact it is\nnot\u2014and if the delusional leader continues to serve requests, it is likely to violate\nlinearizability [ 20]. With asynchronous replication, failover may even lose com\u2010\nmitted writes (see \u201cHandling Node Outages\u201d on page 156), which violates both\ndurability and linearizability.\nConsensus algorithms (linearizable)\nSome consensus algorithms, which we will discuss later in this chapter, bear a\nresemblance to single-leader replication. However, consensus protocols contain\nmeasures to prevent split brain and stale replicas. Thanks to these details, con\u2010\nsensus algorithms can implement linearizable storage safely. This is how Zoo\u2010\nKeeper [ 21] and etcd [ 22] work, for example.\nMulti-leader replication (not linearizable)\nSystems with multi-leader replication are generally not linearizable, because they\nconcurrently process writes on multiple nodes and asynchronously replicate\nthem to other nodes. For this reason, they can produce conflicting writes that\nrequire resolution (see \u201cHandling Write Conflicts\u201d on page 171). Such conflicts\nare an artifact of the lack of a single copy of the data.\nLeaderless replication (probably not linearizable)\nFor systems with leaderless replication (Dynamo-style; see \u201cLeaderless Replica\u2010\ntion\u201d  on page 177), people sometimes claim that you can obtain \u201cstrong consis\u2010\ntency\u201d by requiring quorum reads and writes ( w + r > n). Depending on the exact\nLinearizability | 333\n",
    "summary": "The text discusses the challenges of achieving linearizability in different replication strategies, highlighting the trade-offs between consistency and availability, particularly concerning leader-based versus leaderless replication.",
    "sample_answer": "\u201cOkay, let\u2019s analyze this from a design perspective. The core issue here is that achieving linearizability \u2013 guaranteeing that all operations appear to happen in a single, consistent order \u2013 becomes significantly more complex with multi-leader or leaderless replication.  Specifically, the text illustrates that single-leader replication *can* be linearizable if reads are performed from the leader or synchronously updated followers, but it emphasizes the potential for issues like split-brain scenarios or lost writes due to asynchronous replication, which would break linearizability.  Furthermore, it correctly notes that consensus algorithms like ZooKeeper and etcd leverage mechanisms to prevent split-brain and ensure consistent state, allowing them to implement linearizable storage\u2014a crucial distinction.\u201d",
    "potential_interview_question": "\u201cDescribe the challenges of maintaining linearizability in a replicated database system.  How do different replication strategies \u2013 single-leader, multi-leader, and leaderless \u2013 affect this goal, and what mechanisms (e.g., consensus algorithms) might be employed to mitigate those challenges?\u201d"
  },
  {
    "chunk": "configuration of the quorums, and depending on how you define strong consis\u2010\ntency, this is not quite true.\n\u201cLast write wins\u201d conflict resolution methods based on time-of-day clocks (e.g.,\nin Cassandra; see \u201cRelying on Synchronized Clocks\u201d on page 291 ) are almost cer\u2010\ntainly nonlinearizable, because clock timestamps cannot be guaranteed to be\nconsistent with actual event ordering due to clock skew. Sloppy quorums\n(\u201cSloppy Quorums and Hinted Handoff\u201d on page 183) also ruin any chance of\nlinearizability. Even with strict quorums, nonlinearizable behavior is possible, as\ndemonstrated in the next section.\nLinearizability and quorums\nIntuitively, it seems as though strict quorum reads and writes should be linearizable\nin a Dynamo-style model. However, when we have variable network delays, it is pos\u2010\nsible to have race conditions, as demonstrated in Figure 9-6 .\nFigure 9-6. A nonlinearizable execution, despite using a strict quorum.\nIn Figure 9-6 , the initial value of x is 0, and a writer client is updating x to 1 by send\u2010\ning the write to all three replicas ( n = 3, w = 3). Concurrently, client A reads from a\nquorum of two nodes ( r = 2) and sees the new value 1 on one of the nodes. Also con\u2010\ncurrently with the write, client B reads from a different quorum of two nodes, and\ngets back the old value 0 from both.\nThe quorum condition is met ( w + r > n), but this execution is nevertheless not line\u2010\narizable: B\u2019s request begins after A\u2019s request completes, but B returns the old value\n334 | Chapter 9: Consistency and Consensus\n",
    "summary": "The text highlights the challenges of achieving linearizability in distributed systems, particularly when using quorums and dealing with network latency.",
    "sample_answer": "\u201cThis example illustrates a critical point regarding quorums and consistency. While a strict quorum (w + r > n) provides an apparent guarantee of data consistency, it doesn\u2019t inherently solve the problem of nonlinearizable behavior introduced by network delays. The fact that client B can read the old value *before* the write completes demonstrates that even with a seemingly robust consensus mechanism, achieving true linearizability is impossible without addressing clock synchronization and network latency\u2014as highlighted by the concept of \u201cSloppy Quorums and Hinted Handoff\u201d\u201d.",
    "potential_interview_question": "\u201cDescribe a scenario where a strict quorum strategy in a distributed system might fail to deliver linearizability, and explain what design considerations would be necessary to mitigate this issue. How might you address the problem of clock skew, and what trade-offs would you consider between strong consistency and availability?\u201d"
  },
  {
    "chunk": "while A returns the new value. (It\u2019s once again the Alice and Bob situation from\nFigure 9-1 .)\nInterestingly, it is possible to make Dynamo-style quorums linearizable at the cost of\nreduced performance: a reader must perform read repair (see \u201cRead repair and anti-\nentropy\u201d  on page 178) synchronously, before returning results to the application\n[23], and a writer must read the latest state of a quorum of nodes before sending its\nwrites [ 24, 25]. However, Riak does not perform synchronous read repair due to the\nperformance penalty [ 26]. Cassandra does  wait for read repair to complete on quo\u2010\nrum reads [ 27], but it loses linearizability if there are multiple concurrent writes to\nthe same key, due to its use of last-write-wins conflict resolution.\nMoreover, only linearizable read and write operations can be implemented in this\nway; a linearizable compare-and-set operation cannot, because it requires a consen\u2010\nsus algorithm [ 28].\nIn summary, it is safest to assume that a leaderless system with Dynamo-style replica\u2010\ntion does not provide linearizability. \nThe Cost of Linearizability\nAs some replication methods can provide linearizability and others cannot, it is inter\u2010\nesting to explore the pros and cons of linearizability in more depth.\nWe already discussed some use cases for different replication methods in Chapter 5 ;\nfor example, we saw that multi-leader replication is often a good choice for multi-\ndatacenter replication (see \u201cMulti-datacenter operation\u201d on page 168 ). An example of\nsuch a deployment is illustrated in Figure 9-7 .\nFigure 9-7. A network interruption forcing a choice between linearizability and availa\u2010\nbility.\nLinearizability | 335\n",
    "summary": "The text discusses the trade-offs between linearizability and availability in a leaderless, Dynamo-style replication system, particularly concerning read repair and conflict resolution.",
    "sample_answer": "\u201cOkay, so this excerpt highlights a crucial consideration in designing highly available, eventually consistent systems. The core point is that achieving linearizability\u2014where reads always reflect the most recent write\u2014comes with a significant performance cost, primarily due to the need for synchronous read repair. This repair process, as described, requires each node to actively check and correct inconsistencies within a quorum, mirroring the \u2018Alice and Bob\u2019 scenario.  Furthermore, the conflict resolution strategy, like \u2018last-write-wins\u2019 in Cassandra, exacerbates the challenge \u2013 if multiple writes occur concurrently to the same key, linearizability isn't achievable because a compare-and-set operation would inherently need a consensus algorithm, which adds latency and complexity.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re designing a key-value store using a Dynamo-style replication strategy. How would you address the tension between achieving linearizability for critical operations and maintaining high availability and performance, considering the need for read repair and potential conflicts?\u201d"
  },
  {
    "chunk": "v. These two choices are sometimes known as CP (consistent but not available under network partitions) and\nAP (available but not consistent under network partitions), respectively. However, this classification scheme\nhas several flaws [ 9], so it is best avoided.Consider what happens if there is a network interruption between the two datacen\u2010\nters. Let\u2019s assume that the network within each datacenter is working, and clients can\nreach the datacenters, but the datacenters cannot connect to each other.\nWith a multi-leader database, each datacenter can continue operating normally: since\nwrites from one datacenter are asynchronously replicated to the other, the writes are\nsimply queued up and exchanged when network connectivity is restored.\nOn the other hand, if single-leader replication is used, then the leader must be in one\nof the datacenters. Any writes and any linearizable reads must be sent to the leader\u2014\nthus, for any clients connected to a follower datacenter, those read and write requests\nmust be sent synchronously over the network to the leader datacenter.\nIf the network between datacenters is interrupted in a single-leader setup, clients con\u2010\nnected to follower datacenters cannot contact the leader, so they cannot make any\nwrites to the database, nor any linearizable reads. They can still make reads from the\nfollower, but they might be stale (nonlinearizable). If the application requires linear\u2010\nizable reads and writes, the network interruption causes the application to become\nunavailable in the datacenters that cannot contact the leader.\nIf clients can connect directly to the leader datacenter, this is not a problem, since the\napplication continues to work normally there. But clients that can only reach a fol\u2010\nlower datacenter will experience an outage until the network link is repaired.\nThe CAP theorem\nThis issue is not just a consequence of single-leader and multi-leader replication: any\nlinearizable database has this problem, no matter how it is implemented. The issue\nalso isn\u2019t specific to multi-datacenter deployments, but can occur on any unreliable\nnetwork, even within one datacenter. The trade-off is as follows:v\n\u2022If your application requires  linearizability, and some replicas are disconnected\nfrom the other replicas due to a network problem, then some replicas cannot\nprocess requests while they are disconnected: they must either wait until the net\u2010\nwork problem is fixed, or return an error (either way, they become unavailable ).\n\u2022If your application does not require  linearizability, then it can be written in a way\nthat each replica can process requests independently, even if it is disconnected\nfrom other replicas (e.g., multi-leader). In this case, the application can remain\navailable  in the face of a network problem, but its behavior is not linearizable.\n336 | Chapter 9: Consistency and Consensus\n",
    "summary": "The text highlights the CAP theorem and its implications for database design, particularly concerning network partitions and data consistency requirements.",
    "sample_answer": "\u201cThis scenario really underscores the CAP theorem \u2013 consistency and availability are often mutually exclusive, especially under unreliable network conditions.  Specifically, the chapter discusses how a linearizable database, such as one requiring synchronous reads and writes, becomes unavailable if a network partition isolates a datacenter; this is a classic example of the trade-off between consistency and availability. We need to design systems that acknowledge this trade-off, potentially utilizing a multi-leader architecture to maintain availability during network disruptions, accepting that reads from disconnected replicas may be stale.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where a linearizability requirement might lead to an application outage due to a network partition. How would you address this trade-off in a system design, considering the CAP theorem?\u201d"
  },
  {
    "chunk": "vi. As discussed in \u201cNetwork Faults in Practice\u201d on page 279 , this book uses partitioning  to refer to deliber\u2010\nately breaking down a large dataset into smaller ones ( sharding ; see Chapter 6 ). By contrast, a network parti\u2010\ntion is a particular type of network fault, which we normally don\u2019t consider separately from other kinds of\nfaults. However, since it\u2019s the P in CAP, we can\u2019t avoid the confusion in this case.Thus, applications that don\u2019t require linearizability can be more tolerant of network\nproblems. This insight is popularly known as the CAP theorem  [29, 30, 31, 32],\nnamed by Eric Brewer in 2000, although the trade-off has been known to designers of\ndistributed databases since the 1970s [ 33, 34, 35, 36].\nCAP was originally proposed as a rule of thumb, without precise definitions, with the\ngoal of starting a discussion about trade-offs in databases. At the time, many dis\u2010\ntributed databases focused on providing linearizable semantics on a cluster of\nmachines with shared storage [ 18], and CAP encouraged database engineers to\nexplore a wider design space of distributed shared-nothing systems, which were more\nsuitable for implementing large-scale web services [ 37]. CAP deserves credit for this\nculture shift\u2014witness the explosion of new database technologies since the\nmid-2000s (known as NoSQL).\nThe Unhelpful CAP Theorem\nCAP is sometimes presented as Consistency, Availability, Partition tolerance: pick 2\nout of 3 . Unfortunately, putting it this way is misleading [ 32] because network parti\u2010\ntions are a kind of fault, so they aren\u2019t something about which you have a choice: they\nwill happen whether you like it or not [ 38].\nAt times when the network is working correctly, a system can provide both consis\u2010\ntency (linearizability) and total availability. When a network fault occurs, you have to\nchoose between either linearizability or total availability. Thus, a better way of phras\u2010\ning CAP would be either Consistent or Available when Partitioned  [39]. A more relia\u2010\nble network needs to make this choice less often, but at some point the choice is\ninevitable.\nIn discussions of CAP there are several contradictory definitions of the term availa\u2010\nbility , and the formalization as a theorem [ 30] does not match its usual meaning [ 40].\nMany so-called \u201chighly available\u201d (fault-tolerant) systems actually do not meet CAP\u2019s\nidiosyncratic definition of availability. All in all, there is a lot of misunderstanding\nand confusion around CAP, and it does not help us understand systems better, so\nCAP is best avoided.\nThe CAP theorem as formally defined [ 30] is of very narrow scope: it only considers\none consistency model (namely linearizability) and one kind of fault ( network parti\u2010\ntions ,vi or nodes that are alive but disconnected from each other). It doesn\u2019t say any\u2010\nLinearizability | 337\n",
    "summary": "The text discusses the CAP theorem, network partitions, and the challenges in interpreting availability within distributed systems.",
    "sample_answer": "\u201cOkay, let\u2019s talk about the CAP theorem. It\u2019s a commonly misunderstood concept, and I think it\u2019s important to frame it correctly. The core issue isn\u2019t about choosing between consistency and availability; it\u2019s recognizing that network partitions *will* occur, and the choice between linearizability and availability becomes inevitable in those scenarios.  Specifically, the theorem, as formally defined, is quite narrow \u2013 focusing solely on linearizability and network partitions, neglecting other considerations like data durability or recovery strategies.  This limited scope often leads to misinterpretations and ineffective design decisions, which is why it\u2019s generally best to avoid over-reliance on the CAP theorem as a rigid rule.\u201d",
    "potential_interview_question": "\u201cImagine you're designing a globally distributed system for tracking inventory. You\u2019re facing potential network partitions.  How would you approach the design, considering the CAP theorem and potential trade-offs between consistency and availability?\u201d"
  },
  {
    "chunk": "thing about network delays, dead nodes, or other trade-offs. Thus, although CAP has\nbeen historically influential, it has little practical value for designing systems [ 9, 40].\nThere are many more interesting impossibility results in distributed systems [ 41],\nand CAP has now been superseded by more precise results [ 2, 42], so it is of mostly\nhistorical interest today. \nLinearizability and network delays\nAlthough linearizability is a useful guarantee, surprisingly few systems are actually\nlinearizable in practice. For example, even RAM on a modern multi-core CPU is not\nlinearizable [ 43]: if a thread running on one CPU core writes to a memory address,\nand a thread on another CPU core reads the same address shortly afterward, it is not\nguaranteed to read the value written by the first thread (unless a memory barrier  or\nfence  [44] is used).\nThe reason for this behavior is that every CPU core has its own memory cache and\nstore buffer. Memory access first goes to the cache by default, and any changes are\nasynchronously written out to main memory. Since accessing data in the cache is\nmuch faster than going to main memory [ 45], this feature is essential for good per\u2010\nformance on modern CPUs. However, there are now several copies of the data (one\nin main memory, and perhaps several more in various caches), and these copies are\nasynchronously updated, so linearizability is lost.\nWhy make this trade-off? It makes no sense to use the CAP theorem to justify the\nmulti-core memory consistency model: within one computer we usually assume reli\u2010\nable communication, and we don\u2019t expect one CPU core to be able to continue oper\u2010\nating normally if it is disconnected from the rest of the computer. The reason for\ndropping linearizability is performance , not fault tolerance.\nThe same is true of many distributed databases that choose not to provide lineariza\u2010\nble guarantees: they do so primarily to increase performance, not so much for fault\ntolerance [ 46]. Linearizability is slow\u2014and this is true all the time, not only during a\nnetwork fault.\nCan\u2019t we maybe find a more efficient implementation of linearizable storage? It\nseems the answer is no: Attiya and Welch [ 47] prove that if you want linearizability,\nthe response time of read and write requests is at least proportional to the uncertainty\nof delays in the network. In a network with highly variable delays, like most com\u2010\nputer networks (see \u201cTimeouts and Unbounded Delays\u201d on page 281), the response\ntime of linearizable reads and writes is inevitably going to be high. A faster algorithm\nfor linearizability does not exist, but weaker consistency models can be much faster,\nso this trade-off is important for latency-sensitive systems. In Chapter 12  we will dis\u2010\ncuss some approaches for avoiding linearizability without sacrificing correctness. \n338 | Chapter 9: Consistency and Consensus\n",
    "summary": "The text discusses the trade-offs between linearizability, network delays, and performance in distributed systems, highlighting that achieving linearizability often leads to high latency.",
    "sample_answer": "\u201cOkay, let\u2019s unpack this. The core argument here is that striving for linearizability in a distributed system, particularly one subject to network delays, introduces a fundamental performance bottleneck. The example with multi-core CPUs and caches illustrates how the system optimizes for speed (cache hits) at the expense of strong consistency guarantees, demonstrating the CAP theorem\u2019s influence \u2013 but also its practical limitations. The key takeaway is that achieving linearizability introduces a latency cost that's unavoidable in systems with variable network delays, leading to a critical trade-off between consistency and performance. This echoes the broader discussion around choosing weaker consistency models for latency-sensitive applications, like those discussed in Chapter 12.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you would prioritize performance over linearizability in a distributed system. What architectural considerations would you make, and how would you address the potential risks associated with weaker consistency?\u201d"
  },
  {
    "chunk": "Ordering Guarantees\nWe said previously that a linearizable register behaves as if there is only a single copy\nof the data, and that every operation appears to take effect atomically at one point in\ntime. This definition implies that operations are executed in some well-defined order.\nWe illustrated the ordering in Figure 9-4  by joining up the operations in the order in\nwhich they seem to have executed.\nOrdering has been a recurring theme in this book, which suggests that it might be an\nimportant fundamental idea. Let\u2019s briefly recap some of the other contexts in which\nwe have discussed ordering:\n\u2022In Chapter 5  we saw that the main purpose of the leader in single-leader replica\u2010\ntion is to determine the order of writes  in the replication log\u2014that is, the order in\nwhich followers apply those writes. If there is no single leader, conflicts can occur\ndue to concurrent operations (see \u201cHandling Write Conflicts\u201d on page 171 ).\n\u2022Serializability, which we discussed in Chapter 7 , is about ensuring that transac\u2010\ntions behave as if they were executed in some sequential order . It can be achieved\nby literally executing transactions in that serial order, or by allowing concurrent\nexecution while preventing serialization conflicts (by locking or aborting).\n\u2022The use of timestamps and clocks in distributed systems that we discussed in\n",
    "summary": "The text highlights the importance of ordering guarantees in distributed systems, particularly within leader-based replication and transaction management, referencing serializability and timestamping.",
    "sample_answer": "\u201cOrdering guarantees are absolutely critical when designing distributed systems, especially when dealing with concurrent writes. Consider a leader-based replication setup \u2013 the leader\u2019s role is to establish a defined order for write operations, ensuring that followers apply the changes in a consistent sequence. This relates directly to serializability, which aims to simulate a single-user transaction across multiple nodes, potentially achieved through locking or timestamping to prevent conflicting operations.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you\u2019d need to enforce ordering guarantees in a distributed system. How would you approach designing this system to ensure consistency, and what potential challenges might you encounter, referencing concepts like serializability or timestamping?\u201d"
  },
  {
    "chunk": "Chapter 8  (see \u201cRelying on Synchronized Clocks\u201d on page 291) is another\nattempt to introduce order into a disorderly world, for example to determine\nwhich one of two writes happened later.\nIt turns out that there are deep connections between ordering, linearizability, and\nconsensus. Although this notion is a bit more theoretical and abstract than the rest of\nthis book, it is very helpful for clarifying our understanding of what systems can and\ncannot do. We will explore this topic in the next few sections.\nOrdering and Causality\nThere are several reasons why ordering keeps coming up, and one of the reasons is\nthat it helps preserve causality . We have already seen several examples over the\ncourse of this book where causality has been important:\n\u2022In \u201cConsistent Prefix Reads\u201d on page 165 (Figure 5-5 ) we saw an example where\nthe observer of a conversation saw first the answer to a question, and then the\nquestion being answered. This is confusing because it violates our intuition of\ncause and effect: if a question is answered, then clearly the question had to be\nthere first, because the person giving the answer must have seen the question\n(assuming they are not psychic and cannot see into the future). We say that there\nis a causal dependency  between the question and the answer.\nOrdering Guarantees | 339\n",
    "summary": "The text highlights the importance of ordering guarantees, causality, and the connection between ordering, linearizability, and consensus \u2013 all crucial for understanding system behavior and potential pitfalls.",
    "sample_answer": "\u201cThis section really underscores a fundamental challenge in distributed systems: ensuring causality. As demonstrated in \u2018Consistent Prefix Reads,\u2019 without an ordering guarantee, we can perceive events out of their proper causal order, leading to potentially confusing and incorrect interpretations of how a system works. Maintaining ordering, likely through a consensus algorithm like Raft or Paxos, is therefore vital for upholding the system's logical state and preventing these inconsistencies, which directly relates to the CAP theorem\u2014specifically ensuring consistency.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where an out-of-order event could cause problems in a distributed system. How would you address this challenge, and what system-level principles (e.g., consistency models, consensus algorithms) would you consider when designing a solution?\u201d"
  },
  {
    "chunk": "\u2022A similar pattern appeared in Figure 5-9 , where we looked at the replication\nbetween three leaders and noticed that some writes could \u201covertake\u201d others due\nto network delays. From the perspective of one of the replicas it would look as\nthough there was an update to a row that did not exist. Causality here means that\na row must first be created before it can be updated.\n\u2022In \u201cDetecting Concurrent Writes\u201d on page 184 we observed that if you have two\noperations A and B, there are three possibilities: either A happened before B, or B\nhappened before A, or A and B are concurrent. This happened before  relationship\nis another expression of causality: if A happened before B, that means B might\nhave known about A, or built upon A, or depended on A. If A and B are concur\u2010\nrent, there is no causal link between them; in other words, we are sure that nei\u2010\nther knew about the other.\n\u2022In the context of snapshot isolation for transactions ( \u201cSnapshot Isolation and\nRepeatable Read\u201d on page 237 ), we said that a transaction reads from a consistent\nsnapshot. But what does \u201cconsistent\u201d mean in this context? It means consistent\nwith causality : if the snapshot contains an answer, it must also contain the ques\u2010\ntion being answered [ 48]. Observing the entire database at a single point in time\nmakes it consistent with causality: the effects of all operations that happened cau\u2010\nsally before that point in time are visible, but no operations that happened cau\u2010\nsally afterward can be seen. Read skew (non-repeatable reads, as illustrated in\nFigure 7-6 ) means reading data in a state that violates causality.\n\u2022Our examples of write skew between transactions (see \u201cWrite Skew and Phan\u2010\ntoms\u201d  on page 246) also demonstrated causal dependencies: in Figure 7-8 , Alice\nwas allowed to go off call because the transaction thought that Bob was still on\ncall, and vice versa. In this case, the action of going off call is causally dependent\non the observation of who is currently on call. Serializable snapshot isolation (see\n\u201cSerializable Snapshot Isolation (SSI)\u201d on page 261) detects write skew by track\u2010\ning the causal dependencies between transactions.\n\u2022In the example of Alice and Bob watching football ( Figure 9-1 ), the fact that Bob\ngot a stale result from the server after hearing Alice exclaim the result is a causal\u2010\nity violation: Alice\u2019s exclamation is causally dependent on the announcement of\nthe score, so Bob should also be able to see the score after hearing Alice. The\nsame pattern appeared again in \u201cCross-channel timing dependencies\u201d on page\n331 in the guise of an image resizing service.\nCausality imposes an ordering on events: cause comes before effect; a message is sent\nbefore that message is received; the question comes before the answer. And, like in\nreal life, one thing leads to another: one node reads some data and then writes some\u2010\nthing as a result, another node reads the thing that was written and writes something\nelse in turn, and so on. These chains of causally dependent operations define the\ncausal order in the system\u2014i.e., what happened before what.\n340 | Chapter 9: Consistency and Consensus\n",
    "summary": "The chunk discusses causality, snapshot isolation, and how these concepts relate to ensuring data consistency and ordering in distributed systems.",
    "sample_answer": "\u201cOkay, this chunk highlights a really important consideration in distributed systems design \u2013 causality. The core principle is that events must occur in a causally consistent order to maintain data integrity. Snapshot isolation, as described, ensures a transaction sees a consistent snapshot, but that consistency is fundamentally tied to causality. If a transaction attempts to read data based on a snapshot that doesn\u2019t reflect the causal order of operations, you\u2019ll get read skew, potentially leading to incorrect results, and this is why we need to ensure that operations are ordered correctly \u2013 for example, using techniques like Serializable Snapshot Isolation (SSI) which actively tracks and enforces causal dependencies.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say you\u2019re designing a distributed database system where transactions need to update a shared dataset. How would you approach ensuring that transactions operate in a causally consistent order, and what mechanisms could you employ to detect and handle situations where causality is violated?\u201d"
  },
  {
    "chunk": "If a system obeys the ordering imposed by causality, we say that it is causally consis\u2010\ntent. For example, snapshot isolation provides causal consistency: when you read\nfrom the database, and you see some piece of data, then you must also be able to see\nany data that causally precedes it (assuming it has not been deleted in the meantime).\nThe causal order is not a total order\nA total order  allows any two elements to be compared, so if you have two elements,\nyou can always say which one is greater and which one is smaller. For example, natu\u2010\nral numbers are totally ordered: if I give you any two numbers, say 5 and 13, you can\ntell me that 13 is greater than 5.\nHowever, mathematical sets are not totally ordered: is { a, b} greater than { b, c}? Well,\nyou can\u2019t really compare them, because neither is a subset of the other. We say they\nare incomparable , and therefore mathematical sets are partially ordered : in some cases\none set is greater than another (if one set contains all the elements of another), but in\nother cases they are incomparable.\nThe difference between a total order and a partial order is reflected in different data\u2010\nbase consistency models:\nLinearizability\nIn a linearizable system, we have a total order  of operations: if the system behaves\nas if there is only a single copy of the data, and every operation is atomic, this\nmeans that for any two operations we can always say which one happened first.\nThis total ordering is illustrated as a timeline in Figure 9-4 .\nCausality\nWe said that two operations are concurrent if neither happened before the other\n(see \u201cThe \u201chappens-before\u201d relationship and concurrency\u201d on page 186). Put\nanother way, two events are ordered if they are causally related (one happened\nbefore the other), but they are incomparable if they are concurrent. This means\nthat causality defines a partial order , not a total order: some operations are\nordered with respect to each other, but some are incomparable.\nTherefore, according to this definition, there are no concurrent operations in a line\u2010\narizable datastore: there must be a single timeline along which all operations are\ntotally ordered. There might be several requests waiting to be handled, but the data\u2010\nstore ensures that every request is handled atomically at a single point in time, acting\non a single copy of the data, along a single timeline, without any concurrency.\nConcurrency would mean that the timeline branches and merges again\u2014and in this\ncase, operations on different branches are incomparable (i.e., concurrent). We saw\nthis phenomenon in Chapter 5 : for example, Figure 5-14  is not a straight-line total\norder, but rather a jumble of different operations going on concurrently. The arrows\nin the diagram indicate causal dependencies\u2014the partial ordering of operations.\nOrdering Guarantees | 341\n",
    "summary": "The chunk discusses causal consistency, total vs. partial ordering, and how these relate to database consistency models like linearizability.",
    "sample_answer": "\u201cOkay, let\u2019s talk about consistency. The core concept here is causal consistency, which is fundamentally tied to understanding how operations are ordered. Linearizability, as demonstrated, provides a total order \u2013 meaning for any two operations, we can definitively determine which happened first. This contrasts with a partial order, like what you see in Figure 5-14, where operations are only ordered if they have a causal dependency, reflecting the \u2018happens-before\u2019 relationship. This distinction is critical for designing systems where we need to guarantee the accuracy of data, particularly when dealing with concurrent updates.\u201d",
    "potential_interview_question": "\u201cDescribe the difference between a total order and a partial order in the context of database consistency. How does linearizability relate to this, and why is it important for systems requiring high data accuracy?\u201d"
  },
  {
    "chunk": "If you are familiar with distributed version control systems such as Git, their version\nhistories are very much like the graph of causal dependencies. Often one commit\nhappens after another, in a straight line, but sometimes you get branches (when sev\u2010\neral people concurrently work on a project), and merges are created when those con\u2010\ncurrently created commits are combined.\nLinearizability is stronger than causal consistency\nSo what is the relationship between the causal order and linearizability? The answer is\nthat linearizability implies  causality: any system that is linearizable will preserve cau\u2010\nsality correctly [ 7]. In particular, if there are multiple communication channels in a\nsystem (such as the message queue and the file storage service in Figure 9-5 ), lineariz\u2010\nability ensures that causality is automatically preserved without the system having to\ndo anything special (such as passing around timestamps between different compo\u2010\nnents).\nThe fact that linearizability ensures causality is what makes linearizable systems sim\u2010\nple to understand and appealing. However, as discussed in \u201cThe Cost of Linearizabil\u2010\nity\u201d on page 335, making a system linearizable can harm its performance and\navailability, especially if the system has significant network delays (for example, if it\u2019s\ngeographically distributed). For this reason, some distributed data systems have\nabandoned linearizability, which allows them to achieve better performance but can\nmake them difficult to work with.\nThe good news is that a middle ground is possible. Linearizability is not the only way\nof preserving causality\u2014there are other ways too. A system can be causally consistent\nwithout incurring the performance hit of making it linearizable (in particular, the\nCAP theorem does not apply). In fact, causal consistency is the strongest possible\nconsistency model that does not slow down due to network delays, and remains\navailable in the face of network failures [ 2, 42].\nIn many cases, systems that appear to require linearizability in fact only really require\ncausal consistency, which can be implemented more efficiently. Based on this obser\u2010\nvation, researchers are exploring new kinds of databases that preserve causality, with\nperformance and availability characteristics that are similar to those of eventually\nconsistent systems [ 49, 50, 51].\nAs this research is quite recent, not much of it has yet made its way into production\nsystems, and there are still challenges to be overcome [ 52, 53]. However, it is a prom\u2010\nising direction for future systems.\nCapturing causal dependencies\nWe won\u2019t go into all the nitty-gritty details of how nonlinearizable systems can main\u2010\ntain causal consistency here, but just briefly explore some of the key ideas.\n342 | Chapter 9: Consistency and Consensus\n",
    "summary": "The text discusses the trade-offs between linearizability and causal consistency in distributed systems, highlighting how linearizability\u2019s strict ordering can negatively impact performance and availability, while causal consistency offers a viable alternative.",
    "sample_answer": "\u201cOkay, so this excerpt really brings up an important point about system design \u2013 the consistency model you choose has huge implications for both performance and availability. Linearizability, while guaranteeing strict ordering, can be incredibly expensive in distributed systems, especially with network latency. The fact that it implicitly handles causality without needing explicit coordination mechanisms is appealing, but the CAP theorem suggests that trading strict linearity for causal consistency is often the right approach. It\u2019s about recognizing that in many scenarios, achieving linearizability isn\u2019t necessary, and a system can achieve causal consistency more efficiently, which is a core consideration when designing for high availability and low latency.\u201d",
    "potential_interview_question": "\u201cImagine you're designing a distributed system where multiple microservices need to reliably update a shared dataset. Considering the trade-offs described in this excerpt between linearizability and causal consistency, what consistency model would you choose and *why*, specifically addressing potential performance bottlenecks related to strict ordering?\u201d"
  },
  {
    "chunk": "In order to maintain causality, you need to know which operation happened before\nwhich other operation. This is a partial order: concurrent operations may be pro\u2010\ncessed in any order, but if one operation happened before another, then they must be\nprocessed in that order on every replica. Thus, when a replica processes an operation,\nit must ensure that all causally preceding operations (all operations that happened\nbefore) have already been processed; if some preceding operation is missing, the later\noperation must wait until the preceding operation has been processed.\nIn order to determine causal dependencies, we need some way of describing the\n\u201cknowledge\u201d of a node in the system. If a node had already seen the value X when it\nissued the write Y, then X and Y may be causally related. The analysis uses the kinds\nof questions you would expect in a criminal investigation of fraud charges: did the\nCEO know  about X at the time when they made decision Y?\nThe techniques for determining which operation happened before which other oper\u2010\nation are similar to what we discussed in \u201cDetecting Concurrent Writes\u201d on page 184 .\nThat section discussed causality in a leaderless datastore, where we need to detect\nconcurrent writes to the same key in order to prevent lost updates. Causal consis\u2010\ntency goes further: it needs to track causal dependencies across the entire database,\nnot just for a single key. Version vectors can be generalized to do this [ 54].\nIn order to determine the causal ordering, the database needs to know which version\nof the data was read by the application. This is why, in Figure 5-13 , the version num\u2010\nber from the prior operation is passed back to the database on a write. A similar idea\nappears in the conflict detection of SSI, as discussed in \u201cSerializable Snapshot Isola\u2010\ntion (SSI)\u201d on page 261: when a transaction wants to commit, the database checks\nwhether the version of the data that it read is still up to date. To this end, the database\nkeeps track of which data has been read by which transaction. \nSequence Number Ordering\nAlthough causality is an important theoretical concept, actually keeping track of all\ncausal dependencies can become impractical. In many applications, clients read lots\nof data before writing something, and then it is not clear whether the write is causally\ndependent on all or only some of those prior reads. Explicitly tracking all the data\nthat has been read would mean a large overhead.\nHowever, there is a better way: we can use sequence numbers  or timestamps  to order\nevents. A timestamp need not come from a time-of-day clock (or physical clock,\nwhich have many problems, as discussed in \u201cUnreliable Clocks\u201d  on page 287). It can\ninstead come from a logical clock , which is an algorithm to generate a sequence of\nnumbers to identify operations, typically using counters that are incremented for\nevery operation.\nOrdering Guarantees | 343\n",
    "summary": "The chunk discusses maintaining causality and ordering guarantees in a distributed system, leveraging sequence numbers and logical clocks to overcome the impracticality of tracking all causal dependencies.",
    "sample_answer": "\u201cOkay, let\u2019s talk about maintaining causality in a distributed system. The core challenge is ensuring that operations are processed in the correct order, even with concurrent writes. We can\u2019t simply rely on timestamps because clocks are inherently unreliable. Instead, we need a mechanism to track causal dependencies, like sequence numbers or logical clocks. These clocks increment for each operation, providing a unique identifier that allows us to determine the order of events, much like a criminal investigation \u2013 \u2018did operation Y happen after operation X?\u2019 As seen in the context of SSI, the database must track which version of data was read by which transaction, and forward that information back to the database on a write. This approach, akin to tracking causal dependencies, is crucial for preventing lost updates and ensuring data consistency in a distributed environment.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system for processing financial transactions. How would you use the concept of causal ordering to prevent data inconsistencies when multiple users are simultaneously updating account balances? What mechanisms could you employ, and what trade-offs would you consider?\u201d"
  },
  {
    "chunk": "vii. A total order that is inconsistent  with causality is easy to create, but not very useful. For example, you can\ngenerate a random UUID for each operation, and compare UUIDs lexicographically to define the total order\u2010\ning of operations. This is a valid total order, but the random UUIDs tell you nothing about which operation\nactually happened first, or whether the operations were concurrent.Such sequence numbers or timestamps are compact (only a few bytes in size), and\nthey provide a total order : that is, every operation has a unique sequence number, and\nyou can always compare two sequence numbers to determine which is greater (i.e.,\nwhich operation happened later).\nIn particular, we can create sequence numbers in a total order that is consistent with\ncausality :vii we promise that if operation A causally happened before B, then A occurs\nbefore B in the total order (A has a lower sequence number than B). Concurrent\noperations may be ordered arbitrarily. Such a total order captures all the causality\ninformation, but also imposes more ordering than strictly required by causality.\nIn a database with single-leader replication (see \u201cLeaders and Followers\u201d on page\n152), the replication log defines a total order of write operations that is consistent\nwith causality. The leader can simply increment a counter for each operation, and\nthus assign a monotonically increasing sequence number to each operation in the\nreplication log. If a follower applies the writes in the order they appear in the replica\u2010\ntion log, the state of the follower is always causally consistent (even if it is lagging\nbehind the leader).\nNoncausal sequence number generators\nIf there is not a single leader (perhaps because you are using a multi-leader or leader\u2010\nless database, or because the database is partitioned), it is less clear how to generate\nsequence numbers for operations. Various methods are used in practice:\n\u2022Each node can generate its own independent set of sequence numbers. For exam\u2010\nple, if you have two nodes, one node can generate only odd numbers and the\nother only even numbers. In general, you could reserve some bits in the binary\nrepresentation of the sequence number to contain a unique node identifier, and\nthis would ensure that two different nodes can never generate the same sequence\nnumber.\n\u2022You can attach a timestamp from a time-of-day clock (physical clock) to each\noperation [ 55]. Such timestamps are not sequential, but if they have sufficiently\nhigh resolution, they might be sufficient to totally order operations. This fact is\nused in the last write wins conflict resolution method (see \u201cTimestamps for\nordering events\u201d on page 291 ).\n\u2022You can preallocate blocks of sequence numbers. For example, node A might\nclaim the block of sequence numbers from 1 to 1,000, and node B might claim\n344 | Chapter 9: Consistency and Consensus\n",
    "summary": "The chunk discusses total ordering strategies, highlighting the trade-offs between simplicity and causality, and explores methods like UUID comparisons and timestamp-based ordering.",
    "sample_answer": "\u201cOkay, so when you\u2019re designing a system that requires a total order, it\u2019s crucial to understand the implications. Simply generating random UUIDs, as mentioned, provides a total order but doesn\u2019t reflect the actual causal relationship between operations, which is often a key requirement. To achieve causal consistency, we can use timestamps, but relying on physical clocks introduces potential drift and requires careful handling\u2014especially if we're building a system with multiple leaders or a partitioned database. Using a monotonically increasing counter, as a single leader might do, offers a more robust approach, but we must consider how to manage conflicts across multiple leaders or nodes, for instance, with a last-write-wins strategy, tying into a timestamp approach.\u201d",
    "potential_interview_question": "\u201cDescribe the trade-offs between generating UUIDs for total ordering versus using monotonically increasing sequence numbers. In what scenarios would you choose one approach over the other, and what considerations would influence your decision?\u201d"
  },
  {
    "chunk": "viii. It is possible to make physical clock timestamps consistent with causality: in \u201cSynchronized clocks for\nglobal snapshots\u201d on page 294  we discussed Google\u2019s Spanner, which estimates the expected clock skew and\nwaits out the uncertainty interval before committing a write. This method ensures that a causally later trans\u2010\naction is given a greater timestamp. However, most clocks cannot provide the required uncertainty metric.the block from 1,001 to 2,000. Then each node can independently assign\nsequence numbers from its block, and allocate a new block when its supply of\nsequence numbers begins to run low.\nThese three options all perform better and are more scalable than pushing all opera\u2010\ntions through a single leader that increments a counter. They generate a unique,\napproximately increasing sequence number for each operation. However, they all\nhave a problem: the sequence numbers they generate are not consistent with causality .\nThe causality problems occur because these sequence number generators do not cor\u2010\nrectly capture the ordering of operations across different nodes:\n\u2022Each node may process a different number of operations per second. Thus, if one\nnode generates even numbers and the other generates odd numbers, the counter\nfor even numbers may lag behind the counter for odd numbers, or vice versa. If\nyou have an odd-numbered operation and an even-numbered operation, you\ncannot accurately tell which one causally happened first.\n\u2022Timestamps from physical clocks are subject to clock skew, which can make\nthem inconsistent with causality. For example, see Figure 8-3 , which shows a sce\u2010\nnario in which an operation that happened causally later was actually assigned a\nlower timestamp.viii\n\u2022In the case of the block allocator, one operation may be given a sequence number\nin the range from 1,001 to 2,000, and a causally later operation may be given a\nnumber in the range from 1 to 1,000. Here, again, the sequence number is incon\u2010\nsistent with causality.\nLamport timestamps\nAlthough the three sequence number generators just described are inconsistent with\ncausality, there is actually a simple method for generating sequence numbers that is\nconsistent with causality. It is called a Lamport timestamp , proposed in 1978 by Leslie\nLamport [ 56], in what is now one of the most-cited papers in the field of distributed\nsystems.\nThe use of Lamport timestamps is illustrated in Figure 9-8 . Each node has a unique\nidentifier, and each node keeps a counter of the number of operations it has pro\u2010\ncessed. The Lamport timestamp is then simply a pair of ( counter , node ID ). Two\nOrdering Guarantees | 345\n",
    "summary": "The text discusses techniques for generating consistent sequence numbers in a distributed system, highlighting the challenges of achieving causality and the limitations of relying solely on physical clocks or naive counter-based approaches.",
    "sample_answer": "\u201cOkay, so this section really highlights the difficulties in building a globally consistent system. The problem isn't just about generating unique IDs; it\u2019s about ensuring causality is maintained. Using simple counters, as the text points out, can easily lead to inconsistencies due to variations in processing speeds and clock skew. To address this, Lamport timestamps \u2013 which are essentially a pair of (counter, node ID) \u2013 provide a solution by establishing a timestamp based on the node\u2019s processing count and its unique identifier, which helps to maintain causal ordering.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re designing a distributed system to handle user updates.  We need to ensure that updates are processed and reflected consistently across multiple data centers.  Considering the challenges outlined in this text regarding counter-based approaches and clock skew, what techniques would you consider to ensure causal ordering, and what are the potential drawbacks of each?\u201d"
  },
  {
    "chunk": "nodes may sometimes have the same counter value, but by including the node ID in\nthe timestamp, each timestamp is made unique.\nFigure 9-8. Lamport timestamps provide a total ordering consistent with causality.\nA Lamport timestamp bears no relationship to a physical time-of-day clock, but it\nprovides total ordering: if you have two timestamps, the one with a greater counter\nvalue is the greater timestamp; if the counter values are the same, the one with the\ngreater node ID is the greater timestamp.\nSo far this description is essentially the same as the even/odd counters described in\nthe last section. The key idea about Lamport timestamps, which makes them consis\u2010\ntent with causality, is the following: every node and every client keeps track of the\nmaximum  counter value it has seen so far, and includes that maximum on every\nrequest. When a node receives a request or response with a maximum counter value\ngreater than its own counter value, it immediately increases its own counter to that\nmaximum.\nThis is shown in Figure 9-8 , where client A receives a counter value of 5 from node 2,\nand then sends that maximum of 5 to node 1. At that time, node 1\u2019s counter was only\n1, but it was immediately moved forward to 5, so the next operation had an incre\u2010\nmented counter value of 6.\nAs long as the maximum counter value is carried along with every operation, this\nscheme ensures that the ordering from the Lamport timestamps is consistent with\ncausality, because every causal dependency results in an increased timestamp.\nLamport timestamps are sometimes confused with version vectors, which we saw in\n\u201cDetecting Concurrent Writes\u201d on page 184. Although there are some similarities,\nthey have a different purpose: version vectors can distinguish whether two operations\nare concurrent or whether one is causally dependent on the other, whereas Lamport\ntimestamps always enforce a total ordering. From the total ordering of Lamport time\u2010\n346 | Chapter 9: Consistency and Consensus\n",
    "summary": "This chunk discusses the use of Lamport timestamps for establishing a total ordering in a distributed system, highlighting the importance of causality and the mechanism of carrying the maximum counter value.",
    "sample_answer": "\u201cOkay, let\u2019s talk about ensuring causality in a distributed system. Lamport timestamps, as illustrated in Figure 9-8, are a key technique here. The core idea is to avoid relying on a global clock, which is difficult to obtain in a distributed environment. Instead, each node maintains a counter and propagates the *maximum* counter value seen so far with every request, which guarantees total ordering. This approach directly addresses the CAP theorem \u2013 specifically, prioritizing Consistency, as we ensure that causal relationships are accurately reflected in the ordering of events.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system where events need to be ordered across multiple nodes.  Explain how Lamport timestamps work to achieve this, focusing on the role of the maximum counter value and how it contributes to causality. How does this mechanism relate to the CAP theorem?\u201d"
  },
  {
    "chunk": "stamps, you cannot tell whether two operations are concurrent or whether they are\ncausally dependent. The advantage of Lamport timestamps over version vectors is\nthat they are more compact. \nTimestamp ordering is not sufficient\nAlthough Lamport timestamps define a total order of operations that is consistent\nwith causality, they are not quite sufficient to solve many common problems in dis\u2010\ntributed systems.\nFor example, consider a system that needs to ensure that a username uniquely identi\u2010\nfies a user account. If two users concurrently try to create an account with the same\nusername, one of the two should succeed and the other should fail. (We touched on\nthis problem previously in \u201cThe leader and the lock\u201d on page 301 .)\nAt first glance, it seems as though a total ordering of operations (e.g., using Lamport\ntimestamps) should be sufficient to solve this problem: if two accounts with the same\nusername are created, pick the one with the lower timestamp as the winner (the one\nwho grabbed the username first), and let the one with the greater timestamp fail.\nSince timestamps are totally ordered, this comparison is always valid.\nThis approach works for determining the winner after the fact: once you have collec\u2010\nted all the username creation operations in the system, you can compare their time\u2010\nstamps. However, it is not sufficient when a node has just received a request from a\nuser to create a username, and needs to decide right now  whether the request should\nsucceed or fail. At that moment, the node does not know whether another node is\nconcurrently in the process of creating an account with the same username, and what\ntimestamp that other node may assign to the operation.\nIn order to be sure that no other node is in the process of concurrently creating an\naccount with the same username and a lower timestamp, you would have to check\nwith every other node to see what it is doing [ 56]. If one of the other nodes has failed\nor cannot be reached due to a network problem, this system would grind to a halt.\nThis is not the kind of fault-tolerant system that we need.\nThe problem here is that the total order of operations only emerges after you have\ncollected all of the operations. If another node has generated some operations, but\nyou don\u2019t yet know what they are, you cannot construct the final ordering of opera\u2010\ntions: the unknown operations from the other node may need to be inserted at vari\u2010\nous positions in the total order.\nTo conclude: in order to implement something like a uniqueness constraint for user\u2010\nnames, it\u2019s not sufficient to have a total ordering of operations\u2014you also need to\nknow when that order is finalized. If you have an operation to create a username, and\nyou are sure that no other node can insert a claim for the same username ahead of\nyour operation in the total order, then you can safely declare the operation successful.\nOrdering Guarantees | 347\n",
    "summary": "The text highlights the limitations of total ordering (using Lamport timestamps) in distributed systems, particularly regarding uniqueness constraints and the need for a finalized ordering to ensure consistency.",
    "sample_answer": "\u201cThe core issue here is that relying solely on Lamport timestamps for enforcing uniqueness constraints doesn\u2019t provide the necessary real-time decision-making capability. Timestamp ordering alone doesn't inherently prevent concurrent operations; it only provides a total order *after* all operations have been collected. This leads to a potential deadlock scenario where a node must constantly query other nodes to confirm the finalized order, which violates fault tolerance. We need a stronger guarantee\u2014something like a distributed lock or a consensus protocol\u2014to definitively determine if an operation can proceed without conflict, ensuring consistency and availability.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where a simple total ordering mechanism (like Lamport timestamps) would fail to adequately resolve a conflict in a distributed system. How would you improve upon this approach to achieve a more robust solution?\u201d"
  },
  {
    "chunk": "ix. The term atomic broadcast  is traditional, but it is very confusing as it\u2019s inconsistent with other uses of the\nword atomic : it has nothing to do with atomicity in ACID transactions and is only indirectly related to atomic\noperations (in the sense of multi-threaded programming) or atomic registers (linearizable storage). The term\ntotal order multicast  is another synonym.\nThis idea of knowing when your total order is finalized is captured in the topic of\ntotal order broadcast . \nTotal Order Broadcast\nIf your program runs only on a single CPU core, it is easy to define a total ordering of\noperations: it is simply the order in which they were executed by the CPU. However,\nin a distributed system, getting all nodes to agree on the same total ordering of opera\u2010\ntions is tricky. In the last section we discussed ordering by timestamps or sequence\nnumbers, but found that it is not as powerful as single-leader replication (if you use\ntimestamp ordering to implement a uniqueness constraint, you cannot tolerate any\nfaults).\nAs discussed, single-leader replication determines a total order of operations by\nchoosing one node as the leader and sequencing all operations on a single CPU core\non the leader. The challenge then is how to scale the system if the throughput is\ngreater than a single leader can handle, and also how to handle failover if the leader\nfails (see \u201cHandling Node Outages\u201d on page 156). In the distributed systems litera\u2010\nture, this problem is known as total order broadcast  or atomic broadcast  [25, 57, 58].ix\nScope of ordering guarantee\nPartitioned databases with a single leader per partition often main\u2010\ntain ordering only per partition, which means they cannot offer\nconsistency guarantees (e.g., consistent snapshots, foreign key ref\u2010\nerences) across partitions. Total ordering across all partitions is\npossible, but requires additional coordination [ 59].\nTotal order broadcast is usually described as a protocol for exchanging messages\nbetween nodes. Informally, it requires that two safety properties always be satisfied:\nReliable delivery\nNo messages are lost: if a message is delivered to one node, it is delivered to all\nnodes.\nTotally ordered delivery\nMessages are delivered to every node in the same order.\nA correct algorithm for total order broadcast must ensure that the reliability and\nordering properties are always satisfied, even if a node or the network is faulty. Of\n348 | Chapter 9: Consistency and Consensus\n",
    "summary": "The text discusses total order broadcast as a protocol for ensuring reliable and ordered message delivery in distributed systems, highlighting the challenges of scaling and fault tolerance.",
    "sample_answer": "\u201cOkay, let\u2019s break down total order broadcast. The core challenge here is replicating a total ordering across a distributed system, which isn\u2019t straightforward because you\u2019re essentially trying to achieve consensus \u2013 a foundational principle in distributed systems. We need to ensure both reliable delivery (no message loss) and totally ordered delivery (messages arrive in the same sequence on every node) \u2013 reflecting the properties of a safety protocol. This mirrors the need for a consensus algorithm like Raft or Paxos, where nodes agree on a single order, and the problem of maintaining this order becomes especially complex as the system scales and nodes fail.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system for processing financial transactions where strict ordering is crucial for auditability. How would you approach designing a system to implement total order broadcast, considering potential scaling challenges and fault tolerance requirements? What considerations would you make regarding consensus protocols like Raft or Paxos?\u201d"
  },
  {
    "chunk": "course, messages will not be delivered while the network is interrupted, but an algo\u2010\nrithm can keep retrying so that the messages get through when the network is even\u2010\ntually repaired (and then they must still be delivered in the correct order).\nUsing total order broadcast\nConsensus services such as ZooKeeper and etcd actually implement total order\nbroadcast. This fact is a hint that there is a strong connection between total order\nbroadcast and consensus, which we will explore later in this chapter.\nTotal order broadcast is exactly what you need for database replication: if every mes\u2010\nsage represents a write to the database, and every replica processes the same writes in\nthe same order, then the replicas will remain consistent with each other (aside from\nany temporary replication lag). This principle is known as state machine replication\n[60], and we will return to it in Chapter 11 .\nSimilarly, total order broadcast can be used to implement serializable transactions: as\ndiscussed in \u201cActual Serial Execution\u201d on page 252, if every message represents a\ndeterministic transaction to be executed as a stored procedure, and if every node pro\u2010\ncesses those messages in the same order, then the partitions and replicas of the data\u2010\nbase are kept consistent with each other [ 61].\nAn important aspect of total order broadcast is that the order is fixed at the time the\nmessages are delivered: a node is not allowed to retroactively insert a message into an\nearlier position in the order if subsequent messages have already been delivered. This\nfact makes total order broadcast stronger than timestamp ordering.\nAnother way of looking at total order broadcast is that it is a way of creating a log (as\nin a replication log, transaction log, or write-ahead log): delivering a message is like\nappending to the log. Since all nodes must deliver the same messages in the same\norder, all nodes can read the log and see the same sequence of messages.\nTotal order broadcast is also useful for implementing a lock service that provides\nfencing tokens (see \u201cFencing tokens\u201d on page 303). Every request to acquire the lock\nis appended as a message to the log, and all messages are sequentially numbered in\nthe order they appear in the log. The sequence number can then serve as a fencing\ntoken, because it is monotonically increasing. In ZooKeeper, this sequence number is\ncalled zxid  [15].\nOrdering Guarantees | 349\n",
    "summary": "The chunk discusses total order broadcast as a core principle for building consistent replicated systems, particularly focusing on its use in database replication, transaction management, and lock services.",
    "sample_answer": "\u201cTotal order broadcast is a fundamental technique for ensuring data consistency across replicated systems. Specifically, the text highlights its use in database replication, where delivering messages in a fixed, total order prevents inconsistencies by guaranteeing that all replicas process the same writes in the same sequence, directly addressing the state machine replication principle. Furthermore, the use of zxid as a fencing token within ZooKeeper demonstrates how total order broadcast can enforce strong consistency and control access to resources, which is a key aspect of building resilient and reliable distributed systems.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you would employ total order broadcast.  How would you leverage the concept of a \u2018zxid\u2019 within a system like ZooKeeper to ensure data integrity and prevent conflicting updates?\u201d"
  },
  {
    "chunk": "x. In a formal sense, a linearizable read-write register is an \u201ceasier\u201d problem. Total order broadcast is equiva\u2010\nlent to consensus [ 67], which has no deterministic solution in the asynchronous crash-stop model [ 68],\nwhereas a linearizable read-write register can be implemented in the same system model [ 23, 24, 25]. How\u2010\never, supporting atomic operations such as compare-and-set or increment-and-get in a register makes it\nequivalent to consensus [ 28]. Thus, the problems of consensus and a linearizable register are closely related.\nxi. If you don\u2019t wait, but acknowledge the write immediately after it has been enqueued, you get something\nsimilar to the memory consistency model of multi-core x86 processors [ 43]. That model is neither lineariza\u2010\nble nor sequentially consistent.Implementing linearizable storage using total order broadcast\nAs illustrated in Figure 9-4 , in a linearizable system there is a total order of opera\u2010\ntions. Does that mean linearizability is the same as total order broadcast? Not quite,\nbut there are close links between the two.x \nTotal order broadcast is asynchronous: messages are guaranteed to be delivered relia\u2010\nbly in a fixed order, but there is no guarantee about when  a message will be delivered\n(so one recipient may lag behind the others). By contrast, linearizability is a recency\nguarantee: a read is guaranteed to see the latest value written.\nHowever, if you have total order broadcast, you can build linearizable storage on top\nof it. For example, you can ensure that usernames uniquely identify user accounts.\nImagine that for every possible username, you can have a linearizable register with an\natomic compare-and-set operation. Every register initially has the value null  (indi\u2010\ncating that the username is not taken). When a user wants to create a username, you\nexecute a compare-and-set operation on the register for that username, setting it to\nthe user account ID, under the condition that the previous register value is null . If\nmultiple users try to concurrently grab the same username, only one of the compare-\nand-set operations will succeed, because the others will see a value other than null\n(due to linearizability).\nYou can implement such a linearizable compare-and-set operation as follows by\nusing total order broadcast as an append-only log [ 62, 63]:\n1.Append a message to the log, tentatively indicating the username you want to\nclaim.\n2.Read the log, and wait for the message you appended to be delivered back to\nyou.xi\n3.Check for any messages claiming the username that you want. If the first message\nfor your desired username is your own message, then you are successful: you can\ncommit the username claim (perhaps by appending another message to the log)\nand acknowledge it to the client. If the first message for your desired username is\nfrom another user, you abort the operation.\n350 | Chapter 9: Consistency and Consensus\n",
    "summary": "The chunk discusses building linearizable storage using total order broadcast and compare-and-set operations, highlighting the relationship between consensus and linearizability.",
    "sample_answer": "\u201cThis scenario demonstrates a key system design pattern: leveraging total order broadcast for building linearizable storage. The use of compare-and-set operations, combined with the total order guarantee of the broadcast log, allows us to implement atomic updates, mimicking the behavior of a linearizable register. The comparison with the x86 multi-core memory consistency model is important here - total order broadcast provides a stronger guarantee than the more relaxed, sequentially consistent model, allowing for stronger guarantees about data visibility.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where you would choose total order broadcast to implement a linearizable storage system. What are the key trade-offs you would consider compared to alternative consistency models, and how would you ensure the system remains available even in the face of network partitions?\u201d"
  },
  {
    "chunk": "Because log entries are delivered to all nodes in the same order, if there are several\nconcurrent writes, all nodes will agree on which one came first. Choosing the first of\nthe conflicting writes as the winner and aborting later ones ensures that all nodes\nagree on whether a write was committed or aborted. A similar approach can be used\nto implement serializable multi-object transactions on top of a log [ 62].\nWhile this procedure ensures linearizable writes, it doesn\u2019t guarantee linearizable\nreads\u2014if you read from a store that is asynchronously updated from the log, it may\nbe stale. (To be precise, the procedure described here provides sequential consistency\n[47, 64], sometimes also known as timeline consistency  [65, 66], a slightly weaker\nguarantee than linearizability.) To make reads linearizable, there are a few options:\n\u2022You can sequence reads through the log by appending a message, reading the log,\nand performing the actual read when the message is delivered back to you. The\nmessage\u2019s position in the log thus defines the point in time at which the read\nhappens. (Quorum reads in etcd work somewhat like this [ 16].)\n\u2022If the log allows you to fetch the position of the latest log message in a lineariza\u2010\nble way, you can query that position, wait for all entries up to that position to be\ndelivered to you, and then perform the read. (This is the idea behind Zoo\u2010\nKeeper\u2019s sync()  operation [ 15].)\n\u2022You can make your read from a replica that is synchronously updated on writes,\nand is thus sure to be up to date. (This technique is used in chain replication\n[63]; see also \u201cResearch on Replication\u201d on page 155 .)\nImplementing total order broadcast using linearizable storage\nThe last section showed how to build a linearizable compare-and-set operation from\ntotal order broadcast. We can also turn it around, assume that we have linearizable\nstorage, and show how to build total order broadcast from it.\nThe easiest way is to assume you have a linearizable register that stores an integer and\nthat has an atomic increment-and-get operation [ 28]. Alternatively, an atomic\ncompare-and-set operation would also do the job.\nThe algorithm is simple: for every message you want to send through total order\nbroadcast, you increment-and-get the linearizable integer, and then attach the value\nyou got from the register as a sequence number to the message. You can then send\nthe message to all nodes (resending any lost messages), and the recipients will deliver\nthe messages consecutively by sequence number.\nNote that unlike Lamport timestamps, the numbers you get from incrementing the\nlinearizable register form a sequence with no gaps. Thus, if a node has delivered mes\u2010\nsage 4 and receives an incoming message with a sequence number of 6, it knows that\nit must wait for message 5 before it can deliver message 6. The same is not the case\nOrdering Guarantees | 351\n",
    "summary": "The chunk discusses achieving linearizability through total order broadcast using a linearizable register and explores strategies for handling ordering guarantees in distributed systems.",
    "sample_answer": "\u201cOkay, this is a classic challenge in building consistent systems. To achieve linearizability, we\u2019re essentially building a total order broadcast mechanism. The key is using a linearizable register \u2013 something like an atomic counter \u2013 to guarantee a strict order of events. By incrementing this counter and using the resulting value as a sequence number, we can ensure that all nodes agree on the order of operations, mirroring the behavior of a linearizable store, similar to how etcd uses quorum reads. This approach is analogous to ZooKeeper's sync() operation, which relies on waiting for data to be delivered in a linearizable way.\u201d",
    "potential_interview_question": "\u201cDescribe how you would implement a total order broadcast system to ensure linearizability in a distributed environment. What components would you need, and how would you handle potential inconsistencies during delivery?\u201d"
  },
  {
    "chunk": "with Lamport timestamps\u2014in fact, this is the key difference between total order\nbroadcast and timestamp ordering.\nHow hard could it be to make a linearizable integer with an atomic increment-and-\nget operation? As usual, if things never failed, it would be easy: you could just keep it\nin a variable on one node. The problem lies in handling the situation when network\nconnections to that node are interrupted, and restoring the value when that node fails\n[59]. In general, if you think hard enough about linearizable sequence number gener\u2010\nators, you inevitably end up with a consensus algorithm.\nThis is no coincidence: it can be proved that a linearizable compare-and-set (or\nincrement-and-get) register and total order broadcast are both equivalent to consen\u2010\nsus [28, 67]. That is, if you can solve one of these problems, you can transform it into\na solution for the others. This is quite a profound and surprising insight!\nIt is time to finally tackle the consensus problem head-on, which we will do in the\nrest of this chapter. \nDistributed Transactions and Consensus\nConsensus is one of the most important and fundamental problems in distributed\ncomputing. On the surface, it seems simple: informally, the goal is simply to get sev\u2010\neral nodes to agree on something . You might think that this shouldn\u2019t be too hard.\nUnfortunately, many broken systems have been built in the mistaken belief that this\nproblem is easy to solve.\nAlthough consensus is very important, the section about it appears late in this book\nbecause the topic is quite subtle, and appreciating the subtleties requires some pre\u2010\nrequisite knowledge. Even in the academic research community, the understanding\nof consensus only gradually crystallized over the course of decades, with many mis\u2010\nunderstandings along the way. Now that we have discussed replication ( Chapter 5 ),\ntransactions ( Chapter 7 ), system models ( Chapter 8 ), linearizability, and total order\nbroadcast (this chapter), we are finally ready to tackle the consensus problem.\nThere are a number of situations in which it is important for nodes to agree. For\nexample:\nLeader election\nIn a database with single-leader replication, all nodes need to agree on which\nnode is the leader. The leadership position might become contested if some\nnodes can\u2019t communicate with others due to a network fault. In this case, con\u2010\nsensus is important to avoid a bad failover, resulting in a split brain situation in\nwhich two nodes both believe themselves to be the leader (see \u201cHandling Node\nOutages\u201d  on page 156). If there were two leaders, they would both accept writes\nand their data would diverge, leading to inconsistency and data loss.\n352 | Chapter 9: Consistency and Consensus\n",
    "summary": "The text discusses the need for consensus algorithms to handle failures in distributed systems, particularly in leader election and maintaining data consistency.",
    "sample_answer": "\u201cOkay, so we\u2019re dealing with a core problem in distributed systems: achieving consensus. The key takeaway here is that linearizable operations like increment-and-get or even total order broadcast fundamentally require a consensus algorithm to guarantee data consistency, especially when nodes experience network interruptions \u2013 as demonstrated by the potential for a split-brain scenario in leader election. If multiple nodes believe they are the leader, they\u2019ll independently accept writes, causing divergence and data loss, highlighting the importance of a mechanism like Raft or Paxos to establish a single, agreed-upon leader.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where you would need to implement a consensus algorithm. What are some potential pitfalls you would need to consider, and which algorithm family (e.g., Paxos, Raft) might you choose and why?\u201d"
  },
  {
    "chunk": "xii. Atomic commit is formalized slightly differently from consensus: an atomic transaction can commit only\nif all participants vote to commit, and must abort if any participant needs to abort. Consensus is allowed to\ndecide on any value that is proposed by one of the participants. However, atomic commit and consensus are\nreducible to each other [ 70, 71]. Nonblocking  atomic commit is harder than consensus\u2014see \u201cThree-phase\ncommit\u201d on page 359 .Atomic commit\nIn a database that supports transactions spanning several nodes or partitions, we\nhave the problem that a transaction may fail on some nodes but succeed on oth\u2010\ners. If we want to maintain transaction atomicity (in the sense of ACID; see\n\u201cAtomicity\u201d on page 223 ), we have to get all nodes to agree on the outcome of the\ntransaction: either they all abort/roll back (if anything goes wrong) or they all\ncommit (if nothing goes wrong). This instance of consensus is known as the\natomic commit  problem.xii\nThe Impossibility of Consensus\nYou may have heard about the FLP result [ 68]\u2014named after the authors Fischer,\nLynch, and Paterson\u2014which proves that there is no algorithm that is always able to\nreach consensus if there is a risk that a node may crash. In a distributed system, we\nmust assume that nodes may crash, so reliable consensus is impossible. Yet, here we\nare, discussing algorithms for achieving consensus. What is going on here?\nThe answer is that the FLP result is proved in the asynchronous system model (see\n\u201cSystem Model and Reality\u201d on page 306), a very restrictive model that assumes a\ndeterministic algorithm that cannot use any clocks or timeouts. If the algorithm is\nallowed to use timeouts, or some other way of identifying suspected crashed nodes\n(even if the suspicion is sometimes wrong), then consensus becomes solvable [ 67].\nEven just allowing the algorithm to use random numbers is sufficient to get around\nthe impossibility result [ 69].\nThus, although the FLP result about the impossibility of consensus is of great theoret\u2010\nical importance, distributed systems can usually achieve consensus in practice.\nIn this section we will first examine the atomic commit problem in more detail. In\nparticular, we will discuss the two-phase commit  (2PC) algorithm, which is the most\ncommon way of solving atomic commit and which is implemented in various data\u2010\nbases, messaging systems, and application servers. It turns out that 2PC is a kind of\nconsensus algorithm\u2014but not a very good one [ 70, 71].\nBy learning from 2PC we will then work our way toward better consensus algorithms,\nsuch as those used in ZooKeeper (Zab) and etcd (Raft).\nDistributed Transactions and Consensus | 353\n",
    "summary": "The text discusses the atomic commit problem, the impossibility of consensus as proven by FLP, and the practical implementation of 2PC, Raft, and Zab.",
    "sample_answer": "\u201cLet\u2019s talk about the atomic commit problem. As the text outlines, achieving ACID properties in a distributed system is challenging due to the possibility of node failures, which leads to the need for a mechanism to ensure all nodes agree on a transaction\u2019s outcome \u2013 essentially, a form of consensus. The 2PC algorithm, like the one used in databases and messaging systems, attempts to solve this by coordinating a two-phase process involving a coordinator and participants, but, as the text notes, it\u2019s a less-than-ideal solution due to its inherent limitations.  It\u2019s important to recognize the FLP result and its implications, reminding us that true, always-available consensus is impossible in an asynchronous system without mechanisms like timeouts. \u201c",
    "potential_interview_question": "\u201cDescribe the atomic commit problem and explain why the 2PC algorithm, despite its widespread use, is considered a less-than-ideal solution. How does the FLP result and the asynchronous system model influence the design choices for achieving consensus in distributed systems?\u201d"
  },
  {
    "chunk": "happen that the commit succeeds on some nodes and fails on other nodes, which\nwould violate the atomicity guarantee:\n\u2022Some nodes may detect a constraint violation or conflict, making an abort neces\u2010\nsary, while other nodes are successfully able to commit.\n\u2022Some of the commit requests might be lost in the network, eventually aborting\ndue to a timeout, while other commit requests get through.\n\u2022Some nodes may crash before the commit record is fully written and roll back on\nrecovery, while others successfully commit.\nIf some nodes commit the transaction but others abort it, the nodes become inconsis\u2010\ntent with each other (like in Figure 7-3 ). And once a transaction has been committed\non one node, it cannot be retracted again if it later turns out that it was aborted on\nanother node. For this reason, a node must only commit once it is certain that all\nother nodes in the transaction are also going to commit.\nA transaction commit must be irrevocable\u2014you are not allowed to change your\nmind and retroactively abort a transaction after it has been committed. The reason\nfor this rule is that once data has been committed, it becomes visible to other transac\u2010\ntions, and thus other clients may start relying on that data; this principle forms the\nbasis of read committed  isolation, discussed in \u201cRead Committed\u201d on page 234. If a\ntransaction was allowed to abort after committing, any transactions that read the\ncommitted data would be based on data that was retroactively declared not to have\nexisted\u2014so they would have to be reverted as well.\n(It is possible for the effects of a committed transaction to later be undone by\nanother, compensating transaction  [73, 74]. However, from the database\u2019s point of\nview this is a separate transaction, and thus any cross-transaction correctness\nrequirements are the application\u2019s problem.) \nIntroduction to two-phase commit\nTwo-phase commit is an algorithm for achieving atomic transaction commit across\nmultiple nodes\u2014i.e., to ensure that either all nodes commit or all nodes abort. It is a\nclassic algorithm in distributed databases [ 13, 35, 75]. 2PC is used internally in some\ndatabases and also made available to applications in the form of XA transactions  [76,\n77] (which are supported by the Java Transaction API, for example) or via WS-\nAtomicTransaction for SOAP web services [ 78, 79].\nThe basic flow of 2PC is illustrated in Figure 9-9 . Instead of a single commit request,\nas with a single-node transaction, the commit/abort process in 2PC is split into two\nphases (hence the name).\nDistributed Transactions and Consensus | 355\n",
    "summary": "The text discusses the challenges of achieving atomic transactions across multiple nodes, introducing the Two-Phase Commit (2PC) algorithm and its role in ensuring data consistency.",
    "sample_answer": "\u201cOkay, let\u2019s analyze this from a system design perspective. The core challenge here is maintaining atomicity in a distributed transaction\u2014ensuring that either all nodes commit or all nodes abort. The 2PC algorithm addresses this by introducing a two-phase process: a prepare phase where nodes coordinate and a commit/abort phase based on the responses. This directly relates to the CAP theorem\u2014specifically the need to prioritize consistency, as 2PC guarantees consistency across nodes, albeit potentially with latency tradeoffs.\u201d Furthermore, \u201cThe mention of XA transactions and WS-AtomicTransaction highlights how this algorithm is exposed to applications; these are standard mechanisms for building distributed transactions, but it's important to understand that they rely on a centralized coordinator to manage the phases and ensure the protocol\u2019s integrity.\u201d",
    "potential_interview_question": "\u201cImagine you are designing a system for processing financial transactions across multiple geographically distributed data centers.  Describe how you might utilize a mechanism like Two-Phase Commit (2PC) to ensure data consistency and atomicity. What are some of the potential performance bottlenecks or failure modes you\u2019d need to address when implementing this approach?\u201d"
  },
  {
    "chunk": "Figure 9-9. A successful execution of two-phase commit (2PC).\nDon\u2019t confuse 2PC and 2PL\nTwo-phase commit  (2PC) and two-phase locking  (see \u201cTwo-Phase\nLocking (2PL)\u201d on page 257) are two very different things. 2PC\nprovides atomic commit in a distributed database, whereas 2PL\nprovides serializable isolation. To avoid confusion, it\u2019s best to think\nof them as entirely separate concepts and to ignore the unfortunate\nsimilarity in the names.\n2PC uses a new component that does not normally appear in single-node transac\u2010\ntions: a coordinator  (also known as transaction manager ). The coordinator is often\nimplemented as a library within the same application process that is requesting the\ntransaction (e.g., embedded in a Java EE container), but it can also be a separate pro\u2010\ncess or service. Examples of such coordinators include Narayana, JOTM, BTM, or\nMSDTC.\nA 2PC transaction begins with the application reading and writing data on multiple\ndatabase nodes, as normal. We call these database nodes participants  in the transac\u2010\ntion. When the application is ready to commit, the coordinator begins phase 1: it\nsends a prepare  request to each of the nodes, asking them whether they are able to\ncommit. The coordinator then tracks the responses from the participants:\n\u2022If all participants reply \u201cyes,\u201d indicating they are ready to commit, then the coor\u2010\ndinator sends out a commit  request in phase 2, and the commit actually takes\nplace.\n\u2022If any of the participants replies \u201cno,\u201d the coordinator sends an abort  request to\nall nodes in phase 2.\nThis process is somewhat like the traditional marriage ceremony in Western cultures:\nthe minister asks the bride and groom individually whether each wants to marry the\nother, and typically receives the answer \u201cI do\u201d from both. After receiving both\n356 | Chapter 9: Consistency and Consensus\n",
    "summary": "The chunk describes the Two-Phase Commit (2PC) protocol, outlining its coordination mechanism for ensuring atomic transactions across multiple database nodes.",
    "sample_answer": "\u201cOkay, 2PC is a critical protocol for building consistent transactions across a distributed system. It works by coordinating a transaction across multiple participants, using a central coordinator. The protocol ensures that either all nodes commit the transaction or none do, avoiding partial updates which would violate consistency. Specifically, the coordinator initiates a \u2018prepare\u2019 phase to determine if all participants are ready, followed by a \u2018commit\u2019 or \u2018abort\u2019 based on their responses \u2013 this highlights the need for a robust, centralized control point for managing data integrity in a distributed environment.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system for processing financial transactions across several geographically distributed databases. How would you approach ensuring data consistency and atomicity during a transaction, and what challenges would you anticipate with a system like Two-Phase Commit (2PC)?\u201d"
  },
  {
    "chunk": "acknowledgments, the minister pronounces the couple husband and wife: the trans\u2010\naction is committed, and the happy fact is broadcast to all attendees. If either bride or\ngroom does not say \u201cyes,\u201d the ceremony is aborted [ 73].\nA system of promises\nFrom this short description it might not be clear why two-phase commit ensures\natomicity, while one-phase commit across several nodes does not. Surely the prepare\nand commit requests can just as easily be lost in the two-phase case. What makes 2PC\ndifferent?\nTo understand why it works, we have to break down the process in a bit more detail:\n1.When the application wants to begin a distributed transaction, it requests a\ntransaction ID from the coordinator. This transaction ID is globally unique.\n2.The application begins a single-node transaction on each of the participants, and\nattaches the globally unique transaction ID to the single-node transaction. All\nreads and writes are done in one of these single-node transactions. If anything\ngoes wrong at this stage (for example, a node crashes or a request times out), the\ncoordinator or any of the participants can abort.\n3.When the application is ready to commit, the coordinator sends a prepare\nrequest to all participants, tagged with the global transaction ID. If any of these\nrequests fails or times out, the coordinator sends an abort request for that trans\u2010\naction ID to all participants.\n4.When a participant receives the prepare request, it makes sure that it can defi\u2010\nnitely commit the transaction under all circumstances. This includes writing all\ntransaction data to disk (a crash, a power failure, or running out of disk space is\nnot an acceptable excuse for refusing to commit later), and checking for any con\u2010\nflicts or constraint violations. By replying \u201cyes\u201d to the coordinator, the node\npromises to commit the transaction without error if requested. In other words,\nthe participant surrenders the right to abort the transaction, but without actually\ncommitting it.\n5.When the coordinator has received responses to all prepare requests, it makes a\ndefinitive decision on whether to commit or abort the transaction (committing\nonly if all participants voted \u201cyes\u201d). The coordinator must write that decision to\nits transaction log on disk so that it knows which way it decided in case it subse\u2010\nquently crashes. This is called the commit point .\n6.Once the coordinator\u2019s decision has been written to disk, the commit or abort\nrequest is sent to all participants. If this request fails or times out, the coordinator\nmust retry forever until it succeeds. There is no more going back: if the decision\nwas to commit, that decision must be enforced, no matter how many retries it\ntakes. If a participant has crashed in the meantime, the transaction will be com\u2010\nDistributed Transactions and Consensus | 357\n",
    "summary": "This text describes a two-phase commit (2PC) protocol for ensuring atomicity in distributed transactions, highlighting its reliance on a coordinator and participant responses.",
    "sample_answer": "\u201cOkay, this describes a classic two-phase commit (2PC) protocol, which is crucial for maintaining data consistency across a distributed system. The core idea is to ensure that either all participants in a transaction commit, or none of them do, preventing partial updates \u2013 a fundamental challenge in distributed systems. The coordinator\u2019s role, with its transaction log and persistent decision-making, directly addresses the need for durability and recovery in case of coordinator failure, mirroring the concepts of a Paxos or Raft consensus algorithm in terms of strong consistency.\u201d",
    "potential_interview_question": "\u201cExplain the two phases of a two-phase commit (2PC) protocol. How does the coordinator\u2019s transaction log contribute to the robustness of the system, and what potential weaknesses might this approach have compared to alternatives like Paxos or Raft?\u201d"
  },
  {
    "chunk": "mitted when it recovers\u2014since the participant voted \u201cyes,\u201d it cannot refuse to\ncommit when it recovers.\nThus, the protocol contains two crucial \u201cpoints of no return\u201d: when a participant\nvotes \u201cyes,\u201d it promises that it will definitely be able to commit later (although the\ncoordinator may still choose to abort); and once the coordinator decides, that deci\u2010\nsion is irrevocable. Those promises ensure the atomicity of 2PC. (Single-node atomic\ncommit lumps these two events into one: writing the commit record to the transac\u2010\ntion log.)\nReturning to the marriage analogy, before saying \u201cI do,\u201d you and your bride/groom\nhave the freedom to abort the transaction by saying \u201cNo way!\u201d (or something to that\neffect). However, after saying \u201cI do,\u201d you cannot retract that statement. If you faint\nafter saying \u201cI do\u201d and you don\u2019t hear the minister speak the words \u201cYou are now\nhusband and wife,\u201d that doesn\u2019t change the fact that the transaction was committed.\nWhen you recover consciousness later, you can find out whether you are married or\nnot by querying the minister for the status of your global transaction ID, or you can\nwait for the minister\u2019s next retry of the commit request (since the retries will have\ncontinued throughout your period of unconsciousness).\nCoordinator failure\nWe have discussed what happens if one of the participants or the network fails during\n2PC: if any of the prepare requests fail or time out, the coordinator aborts the trans\u2010\naction; if any of the commit or abort requests fail, the coordinator retries them indefi\u2010\nnitely. However, it is less clear what happens if the coordinator crashes.\nIf the coordinator fails before sending the prepare requests, a participant can safely\nabort the transaction. But once the participant has received a prepare request and\nvoted \u201cyes,\u201d it can no longer abort unilaterally\u2014it must wait to hear back from the\ncoordinator whether the transaction was committed or aborted. If the coordinator\ncrashes or the network fails at this point, the participant can do nothing but wait. A\nparticipant\u2019s transaction in this state is called in doubt  or uncertain .\nThe situation is illustrated in Figure 9-10 . In this particular example, the coordinator\nactually decided to commit, and database 2 received the commit request. However,\nthe coordinator crashed before it could send the commit request to database 1, and so\ndatabase 1 does not know whether to commit or abort. Even a timeout does not help\nhere: if database 1 unilaterally aborts after a timeout, it will end up inconsistent with\ndatabase 2, which has committed. Similarly, it is not safe to unilaterally commit,\nbecause another participant may have aborted.\n358 | Chapter 9: Consistency and Consensus\n",
    "summary": "This text discusses the 2PC (Two-Phase Commit) protocol for ensuring atomic transactions across multiple databases, highlighting its reliance on consensus and the implications of coordinator failure.",
    "sample_answer": "\u201cOkay, let\u2019s break down the 2PC protocol. Essentially, 2PC relies on a consensus algorithm to guarantee atomicity \u2013 that either all participants in a distributed transaction commit, or none do. The core concept is that once a participant votes \u2018yes\u2019, it\u2019s committed, and the protocol prevents a single participant from unilaterally aborting, mirroring the \u2018point of no return\u2019 in a legal contract. The potential for coordinator failure highlights the need for redundancy and possibly an active/passive failover setup to maintain availability, and we\u2019d want to explore strategies like retries with exponential backoff to handle transient network issues, as well as monitoring the coordinator\u2019s health.\u201d",
    "potential_interview_question": "\u201cImagine a distributed system using 2PC. The coordinator fails after one participant has already voted \u2018yes\u2019 to a transaction. What are the potential consequences, and what steps would you take to address this failure from a system design perspective, considering durability and availability?\u201d"
  },
  {
    "chunk": "Figure 9-10. The coordinator crashes after participants vote \u201cyes.\u201d Database 1 does not\nknow whether to commit or abort.\nWithout hearing from the coordinator, the participant has no way of knowing\nwhether to commit or abort. In principle, the participants could communicate among\nthemselves to find out how each participant voted and come to some agreement, but\nthat is not part of the 2PC protocol.\nThe only way 2PC can complete is by waiting for the coordinator to recover. This is\nwhy the coordinator must write its commit or abort decision to a transaction log on\ndisk before sending commit or abort requests to participants: when the coordinator\nrecovers, it determines the status of all in-doubt transactions by reading its transac\u2010\ntion log. Any transactions that don\u2019t have a commit record in the coordinator\u2019s log\nare aborted. Thus, the commit point of 2PC comes down to a regular single-node\natomic commit on the coordinator. \nThree-phase commit\nTwo-phase commit is called a blocking  atomic commit protocol due to the fact that\n2PC can become stuck waiting for the coordinator to recover. In theory, it is possible\nto make an atomic commit protocol nonblocking , so that it does not get stuck if a\nnode fails. However, making this work in practice is not so straightforward.\nAs an alternative to 2PC, an algorithm called three-phase commit  (3PC) has been pro\u2010\nposed [ 13, 80]. However, 3PC assumes a network with bounded delay and nodes with\nbounded response times; in most practical systems with unbounded network delay\nand process pauses (see Chapter 8 ), it cannot guarantee atomicity.\nIn general, nonblocking atomic commit requires a perfect failure detector  [67, 71]\u2014\ni.e., a reliable mechanism for telling whether a node has crashed or not. In a network\nwith unbounded delay a timeout is not a reliable failure detector, because a request\nmay time out due to a network problem even if no node has crashed. For this reason,\n2PC continues to be used, despite the known problem with coordinator failure. \nDistributed Transactions and Consensus | 359\n",
    "summary": "The chunk discusses the limitations of the 2PC protocol, particularly its blocking nature due to coordinator failures and the need for a perfect failure detector.",
    "sample_answer": "\u201cThe 2PC protocol, while providing atomicity for distributed transactions, presents a significant challenge due to its blocking behavior when the coordinator fails. The core problem is that without a perfect failure detector, a timeout used to detect a coordinator\u2019s crash isn\u2019t reliable, leading to indefinite waiting. This highlights the importance of understanding the CAP theorem and how it relates to designing systems with strong consistency requirements, as achieving strong consistency in a distributed environment often comes at the cost of availability.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you would choose 2PC over another distributed consensus algorithm like Raft. What are the key trade-offs you would consider, and how would you address the risks associated with coordinator failures?\u201d"
  },
  {
    "chunk": "Distributed Transactions in Practice\nDistributed transactions, especially those implemented with two-phase commit, have\na mixed reputation. On the one hand, they are seen as providing an important safety\nguarantee that would be hard to achieve otherwise; on the other hand, they are criti\u2010\ncized for causing operational problems, killing performance, and promising more\nthan they can deliver [ 81, 82, 83, 84]. Many cloud services choose not to implement\ndistributed transactions due to the operational problems they engender [ 85, 86].\nSome implementations of distributed transactions carry a heavy performance penalty\n\u2014for example, distributed transactions in MySQL are reported to be over 10 times\nslower than single-node transactions [ 87], so it is not surprising when people advise\nagainst using them. Much of the performance cost inherent in two-phase commit is\ndue to the additional disk forcing ( fsync ) that is required for crash recovery [ 88], and\nthe additional network round-trips.\nHowever, rather than dismissing distributed transactions outright, we should exam\u2010\nine them in some more detail, because there are important lessons to be learned from\nthem. To begin, we should be precise about what we mean by \u201cdistributed transac\u2010\ntions.\u201d Two quite different types of distributed transactions are often conflated:\nDatabase-internal distributed transactions\nSome distributed databases (i.e., databases that use replication and partitioning\nin their standard configuration) support internal transactions among the nodes\nof that database. For example, VoltDB and MySQL Cluster\u2019s NDB storage engine\nhave such internal transaction support. In this case, all the nodes participating in\nthe transaction are running the same database software.\nHeterogeneous distributed transactions\nIn a heterogeneous  transaction, the participants are two or more different tech\u2010\nnologies: for example, two databases from different vendors, or even non-\ndatabase systems such as message brokers. A distributed transaction across these\nsystems must ensure atomic commit, even though the systems may be entirely\ndifferent under the hood.\nDatabase-internal transactions do not have to be compatible with any other system,\nso they can use any protocol and apply optimizations specific to that particular tech\u2010\nnology. For that reason, database-internal distributed transactions can often work\nquite well. On the other hand, transactions spanning heterogeneous technologies are\na lot more challenging.\nExactly-once message processing\nHeterogeneous distributed transactions allow diverse systems to be integrated in\npowerful ways. For example, a message from a message queue can be acknowledged\nas processed if and only if the database transaction for processing the message was\n360 | Chapter 9: Consistency and Consensus\n",
    "summary": "The text discusses the trade-offs of distributed transactions, highlighting the performance impact of two-phase commit and the challenges of heterogeneous transactions.",
    "sample_answer": "\u201cDistributed transactions, particularly those relying on two-phase commit, introduce significant operational overhead due to the additional disk forcing required for crash recovery \u2013 this essentially means that each node needs to synchronously write its changes to disk, introducing latency. When dealing with heterogeneous systems, like different database vendors or message queues, the complexity increases dramatically because achieving atomic commit across such diverse protocols is inherently more challenging than within a single database system, as we\u2019ve seen with the performance penalty of over 10x slower transactions in MySQL.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you would choose to implement a distributed transaction versus a message-based approach for integrating data from different systems. What factors would you consider, and what are the potential drawbacks of each approach?\u201d"
  },
  {
    "chunk": "successfully committed. This is implemented by atomically committing the message\nacknowledgment and the database writes in a single transaction. With distributed\ntransaction support, this is possible, even if the message broker and the database are\ntwo unrelated technologies running on different machines.\nIf either the message delivery or the database transaction fails, both are aborted, and\nso the message broker may safely redeliver the message later. Thus, by atomically\ncommitting the message and the side effects of its processing, we can ensure that the\nmessage is effectively  processed exactly once, even if it required a few retries before it\nsucceeded. The abort discards any side effects of the partially completed transaction.\nSuch a distributed transaction is only possible if all systems affected by the transac\u2010\ntion are able to use the same atomic commit protocol, however. For example, say a\nside effect of processing a message is to send an email, and the email server does not\nsupport two-phase commit: it could happen that the email is sent two or more times\nif message processing fails and is retried. But if all side effects of processing a message\nare rolled back on transaction abort, then the processing step can safely be retried as\nif nothing had happened.\nWe will return to the topic of exactly-once message processing in Chapter 11 . Let\u2019s\nlook first at the atomic commit protocol that allows such heterogeneous distributed\ntransactions. \nXA transactions\nX/Open XA  (short for eXtended Architecture ) is a standard for implementing two-\nphase commit across heterogeneous technologies [ 76, 77]. It was introduced in 1991\nand has been widely implemented: XA is supported by many traditional relational\ndatabases (including PostgreSQL, MySQL, DB2, SQL Server, and Oracle) and mes\u2010\nsage brokers (including ActiveMQ, HornetQ, MSMQ, and IBM MQ).\nXA is not a network protocol\u2014it is merely a C API for interfacing with a transaction\ncoordinator. Bindings for this API exist in other languages; for example, in the world\nof Java EE applications, XA transactions are implemented using the Java Transaction\nAPI (JTA), which in turn is supported by many drivers for databases using Java Data\u2010\nbase Connectivity (JDBC) and drivers for message brokers using the Java Message\nService (JMS) APIs.\nXA assumes that your application uses a network driver or client library to commu\u2010\nnicate with the participant databases or messaging services. If the driver supports XA,\nthat means it calls the XA API to find out whether an operation should be part of a\ndistributed transaction\u2014and if so, it sends the necessary information to the database\nserver. The driver also exposes callbacks through which the coordinator can ask the\nparticipant to prepare, commit, or abort.\nDistributed Transactions and Consensus | 361\n",
    "summary": "The chunk discusses the use of XA transactions and distributed transactions to ensure exactly-once message processing across heterogeneous systems.",
    "sample_answer": "\u201cOkay, let\u2019s talk about achieving exactly-once message processing in a distributed system. The core idea here is leveraging distributed transactions, specifically using the XA protocol. XA allows us to atomically commit changes across multiple participants\u2014in this case, the message broker and the database\u2014even if they use different technologies, as evidenced by the support for technologies like ActiveMQ and various relational databases via their respective JDBC and JMS drivers.  This is crucial because a failure during the first step (e.g., database write) would require the entire transaction to be rolled back, preventing data inconsistencies. This aligns with the principles of two-phase commit and helps mitigate the CAP theorem challenges when dealing with asynchronous systems.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you would use a distributed transaction (like an XA transaction) to ensure data consistency when processing a message that requires both database updates and message broker acknowledgments. What potential pitfalls would you need to consider, and how would you address them?\u201d"
  },
  {
    "chunk": "The transaction coordinator implements the XA API. The standard does not specify\nhow it should be implemented, but in practice the coordinator is often simply a\nlibrary that is loaded into the same process as the application issuing the transaction\n(not a separate service). It keeps track of the participants in a transaction, collects\npartipants\u2019 responses after asking them to prepare (via a callback into the driver), and\nuses a log on the local disk to keep track of the commit/abort decision for each trans\u2010\naction.\nIf the application process crashes, or the machine on which the application is running\ndies, the coordinator goes with it. Any participants with prepared but uncommitted\ntransactions are then stuck in doubt. Since the coordinator\u2019s log is on the application\nserver\u2019s local disk, that server must be restarted, and the coordinator library must\nread the log to recover the commit/abort outcome of each transaction. Only then can\nthe coordinator use the database driver\u2019s XA callbacks to ask participants to commit\nor abort, as appropriate. The database server cannot contact the coordinator directly,\nsince all communication must go via its client library.\nHolding locks while in doubt\nWhy do we care so much about a transaction being stuck in doubt? Can\u2019t the rest of\nthe system just get on with its work, and ignore the in-doubt transaction that will be\ncleaned up eventually?\nThe problem is with locking . As discussed in \u201cRead Committed\u201d on page 234, data\u2010\nbase transactions usually take a row-level exclusive lock on any rows they modify, to\nprevent dirty writes. In addition, if you want serializable isolation, a database using\ntwo-phase locking would also have to take a shared lock on any rows read  by the\ntransaction (see \u201cTwo-Phase Locking (2PL)\u201d on page 257 ).\nThe database cannot release those locks until the transaction commits or aborts\n(illustrated as a shaded area in Figure 9-9 ). Therefore, when using two-phase commit,\na transaction must hold onto the locks throughout the time it is in doubt. If the coor\u2010\ndinator has crashed and takes 20 minutes to start up again, those locks will be held\nfor 20 minutes. If the coordinator\u2019s log is entirely lost for some reason, those locks\nwill be held forever\u2014or at least until the situation is manually resolved by an admin\u2010\nistrator.\nWhile those locks are held, no other transaction can modify those rows. Depending\non the database, other transactions may even be blocked from reading those rows.\nThus, other transactions cannot simply continue with their business\u2014if they want to\naccess that same data, they will be blocked. This can cause large parts of your applica\u2010\ntion to become unavailable until the in-doubt transaction is resolved.\n362 | Chapter 9: Consistency and Consensus\n",
    "summary": "The text describes a transaction coordinator implementation using an XA API, highlighting the risks associated with lock contention and data blocking during transaction staleness.",
    "sample_answer": "\u201cOkay, this coordinator implementation presents some significant architectural challenges. The reliance on a single process for the coordinator and the XA API means that if the coordinator fails, all transactions in doubt are essentially stuck, and the database locks remain held indefinitely, causing widespread blocking. This directly relates to the CAP theorem \u2013 availability is prioritized here at the expense of consistency, and the lock contention represents a major performance bottleneck as other transactions are blocked. The fact that the log resides on the application server\u2019s disk further exacerbates this problem, as a log loss would require a full system restart to resolve.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where a transaction coordinator implementation like the one described in this text could lead to significant performance degradation. What are the key design considerations to mitigate these risks, and how would you approach ensuring data consistency while minimizing application downtime?\u201d"
  },
  {
    "chunk": "Recovering from coordinator failure\nIn theory, if the coordinator crashes and is restarted, it should cleanly recover its state\nfrom the log and resolve any in-doubt transactions. However, in practice, orphaned\nin-doubt transactions do occur [ 89, 90]\u2014that is, transactions for which the coordina\u2010\ntor cannot decide the outcome for whatever reason (e.g., because the transaction log\nhas been lost or corrupted due to a software bug). These transactions cannot be\nresolved automatically, so they sit forever in the database, holding locks and blocking\nother transactions.\nEven rebooting your database servers will not fix this problem, since a correct imple\u2010\nmentation of 2PC must preserve the locks of an in-doubt transaction even across\nrestarts (otherwise it would risk violating the atomicity guarantee). It\u2019s a sticky\nsituation.\nThe only way out is for an administrator to manually decide whether to commit or\nroll back the transactions. The administrator must examine the participants of each\nin-doubt transaction, determine whether any participant has committed or aborted\nalready, and then apply the same outcome to the other participants. Resolving the\nproblem potentially requires a lot of manual effort, and most likely needs to be done\nunder high stress and time pressure during a serious production outage (otherwise,\nwhy would the coordinator be in such a bad state?).\nMany XA implementations have an emergency escape hatch called heuristic decisions :\nallowing a participant to unilaterally decide to abort or commit an in-doubt transac\u2010\ntion without a definitive decision from the coordinator [ 76, 77, 91]. To be clear, heu\u2010\nristic  here is a euphemism for probably breaking atomicity , since it violates the system\nof promises in two-phase commit. Thus, heuristic decisions are intended only for\ngetting out of catastrophic situations, and not for regular use.\nLimitations of distributed transactions\nXA transactions solve the real and important problem of keeping several participant\ndata systems consistent with each other, but as we have seen, they also introduce\nmajor operational problems. In particular, the key realization is that the transaction\ncoordinator is itself a kind of database (in which transaction outcomes are stored),\nand so it needs to be approached with the same care as any other important database:\n\u2022If the coordinator is not replicated but runs only on a single machine, it is a sin\u2010\ngle point of failure for the entire system (since its failure causes other application\nservers to block on locks held by in-doubt transactions). Surprisingly, many\ncoordinator implementations are not highly available by default, or have only\nrudimentary replication support.\n\u2022Many server-side applications are developed in a stateless model (as favored by\nHTTP), with all persistent state stored in a database, which has the advantage\nDistributed Transactions and Consensus | 363\n",
    "summary": "The chunk discusses the operational challenges of 2PC and XA transactions, particularly concerning coordinator failures and the resulting in-doubt transactions, highlighting the need for robust coordination and recovery strategies.",
    "sample_answer": "\u201cThis section really drills home the operational complexity inherent in distributed transactions, particularly using 2PC. The core issue is that the coordinator itself represents a single point of failure, and when it crashes, it can leave transactions in an \u2018in-doubt\u2019 state, leading to significant blocking and requiring manual intervention \u2013 a critical operational burden. This aligns with the CAP theorem, specifically highlighting the trade-off between consistency and availability; while XA enables coordinated updates, the coordinator\u2019s fragility introduces availability risks.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where a distributed transaction coordinator fails, leading to a significant performance bottleneck. What architectural considerations would you take into account to mitigate the impact, and how would you align those considerations with the principles of the CAP theorem?\u201d"
  },
  {
    "chunk": "that application servers can be added and removed at will. However, when the\ncoordinator is part of the application server, it changes the nature of the deploy\u2010\nment. Suddenly, the coordinator\u2019s logs become a crucial part of the durable sys\u2010\ntem state\u2014as important as the databases themselves, since the coordinator logs\nare required in order to recover in-doubt transactions after a crash. Such applica\u2010\ntion servers are no longer stateless.\n\u2022Since XA needs to be compatible with a wide range of data systems, it is necessar\u2010\nily a lowest common denominator. For example, it cannot detect deadlocks\nacross different systems (since that would require a standardized protocol for\nsystems to exchange information on the locks that each transaction is waiting\nfor), and it does not work with SSI (see \u201cSerializable Snapshot Isolation (SSI)\u201d  on\npage 261 ), since that would require a protocol for identifying conflicts across dif\u2010\nferent systems.\n\u2022For database-internal distributed transactions (not XA), the limitations are not\nso great\u2014for example, a distributed version of SSI is possible. However, there\nremains the problem that for 2PC to successfully commit a transaction, all par\u2010\nticipants must respond. Consequently, if any part of the system is broken, the\ntransaction also fails. Distributed transactions thus have a tendency of amplifying\nfailures , which runs counter to our goal of building fault-tolerant systems.\nDo these facts mean we should give up all hope of keeping several systems consistent\nwith each other? Not quite\u2014there are alternative methods that allow us to achieve\nthe same thing without the pain of heterogeneous distributed transactions. We will\nreturn to these in Chapters 11 and 12. But first, we should wrap up the topic of\nconsensus. \nFault-Tolerant Consensus\nInformally, consensus means getting several nodes to agree on something. For exam\u2010\nple, if several people concurrently try to book the last seat on an airplane, or the same\nseat in a theater, or try to register an account with the same username, then a consen\u2010\nsus algorithm could be used to determine which one of these mutually incompatible\noperations should be the winner.\nThe consensus problem is normally formalized as follows: one or more nodes may\npropose  values, and the consensus algorithm decides  on one of those values. In the\nseat-booking example, when several customers are concurrently trying to buy the last\nseat, each node handling a customer request may propose the ID of the customer it is\nserving, and the decision indicates which one of those customers got the seat.\n364 | Chapter 9: Consistency and Consensus\n",
    "summary": "The text highlights the challenges of heterogeneous distributed transactions (like XA) and emphasizes the importance of consensus algorithms for achieving data consistency in distributed systems.",
    "sample_answer": "\u201cThe core issue here is the limitations of XA, specifically its dependence on a lowest-common-denominator protocol for managing transactions across heterogeneous systems. This approach, as illustrated by the inability to detect deadlocks across different systems, inherently introduces fragility \u2013 if any component fails, the entire transaction can fail, amplifying failures, a key counterpoint to building fault-tolerant systems.\u201d Furthermore, \u201cthe text implicitly advocates for the use of consensus algorithms, like those discussed in Chapter 9, as a more robust alternative to XA, allowing multiple nodes to agree on a value, regardless of the underlying system heterogeneity.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re building a system that needs to handle financial transactions across multiple databases. We\u2019re considering using XA transactions. What are some of the potential pitfalls you foresee, and what alternative approach might you consider to achieve consistency in a heterogeneous environment?\u201d"
  },
  {
    "chunk": "xiii. This particular variant of consensus is called uniform consensus , which is equivalent to regular consensus\nin asynchronous systems with unreliable failure detectors [ 71]. The academic literature usually refers to pro\u2010\ncesses  rather than nodes , but we use nodes  here for consistency with the rest of this book.In this formalism, a consensus algorithm must satisfy the following properties [ 25]:xiii\nUniform agreement\nNo two nodes decide differently.\nIntegrity\nNo node decides twice.\nValidity\nIf a node decides value v, then v was proposed by some node.\nTermination\nEvery node that does not crash eventually decides some value.\nThe uniform agreement and integrity properties define the core idea of consensus:\neveryone decides on the same outcome, and once you have decided, you cannot\nchange your mind. The validity property exists mostly to rule out trivial solutions: for\nexample, you could have an algorithm that always decides null , no matter what was\nproposed; this algorithm would satisfy the agreement and integrity properties, but\nnot the validity property.\nIf you don\u2019t care about fault tolerance, then satisfying the first three properties is\neasy: you can just hardcode one node to be the \u201cdictator,\u201d and let that node make all\nof the decisions. However, if that one node fails, then the system can no longer make\nany decisions. This is, in fact, what we saw in the case of two-phase commit: if the\ncoordinator fails, in-doubt participants cannot decide whether to commit or abort.\nThe termination property formalizes the idea of fault tolerance. It essentially says that\na consensus algorithm cannot simply sit around and do nothing forever\u2014in other\nwords, it must make progress. Even if some nodes fail, the other nodes must still\nreach a decision. (Termination is a liveness property, whereas the other three are\nsafety properties\u2014see \u201cSafety and liveness\u201d on page 308 .)\nThe system model of consensus assumes that when a node \u201ccrashes,\u201d it suddenly dis\u2010\nappears and never comes back. (Instead of a software crash, imagine that there is an\nearthquake, and the datacenter containing your node is destroyed by a landslide. You\nmust assume that your node is buried under 30 feet of mud and is never going to\ncome back online.) In this system model, any algorithm that has to wait for a node to\nrecover is not going to be able to satisfy the termination property. In particular, 2PC\ndoes not meet the requirements for termination.\nDistributed Transactions and Consensus | 365\n",
    "summary": "The chunk discusses the properties of a consensus algorithm, particularly uniform consensus, and its relationship to system termination and fault tolerance, highlighting the importance of a robust system model including crash recovery.",
    "sample_answer": "\u201cOkay, let\u2019s break this down. The core of a robust consensus algorithm, like the one described here, is ensuring termination even in the face of node failures. The termination property\u2014that every node eventually decides\u2014is crucial; it\u2019s fundamentally linked to liveness.  We can see this reflected in the system model which assumes a catastrophic node failure \u2013 akin to a datacenter destruction \u2013 because a simple wait-for mechanism won\u2019t satisfy this requirement. This model emphasizes that systems need to handle these extreme events, and the two-phase commit algorithm, as presented, fails to achieve this due to its reliance on a single coordinator.\u201d",
    "potential_interview_question": "\u201cDescribe the termination property in the context of a consensus algorithm.  Why is it a critical requirement, and how does the described system model (with catastrophic node failure) relate to its fulfillment?\u201d"
  },
  {
    "chunk": "Of course, if all nodes crash and none of them are running, then it is not possible for\nany algorithm to decide anything. There is a limit to the number of failures that an\nalgorithm can tolerate: in fact, it can be proved that any consensus algorithm requires\nat least a majority of nodes to be functioning correctly in order to assure termination\n[67]. That majority can safely form a quorum (see \u201cQuorums for reading and writ\u2010\ning\u201d on page 179 ).\nThus, the termination property is subject to the assumption that fewer than half of\nthe nodes are crashed or unreachable. However, most implementations of consensus\nensure that the safety properties\u2014agreement, integrity, and validity\u2014are always met,\neven if a majority of nodes fail or there is a severe network problem [ 92]. Thus, a\nlarge-scale outage can stop the system from being able to process requests, but it can\u2010\nnot corrupt the consensus system by causing it to make invalid decisions.\nMost consensus algorithms assume that there are no Byzantine faults, as discussed in\n\u201cByzantine Faults\u201d on page 304 . That is, if a node does not correctly follow the proto\u2010\ncol (for example, if it sends contradictory messages to different nodes), it may break\nthe safety properties of the protocol. It is possible to make consensus robust against\nByzantine faults as long as fewer than one-third of the nodes are Byzantine-faulty [ 25,\n93], but we don\u2019t have space to discuss those algorithms in detail in this book.\nConsensus algorithms and total order broadcast\nThe best-known fault-tolerant consensus algorithms are Viewstamped Replication\n(VSR) [ 94, 95], Paxos [ 96, 97, 98, 99], Raft [ 22, 100, 101], and Zab [ 15, 21, 102]. There\nare quite a few similarities between these algorithms, but they are not the same [ 103].\nIn this book we won\u2019t go into full details of the different algorithms: it\u2019s sufficient to\nbe aware of some of the high-level ideas that they have in common, unless you\u2019re\nimplementing a consensus system yourself (which is probably not advisable\u2014it\u2019s\nhard [ 98, 104]).\nMost of these algorithms actually don\u2019t directly use the formal model described here\n(proposing and deciding on a single value, while satisfying the agreement, integrity,\nvalidity, and termination properties). Instead, they decide on a sequence  of values,\nwhich makes them total order broadcast  algorithms, as discussed previously in this\n",
    "summary": "The text discusses the limitations of consensus algorithms regarding failure rates and introduces algorithms like Viewstamped Replication, Paxos, Raft, and Zab, highlighting their role in total order broadcast.",
    "sample_answer": "\u201cOkay, so understanding fault tolerance is critical for any large-scale distributed system. The core principle here is that consensus algorithms, like Raft or Paxos, require a majority of functioning nodes to guarantee termination and safety\u2014specifically, agreement on a value. The text points out that algorithms like Paxos and Raft don\u2019t necessarily adhere to the formal model of proposing and deciding on a single value; instead, they operate as \u2018total order broadcast\u2019 algorithms, ensuring a consistent sequence of updates, which is vital for maintaining data integrity during outages.  Furthermore, the algorithm\u2019s resilience is directly tied to the failure rate; a small percentage of Byzantine faults\u2014where a node actively sends incorrect data\u2014can be tolerated, but exceeding a threshold of roughly one-third significantly jeopardizes the system's safety.\u201d",
    "potential_interview_question": "\u201cDescribe the trade-offs involved in designing a consensus algorithm for a large-scale distributed system. Specifically, how does the concept of \u2018Byzantine faults\u2019 and the requirement for a majority of nodes influence your design choices?\u201d"
  },
  {
    "chunk": "chapter (see \u201cTotal Order Broadcast\u201d on page 348 ).\nRemember that total order broadcast requires messages to be delivered exactly once,\nin the same order, to all nodes. If you think about it, this is equivalent to performing\nseveral rounds of consensus: in each round, nodes propose the message that they\nwant to send next, and then decide on the next message to be delivered in the total\norder [ 67].\nSo, total order broadcast is equivalent to repeated rounds of consensus (each consen\u2010\nsus decision corresponding to one message delivery):\n366 | Chapter 9: Consistency and Consensus\n\u2022Due to the agreement property of consensus, all nodes decide to deliver the same\nmessages in the same order.\n\u2022Due to the integrity property, messages are not duplicated.\n\u2022Due to the validity property, messages are not corrupted and not fabricated out\nof thin air.\n\u2022Due to the termination property, messages are not lost.\nViewstamped Replication, Raft, and Zab implement total order broadcast directly,\nbecause that is more efficient than doing repeated rounds of one-value-at-a-time\nconsensus. In the case of Paxos, this optimization is known as Multi-Paxos.\nSingle-leader replication and consensus\nIn Chapter 5  we discussed single-leader replication (see \u201cLeaders and Followers\u201d on\npage 152 ), which takes all the writes to the leader and applies them to the followers in\nthe same order, thus keeping replicas up to date. Isn\u2019t this essentially total order\nbroadcast? How come we didn\u2019t have to worry about consensus in Chapter 5 ?\nThe answer comes down to how the leader is chosen. If the leader is manually chosen\nand configured by the humans in your operations team, you essentially have a \u201ccon\u2010\nsensus algorithm\u201d of the dictatorial variety: only one node is allowed to accept writes\n(i.e., make decisions about the order of writes in the replication log), and if that node\ngoes down, the system becomes unavailable for writes until the operators manually\nconfigure a different node to be the leader. Such a system can work well in practice,\nbut it does not satisfy the termination property of consensus because it requires\nhuman intervention in order to make progress.\nSome databases perform automatic leader election and failover, promoting a follower\nto be the new leader if the old leader fails (see \u201cHandling Node Outages\u201d  on page\n156). This brings us closer to fault-tolerant total order broadcast, and thus to solving\nconsensus.\nHowever, there is a problem. We previously discussed the problem of split brain, and\nsaid that all nodes need to agree who the leader is\u2014otherwise two different nodes\ncould each believe themselves to be the leader, and consequently get the database into\nan inconsistent state. Thus, we need consensus in order to elect a leader. But if the\nconsensus algorithms described here are actually total order broadcast algorithms,\nand total order broadcast is like single-leader replication, and single-leader replica\u2010\ntion requires a leader, then\u2026\nIt seems that in order to elect a leader, we first need a leader. In order to solve con\u2010\nsensus, we must first solve consensus. How do we break out of this conundrum?\nDistributed Transactions and Consensus | 367\n",
    "summary": "The chunk discusses total order broadcast, its relationship to consensus and replication, and the challenges of leader election in distributed systems.",
    "sample_answer": "\u201cOkay, so the key takeaway here is understanding that total order broadcast is fundamentally about achieving consensus in a distributed system. It's like multiple rounds of a consensus algorithm \u2013 ensuring all nodes agree on the order of messages, which directly addresses the termination property of consensus. The system\u2019s design hinges on the replication of messages in a strictly ordered fashion, similar to how Viewstamped Replication, Raft, and Zab operate. The discussion highlights the trade-off: while simple single-leader replication might seem efficient, it lacks the fault tolerance of a true consensus algorithm, particularly around leader failure, leading to potential split-brain scenarios.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say you\u2019re building a distributed system that requires strong consistency. Describe how you would approach implementing total order broadcast. What are the key challenges you\u2019d anticipate, and how would you address them, referencing any specific algorithms or concepts we\u2019ve discussed (like Raft or Paxos)?\u201d"
  },
  {
    "chunk": "Epoch numbering and quorums\nAll of the consensus protocols discussed so far internally use a leader in some form or\nanother, but they don\u2019t guarantee that the leader is unique. Instead, they can make a\nweaker guarantee: the protocols define an epoch number  (called the ballot number  in\nPaxos, view number  in Viewstamped Replication, and term number  in Raft) and\nguarantee that within each epoch, the leader is unique.\nEvery time the current leader is thought to be dead, a vote is started among the nodes\nto elect a new leader. This election is given an incremented epoch number, and thus\nepoch numbers are totally ordered and monotonically increasing. If there is a conflict\nbetween two different leaders in two different epochs (perhaps because the previous\nleader actually wasn\u2019t dead after all), then the leader with the higher epoch number\nprevails.\nBefore a leader is allowed to decide anything, it must first check that there isn\u2019t some\nother leader with a higher epoch number which might take a conflicting decision.\nHow does a leader know that it hasn\u2019t been ousted by another node? Recall \u201cThe\nTruth Is Defined by the Majority\u201d on page 300: a node cannot necessarily trust its\nown judgment\u2014just because a node thinks that it is the leader, that does not neces\u2010\nsarily mean the other nodes accept it as their leader.\nInstead, it must collect votes from a quorum  of nodes (see \u201cQuorums for reading and\nwriting\u201d  on page 179). For every decision that a leader wants to make, it must send\nthe proposed value to the other nodes and wait for a quorum of nodes to respond in\nfavor of the proposal. The quorum typically, but not always, consists of a majority of\nnodes [ 105]. A node votes in favor of a proposal only if it is not aware of any other\nleader with a higher epoch.\nThus, we have two rounds of voting: once to choose a leader, and a second time to\nvote on a leader\u2019s proposal. The key insight is that the quorums for those two votes\nmust overlap: if a vote on a proposal succeeds, at least one of the nodes that voted for\nit must have also participated in the most recent leader election [ 105]. Thus, if the\nvote on a proposal does not reveal any higher-numbered epoch, the current leader\ncan conclude that no leader election with a higher epoch number has happened, and\ntherefore be sure that it still holds the leadership. It can then safely decide the pro\u2010\nposed value.\nThis voting process looks superficially similar to two-phase commit. The biggest dif\u2010\nferences are that in 2PC the coordinator is not elected, and that fault-tolerant consen\u2010\nsus algorithms only require votes from a majority of nodes, whereas 2PC requires a\n\u201cyes\u201d vote from every  participant. Moreover, consensus algorithms define a recovery\nprocess by which nodes can get into a consistent state after a new leader is elected,\nensuring that the safety properties are always met. These differences are key to the\ncorrectness and fault tolerance of a consensus algorithm. \n368 | Chapter 9: Consistency and Consensus\n",
    "summary": "The chunk discusses epoch numbering, quorums, and their role in achieving fault-tolerant consensus, highlighting similarities and differences with two-phase commit.",
    "sample_answer": "\u201cOkay, so this section is really about how to build a resilient system, specifically around achieving consensus. The core idea is that we\u2019re using epoch numbering \u2013 essentially a monotonically increasing counter \u2013 combined with quorums to ensure that even if a leader fails, we can still recover to a consistent state. It\u2019s similar in some ways to two-phase commit, but the key difference is that consensus algorithms only need a majority vote, whereas 2PC needs a \u2018yes\u2019 from every participant. This reduces the complexity and improves availability, especially in distributed environments.\u201d",
    "potential_interview_question": "\u201cDescribe how epoch numbering and quorums contribute to the fault tolerance of a distributed system. How does this compare to a traditional two-phase commit protocol?\u201d"
  },
  {
    "chunk": "Limitations of consensus\nConsensus algorithms are a huge breakthrough for distributed systems: they bring\nconcrete safety properties (agreement, integrity, and validity) to systems where every\u2010\nthing else is uncertain, and they nevertheless remain fault-tolerant (able to make pro\u2010\ngress as long as a majority of nodes are working and reachable). They provide total\norder broadcast, and therefore they can also implement linearizable atomic opera\u2010\ntions in a fault-tolerant way (see \u201cImplementing linearizable storage using total order\nbroadcast\u201d on page 350 ).\nNevertheless, they are not used everywhere, because the benefits come at a cost.\nThe process by which nodes vote on proposals before they are decided is a kind of\nsynchronous replication. As discussed in \u201cSynchronous Versus Asynchronous Repli\u2010\ncation\u201d  on page 153, databases are often configured to use asynchronous replication.\nIn this configuration, some committed data can potentially be lost on failover\u2014but\nmany people choose to accept this risk for the sake of better performance.\nConsensus systems always require a strict majority to operate. This means you need a\nminimum of three nodes in order to tolerate one failure (the remaining two out of\nthree form a majority), or a minimum of five nodes to tolerate two failures (the\nremaining three out of five form a majority). If a network failure cuts off some nodes\nfrom the rest, only the majority portion of the network can make progress, and the\nrest is blocked (see also \u201cThe Cost of Linearizability\u201d on page 335 ).\nMost consensus algorithms assume a fixed set of nodes that participate in voting,\nwhich means that you can\u2019t just add or remove nodes in the cluster. Dynamic mem\u2010\nbership  extensions to consensus algorithms allow the set of nodes in the cluster to\nchange over time, but they are much less well understood than static membership\nalgorithms.\nConsensus systems generally rely on timeouts to detect failed nodes. In environments\nwith highly variable network delays, especially geographically distributed systems, it\noften happens that a node falsely believes the leader to have failed due to a transient\nnetwork issue. Although this error does not harm the safety properties, frequent\nleader elections result in terrible performance because the system can end up spend\u2010\ning more time choosing a leader than doing any useful work.\nSometimes, consensus algorithms are particularly sensitive to network problems. For\nexample, Raft has been shown to have unpleasant edge cases [ 106]: if the entire net\u2010\nwork is working correctly except for one particular network link that is consistently\nunreliable, Raft can get into situations where leadership continually bounces between\ntwo nodes, or the current leader is continually forced to resign, so the system effec\u2010\ntively never makes progress. Other consensus algorithms have similar problems, and\ndesigning algorithms that are more robust to unreliable networks is still an open\nresearch problem. \nDistributed Transactions and Consensus | 369\n",
    "summary": "The text discusses the trade-offs of using consensus algorithms in distributed systems, particularly regarding performance and network resilience.",
    "sample_answer": "\u201cOkay, so consensus algorithms like Raft provide strong consistency guarantees \u2013 critical for systems like distributed databases \u2013 but they inherently introduce performance overhead due to the synchronous replication and voting process. We need to consider the CAP theorem here: in systems with high network latency or unreliable links, we might sacrifice consistency for availability, or accept eventual consistency with a more performant solution. Furthermore, the sensitivity of algorithms like Raft to single-point network failures highlights the importance of designing for network resilience, potentially incorporating techniques to mitigate transient issues like leader elections caused by unreliable links.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re designing a distributed key-value store using a consensus algorithm like Raft. How would you approach handling a situation where a network link consistently exhibits high latency, leading to frequent leader elections and significantly impacting performance? What design considerations would you prioritize to balance consistency with availability in this scenario?\u201d"
  },
  {
    "chunk": "Membership and Coordination Services\nProjects like ZooKeeper or etcd are often described as \u201cdistributed key-value stores\u201d\nor \u201ccoordination and configuration services.\u201d The API of such a service looks pretty\nmuch like that of a database: you can read and write the value for a given key, and\niterate over keys. So if they\u2019re basically databases, why do they go to all the effort of\nimplementing a consensus algorithm? What makes them different from any other\nkind of database?\nTo understand this, it is helpful to briefly explore how a service like ZooKeeper is\nused. As an application developer, you will rarely need to use ZooKeeper directly,\nbecause it is actually not well suited as a general-purpose database. It is more likely\nthat you will end up relying on it indirectly via some other project: for example,\nHBase, Hadoop YARN, OpenStack Nova, and Kafka all rely on ZooKeeper running\nin the background. What is it that these projects get from it?\nZooKeeper and etcd are designed to hold small amounts of data that can fit entirely\nin memory (although they still write to disk for durability)\u2014so you wouldn\u2019t want to\nstore all of your application\u2019s data here. That small amount of data is replicated\nacross all the nodes using a fault-tolerant total order broadcast algorithm. As dis\u2010\ncussed previously, total order broadcast is just what you need for database replica\u2010\ntion: if each message represents a write to the database, applying the same writes in\nthe same order keeps replicas consistent with each other.\nZooKeeper is modeled after Google\u2019s Chubby lock service [ 14, 98], implementing not\nonly total order broadcast (and hence consensus), but also an interesting set of other\nfeatures that turn out to be particularly useful when building distributed systems:\nLinearizable atomic operations\nUsing an atomic compare-and-set operation, you can implement a lock: if several\nnodes concurrently try to perform the same operation, only one of them will suc\u2010\nceed. The consensus protocol guarantees that the operation will be atomic and\nlinearizable, even if a node fails or the network is interrupted at any point. A dis\u2010\ntributed lock is usually implemented as a lease , which has an expiry time so that\nit is eventually released in case the client fails (see \u201cProcess Pauses\u201d on page 295 ).\nTotal ordering of operations\nAs discussed in \u201cThe leader and the lock\u201d on page 301, when some resource is\nprotected by a lock or lease, you need a fencing token  to prevent clients from con\u2010\nflicting with each other in the case of a process pause. The fencing token is some\nnumber that monotonically increases every time the lock is acquired. ZooKeeper\nprovides this by totally ordering all operations and giving each operation a\nmonotonically increasing transaction ID ( zxid ) and version number ( cversion )\n[15].\n370 | Chapter 9: Consistency and Consensus\n",
    "summary": "The chunk discusses the use of coordination services like ZooKeeper and etcd, focusing on their role in maintaining consistency through consensus algorithms and the implementation of features like leases and fencing tokens.",
    "sample_answer": "\u201cOkay, so these coordination services like ZooKeeper aren\u2019t intended to be general-purpose databases; instead, they\u2019re critical for building resilient distributed systems. They achieve this by providing a consensus mechanism \u2013 total order broadcast \u2013 ensuring that all replicas see the same data, even during node failures. Specifically, the use of leases and fencing tokens, driven by the total ordering of operations (using zxids and cversions), allows for linearizable atomic operations, preventing conflicts when a process pauses, a crucial aspect for systems like HBase or Kafka that rely on ZooKeeper for coordination.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say you\u2019re designing a system where multiple microservices need to coordinate access to a shared resource. How would you leverage a service like ZooKeeper (or etcd) to ensure data consistency and prevent race conditions in a distributed environment? Walk me through the key features you'd utilize and why.\u201d"
  },
  {
    "chunk": "Failure detection\nClients maintain a long-lived session on ZooKeeper servers, and the client and\nserver periodically exchange heartbeats to check that the other node is still alive.\nEven if the connection is temporarily interrupted, or a ZooKeeper node fails, the\nsession remains active. However, if the heartbeats cease for a duration that is\nlonger than the session timeout, ZooKeeper declares the session to be dead. Any\nlocks held by a session can be configured to be automatically released when the\nsession times out (ZooKeeper calls these ephemeral nodes ).\nChange notifications\nNot only can one client read locks and values that were created by another client,\nbut it can also watch them for changes. Thus, a client can find out when another\nclient joins the cluster (based on the value it writes to ZooKeeper), or if another\nclient fails (because its session times out and its ephemeral nodes disappear). By\nsubscribing to notifications, a client avoids having to frequently poll to find out\nabout changes.\nOf these features, only the linearizable atomic operations really require consensus.\nHowever, it is the combination of these features that makes systems like ZooKeeper\nso useful for distributed coordination.\nAllocating work to nodes\nOne example in which the ZooKeeper/Chubby model works well is if you have sev\u2010\neral instances of a process or service, and one of them needs to be chosen as leader or\nprimary. If the leader fails, one of the other nodes should take over. This is of course\nuseful for single-leader databases, but it\u2019s also useful for job schedulers and similar\nstateful systems.\nAnother example arises when you have some partitioned resource (database, message\nstreams, file storage, distributed actor system, etc.) and need to decide which parti\u2010\ntion to assign to which node. As new nodes join the cluster, some of the partitions\nneed to be moved from existing nodes to the new nodes in order to rebalance the\nload (see \u201cRebalancing Partitions\u201d on page 209). As nodes are removed or fail, other\nnodes need to take over the failed nodes\u2019 work.\nThese kinds of tasks can be achieved by judicious use of atomic operations, ephem\u2010\neral nodes, and notifications in ZooKeeper. If done correctly, this approach allows\nthe application to automatically recover from faults without human intervention. It\u2019s\nnot easy, despite the appearance of libraries such as Apache Curator [ 17] that have\nsprung up to provide higher-level tools on top of the ZooKeeper client API\u2014but it is\nstill much better than attempting to implement the necessary consensus algorithms\nfrom scratch, which has a poor success record [ 107].\nDistributed Transactions and Consensus | 371\n",
    "summary": "The text describes a system using ZooKeeper for distributed coordination, fault tolerance, and session management through heartbeat mechanisms, ephemeral nodes, and change notifications.",
    "sample_answer": "\u201cThis system leverages ZooKeeper\u2019s core capabilities for building resilient distributed systems. Specifically, the heartbeat mechanism combined with ephemeral nodes provides a simple yet effective way to detect failures and automatically recover leadership roles, aligning with the CAP theorem \u2013 acknowledging that a system can\u2019t simultaneously guarantee consistency and partition tolerance.\u201d Furthermore, the use of change notifications allows clients to react to state changes in the cluster, preventing polling and enhancing responsiveness.",
    "potential_interview_question": "\u201cImagine you\u2019re designing a distributed job scheduler. How could you use ZooKeeper, as described in this excerpt, to handle node failures and maintain a consistent view of the available resources? What are the potential challenges and trade-offs associated with this approach?\u201d"
  },
  {
    "chunk": "An application may initially run only on a single node, but eventually may grow to\nthousands of nodes. Trying to perform majority votes over so many nodes would be\nterribly inefficient. Instead, ZooKeeper runs on a fixed number of nodes (usually\nthree or five) and performs its majority votes among those nodes while supporting a\npotentially large number of clients. Thus, ZooKeeper provides a way of \u201coutsourcing\u201d\nsome of the work of coordinating nodes (consensus, operation ordering, and failure\ndetection) to an external service.\nNormally, the kind of data managed by ZooKeeper is quite slow-changing: it repre\u2010\nsents information like \u201cthe node running on 10.1.1.23 is the leader for partition 7,\u201d\nwhich may change on a timescale of minutes or hours. It is not intended for storing\nthe runtime state of the application, which may change thousands or even millions of\ntimes per second. If application state needs to be replicated from one node to\nanother, other tools (such as Apache BookKeeper [ 108]) can be used.\nService discovery\nZooKeeper, etcd, and Consul are also often used for service discovery \u2014that is, to find\nout which IP address you need to connect to in order to reach a particular service. In\ncloud datacenter environments, where it is common for virtual machines to continu\u2010\nally come and go, you often don\u2019t know the IP addresses of your services ahead of\ntime. Instead, you can configure your services such that when they start up they reg\u2010\nister their network endpoints in a service registry, where they can then be found by\nother services.\nHowever, it is less clear whether service discovery actually requires consensus. DNS is\nthe traditional way of looking up the IP address for a service name, and it uses multi\u2010\nple layers of caching to achieve good performance and availability. Reads from DNS\nare absolutely not linearizable, and it is usually not considered problematic if the\nresults from a DNS query are a little stale [ 109]. It is more important that DNS is reli\u2010\nably available and robust to network interruptions.\nAlthough service discovery does not require consensus, leader election does. Thus, if\nyour consensus system already knows who the leader is, then it can make sense to\nalso use that information to help other services discover who the leader is. For this\npurpose, some consensus systems support read-only caching replicas. These replicas\nasynchronously receive the log of all decisions of the consensus algorithm, but do not\nactively participate in voting. They are therefore able to serve read requests that do\nnot need to be linearizable.\nMembership services\nZooKeeper and friends can be seen as part of a long history of research into member\u2010\nship services , which goes back to the 1980s and has been important for building\nhighly reliable systems, e.g., for air traffic control [ 110].\n372 | Chapter 9: Consistency and Consensus\n",
    "summary": "The chunk discusses outsourcing consensus and coordination to external services like ZooKeeper, alongside service discovery strategies and the trade-offs between strong consistency and availability.",
    "sample_answer": "\u201cOkay, this excerpt highlights a key architectural pattern: outsourcing consensus to a dedicated service like ZooKeeper. This is crucial when scaling to a large number of nodes, as direct majority voting becomes prohibitively inefficient. The use of ZooKeeper, alongside service discovery leveraging DNS caching, demonstrates a trade-off between strong consistency (which ZooKeeper provides) and availability\u2014DNS caching allows for fast reads even if the data isn't perfectly linearizable. Furthermore, it touches on the historical context of membership services and their importance in building highly reliable systems, such as air traffic control, which underlines the long-term significance of these techniques.\u201d",
    "potential_interview_question": "\u201cLet's say you're designing a system for a distributed data processing platform with thousands of nodes. Describe your approach to handling coordination and consensus. Would you leverage a service like ZooKeeper, and if so, why? What are the potential downsides or alternative strategies you\u2019d consider, and how would you balance consistency and availability?\u201d"
  },
  {
    "chunk": "A membership service determines which nodes are currently active and live members\nof a cluster. As we saw throughout Chapter 8 , due to unbounded network delays it\u2019s\nnot possible to reliably detect whether another node has failed. However, if you cou\u2010\nple failure detection with consensus, nodes can come to an agreement about which\nnodes should be considered alive or not.\nIt could still happen that a node is incorrectly declared dead by consensus, even\nthough it is actually alive. But it is nevertheless very useful for a system to have agree\u2010\nment on which nodes constitute the current membership. For example, choosing a\nleader could mean simply choosing the lowest-numbered among the current mem\u2010\nbers, but this approach would not work if different nodes have divergent opinions on\nwho the current members are. \nSummary\nIn this chapter we examined the topics of consistency and consensus from several dif\u2010\nferent angles. We looked in depth at linearizability, a popular consistency model: its\ngoal is to make replicated data appear as though there were only a single copy, and to\nmake all operations act on it atomically. Although linearizability is appealing because\nit is easy to understand\u2014it makes a database behave like a variable in a single-\nthreaded program\u2014it has the downside of being slow, especially in environments\nwith large network delays.\nWe also explored causality, which imposes an ordering on events in a system (what\nhappened before what, based on cause and effect). Unlike linearizability, which puts\nall operations in a single, totally ordered timeline, causality provides us with a weaker\nconsistency model: some things can be concurrent, so the version history is like a\ntimeline with branching and merging. Causal consistency does not have the coordi\u2010\nnation overhead of linearizability and is much less sensitive to network problems.\nHowever, even if we capture the causal ordering (for example using Lamport time\u2010\nstamps), we saw that some things cannot be implemented this way: in \u201cTimestamp\nordering is not sufficient\u201d on page 347 we considered the example of ensuring that a\nusername is unique and rejecting concurrent registrations for the same username. If\none node is going to accept a registration, it needs to somehow know that another\nnode isn\u2019t concurrently in the process of registering the same name. This problem led\nus toward consensus .\nWe saw that achieving consensus means deciding something in such a way that all\nnodes agree on what was decided, and such that the decision is irrevocable. With\nsome digging, it turns out that a wide range of problems are actually reducible to\nconsensus and are equivalent to each other (in the sense that if you have a solution\nfor one of them, you can easily transform it into a solution for one of the others).\nSuch equivalent problems include:\nSummary | 373\n",
    "summary": "The text discusses the importance of consensus for maintaining cluster membership and highlights the trade-offs between strong consistency models like linearizability and weaker models like causal consistency, ultimately leading to the need for consensus to solve problems like ensuring data uniqueness.",
    "sample_answer": "\u201cOkay, so from this chunk, it\u2019s clear that maintaining a reliable cluster membership is a fundamentally challenging problem given network delays. The core takeaway is that achieving agreement \u2013 consensus \u2013 is crucial. While linearizability, aiming for a single-threaded view of replicated data, is appealing for its simplicity, it\u2019s highly susceptible to network issues.  Instead, we're looking at systems where we can leverage consensus, likely to address issues like guaranteeing unique usernames, as highlighted in the \u2018Timestamp ordering is not sufficient\u2019 example. This requires a system where nodes can come to an agreement on the state of the cluster, demonstrating a core principle of distributed systems \u2013 leveraging consensus to handle conflicts and ensure data integrity.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re building a distributed key-value store and need to ensure that only one node can update the value associated with a specific key. What are the challenges we might face with solely relying on linearizability for consistency, and how would you approach designing a solution that addresses those challenges, potentially utilizing consensus mechanisms?\u201d"
  },
  {
    "chunk": "Linearizable compare-and-set registers\nThe register needs to atomically decide  whether to set its value, based on whether\nits current value equals the parameter given in the operation.\nAtomic transaction commit\nA database must decide  whether to commit or abort a distributed transaction.\nTotal order broadcast\nThe messaging system must decide  on the order in which to deliver messages.\nLocks and leases\nWhen several clients are racing to grab a lock or lease, the lock decides  which one\nsuccessfully acquired it.\nMembership/coordination service\nGiven a failure detector (e.g., timeouts), the system must decide  which nodes are\nalive, and which should be considered dead because their sessions timed out.\nUniqueness constraint\nWhen several transactions concurrently try to create conflicting records with the\nsame key, the constraint must decide  which one to allow and which should fail\nwith a constraint violation.\nAll of these are straightforward if you only have a single node, or if you are willing to\nassign the decision-making capability to a single node. This is what happens in a\nsingle-leader database: all the power to make decisions is vested in the leader, which\nis why such databases are able to provide linearizable operations, uniqueness con\u2010\nstraints, a totally ordered replication log, and more.\nHowever, if that single leader fails, or if a network interruption makes the leader\nunreachable, such a system becomes unable to make any progress. There are three\nways of handling that situation:\n1.Wait for the leader to recover, and accept that the system will be blocked in the\nmeantime. Many XA/JTA transaction coordinators choose this option. This\napproach does not fully solve consensus because it does not satisfy the termina\u2010\ntion property: if the leader does not recover, the system can be blocked forever.\n2.Manually fail over by getting humans to choose a new leader node and reconfig\u2010\nure the system to use it. Many relational databases take this approach. It is a kind\nof consensus by \u201cact of God\u201d\u2014the human operator, outside of the computer sys\u2010\ntem, makes the decision. The speed of failover is limited by the speed at which\nhumans can act, which is generally slower than computers.\n374 | Chapter 9: Consistency and Consensus\n",
    "summary": "The text discusses the challenges of achieving strong consistency and managing distributed transactions, highlighting the trade-offs between automated and human-driven failover mechanisms.",
    "sample_answer": "\u201cThis chunk really illustrates the tension between strong consistency and operational resilience. The core problem here is achieving linearizability, uniqueness constraints, and total order broadcast\u2014all of which rely on a central decision-maker, like a single-leader database. If that leader fails, the system halts, violating the termination property of consensus, which is critical for reliable transaction processing.\u201d  \u201cThe text explicitly contrasts automated failover with human intervention\u2014a classic CAP theorem consideration where consistency is prioritized over availability in the face of a single point of failure.  Waiting for recovery, while simple, misses the termination property, whereas manual intervention introduces significant latency and is ultimately unreliable.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where a single-leader database experiences a failure.  How does this impact a distributed transaction, and what are the potential consequences of choosing to simply \u2018wait for recovery\u2019 versus employing a manual failover strategy?\u201d"
  },
  {
    "chunk": "3.Use an algorithm to automatically choose a new leader. This approach requires a\nconsensus algorithm, and it is advisable to use a proven algorithm that correctly\nhandles adverse network conditions [ 107].\nAlthough a single-leader database can provide linearizability without executing a\nconsensus algorithm on every write, it still requires consensus to maintain its leader\u2010\nship and for leadership changes. Thus, in some sense, having a leader only \u201ckicks the\ncan down the road\u201d: consensus is still required, only in a different place, and less fre\u2010\nquently. The good news is that fault-tolerant algorithms and systems for consensus\nexist, and we briefly discussed them in this chapter.\nTools like ZooKeeper play an important role in providing an \u201coutsourced\u201d consen\u2010\nsus, failure detection, and membership service that applications can use. It\u2019s not easy\nto use, but it is much better than trying to develop your own algorithms that can\nwithstand all the problems discussed in Chapter 8 . If you find yourself wanting to do\none of those things that is reducible to consensus, and you want it to be fault-tolerant,\nthen it is advisable to use something like ZooKeeper.\nNevertheless, not every system necessarily requires consensus: for example, leaderless\nand multi-leader replication systems typically do not use global consensus. The con\u2010\nflicts that occur in these systems (see \u201cHandling Write Conflicts\u201d on page 171) are a\nconsequence of not having consensus across different leaders, but maybe that\u2019s okay:\nmaybe we simply need to cope without linearizability and learn to work better with\ndata that has branching and merging version histories.\nThis chapter referenced a large body of research on the theory of distributed systems.\nAlthough the theoretical papers and proofs are not always easy to understand, and\nsometimes make unrealistic assumptions, they are incredibly valuable for informing\npractical work in this field: they help us reason about what can and cannot be done,\nand help us find the counterintuitive ways in which distributed systems are often\nflawed. If you have the time, the references are well worth exploring. \nThis brings us to the end of Part II  of this book, in which we covered replication\n(Chapter 5 ), partitioning ( Chapter 6 ), transactions ( Chapter 7 ), distributed system\nfailure models ( Chapter 8 ), and finally consistency and consensus ( Chapter 9 ). Now\nthat we have laid a firm foundation of theory, in Part III  we will turn once again to\nmore practical systems, and discuss how to build powerful applications from hetero\u2010\ngeneous building blocks.\nReferences\n[1] Peter Bailis and Ali Ghodsi: \u201c Eventual Consistency Today: Limitations, Exten\u2010\nsions, and Beyond ,\u201d ACM Queue , volume 11, number 3, pages 55-63, March 2013.\ndoi:10.1145/2460276.2462076\nSummary | 375\n",
    "summary": "The text discusses the need for consensus algorithms, particularly leveraging tools like ZooKeeper for fault-tolerant leadership election and handling distributed system failures.",
    "sample_answer": "\u201cOkay, so when we\u2019re designing systems that require strong consistency, like a database, we absolutely need to think about how to manage leadership and handle failures. Using a consensus algorithm, like those provided by ZooKeeper, is crucial\u2014it\u2019s not just about electing a leader, but also about guaranteeing that leadership changes are consistent across the system, even under adverse network conditions. We need to consider the trade-offs between linearizability and the operational complexity of managing consensus, and potentially accept eventual consistency if the benefits outweigh the cost.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you would choose to use a tool like ZooKeeper for leader election in a distributed system, and explain the key considerations you\u2019d need to address regarding fault tolerance and consistency.\u201d"
  },
  {
    "chunk": "[2] Prince Mahajan, Lorenzo Alvisi, and Mike Dahlin: \u201c Consistency, Availability, and\nConvergence ,\u201d University of Texas at Austin, Department of Computer Science, Tech\nReport UTCS TR-11-22, May 2011.\n[3] Alex Scotti: \u201c Adventures in Building Your Own Database ,\u201d at All Your Base ,\nNovember 2015.\n[4] Peter Bailis, Aaron Davidson, Alan Fekete, et al.: \u201c Highly Available Transactions:\nVirtues and Limitations ,\u201d at 40th International Conference on Very Large Data Bases\n(VLDB), September 2014. Extended version published as pre-print arXiv:1302.0309\n[cs.DB].\n[5] Paolo Viotti and Marko Vukoli\u0107: \u201c Consistency in Non-Transactional Distributed\nStorage Systems ,\u201d arXiv:1512.00168, 12 April 2016.\n[6] Maurice P. Herlihy and Jeannette M. Wing: \u201c Linearizability: A Correctness Con\u2010\ndition for Concurrent Objects ,\u201d ACM Transactions on Programming Languages and\nSystems  (TOPLAS), volume 12, number 3, pages 463\u2013492, July 1990. doi:\n10.1145/78969.78972\n[7] Leslie Lamport: \u201c On interprocess communication ,\u201d Distributed Computing , vol\u2010\nume 1, number 2, pages 77\u2013101, June 1986. doi:10.1007/BF01786228\n[8] David K. Gifford: \u201c Information Storage in a Decentralized Computer System ,\u201d\nXerox Palo Alto Research Centers, CSL-81-8, June 1981.\n[9] Martin Kleppmann: \u201c Please Stop Calling Databases CP or AP ,\u201d martin.klepp\u2010\nmann.com , May 11, 2015.\n[10] Kyle Kingsbury: \u201c Call Me Maybe: MongoDB Stale Reads ,\u201d aphyr.com , April 20,\n2015.\n[11] Kyle Kingsbury: \u201c Computational Techniques in Knossos ,\u201d aphyr.com , May 17,\n2014.\n[12] Peter Bailis: \u201c Linearizability Versus Serializability ,\u201d bailis.org , September 24,\n2014.\n[13] Philip A. Bernstein, Vassos Hadzilacos, and Nathan Goodman: Concurrency\nControl and Recovery in Database Systems . Addison-Wesley, 1987. ISBN:\n978-0-201-10715-9, available online at research.microsoft.com .\n[14] Mike Burrows: \u201c The Chubby Lock Service for Loosely-Coupled Distributed Sys\u2010\ntems ,\u201d at 7th USENIX Symposium on Operating System Design and Implementation\n(OSDI), November 2006.\n[15] Flavio P. Junqueira and Benjamin Reed: ZooKeeper: Distributed Process Coordi\u2010\nnation . O\u2019Reilly Media, 2013. ISBN: 978-1-449-36130-3\n[16] \u201cetcd 2.0.12 Documentation ,\u201d CoreOS, Inc., 2015.\n376 | Chapter 9: Consistency and Consensus\n",
    "summary": "The text discusses consistency, availability, and consensus algorithms, alongside techniques for distributed systems coordination and fault tolerance.",
    "sample_answer": "\u201cThis chunk highlights the critical trade-offs in designing distributed systems. Specifically, it references concepts like the CAP theorem \u2013 where systems must choose between consistency and availability \u2013 and algorithms like Paxos or Raft, which are commonly used to achieve consensus in distributed environments. Furthermore, the discussion of ZooKeeper and etcd demonstrates how loosely-coupled systems can leverage centralized coordination services to manage state and ensure data consistency, a vital component for systems needing to handle conflicting updates or maintain data integrity.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you might choose between a CAP-compliant system and an eventually-consistent system. What factors would influence your decision, and what specific algorithms or coordination services might you consider utilizing?\u201d"
  },
  {
    "chunk": "[17] \u201cApache Curator ,\u201d Apache Software Foundation, curator.apache.org , 2015.\n[18] Morali Vallath: Oracle 10g RAC Grid, Services & Clustering . Elsevier Digital\nPress, 2006. ISBN: 978-1-555-58321-7\n[19] Peter Bailis, Alan Fekete, Michael J Franklin, et al.: \u201c Coordination-Avoiding\nDatabase Systems ,\u201d Proceedings of the VLDB Endowment , volume 8, number 3, pages\n185\u2013196, November 2014.\n[20] Kyle Kingsbury: \u201c Call Me Maybe: etcd and Consul ,\u201d aphyr.com , June 9, 2014.\n[21] Flavio P. Junqueira, Benjamin C. Reed, and Marco Serafini: \u201c Zab: High-\nPerformance Broadcast for Primary-Backup Systems ,\u201d at 41st IEEE International\nConference on Dependable Systems and Networks  (DSN), June 2011. doi:10.1109/\nDSN.2011.5958223\n[22] Diego Ongaro and John K. Ousterhout: \u201c In Search of an Understandable Con\u2010\nsensus Algorithm (Extended Version) ,\u201d at USENIX Annual Technical Conference\n(ATC), June 2014.\n[23] Hagit Attiya, Amotz Bar-Noy, and Danny Dolev: \u201c Sharing Memory Robustly in\nMessage-Passing Systems ,\u201d Journal of the ACM , volume 42, number 1, pages 124\u2013\n142, January 1995. doi:10.1145/200836.200869\n[24] Nancy Lynch and Alex Shvartsman: \u201c Robust Emulation of Shared Memory\nUsing Dynamic Quorum-Acknowledged Broadcasts ,\u201d at 27th Annual International\nSymposium on Fault-Tolerant Computing  (FTCS), June 1997. doi:10.1109/FTCS.\n1997.614100\n[25] Christian Cachin, Rachid Guerraoui, and Lu\u00eds Rodrigues: Introduction to Relia\u2010\nble and Secure Distributed Programming , 2nd edition. Springer, 2011. ISBN:\n978-3-642-15259-7, doi:10.1007/978-3-642-15260-3\n[26] Sam Elliott, Mark Allen, and Martin Kleppmann: personal communication ,\nthread on twitter.com , October 15, 2015.\n[27] Niklas Ekstr\u00f6m, Mikhail Panchenko, and Jonathan Ellis: \u201c Possible Issue with\nRead Repair? ,\u201d email thread on cassandra-dev  mailing list, October 2012.\n[28] Maurice P. Herlihy: \u201c Wait-Free Synchronization ,\u201d ACM Transactions on Pro\u2010\ngramming Languages and Systems  (TOPLAS), volume 13, number 1, pages 124\u2013149,\nJanuary 1991. doi:10.1145/114005.102808\n[29] Armando Fox and Eric A. Brewer: \u201c Harvest, Yield, and Scalable Tolerant Sys\u2010\ntems ,\u201d at 7th Workshop on Hot Topics in Operating Systems  (HotOS), March 1999.\ndoi:10.1109/HOTOS.1999.798396\nSummary | 377\n",
    "summary": "The text discusses distributed systems concepts including coordination-avoiding databases, wait-free synchronization, and approaches to data replication and consistency.",
    "sample_answer": "\u201cThis chunk highlights several critical considerations for designing reliable distributed systems. Specifically, the references to \u2018Coordination-Avoiding Database Systems\u2019 and \u2018Wait-Free Synchronization\u2019 (Bailis et al., 2014) demonstrate the importance of minimizing single points of failure and contention in systems where achieving strict consensus is impractical, perhaps due to latency or network constraints. The mention of \u2018Harvest, Yield, and Scalable Tolerant Systems\u2019 (Fox & Brewer, 1999) underscores the need to balance read and write performance as the system scales, a key trade-off often addressed with techniques like quorum-based replication.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where a traditional consensus algorithm like Paxos would be unsuitable. Explain what alternative approaches you might consider, referencing specific concepts from the text, and justify your choice in terms of performance and fault tolerance.\u201d"
  },
  {
    "chunk": "[30] Seth Gilbert and Nancy Lynch: \u201c Brewer\u2019s Conjecture and the Feasibility of Con\u2010\nsistent, Available, Partition-Tolerant Web Services ,\u201d ACM SIGACT News , volume 33,\nnumber 2, pages 51\u201359, June 2002. doi:10.1145/564585.564601\n[31] Seth Gilbert and Nancy Lynch: \u201c Perspectives on the CAP Theorem ,\u201d IEEE Com\u2010\nputer Magazine , volume 45, number 2, pages 30\u201336, February 2012. doi:10.1109/MC.\n2011.389\n[32] Eric A. Brewer: \u201c CAP Twelve Years Later: How the \u2018Rules\u2019 Have Changed ,\u201d IEEE\nComputer Magazine , volume 45, number 2, pages 23\u201329, February 2012. doi:\n10.1109/MC.2012.37\n[33] Susan B. Davidson, Hector Garcia-Molina, and Dale Skeen: \u201c Consistency in Par\u2010\ntitioned Networks ,\u201d ACM Computing Surveys , volume 17, number 3, pages 341\u2013370,\nSeptember 1985. doi:10.1145/5505.5508\n[34] Paul R. Johnson and Robert H. Thomas: \u201c RFC 677: The Maintenance of Dupli\u2010\ncate Databases ,\u201d Network Working Group, January 27, 1975.\n[35] Bruce G. Lindsay, Patricia Griffiths Selinger, C. Galtieri, et al.: \u201c Notes on Dis\u2010\ntributed Databases ,\u201d IBM Research, Research Report RJ2571(33471), July 1979.\n[36] Michael J. Fischer and Alan Michael: \u201c Sacrificing Serializability to Attain High\nAvailability of Data in an Unreliable Network ,\u201d at 1st ACM Symposium on Principles\nof Database Systems  (PODS), March 1982. doi:10.1145/588111.588124\n[37] Eric A. Brewer: \u201c NoSQL: Past, Present, Future ,\u201d at QCon San Francisco , Novem\u2010\nber 2012.\n[38] Henry Robinson: \u201c CAP Confusion: Problems with \u2018Partition Tolerance,\u2019 \u201d\nblog.cloudera.com , April 26, 2010.\n[39] Adrian Cockcroft: \u201c Migrating to Microservices ,\u201d at QCon London , March 2014.\n[40] Martin Kleppmann: \u201c A Critique of the CAP Theorem ,\u201d arXiv:1509.05393, Sep\u2010\ntember 17, 2015.\n[41] Nancy A. Lynch: \u201c A Hundred Impossibility Proofs for Distributed Computing ,\u201d\nat 8th ACM Symposium on Principles of Distributed Computing  (PODC), August\n",
    "summary": "The chunk discusses the CAP theorem, its evolution, and trade-offs in designing distributed systems, referencing key papers and perspectives on system architecture.",
    "sample_answer": "\u201cOkay, this chunk really dives into the fundamental challenges of building reliable distributed systems. The CAP theorem, as highlighted in Gilbert and Lynch\u2019s work, establishes that it\u2019s impossible for a system to simultaneously guarantee Consistency, Availability, and Partition Tolerance.  Later analyses, like Kleppmann\u2019s critique, push the boundaries of this theorem and highlight the real-world implications \u2013 particularly the need to make conscious trade-offs.  Considering these concepts when designing a system, like choosing between strong consistency and high availability based on the specific application\u2019s needs, is crucial for achieving optimal performance and reliability.  The reference to RFC 677 about duplicate databases also speaks to a common technique used to improve availability in the face of network partitions.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say you\u2019re designing a globally distributed messaging system. The system needs to handle high throughput and ensure messages are eventually delivered.  Considering the CAP theorem, what factors would you prioritize when deciding whether to use a strongly consistent or eventually consistent approach, and what potential risks would you be aware of?\u201d"
  },
  {
    "chunk": "1989. doi:10.1145/72981.72982\n[42] Hagit Attiya, Faith Ellen, and Adam Morrison: \u201c Limitations of Highly-Available\nEventually-Consistent Data Stores ,\u201d at ACM Symposium on Principles of Distributed\nComputing  (PODC), July 2015. doi:10.1145/2767386.2767419\n[43] Peter Sewell, Susmit Sarkar, Scott Owens, et al.: \u201c x86-TSO: A Rigorous and Usa\u2010\nble Programmer\u2019s Model for x86 Multiprocessors ,\u201d Communications of the ACM ,\nvolume 53, number 7, pages 89\u201397, July 2010. doi:10.1145/1785414.1785443\n378 | Chapter 9: Consistency and Consensus\n[44] Martin Thompson: \u201c Memory Barriers/Fences ,\u201d mechanical-\nsympathy.blogspot.co.uk , July 24, 2011.\n[45] Ulrich Drepper: \u201c What Every Programmer Should Know About Memory ,\u201d\nakkadia.org , November 21, 2007.\n[46] Daniel J. Abadi: \u201c Consistency Tradeoffs in Modern Distributed Database System\nDesign ,\u201d IEEE Computer Magazine , volume 45, number 2, pages 37\u201342, February\n2012. doi:10.1109/MC.2012.33\n[47] Hagit Attiya and Jennifer L. Welch: \u201c Sequential Consistency Versus Linearizabil\u2010\nity,\u201d ACM Transactions on Computer Systems  (TOCS), volume 12, number 2, pages\n91\u2013122, May 1994. doi:10.1145/176575.176576\n[48] Mustaque Ahamad, Gil Neiger, James E. Burns, et al.: \u201c Causal Memory: Defini\u2010\ntions, Implementation, and Programming ,\u201d Distributed Computing , volume 9, num\u2010\nber 1, pages 37\u201349, March 1995. doi:10.1007/BF01784241\n[49] Wyatt Lloyd, Michael J. Freedman, Michael Kaminsky, and David G. Andersen:\n\u201cStronger Semantics for Low-Latency Geo-Replicated Storage ,\u201d at 10th USENIX Sym\u2010\nposium on Networked Systems Design and Implementation  (NSDI), April 2013.\n[50] Marek Zawirski, Annette Bieniusa, Valter Balegas, et al.: \u201c SwiftCloud: Fault-\nTolerant Geo-Replication Integrated All the Way to the Client Machine ,\u201d INRIA\nResearch Report 8347, August 2013.\n[51] Peter Bailis, Ali Ghodsi, Joseph M Hellerstein, and Ion Stoica: \u201c Bolt-on Causal\nConsistency ,\u201d at ACM International Conference on Management of Data  (SIGMOD),\nJune 2013.\n[52] Philippe Ajoux, Nathan Bronson, Sanjeev Kumar, et al.: \u201c Challenges to Adopting\nStronger Consistency at Scale ,\u201d at 15th USENIX Workshop on Hot Topics in Operat\u2010\ning Systems  (HotOS), May 2015.\n[53] Peter Bailis: \u201c Causality Is Expensive (and What to Do About It) ,\u201d bailis.org , Feb\u2010\nruary 5, 2014.\n[54] Ricardo Gon\u00e7alves, Paulo S\u00e9rgio Almeida, Carlos Baquero, and Victor Fonte:\n\u201cConcise Server-Wide Causality Management for Eventually Consistent Data Stores ,\u201d\nat 15th IFIP International Conference on Distributed Applications and Interoperable\nSystems  (DAIS), June 2015. doi:10.1007/978-3-319-19129-4_6\n[55] Rob Conery: \u201c A Better ID Generator for PostgreSQL ,\u201d rob.conery.io , May 29,\n2014.\n[56] Leslie Lamport: \u201c Time, Clocks, and the Ordering of Events in a Distributed Sys\u2010\ntem,\u201d Communications of the ACM , volume 21, number 7, pages 558\u2013565, July 1978.\ndoi:10.1145/359545.359563\nSummary | 379\n",
    "summary": "The chunk discusses various aspects of achieving consistency and ordering in distributed systems, including trade-offs between strong and eventual consistency, the impact of causality on performance, and techniques for implementing ordering.",
    "sample_answer": "This chunk highlights several critical considerations for designing distributed systems. The discussions around sequential consistency versus linearity (referenced in Attiya et al., 1994) demonstrate the fundamental trade-off between strong guarantees and performance; achieving linearizability is fundamentally expensive. Furthermore, the reference to Bolt-on causal consistency (Bailis et al., 2013) points to a strategy for mitigating these costs by layering causal ordering on top of eventually consistent systems. The Attiya et al. (2015) paper emphasizes the limitations of highly-available, eventually consistent systems, reinforcing the need for careful architectural choices.",
    "potential_interview_question": "\"Describe a scenario where you might choose to implement 'bolt-on causal consistency' rather than strong consistency. What are the key considerations for designing such a system, and how would you monitor its effectiveness?\""
  },
  {
    "chunk": "[57] Xavier D\u00e9fago, Andr\u00e9 Schiper, and P\u00e9ter Urb\u00e1n: \u201c Total Order Broadcast and\nMulticast Algorithms: Taxonomy and Survey ,\u201d ACM Computing Surveys , volume 36,\nnumber 4, pages 372\u2013421, December 2004. doi:10.1145/1041680.1041682\n[58] Hagit Attiya and Jennifer Welch: Distributed Computing: Fundamentals, Simula\u2010\ntions and Advanced Topics , 2nd edition. John Wiley & Sons, 2004. ISBN:\n978-0-471-45324-6, doi:10.1002/0471478210\n[59] Mahesh Balakrishnan, Dahlia Malkhi, Vijayan Prabhakaran, et al.: \u201c CORFU: A\nShared Log Design for Flash Clusters ,\u201d at 9th USENIX Symposium on Networked Sys\u2010\ntems Design and Implementation  (NSDI), April 2012.\n[60] Fred B. Schneider: \u201c Implementing Fault-Tolerant Services Using the State\nMachine Approach: A Tutorial ,\u201d ACM Computing Surveys , volume 22, number 4,\npages 299\u2013319, December 1990.\n[61] Alexander Thomson, Thaddeus Diamond, Shu-Chun Weng, et al.: \u201c Calvin: Fast\nDistributed Transactions for Partitioned Database Systems ,\u201d at ACM International\nConference on Management of Data  (SIGMOD), May 2012.\n[62] Mahesh Balakrishnan, Dahlia Malkhi, Ted Wobber, et al.: \u201c Tango: Distributed\nData Structures over a Shared Log ,\u201d at 24th ACM Symposium on Operating Systems\nPrinciples  (SOSP), November 2013. doi:10.1145/2517349.2522732\n[63] Robbert van Renesse and Fred B. Schneider: \u201c Chain Replication for Supporting\nHigh Throughput and Availability ,\u201d at 6th USENIX Symposium on Operating System\nDesign and Implementation  (OSDI), December 2004.\n[64] Leslie Lamport: \u201c How to Make a Multiprocessor Computer That Correctly Exe\u2010\ncutes Multiprocess Programs ,\u201d IEEE Transactions on Computers , volume 28, number\n9, pages 690\u2013691, September 1979. doi:10.1109/TC.1979.1675439\n[65] Enis S\u00f6ztutar, Devaraj Das, and Carter Shanklin: \u201c Apache HBase High Availabil\u2010\nity at the Next Level ,\u201d hortonworks.com , January 22, 2015.\n[66] Brian F Cooper, Raghu Ramakrishnan, Utkarsh Srivastava, et al.: \u201c PNUTS:\nYahoo!\u2019s Hosted Data Serving Platform ,\u201d at 34th International Conference on Very\nLarge Data Bases  (VLDB), August 2008. doi:10.14778/1454159.1454167\n[67] Tushar Deepak Chandra and Sam Toueg: \u201c Unreliable Failure Detectors for Reli\u2010\nable Distributed Systems ,\u201d Journal of the ACM , volume 43, number 2, pages 225\u2013267,\nMarch 1996. doi:10.1145/226643.226647\n[68] Michael J. Fischer, Nancy Lynch, and Michael S. Paterson: \u201c Impossibility of Dis\u2010\ntributed Consensus with One Faulty Process ,\u201d Journal of the ACM , volume 32, num\u2010\nber 2, pages 374\u2013382, April 1985. doi:10.1145/3149.214121\n380 | Chapter 9: Consistency and Consensus\n",
    "summary": "This chunk discusses distributed systems principles, fault tolerance, and data serving architectures. Key concepts include consensus, replication, and availability strategies.",
    "sample_answer": "\u201cThis section highlights several core challenges in building reliable distributed systems. The Michael J. Fischer et al. paper on the \u2018Impossibility of Distributed Consensus with One Faulty Process\u2019 demonstrates the fundamental CAP theorem \u2013 you can\u2019t simultaneously guarantee Consistency and Availability in the presence of a single point of failure.  Furthermore, the discussion of chain replication (Robbert van Renesse et al.) alongside HBase\u2019s architecture (Enis S\u00f6ztutar et al.) shows different approaches to achieving high availability and throughput by leveraging replication strategies, crucial for designing resilient systems. \u201c",
    "potential_interview_question": "\u201cExplain the CAP theorem and give an example of a system where you might prioritize Consistency over Availability, and justify your choice.\u201d"
  },
  {
    "chunk": "[69] Michael Ben-Or: \u201cAnother Advantage of Free Choice: Completely Asynchro\u2010\nnous Agreement Protocols,\u201d at 2nd ACM Symposium on Principles of Distributed\nComputing  (PODC), August 1983. doi:10.1145/800221.806707\n[70] Jim N. Gray and Leslie Lamport: \u201c Consensus on Transaction Commit ,\u201d ACM\nTransactions on Database Systems  (TODS), volume 31, number 1, pages 133\u2013160,\nMarch 2006. doi:10.1145/1132863.1132867\n[71] Rachid Guerraoui: \u201c Revisiting the Relationship Between Non-Blocking Atomic\nCommitment and Consensus ,\u201d at 9th International Workshop on Distributed Algo\u2010\nrithms  (WDAG), September 1995. doi:10.1007/BFb0022140\n[72] Thanumalayan Sankaranarayana Pillai, Vijay Chidambaram, Ramnatthan Ala\u2010\ngappan, et al.: \u201c All File Systems Are Not Created Equal: On the Complexity of Craft\u2010\ning Crash-Consistent Applications ,\u201d at 11th USENIX Symposium on Operating\nSystems Design and Implementation  (OSDI), October 2014.\n[73] Jim Gray: \u201c The Transaction Concept: Virtues and Limitations ,\u201d at 7th Interna\u2010\ntional Conference on Very Large Data Bases  (VLDB), September 1981.\n[74] Hector Garcia-Molina and Kenneth Salem: \u201c Sagas ,\u201d at ACM International Con\u2010\nference on Management of Data  (SIGMOD), May 1987. doi:10.1145/38713.38742\n[75] C. Mohan, Bruce G. Lindsay, and Ron Obermarck: \u201c Transaction Management in\nthe R* Distributed Database Management System ,\u201d ACM Transactions on Database\nSystems , volume 11, number 4, pages 378\u2013396, December 1986. doi:\n10.1145/7239.7266\n[76] \u201cDistributed Transaction Processing: The XA Specification ,\u201d X/Open Company\nLtd., Technical Standard XO/CAE/91/300, December 1991. ISBN: 978-1-872-63024-3\n[77] Mike Spille: \u201c XA Exposed, Part II ,\u201d jroller.com , April 3, 2004.\n[78] Ivan Silva Neto and Francisco Reverbel: \u201c Lessons Learned from Implementing\nWS-Coordination and WS-AtomicTransaction ,\u201d at 7th IEEE/ACIS International\nConference on Computer and Information Science  (ICIS), May 2008. doi:10.1109/\nICIS.2008.75\n[79] James E. Johnson, David E. Langworthy, Leslie Lamport, and Friedrich H. Vogt:\n\u201cFormal Specification of a Web Services Protocol ,\u201d at 1st International Workshop on\nWeb Services and Formal Methods  (WS-FM), February 2004. doi:10.1016/j.entcs.\n2004.02.022\n[80] Dale Skeen: \u201c Nonblocking Commit Protocols ,\u201d at ACM International Conference\non Management of Data  (SIGMOD), April 1981. doi:10.1145/582318.582339\n[81] Gregor Hohpe: \u201c Your Coffee Shop Doesn\u2019t Use Two-Phase Commit ,\u201d IEEE Soft\u2010\nware , volume 22, number 2, pages 64\u201366, March 2005. doi:10.1109/MS.2005.52\nSummary | 381\n",
    "summary": "This chunk discusses distributed transaction processing, specifically focusing on non-blocking commit protocols, two-phase commit (2PC), and related architectures like Sagas.",
    "sample_answer": "\u201cThis material centers around critical issues in distributed systems: achieving consensus in the face of failures. The core concept is Two-Phase Commit (2PC), which, as described in [76] and [75], attempts to ensure that transactions are either fully completed or completely rolled back across multiple nodes. The limitations of 2PC, such as the \u2018blocking\u2019 nature of the protocol and the possibility of \u2018deadlocks\u2019, are highlighted, leading to approaches like Sagas \u2013 a saga is a sequence of local transactions, where each transaction updates data within a single service and compensates for the effects of prior transactions [74]. These concepts underscore the need for high availability and resilience in distributed transaction management.\u201d",
    "potential_interview_question": "\u201cExplain the Two-Phase Commit (2PC) protocol. What are its potential weaknesses, and what alternative approaches could a data engineer propose to mitigate these issues in a system designed for high availability?\u201d"
  },
  {
    "chunk": "[82] Pat Helland: \u201c Life Beyond Distributed Transactions: An Apostate\u2019s Opinion ,\u201d at\n3rd Biennial Conference on Innovative Data Systems Research  (CIDR), January 2007.\n[83] Jonathan Oliver: \u201c My Beef with MSDTC and Two-Phase Commits ,\u201d blog.jona\u2010\nthanoliver.com , April 4, 2011.\n[84] Oren Eini (Ahende Rahien): \u201c The Fallacy of Distributed Transactions ,\u201d\nayende.com , July 17, 2014.\n[85] Clemens Vasters: \u201c Transactions in Windows Azure (with Service Bus) \u2013 An\nEmail Discussion ,\u201d vasters.com , July 30, 2012.\n[86] \u201cUnderstanding Transactionality in Azure ,\u201d NServiceBus Documentation, Par\u2010\nticular Software, 2015.\n[87] Randy Wigginton, Ryan Lowe, Marcos Albe, and Fernando Ipar: \u201c Distributed\nTransactions in MySQL ,\u201d at MySQL Conference and Expo , April 2013.\n[88] Mike Spille: \u201c XA Exposed, Part I ,\u201d jroller.com , April 3, 2004.\n[89] Ajmer Dhariwal: \u201c Orphaned MSDTC Transactions (-2 spids) ,\u201d eraofdata.com ,\nDecember 12, 2008.\n[90] Paul Randal: \u201c Real World Story of DBCC PAGE Saving the Day ,\u201d sqlskills.com ,\nJune 19, 2013.\n[91] \u201cin-doubt xact resolution Server Configuration Option ,\u201d SQL Server 2016 docu\u2010\nmentation, Microsoft, Inc., 2016.\n[92] Cynthia Dwork, Nancy Lynch, and Larry Stockmeyer: \u201c Consensus in the Pres\u2010\nence of Partial Synchrony ,\u201d Journal of the ACM , volume 35, number 2, pages 288\u2013\n323, April 1988. doi:10.1145/42282.42283\n[93] Miguel Castro and Barbara H. Liskov: \u201c Practical Byzantine Fault Tolerance and\nProactive Recovery ,\u201d ACM Transactions on Computer Systems , volume 20, number 4,\npages 396\u2013461, November 2002. doi:10.1145/571637.571640\n[94] Brian M. Oki and Barbara H. Liskov: \u201c Viewstamped Replication: A New Primary\nCopy Method to Support Highly-Available Distributed Systems ,\u201d at 7th ACM Sympo\u2010\nsium on Principles of Distributed Computing  (PODC), August 1988. doi:\n10.1145/62546.62549\n[95] Barbara H. Liskov and James Cowling: \u201c Viewstamped Replication Revisited ,\u201d\nMassachusetts Institute of Technology, Tech Report MIT-CSAIL-TR-2012-021, July\n2012.\n[96] Leslie Lamport: \u201c The Part-Time Parliament ,\u201d ACM Transactions on Computer\nSystems , volume 16, number 2, pages 133\u2013169, May 1998. doi:10.1145/279227.279229\n382 | Chapter 9: Consistency and Consensus\n",
    "summary": "The chunk discusses distributed transaction challenges, consistency models (including Paxos-like concepts), and replication strategies, particularly within the context of Azure and SQL Server.",
    "sample_answer": "\u201cThis material highlights the inherent difficulties in achieving true distributed transactions, particularly the \u2018MSDTC\u2019 problem \u2013 where transactions can become orphaned due to inconsistent state. The core challenge is reconciling conflicting updates across multiple databases, and the references to Paxos-like concepts (Lamport\u2019s \u2018Part-Time Parliament\u2019) and Viewstamped Replication emphasize the need for robust, eventually consistent models rather than strong, immediate atomicity.  The Azure references suggest a focus on services like Service Bus and their role in managing transactions and eventual consistency.\u201d",
    "potential_interview_question": "\u201cDescribe the challenges associated with implementing distributed transactions like MSDTC. What alternative approaches, such as eventual consistency with techniques like Viewstamped Replication, might a data engineer consider to mitigate these challenges, and what are the key trade-offs in each approach?\u201d"
  },
  {
    "chunk": "[97] Leslie Lamport: \u201c Paxos Made Simple ,\u201d ACM SIGACT News , volume 32, number\n4, pages 51\u201358, December 2001.\n[98] Tushar Deepak Chandra, Robert Griesemer, and Joshua Redstone: \u201c Paxos Made\nLive \u2013 An Engineering Perspective ,\u201d at 26th ACM Symposium on Principles of Dis\u2010\ntributed Computing  (PODC), June 2007.\n[99] Robbert van Renesse: \u201c Paxos Made Moderately Complex ,\u201d cs.cornell.edu , March\n2011.\n[100] Diego Ongaro: \u201c Consensus: Bridging Theory and Practice ,\u201d PhD Thesis, Stan\u2010\nford University, August 2014.\n[101] Heidi Howard, Malte Schwarzkopf, Anil Madhavapeddy, and Jon Crowcroft:\n\u201cRaft Refloated: Do We Have Consensus? ,\u201d ACM SIGOPS Operating Systems Review ,\nvolume 49, number 1, pages 12\u201321, January 2015. doi:10.1145/2723872.2723876\n[102] Andr\u00e9 Medeiros: \u201c ZooKeeper\u2019s Atomic Broadcast Protocol: Theory and Prac\u2010\ntice,\u201d Aalto University School of Science, March 20, 2012.\n[103] Robbert van Renesse, Nicolas Schiper, and Fred B. Schneider: \u201c Vive La Diff\u00e9r\u2010\nence: Paxos vs. Viewstamped Replication vs. Zab ,\u201d IEEE Transactions on Dependable\nand Secure Computing , volume 12, number 4, pages 472\u2013484, September 2014. doi:\n10.1109/TDSC.2014.2355848\n[104] Will Portnoy: \u201c Lessons Learned from Implementing Paxos ,\u201d blog.willport\u2010\nnoy.com , June 14, 2012.\n[105] Heidi Howard, Dahlia Malkhi, and Alexander Spiegelman: \u201c Flexible Paxos:\nQuorum Intersection Revisited ,\u201d arXiv:1608.06696 , August 24, 2016.\n[106] Heidi Howard and Jon Crowcroft: \u201c Coracle: Evaluating Consensus at the Inter\u2010\nnet Edge ,\u201d at Annual Conference of the ACM Special Interest Group on Data Commu\u2010\nnication  (SIGCOMM), August 2015. doi:10.1145/2829988.2790010\n[107] Kyle Kingsbury: \u201c Call Me Maybe: Elasticsearch 1.5.0 ,\u201d aphyr.com , April 27,\n2015.\n[108] Ivan Kelly: \u201c BookKeeper Tutorial ,\u201d github.com , October 2014.\n[109] Camille Fournier: \u201c Consensus Systems for the Skeptical Architect ,\u201d at Craft\nConference , Budapest, Hungary, April 2015.\n[110] Kenneth P. Birman: \u201c A History of the Virtual Synchrony Replication Model ,\u201d\nin Replication: Theory and Practice , Springer LNCS volume 5959, chapter 6, pages\n91\u2013120, 2010. ISBN: 978-3-642-11293-5, doi:10.1007/978-3-642-11294-2_6\nSummary | 383\n",
    "summary": "The chunk discusses various consensus algorithms and systems, notably Paxos and Raft, alongside related technologies like ZooKeeper and BookKeeper, highlighting their theoretical underpinnings and practical implementations.",
    "sample_answer": "\u201cThis collection of resources really drills down on the challenges of achieving consensus in distributed systems. The focus on Paxos, Raft, and ZooKeeper reveals a core architectural concern: how do you reliably propagate state updates across a cluster when nodes can fail? The inclusion of algorithms like Paxos\u2014which, as we know, is notoriously complex\u2014and Raft, which offers a more approachable approach via leader election and log replication, demonstrates the trade-offs involved. The reference to ZooKeeper\u2019s Atomic Broadcast Protocol is crucial, as it\u2019s a common mechanism for coordinating operations and maintaining consistency across a distributed system, often utilizing a similar consensus-based approach to achieve durability.\"",
    "potential_interview_question": "\u201cDescribe the key differences between Paxos and Raft in terms of their complexity and suitability for different use cases. How might you choose between these two consensus algorithms in a real-world distributed system?\u201d"
  },
  {
    "chunk": "Batch processing systems (offline systems)\nA batch processing system takes a large amount of input data, runs a job to pro\u2010\ncess it, and produces some output data. Jobs often take a while (from a few\nminutes to several days), so there normally isn\u2019t a user waiting for the job to fin\u2010\nish. Instead, batch jobs are often scheduled to run periodically (for example, once\na day). The primary performance measure of a batch job is usually throughput\n(the time it takes to crunch through an input dataset of a certain size). We dis\u2010\ncuss batch processing in this chapter.\nStream processing systems (near-real-time systems)\nStream processing is somewhere between online and offline/batch processing (so\nit is sometimes called near-real-time  or nearline  processing). Like a batch pro\u2010\ncessing system, a stream processor consumes inputs and produces outputs\n(rather than responding to requests). However, a stream job operates on events\nshortly after they happen, whereas a batch job operates on a fixed set of input\ndata. This difference allows stream processing systems to have lower latency than\nthe equivalent batch systems. As stream processing builds upon batch process\u2010\ning, we discuss it in Chapter 11 .\nAs we shall see in this chapter, batch processing is an important building block in our\nquest to build reliable, scalable, and maintainable applications. For example, Map\u2010\nReduce, a batch processing algorithm published in 2004 [ 1], was (perhaps over-\nenthusiastically) called \u201cthe algorithm that makes Google so massively scalable\u201d [ 2]. It\nwas subsequently implemented in various open source data systems, including\nHadoop, CouchDB, and MongoDB.\nMapReduce is a fairly low-level programming model compared to the parallel pro\u2010\ncessing systems that were developed for data warehouses many years previously [ 3,\n4], but it was a major step forward in terms of the scale of processing that could be\nachieved on commodity hardware. Although the importance of MapReduce is now\ndeclining [ 5], it is still worth understanding, because it provides a clear picture of\nwhy and how batch processing is useful.\nIn fact, batch processing is a very old form of computing. Long before programmable\ndigital computers were invented, punch card tabulating machines\u2014such as the Hol\u2010\nlerith machines used in the 1890 US Census [ 6]\u2014implemented a semi-mechanized\nform of batch processing to compute aggregate statistics from large inputs. And Map\u2010\nReduce bears an uncanny resemblance to the electromechanical IBM card-sorting\nmachines that were widely used for business data processing in the 1940s and 1950s\n[7]. As usual, history has a tendency of repeating itself.\nIn this chapter, we will look at MapReduce and several other batch processing algo\u2010\nrithms and frameworks, and explore how they are used in modern data systems. But\nfirst, to get started, we will look at data processing using standard Unix tools. Even if\nyou are already familiar with them, a reminder about the Unix philosophy is worth\u2010\n390 | Chapter 10: Batch Processing\n",
    "summary": "The text discusses the differences between batch and stream processing, highlighting the historical context of batch processing through examples like Hollerith machines and MapReduce.",
    "sample_answer": "\u201cOkay, so the core distinction here is between batch and stream processing. Batch processing, as exemplified by systems like MapReduce, is fundamentally about processing large, fixed datasets\u2014think of the Hollerith machines processing census data.  This approach emphasizes throughput, which is the rate at which you can process that data, and it\u2019s inherently less responsive than stream processing.  Understanding the historical roots, like the shift from electromechanical machines to MapReduce, is important because it shows the evolution of approaches to scalable data processing, and even helps us appreciate the trade-offs inherent in choosing a batch versus a stream processing architecture.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say you\u2019re tasked with building a system to analyze website clickstream data. Would you lean towards a batch processing system like MapReduce or a stream processing system? Walk me through your reasoning, considering factors like latency requirements, data volume, and the potential value of near-real-time insights.\u201d"
  },
  {
    "chunk": "i. Some people love to point out that cat is unnecessary here, as the input file could be given directly as an\nargument to awk. However, the linear pipeline is more apparent when written like this.while because the ideas and lessons from Unix carry over to large-scale, heterogene\u2010\nous distributed data systems.\nBatch Processing with Unix Tools\nLet\u2019s start with a simple example. Say you have a web server that appends a line to a\nlog file every time it serves a request. For example, using the nginx default access log\nformat, one line of the log might look like this:\n216.58.210.78 - - [27/Feb/2015:17:55:11 +0000] \"GET /css/typography.css HTTP/1.1\"\n200 3377 \"http://martin.kleppmann.com/\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X\n10_9_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.115\nSafari/537.36\"\n(That is actually one line; it\u2019s only broken onto multiple lines here for readability.)\nThere\u2019s a lot of information in that line. In order to interpret it, you need to look at\nthe definition of the log format, which is as follows:\n$remote_addr - $remote_user [$time_local] \"$request\"\n$status $body_bytes_sent \"$http_referer\" \"$http_user_agent\"\nSo, this one line of the log indicates that on February 27, 2015, at 17:55:11 UTC, the\nserver received a request for the file /css/typography.css  from the client IP address\n216.58.210.78. The user was not authenticated, so $remote_user  is set to a hyphen\n(-). The response status was 200 (i.e., the request was successful), and the response\nwas 3,377 bytes in size. The web browser was Chrome 40, and it loaded the file\nbecause it was referenced in the page at the URL http://martin.kleppmann.com/ .\nSimple Log Analysis\nVarious tools can take these log files and produce pretty reports about your website\ntraffic, but for the sake of exercise, let\u2019s build our own, using basic Unix tools. For\nexample, say you want to find the five most popular pages on your website. You can\ndo this in a Unix shell as follows:i \ncat /var/log/nginx/access.log | \n  awk '{print $7}'  | \n  sort             | \n  uniq -c          | \n  sort -r -n       | \n  head -n 5          \nRead the log file.\nBatch Processing with Unix Tools | 391\n",
    "summary": "The chunk describes a simple log analysis pipeline using Unix tools, highlighting batch processing and the importance of understanding log formats.",
    "sample_answer": "\u201cOkay, this illustrates a fundamental pattern: batch processing of data streams. The pipeline \u2013 `cat`, `awk`, `sort`, `uniq`, `sort`, `head` \u2013 represents a classic approach to extracting insights from log data. The key here is understanding the log format, as demonstrated by the `$remote_addr` and `$time_local` fields. This pipeline demonstrates the value of a series of interconnected tools \u2013 `awk` for extracting specific fields, `sort` for ordering, and `uniq` for counting occurrences \u2013 which is a building block for more sophisticated data processing systems. We could later extend this with concepts like sharding if the log volume grew significantly.\u201d",
    "potential_interview_question": "\u201cImagine you have a high-volume web server generating access logs. Describe a pipeline, similar to the one outlined in the text, that would identify the top 10 most frequent URLs accessed in a given hour. What considerations would you have regarding scalability and potential bottlenecks in this pipeline?\u201d"
  },
  {
    "chunk": "Split each line into fields by whitespace, and output only the seventh such field\nfrom each line, which happens to be the requested URL. In our example line, this\nrequest URL is /css/typography.css .\nAlphabetically sort  the list of requested URLs. If some URL has been requested\nn times, then after sorting, the file contains the same URL repeated n times in a\nrow.\nThe uniq  command filters out repeated lines in its input by checking whether\ntwo adjacent lines are the same. The -c option tells it to also output a counter: for\nevery distinct URL, it reports how many times that URL appeared in the input.\nThe second sort  sorts by the number ( -n) at the start of each line, which is the\nnumber of times the URL was requested. It then returns the results in reverse\n(-r) order, i.e. with the largest number first.\nFinally, head  outputs just the first five lines ( -n 5 ) of input, and discards the rest.\nThe output of that series of commands looks something like this:\n4189 /favicon.ico\n3631 /2013/05/24/improving-security-of-ssh-private-keys.html\n2124 /2012/12/05/schema-evolution-in-avro-protocol-buffers-thrift.html\n1369 /\n 915 /css/typography.css\nAlthough the preceding command line likely looks a bit obscure if you\u2019re unfamiliar\nwith Unix tools, it is incredibly powerful. It will process gigabytes of log files in a\nmatter of seconds, and you can easily modify the analysis to suit your needs. For\nexample, if you want to omit CSS files from the report, change the awk argument to\n'$7 !~ /\\.css$/ {print $7}' . If you want to count top client IP addresses instead\nof top pages, change the awk argument to '{print $1}' . And so on.\nWe don\u2019t have space in this book to explore Unix tools in detail, but they are very\nmuch worth learning about. Surprisingly many data analyses can be done in a few\nminutes using some combination of awk, sed, grep , sort , uniq , and xargs , and they\nperform surprisingly well [ 8].\nChain of commands versus custom program\nInstead of the chain of Unix commands, you could write a simple program to do the\nsame thing. For example, in Ruby, it might look something like this:\n392 | Chapter 10: Batch Processing\n",
    "summary": "The chunk describes a pipeline utilizing Unix tools for log analysis, emphasizing efficiency and flexibility through chained commands and highlights the trade-offs between a custom program and a chain of tools.",
    "sample_answer": "\u201cThis pipeline demonstrates a common pattern for initial log analysis \u2013 leveraging the efficiency of tools like `awk`, `sort`, `uniq`, and `head` to rapidly process large volumes of data. The key here is using a series of well-defined commands to perform filtering, aggregation, and selection, which is a classic approach to minimizing processing overhead and maximizing throughput, similar to the idea of a streaming data pipeline but with a batch-oriented focus. Furthermore, the flexibility afforded by modifying the `awk` script illustrates how to adapt the pipeline to different analytical needs, highlighting the importance of configurable pipelines for handling schema evolution \u2013 a crucial aspect of data processing systems.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re tasked with analyzing a large log file to identify the most frequently accessed URLs. Describe a pipeline using Unix commands (e.g., `awk`, `sort`, `uniq`, `head`) that you would use to achieve this. What are the key considerations you\u2019d make regarding performance, scalability, and error handling within this pipeline?\u201d"
  },
  {
    "chunk": "same principle as we discussed in \u201cSSTables and LSM-Trees\u201d on page 76: chunks of\ndata can be sorted in memory and written out to disk as segment files, and then mul\u2010\ntiple sorted segments can be merged into a larger sorted file. Mergesort has sequential\naccess patterns that perform well on disks. (Remember that optimizing for sequential\nI/O was a recurring theme in Chapter 3 . The same pattern reappears here.)\nThe sort  utility in GNU Coreutils (Linux) automatically handles larger-than-\nmemory datasets by spilling to disk, and automatically parallelizes sorting across\nmultiple CPU cores [ 9]. This means that the simple chain of Unix commands we saw\nearlier easily scales to large datasets, without running out of memory. The bottleneck\nis likely to be the rate at which the input file can be read from disk. \nThe Unix Philosophy\nIt\u2019s no coincidence that we were able to analyze a log file quite easily, using a chain of\ncommands like in the previous example: this was in fact one of the key design ideas of\nUnix, and it remains astonishingly relevant today. Let\u2019s look at it in some more depth\nso that we can borrow some ideas from Unix [ 10].\nDoug McIlroy, the inventor of Unix pipes, first described them like this in 1964 [ 11]:\n\u201cWe should have some ways of connecting programs like [a] garden hose\u2014screw in\nanother segment when it becomes necessary to massage data in another way. This is\nthe way of I/O also.\u201d The plumbing analogy stuck, and the idea of connecting pro\u2010\ngrams with pipes became part of what is now known as the Unix philosophy \u2014a set of\ndesign principles that became popular among the developers and users of Unix. The\nphilosophy was described in 1978 as follows [ 12, 13]:\n1.Make each program do one thing well. To do a new job, build afresh rather than\ncomplicate old programs by adding new \u201cfeatures\u201d.\n2.Expect the output of every program to become the input to another, as yet\nunknown, program. Don\u2019t clutter output with extraneous information. Avoid\nstringently columnar or binary input formats. Don\u2019t insist on interactive input.\n3.Design and build software, even operating systems, to be tried early, ideally within\nweeks. Don\u2019t hesitate to throw away the clumsy parts and rebuild them.\n4.Use tools in preference to unskilled help to lighten a programming task, even if\nyou have to detour to build the tools and expect to throw some of them out after\nyou\u2019ve finished using them.\nThis approach\u2014automation, rapid prototyping, incremental iteration, being friendly\nto experimentation, and breaking down large projects into manageable chunks\u2014\nsounds remarkably like the Agile and DevOps movements of today. Surprisingly little\nhas changed in four decades.\n394 | Chapter 10: Batch Processing\n",
    "summary": "The text discusses leveraging the Unix philosophy, specifically the use of chained commands and parallel processing (using GNU Coreutils) for efficient batch processing, emphasizing design principles like modularity and rapid prototyping.",
    "sample_answer": "\u201cOkay, this excerpt highlights a really core system design concept: the Unix philosophy. The strategy of chaining commands, like using the `sort` utility in GNU Coreutils, demonstrates a modular approach\u2014each command performs a specific task, and the output of one becomes the input to the next.  This aligns with the idea of minimizing complexity by building from simple, focused components, mirroring the principles of Agile development. Furthermore, the automated parallelization within `sort` utilizing multiple CPU cores reflects a crucial early consideration for scaling batch processing, anticipating the sequential I/O bottleneck which is a central element of efficiency. This approach is fundamentally about breaking down a large problem into smaller, manageable steps, which is a core tenet of modern data engineering practices.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where you might apply the Unix philosophy to design a data processing pipeline. What specific tools or techniques could you use to achieve modularity and efficiency, and what are the potential trade-offs you\u2019d consider?\u201d"
  },
  {
    "chunk": "ii. Another example of a uniform interface is URLs and HTTP, the foundations of the web. A URL identifies\na particular thing (resource) on a website, and you can link to any URL from any other website. A user with a\nweb browser can thus seamlessly jump between websites by following links, even though the servers may be\noperated by entirely unrelated organizations. This principle seems obvious today, but it was a key insight in\nmaking the web the success that it is today. Prior systems were not so uniform: for example, in the era of\nbulletin board systems (BBSs), each system had its own phone number and baud rate configuration. A refer\u2010\nence from one BBS to another would have to be in the form of a phone number and modem settings; the user\nwould have to hang up, dial the other BBS, and then manually find the information they were looking for. It\nwasn\u2019t possible to link directly to some piece of content inside another BBS.The sort  tool is a great example of a program that does one thing well. It is arguably\na better sorting implementation than most programming languages have in their\nstandard libraries (which do not spill to disk and do not use multiple threads, even\nwhen that would be beneficial). And yet, sort  is barely useful in isolation. It only\nbecomes powerful in combination with the other Unix tools, such as uniq .\nA Unix shell like bash  lets us easily compose  these small programs into surprisingly\npowerful data processing jobs. Even though many of these programs are written by\ndifferent groups of people, they can be joined together in flexible ways. What does\nUnix do to enable this composability?\nA uniform interface\nIf you expect the output of one program to become the input to another program,\nthat means those programs must use the same data format\u2014in other words, a com\u2010\npatible interface. If you want to be able to connect any program\u2019s output to any pro\u2010\ngram\u2019s input, that means that all programs must use the same input/output interface.\nIn Unix, that interface is a file (or, more precisely, a file descriptor). A file is just an\nordered sequence of bytes. Because that is such a simple interface, many different\nthings can be represented using the same interface: an actual file on the filesystem, a\ncommunication channel to another process (Unix socket, stdin , stdout ), a device\ndriver (say /dev/audio  or /dev/lp0 ), a socket representing a TCP connection, and so\non. It\u2019s easy to take this for granted, but it\u2019s actually quite remarkable that these very\ndifferent things can share a uniform interface, so they can easily be plugged together.ii\nBy convention, many (but not all) Unix programs treat this sequence of bytes as\nASCII text. Our log analysis example used this fact: awk, sort , uniq , and head  all treat\ntheir input file as a list of records separated by the \\n (newline, ASCII 0x0A ) charac\u2010\nter. The choice of \\n is arbitrary\u2014arguably, the ASCII record separator 0x1E  would\nhave been a better choice, since it\u2019s intended for this purpose [ 14]\u2014but in any case,\nthe fact that all these programs have standardized on using the same record separator\nallows them to interoperate.\nBatch Processing with Unix Tools | 395\n",
    "summary": "The text highlights the importance of uniform interfaces (like URLs and file formats) in enabling composability and interoperability within systems, particularly within the context of Unix tools and batch processing.",
    "sample_answer": "\u201cThis excerpt really underscores the core principle of building composable data pipelines. The Unix tool ecosystem, with its reliance on a uniform interface \u2013 specifically, the standardized file format and record separators like \\n \u2013 exemplifies this.  The ability to seamlessly chain together tools like `awk`, `sort`, and `uniq` is a direct result of this design, demonstrating a robust approach to batch processing. This aligns with the idea of building loosely coupled systems where individual components can be swapped out or updated without impacting the overall pipeline, akin to the fault tolerance aspects of a distributed system through redundancy.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you\u2019ve had to integrate multiple data processing tools within a pipeline. What considerations did you take into account regarding data format compatibility, and how did you address potential challenges?\u201d"
  },
  {
    "chunk": "The parsing of each record (i.e., a line of input) is more vague. Unix tools commonly\nsplit a line into fields by whitespace or tab characters, but CSV (comma-separated),\npipe-separated, and other encodings are also used. Even a fairly simple tool like\nxargs  has half a dozen command-line options for specifying how its input should be\nparsed.\nThe uniform interface of ASCII text mostly works, but it\u2019s not exactly beautiful: our\nlog analysis example used {print $7}  to extract the URL, which is not very readable.\nIn an ideal world this could have perhaps been {print $request_url}  or something\nof that sort. We will return to this idea later.\nAlthough it\u2019s not perfect, even decades later, the uniform interface of Unix is still\nsomething remarkable. Not many pieces of software interoperate and compose as\nwell as Unix tools do: you can\u2019t easily pipe the contents of your email account and\nyour online shopping history through a custom analysis tool into a spreadsheet and\npost the results to a social network or a wiki. Today it\u2019s an exception, not the norm,\nto have programs that work together as smoothly as Unix tools do.\nEven databases with the same data model  often don\u2019t make it easy to get data out of\none and into the other. This lack of integration leads to Balkanization of data.\nSeparation of logic and wiring\nAnother characteristic feature of Unix tools is their use of standard input ( stdin ) and\nstandard output ( stdout ). If you run a program and don\u2019t specify anything else,\nstdin  comes from the keyboard and stdout  goes to the screen. However, you can\nalso take input from a file and/or redirect output to a file. Pipes let you attach the\nstdout  of one process to the stdin  of another process (with a small in-memory\nbuffer, and without writing the entire intermediate data stream to disk).\nA program can still read and write files directly if it needs to, but the Unix approach\nworks best if a program doesn\u2019t worry about particular file paths and simply uses\nstdin  and stdout . This allows a shell user to wire up the input and output in what\u2010\never way they want; the program doesn\u2019t know or care where the input is coming\nfrom and where the output is going to. (One could say this is a form of loose coupling ,\nlate binding  [15], or inversion of control  [16].) Separating the input/output wiring\nfrom the program logic makes it easier to compose small tools into bigger systems.\nYou can even write your own programs and combine them with the tools provided\nby the operating system. Your program just needs to read input from stdin  and write\noutput to stdout , and it can participate in data processing pipelines. In the log analy\u2010\nsis example, you could write a tool that translates user-agent strings into more sensi\u2010\nble browser identifiers, or a tool that translates IP addresses into country codes, and\nsimply plug it into the pipeline. The sort  program doesn\u2019t care whether it\u2019s commu\u2010\nnicating with another part of the operating system or with a program written by you.\n396 | Chapter 10: Batch Processing\n",
    "summary": "The chunk discusses the principles of loosely coupled systems built around stdin/stdout, highlighting the challenges of data integration and the benefits of composable tools.",
    "sample_answer": "\u201cThis excerpt really emphasizes the importance of designing for loosely coupled systems, which is a core principle for building scalable and maintainable data pipelines. The reliance on stdin/stdout, reminiscent of the Unix philosophy, allows us to combine small, focused tools \u2013 like `sort` \u2013 into larger processing chains. This approach aligns with the concept of data Balkanization, where systems become fragmented due to a lack of integration, and highlights the value of composing tools that can seamlessly interact through standard streams, preventing tight dependencies that limit flexibility and future extensibility. A key takeaway here is the benefit of late binding and inversion of control; the tools don\u2019t need to know the details of the input or output, simply focusing on their core functionality.\"",
    "potential_interview_question": "\u201cDescribe a scenario where you might apply the Unix philosophy of loosely coupled systems to design a data pipeline. What are the potential benefits and drawbacks of this approach compared to a more monolithic design?\u201d"
  },
  {
    "chunk": "iii. Except by using a separate tool, such as netcat  or curl . Unix started out trying to represent everything as\nfiles, but the BSD sockets API deviated from that convention [ 17]. The research operating systems Plan 9  and\nInferno  are more consistent in their use of files: they represent a TCP connection as a file in /net/tcp  [18].However, there are limits to what you can do with stdin  and stdout . Programs that\nneed multiple inputs or outputs are possible but tricky. You can\u2019t pipe a program\u2019s\noutput into a network connection [ 17, 18].iii If a program directly opens files for read\u2010\ning and writing, or starts another program as a subprocess, or opens a network con\u2010\nnection, then that I/O is wired up by the program itself. It can still be configurable\n(through command-line options, for example), but the flexibility of wiring up inputs\nand outputs in a shell is reduced.\nTransparency and experimentation\nPart of what makes Unix tools so successful is that they make it quite easy to see what\nis going on:\n\u2022The input files to Unix commands are normally treated as immutable. This\nmeans you can run the commands as often as you want, trying various\ncommand-line options, without damaging the input files.\n\u2022You can end the pipeline at any point, pipe the output into less , and look at it to\nsee if it has the expected form. This ability to inspect is great for debugging.\n\u2022You can write the output of one pipeline stage to a file and use that file as input\nto the next stage. This allows you to restart the later stage without rerunning the\nentire pipeline.\nThus, even though Unix tools are quite blunt, simple tools compared to a query opti\u2010\nmizer of a relational database, they remain amazingly useful, especially for experi\u2010\nmentation.\nHowever, the biggest limitation of Unix tools is that they run only on a single\nmachine\u2014and that\u2019s where tools like Hadoop come in. \nMapReduce and Distributed Filesystems\nMapReduce is a bit like Unix tools, but distributed across potentially thousands of\nmachines. Like Unix tools, it is a fairly blunt, brute-force, but surprisingly effective\ntool. A single MapReduce job is comparable to a single Unix process: it takes one or\nmore inputs and produces one or more outputs.\nAs with most Unix tools, running a MapReduce job normally does not modify the\ninput and does not have any side effects other than producing the output. The output\nMapReduce and Distributed Filesystems | 397\n",
    "summary": "The text highlights the limitations of single-machine Unix tools and introduces MapReduce as a distributed alternative, emphasizing its similarities to Unix tools while addressing their scalability constraints.",
    "sample_answer": "\u201cOkay, so this chunk really underscores the importance of understanding the limitations of monolithic systems, which is a key principle in data engineering. The Unix approach, while powerful for experimentation, is fundamentally constrained by a single machine\u2019s resources. MapReduce, as described here, directly mirrors the Unix model \u2013 a single job resembles a single process \u2013 but crucially, it\u2019s distributed across potentially thousands of machines, enabling massively parallel processing. The fact that a MapReduce job doesn\u2019t modify inputs, aligning with the immutable input files concept in Unix, is a critical factor for ensuring durability and avoiding unintended consequences, a common challenge in data pipelines.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say you\u2019re designing a data pipeline for processing log files. Given the observations in this chunk about Unix tools and MapReduce, how would you approach designing a system that can handle the scale and experimentation needs while still maintaining data integrity? What architectural considerations would you prioritize, and why?\u201d"
  },
  {
    "chunk": "iv. One difference is that with HDFS, computing tasks can be scheduled to run on the machine that stores a\ncopy of a particular file, whereas object stores usually keep storage and computation separate. Reading from a\nlocal disk has a performance advantage if network bandwidth is a bottleneck. Note however that if erasure\ncoding is used, the locality advantage is lost, because the data from several machines must be combined in\norder to reconstitute the original file [ 20].files are written once, in a sequential fashion (not modifying any existing part of a file\nonce it has been written).\nWhile Unix tools use stdin  and stdout  as input and output, MapReduce jobs read\nand write files on a distributed filesystem. In Hadoop\u2019s implementation of Map\u2010\nReduce, that filesystem is called HDFS (Hadoop Distributed File System), an open\nsource reimplementation of the Google File System (GFS) [ 19].\nVarious other distributed filesystems besides HDFS exist, such as GlusterFS and the\nQuantcast File System (QFS) [ 20]. Object storage services such as Amazon S3, Azure\nBlob Storage, and OpenStack Swift [ 21] are similar in many ways.iv In this chapter we\nwill mostly use HDFS as a running example, but the principles apply to any dis\u2010\ntributed filesystem.\nHDFS is based on the shared-nothing  principle (see the introduction to Part II ), in\ncontrast to the shared-disk approach of Network Attached Storage  (NAS) and Storage\nArea Network  (SAN) architectures. Shared-disk storage is implemented by a central\u2010\nized storage appliance, often using custom hardware and special network infrastruc\u2010\nture such as Fibre Channel. On the other hand, the shared-nothing approach requires\nno special hardware, only computers connected by a conventional datacenter net\u2010\nwork.\nHDFS consists of a daemon process running on each machine, exposing a network\nservice that allows other nodes to access files stored on that machine (assuming that\nevery general-purpose machine in a datacenter has some disks attached to it). A cen\u2010\ntral server called the NameNode  keeps track of which file blocks are stored on which\nmachine. Thus, HDFS conceptually creates one big filesystem that can use the space\non the disks of all machines running the daemon.\nIn order to tolerate machine and disk failures, file blocks are replicated on multiple\nmachines. Replication may mean simply several copies of the same data on multiple\nmachines, as in Chapter 5 , or an erasure coding  scheme such as Reed\u2013Solomon codes,\nwhich allows lost data to be recovered with lower storage overhead than full replica\u2010\ntion [ 20, 22]. The techniques are similar to RAID, which provides redundancy across\nseveral disks attached to the same machine; the difference is that in a distributed file\u2010\nsystem, file access and replication are done over a conventional datacenter network\nwithout special hardware.\n398 | Chapter 10: Batch Processing\n",
    "summary": "The chunk discusses the design of distributed file systems like HDFS, focusing on replication, erasure coding, and the shared-nothing architecture for building scalable batch processing systems.",
    "sample_answer": "\u201cOkay, let\u2019s talk about designing a system like HDFS. The key here is understanding the trade-offs between locality and redundancy. The shared-nothing architecture, coupled with replication, allows for horizontal scalability \u2013 if we need more storage, we simply add more machines. However, we need to consider the cost/performance trade-off: while local reads have a performance advantage when network bandwidth is a bottleneck, erasure coding like Reed-Solomon codes provide redundancy for fault tolerance, albeit with increased computational overhead.  The NameNode\u2019s role in tracking block locations is crucial for efficient access, and mirroring the Google File System\u2019s approach with HDFS demonstrates the importance of design choices regarding distributed file systems.\u201d",
    "potential_interview_question": "\u201cHDFS is designed to handle large datasets. Describe the key architectural components of HDFS and how they contribute to its fault tolerance and scalability, specifically addressing the role of replication and the concept of the NameNode.\u201d"
  },
  {
    "chunk": "HDFS has scaled well: at the time of writing, the biggest HDFS deployments run on\ntens of thousands of machines, with combined storage capacity of hundreds of peta\u2010\nbytes [ 23]. Such large scale has become viable because the cost of data storage and\naccess on HDFS, using commodity hardware and open source software, is much\nlower than that of the equivalent capacity on a dedicated storage appliance [ 24]. \nMapReduce Job Execution\nMapReduce is a programming framework with which you can write code to process\nlarge datasets in a distributed filesystem like HDFS. The easiest way of understanding\nit is by referring back to the web server log analysis example in \u201cSimple Log Analysis\u201d\non page 391. The pattern of data processing in MapReduce is very similar to this\nexample:\n1.Read a set of input files, and break it up into records . In the web server log exam\u2010\nple, each record is one line in the log (that is, \\n is the record separator).\n2.Call the mapper function to extract a key and value from each input record. In\nthe preceding example, the mapper function is awk '{print $7}' : it extracts the\nURL ($7) as the key, and leaves the value empty.\n3.Sort all of the key-value pairs by key. In the log example, this is done by the first\nsort  command.\n4.Call the reducer function to iterate over the sorted key-value pairs. If there are\nmultiple occurrences of the same key, the sorting has made them adjacent in the\nlist, so it is easy to combine those values without having to keep a lot of state in\nmemory. In the preceding example, the reducer is implemented by the command\nuniq -c , which counts the number of adjacent records with the same key.\nThose four steps can be performed by one MapReduce job. Steps 2 (map) and 4\n(reduce) are where you write your custom data processing code. Step 1 (breaking files\ninto records) is handled by the input format parser. Step 3, the sort  step, is implicit\nin MapReduce\u2014you don\u2019t have to write it, because the output from the mapper is\nalways sorted before it is given to the reducer.\nTo create a MapReduce job, you need to implement two callback functions, the map\u2010\nper and reducer, which behave as follows (see also \u201cMapReduce Querying\u201d  on page\n46):\nMapper\nThe mapper is called once for every input record, and its job is to extract the key\nand value from the input record. For each input, it may generate any number of\nkey-value pairs (including none). It does not keep any state from one input\nrecord to the next, so each record is handled independently.\nMapReduce and Distributed Filesystems | 399\n",
    "summary": "The chunk describes a large-scale data processing architecture using HDFS and MapReduce, emphasizing the cost-effectiveness of commodity hardware and the inherent sorting within the MapReduce framework.",
    "sample_answer": "\u201cOkay, so this chunk highlights a key architectural pattern for handling massive datasets \u2013 leveraging HDFS for storage and MapReduce for processing. The cost-effectiveness of using commodity hardware, as stated, is critical for large deployments, and the automatic sorting within the MapReduce framework is a huge simplification for the developer, avoiding the need to explicitly implement a sorting step. This is a common pattern for batch processing, and the decoupling of the map and reduce stages is important for scalability and resilience \u2013 if one stage fails, the other can potentially continue, depending on the overall system design.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say you\u2019re designing a system to process web server logs at a scale of hundreds of peta-bytes. Describe the architectural choices you\u2019d make, referencing specific components like HDFS and MapReduce. How would you address the inherent sorting within MapReduce, and what are the potential trade-offs you\u2019d consider?\u201d"
  },
  {
    "chunk": "Reducer\nThe MapReduce framework takes the key-value pairs produced by the mappers,\ncollects all the values belonging to the same key, and calls the reducer with an\niterator over that collection of values. The reducer can produce output records\n(such as the number of occurrences of the same URL).\nIn the web server log example, we had a second sort  command in step 5, which\nranked URLs by number of requests. In MapReduce, if you need a second sorting\nstage, you can implement it by writing a second MapReduce job and using the output\nof the first job as input to the second job. Viewed like this, the role of the mapper is to\nprepare the data by putting it into a form that is suitable for sorting, and the role of\nthe reducer is to process the data that has been sorted. \nDistributed execution of MapReduce\nThe main difference from pipelines of Unix commands is that MapReduce can paral\u2010\nlelize a computation across many machines, without you having to write code to\nexplicitly handle the parallelism. The mapper and reducer only operate on one record\nat a time; they don\u2019t need to know where their input is coming from or their output is\ngoing to, so the framework can handle the complexities of moving data between\nmachines.\nIt is possible to use standard Unix tools as mappers and reducers in a distributed\ncomputation [ 25], but more commonly they are implemented as functions in a con\u2010\nventional programming language. In Hadoop MapReduce, the mapper and reducer\nare each a Java class that implements a particular interface. In MongoDB and\nCouchDB, mappers and reducers are JavaScript functions (see \u201cMapReduce Query\u2010\ning\u201d on page 46 ).\nFigure 10-1  shows the dataflow in a Hadoop MapReduce job. Its parallelization is\nbased on partitioning (see Chapter 6 ): the input to a job is typically a directory in\nHDFS, and each file or file block within the input directory is considered to be a sepa\u2010\nrate partition that can be processed by a separate map task (marked by m 1, m 2, and\nm 3 in Figure 10-1 ).\nEach input file is typically hundreds of megabytes in size. The MapReduce scheduler\n(not shown in the diagram) tries to run each mapper on one of the machines that\nstores a replica of the input file, provided that machine has enough spare RAM and\nCPU resources to run the map task [ 26]. This principle is known as putting the com\u2010\nputation near the data  [27]: it saves copying the input file over the network, reducing\nnetwork load and increasing locality.\n400 | Chapter 10: Batch Processing\n",
    "summary": "The chunk describes the MapReduce framework\u2019s architecture, parallelization strategy through partitioning, and the principle of placing computation near the data.",
    "sample_answer": "\u201cMapReduce\u2019s core design centers around parallelizing batch processing tasks, primarily achieved through partitioning the input data and assigning each partition to a separate mapper. This aligns with the principle of \u2018putting the computation near the data,\u2019 minimizing network I/O by having each mapper operate on a local data replica, which dramatically improves performance when dealing with large datasets.\u201d Furthermore, \u201cthe framework inherently handles data distribution and task scheduling, abstracting away the complexities of distributed execution, allowing developers to focus on the logic of the mapper and reducer functions themselves.\u201d",
    "potential_interview_question": "\u201cExplain the concept of \u2018putting the computation near the data\u2019 in the context of the MapReduce framework.  How does this approach contribute to overall system performance and scalability?\u201d"
  },
  {
    "chunk": "Figure 10-1. A MapReduce job with three mappers and three reducers.\nIn most cases, the application code that should run in the map task is not yet present\non the machine that is assigned the task of running it, so the MapReduce framework\nfirst copies the code (e.g., JAR files in the case of a Java program) to the appropriate\nmachines. It then starts the map task and begins reading the input file, passing one\nrecord at a time to the mapper callback. The output of the mapper consists of key-\nvalue pairs.\nThe reduce side of the computation is also partitioned. While the number of map\ntasks is determined by the number of input file blocks, the number of reduce tasks is\nconfigured by the job author (it can be different from the number of map tasks). To\nensure that all key-value pairs with the same key end up at the same reducer, the\nframework uses a hash of the key to determine which reduce task should receive a\nparticular key-value pair (see \u201cPartitioning by Hash of Key\u201d on page 203 ).\nThe key-value pairs must be sorted, but the dataset is likely too large to be sorted with\na conventional sorting algorithm on a single machine. Instead, the sorting is per\u2010\nformed in stages. First, each map task partitions its output by reducer, based on the\nhash of the key. Each of these partitions is written to a sorted file on the mapper\u2019s\nlocal disk, using a technique similar to what we discussed in \u201cSSTables and LSM-\nTrees\u201d on page 76 .\nMapReduce and Distributed Filesystems | 401\n",
    "summary": "This chunk describes the core architecture of a MapReduce job, highlighting the copying of code, key-value pair processing, and staged sorting for large datasets.",
    "sample_answer": "\u201cOkay, so this describes a classic MapReduce architecture. The framework first addresses the problem of deploying application code to the worker nodes \u2013 it\u2019s common to copy JAR files. The MapReduce job then utilizes a map phase to process input records, generating key-value pairs. Critically, the chunk describes a staged sorting process using SSTables and LSM-Trees, which is essential for handling the large volume of data generated. This staged approach, mimicking LSM-Trees, allows for efficient sorting without overwhelming a single machine\u2019s memory.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re building a new MapReduce job to process sensor data. Considering the size of this data and the potential for uneven distribution of key-value pairs, how would you approach the design of the data partitioning strategy to ensure efficient processing and minimize bottlenecks on the reducer side? Specifically, how does the use of hashing for key-value pair distribution relate to the potential issues of hotspots and the benefits of an LSM-Tree approach for the sorted data?\u201d"
  },
  {
    "chunk": "Whenever a mapper finishes reading its input file and writing its sorted output files,\nthe MapReduce scheduler notifies the reducers that they can start fetching the output\nfiles from that mapper. The reducers connect to each of the mappers and download\nthe files of sorted key-value pairs for their partition. The process of partitioning by\nreducer, sorting, and copying data partitions from mappers to reducers is known as\nthe shuffle  [26] (a confusing term\u2014unlike shuffling a deck of cards, there is no ran\u2010\ndomness in MapReduce).\nThe reduce task takes the files from the mappers and merges them together, preserv\u2010\ning the sort order. Thus, if different mappers produced records with the same key,\nthey will be adjacent in the merged reducer input.\nThe reducer is called with a key and an iterator that incrementally scans over all\nrecords with the same key (which may in some cases not all fit in memory). The\nreducer can use arbitrary logic to process these records, and can generate any number\nof output records. These output records are written to a file on the distributed filesys\u2010\ntem (usually, one copy on the local disk of the machine running the reducer, with\nreplicas on other machines).\nMapReduce workflows\nThe range of problems you can solve with a single MapReduce job is limited. Refer\u2010\nring back to the log analysis example, a single MapReduce job could determine the\nnumber of page views per URL, but not the most popular URLs, since that requires a\nsecond round of sorting.\nThus, it is very common for MapReduce jobs to be chained together into workflows ,\nsuch that the output of one job becomes the input to the next job. The Hadoop Map\u2010\nReduce framework does not have any particular support for workflows, so this chain\u2010\ning is done implicitly by directory name: the first job must be configured to write its\noutput to a designated directory in HDFS, and the second job must be configured to\nread that same directory name as its input. From the MapReduce framework\u2019s point\nof view, they are two independent jobs.\nChained MapReduce jobs are therefore less like pipelines of Unix commands (which\npass the output of one process as input to another process directly, using only a small\nin-memory buffer) and more like a sequence of commands where each command\u2019s\noutput is written to a temporary file, and the next command reads from the tempo\u2010\nrary file. This design has advantages and disadvantages, which we will discuss in\n\u201cMaterialization of Intermediate State\u201d on page 419 .\nA batch job\u2019s output is only considered valid when the job has completed successfully\n(MapReduce discards the partial output of a failed job). Therefore, one job in a work\u2010\nflow can only start when the prior jobs\u2014that is, the jobs that produce its input direc\u2010\ntories\u2014have completed successfully. To handle these dependencies between job\n402 | Chapter 10: Batch Processing\n",
    "summary": "This chunk describes the architecture of a MapReduce workflow, focusing on data partitioning, shuffling, and chaining jobs for complex batch processing.",
    "sample_answer": "\u201cOkay, so this describes a core aspect of MapReduce workflows. The chunk highlights how data is partitioned by reducer and then shuffled to preserve order, which is crucial for correctness. Importantly, it illustrates the limitations of a single MapReduce job, necessitating chaining jobs together\u2014effectively creating a pipeline where the output of one job is the input to the next. This design resembles a sequence of commands writing to temporary files, mirroring a Unix pipeline but with the added complexity of HDFS and job dependencies. The failure handling \u2013 discarding partial output \u2013 emphasizes the need for robust dependency management to ensure data integrity in a batch processing scenario.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say you\u2019re building a system to analyze website traffic and you initially identify the top 10 most frequent URLs using a MapReduce job. Then you need to determine the most popular pages *within* those top URLs. How would you approach this using MapReduce, considering the limitations of a single job, and what challenges might you face in managing the workflow?\u201d"
  },
  {
    "chunk": "In order to achieve good throughput in a batch process, the computation must be (as\nmuch as possible) local to one machine. Making random-access requests over the\nnetwork for every record you want to process is too slow. Moreover, querying a\nremote database would mean that the batch job becomes nondeterministic, because\nthe data in the remote database might change.\nThus, a better approach would be to take a copy of the user database (for example,\nextracted from a database backup using an ETL process\u2014see \u201cData Warehousing\u201d on\npage 91) and to put it in the same distributed filesystem as the log of user activity\nevents. You would then have the user database in one set of files in HDFS and the\nuser activity records in another set of files, and could use MapReduce to bring\ntogether all of the relevant records in the same place and process them efficiently.\nSort-merge joins\nRecall that the purpose of the mapper is to extract a key and value from each input\nrecord. In the case of Figure 10-2 , this key would be the user ID: one set of mappers\nwould go over the activity events (extracting the user ID as the key and the activity\nevent as the value), while another set of mappers would go over the user database\n(extracting the user ID as the key and the user\u2019s date of birth as the value). This pro\u2010\ncess is illustrated in Figure 10-3 .\nFigure 10-3. A reduce-side sort-merge join on user ID. If the input datasets are parti\u2010\ntioned into multiple files, each could be processed with multiple mappers in parallel.\nWhen the MapReduce framework partitions the mapper output by key and then sorts\nthe key-value pairs, the effect is that all the activity events and the user record with\nthe same user ID become adjacent to each other in the reducer input. The Map\u2010\nReduce job can even arrange the records to be sorted such that the reducer always\nMapReduce and Distributed Filesystems | 405\n",
    "summary": "The chunk discusses a batch processing architecture leveraging MapReduce and distributed filesystems to improve throughput by minimizing network I/O and ensuring deterministic processing.",
    "sample_answer": "\u201cOkay, this excerpt highlights a crucial design principle for high-throughput batch processing. The core idea is to avoid random access to a remote database, which introduces significant latency and potential nondeterminism. By replicating the data\u2014likely extracted through an ETL process, perhaps into HDFS\u2014and processing it locally using MapReduce, we can achieve significantly better performance. The sort-merge join illustrates how MapReduce effectively combines data based on a key, but the underlying assumption is that the data is partitioned and sorted in a way that allows for parallel execution \u2013 this is a key part of the MapReduce architecture.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say you\u2019re designing a batch pipeline to process user activity logs alongside a static user database. What architectural choices would you make to maximize throughput, and why are those choices important from a system design perspective, referencing concepts like MapReduce and data partitioning?\u201d"
  },
  {
    "chunk": "sees the record from the user database first, followed by the activity events in time\u2010\nstamp order\u2014this technique is known as a secondary sort  [26].\nThe reducer can then perform the actual join logic easily: the reducer function is\ncalled once for every user ID, and thanks to the secondary sort, the first value is\nexpected to be the date-of-birth record from the user database. The reducer stores the\ndate of birth in a local variable and then iterates over the activity events with the same\nuser ID, outputting pairs of viewed-url  and viewer-age-in-years . Subsequent Map\u2010\nReduce jobs could then calculate the distribution of viewer ages for each URL, and\ncluster by age group.\nSince the reducer processes all of the records for a particular user ID in one go, it only\nneeds to keep one user record in memory at any one time, and it never needs to make\nany requests over the network. This algorithm is known as a sort-merge join , since\nmapper output is sorted by key, and the reducers then merge together the sorted lists\nof records from both sides of the join.\nBringing related data together in the same place\nIn a sort-merge join, the mappers and the sorting process make sure that all the nec\u2010\nessary data to perform the join operation for a particular user ID is brought together\nin the same place: a single call to the reducer. Having lined up all the required data in\nadvance, the reducer can be a fairly simple, single-threaded piece of code that can\nchurn through records with high throughput and low memory overhead.\nOne way of looking at this architecture is that mappers \u201csend messages\u201d to the reduc\u2010\ners. When a mapper emits a key-value pair, the key acts like the destination address\nto which the value should be delivered. Even though the key is just an arbitrary string\n(not an actual network address like an IP address and port number), it behaves like\nan address: all key-value pairs with the same key will be delivered to the same desti\u2010\nnation (a call to the reducer).\nUsing the MapReduce programming model has separated the physical network com\u2010\nmunication aspects of the computation (getting the data to the right machine) from\nthe application logic (processing the data once you have it). This separation contrasts\nwith the typical use of databases, where a request to fetch data from a database often\noccurs somewhere deep inside a piece of application code [ 36]. Since MapReduce\nhandles all network communication, it also shields the application code from having\nto worry about partial failures, such as the crash of another node: MapReduce trans\u2010\nparently retries failed tasks without affecting the application logic.\n",
    "summary": "The chunk describes a sort-merge join strategy within a MapReduce environment, highlighting network communication separation and fault tolerance.",
    "sample_answer": "\u201cThis approach, utilizing a sort-merge join, effectively addresses the challenges of joining large datasets within a MapReduce framework. By pre-sorting the data based on a key (user ID in this case), we eliminate the need for complex, potentially expensive joins at the reducer level, reducing network traffic and improving performance. Furthermore, MapReduce\u2019s inherent fault tolerance \u2013 transparently retrying failed tasks \u2013 allows the system to recover from node failures without impacting the application logic, demonstrating a core principle of building resilient distributed systems.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you would choose a sort-merge join over a traditional nested loop join. What are the key trade-offs you would consider in terms of performance, scalability, and fault tolerance?\u201d"
  },
  {
    "chunk": "GROUP BY\nBesides joins, another common use of the \u201cbringing related data to the same place\u201d\npattern is grouping records by some key (as in the GROUP BY  clause in SQL). All\n406 | Chapter 10: Batch Processing\nrecords with the same key form a group, and the next step is often to perform some\nkind of aggregation within each group\u2014for example:\n\u2022Counting the number of records in each group (like in our example of counting\npage views, which you would express as a COUNT(*)  aggregation in SQL)\n\u2022Adding up the values in one particular field ( SUM(fieldname) ) in SQL\n\u2022Picking the top k records according to some ranking function\nThe simplest way of implementing such a grouping operation with MapReduce is to\nset up the mappers so that the key-value pairs they produce use the desired grouping\nkey. The partitioning and sorting process then brings together all the records with the\nsame key in the same reducer. Thus, grouping and joining look quite similar when\nimplemented on top of MapReduce.\nAnother common use for grouping is collating all the activity events for a particular\nuser session, in order to find out the sequence of actions that the user took\u2014a pro\u2010\ncess called sessionization  [37]. For example, such analysis could be used to work out\nwhether users who were shown a new version of your website are more likely to make\na purchase than those who were shown the old version (A/B testing), or to calculate\nwhether some marketing activity is worthwhile.\nIf you have multiple web servers handling user requests, the activity events for a par\u2010\nticular user are most likely scattered across various different servers\u2019 log files. You can\nimplement sessionization by using a session cookie, user ID, or similar identifier as\nthe grouping key and bringing all the activity events for a particular user together in\none place, while distributing different users\u2019 events across different partitions.\nHandling skew\nThe pattern of \u201cbringing all records with the same key to the same place\u201d breaks\ndown if there is a very large amount of data related to a single key. For example, in a\nsocial network, most users might be connected to a few hundred people, but a small\nnumber of celebrities may have many millions of followers. Such disproportionately\nactive database records are known as linchpin objects  [38] or hot keys .\nCollecting all activity related to a celebrity (e.g., replies to something they posted) in a\nsingle reducer can lead to significant skew  (also known as hot spots )\u2014that is, one\nreducer that must process significantly more records than the others (see \u201cSkewed\nWorkloads and Relieving Hot Spots\u201d on page 205). Since a MapReduce job is only\ncomplete when all of its mappers and reducers have completed, any subsequent jobs\nmust wait for the slowest reducer to complete before they can start.\nIf a join input has hot keys, there are a few algorithms you can use to compensate.\nFor example, the skewed join  method in Pig first runs a sampling job to determine\nwhich keys are hot [ 39]. When performing the actual join, the mappers send any\nMapReduce and Distributed Filesystems | 407\n",
    "summary": "The chunk discusses grouping operations in batch processing, specifically using MapReduce, and addresses the challenges of data skew and its impact on job completion times.",
    "sample_answer": "\u201cOkay, so we\u2019re looking at how to implement grouping operations, which is a really common pattern for batch processing \u2013 think counting page views or sessionization as described here. The core of this is bringing related data to the same place, which is naturally achieved with MapReduce\u2019s key-value approach. However, the chunk highlights a critical trade-off: if we have a \u2018hot key\u2019 \u2013 like a celebrity in a social network \u2013 that pulls disproportionately much data to a single reducer, we encounter data skew. This slows down the entire job because MapReduce waits for all reducers to finish, and a single reducer could become a bottleneck.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where a high volume of data associated with a single key (a \u2018hot key\u2019) could negatively impact the performance of a MapReduce job. What considerations would you have when designing a solution to mitigate this skew?\u201d"
  },
  {
    "chunk": "records relating to a hot key to one of several reducers, chosen at random (in contrast\nto conventional MapReduce, which chooses a reducer deterministically based on a\nhash of the key). For the other input to the join, records relating to the hot key need\nto be replicated to all reducers handling that key [ 40].\nThis technique spreads the work of handling the hot key over several reducers, which\nallows it to be parallelized better, at the cost of having to replicate the other join input\nto multiple reducers. The sharded join  method in Crunch is similar, but requires the\nhot keys to be specified explicitly rather than using a sampling job. This technique is\nalso very similar to one we discussed in \u201cSkewed Workloads and Relieving Hot\nSpots\u201d  on page 205, using randomization to alleviate hot spots in a partitioned data\u2010\nbase.\nHive\u2019s skewed join optimization takes an alternative approach. It requires hot keys to\nbe specified explicitly in the table metadata, and it stores records related to those keys\nin separate files from the rest. When performing a join on that table, it uses a map-\nside join (see the next section) for the hot keys.\nWhen grouping records by a hot key and aggregating them, you can perform the\ngrouping in two stages. The first MapReduce stage sends records to a random\nreducer, so that each reducer performs the grouping on a subset of records for the\nhot key and outputs a more compact aggregated value per key. The second Map\u2010\nReduce job then combines the values from all of the first-stage reducers into a single\nvalue per key. \nMap-Side Joins\nThe join algorithms described in the last section perform the actual join logic in the\nreducers, and are hence known as reduce-side joins . The mappers take the role of pre\u2010\nparing the input data: extracting the key and value from each input record, assigning\nthe key-value pairs to a reducer partition, and sorting by key.\nThe reduce-side approach has the advantage that you do not need to make any\nassumptions about the input data: whatever its properties and structure, the mappers\ncan prepare the data to be ready for joining. However, the downside is that all that\nsorting, copying to reducers, and merging of reducer inputs can be quite expensive.\nDepending on the available memory buffers, data may be written to disk several\ntimes as it passes through the stages of MapReduce [ 37].\nOn the other hand, if you can make certain assumptions about your input data, it is\npossible to make joins faster by using a so-called map-side join . This approach uses a\ncut-down MapReduce job in which there are no reducers and no sorting. Instead,\neach mapper simply reads one input file block from the distributed filesystem and\nwrites one output file to the filesystem\u2014that is all.\n408 | Chapter 10: Batch Processing\n",
    "summary": "This chunk discusses techniques for handling skewed workloads in batch processing, specifically using randomized reducer assignment and map-side joins, alongside considerations for cost/performance trade-offs.",
    "sample_answer": "\u201cOkay, this chunk highlights a key challenge in batch processing \u2013 handling skewed workloads. The approach of randomly assigning hot keys to reducers, similar to the sharded join in Crunch, directly addresses this by distributing the processing load and preventing a single reducer from becoming a bottleneck.  This aligns with the CAP theorem, where availability and partition tolerance are prioritized; while perfect consistency isn\u2019t achieved, the system remains operational despite the skewed data.  Furthermore, the map-side join demonstrates a cost/performance trade-off: avoiding sorting and reducers is faster if assumptions about the input data can be made, but relies on making correct assumptions.  It's also an example of how leveraging MapReduce\u2019s stages\u2014mappers preparing data and reducers aggregating\u2014can be optimized.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you might choose a randomized reducer assignment strategy (like a sharded join) over a traditional deterministic hash-based approach for a batch processing job. What are the potential downsides, and how would you monitor the system to ensure it\u2019s performing as expected?\u201d"
  },
  {
    "chunk": "This approach only works if both of the join\u2019s inputs have the same number of parti\u2010\ntions, with records assigned to partitions based on the same key and the same hash\nfunction. If the inputs are generated by prior MapReduce jobs that already perform\nthis grouping, then this can be a reasonable assumption to make.\nPartitioned hash joins are known as bucketed map joins  in Hive [ 37].\nMap-side merge joins\nAnother variant of a map-side join applies if the input datasets are not only parti\u2010\ntioned in the same way, but also sorted  based on the same key. In this case, it does not\nmatter whether the inputs are small enough to fit in memory, because a mapper can\nperform the same merging operation that would normally be done by a reducer:\nreading both input files incrementally, in order of ascending key, and matching\nrecords with the same key.\nIf a map-side merge join is possible, it probably means that prior MapReduce jobs\nbrought the input datasets into this partitioned and sorted form in the first place. In\nprinciple, this join could have been performed in the reduce stage of the prior job.\nHowever, it may still be appropriate to perform the merge join in a separate map-\nonly job, for example if the partitioned and sorted datasets are also needed for other\npurposes besides this particular join.\nMapReduce workflows with map-side joins\nWhen the output of a MapReduce join is consumed by downstream jobs, the choice\nof map-side or reduce-side join affects the structure of the output. The output of a\nreduce-side join is partitioned and sorted by the join key, whereas the output of a\nmap-side join is partitioned and sorted in the same way as the large input (since one\nmap task is started for each file block of the join\u2019s large input, regardless of whether a\npartitioned or broadcast join is used).\nAs discussed, map-side joins also make more assumptions about the size, sorting, and\npartitioning of their input datasets. Knowing about the physical layout of datasets in\nthe distributed filesystem becomes important when optimizing join strategies: it is\nnot sufficient to just know the encoding format and the name of the directory in\nwhich the data is stored; you must also know the number of partitions and the keys\nby which the data is partitioned and sorted.\nIn the Hadoop ecosystem, this kind of metadata about the partitioning of datasets is\noften maintained in HCatalog and the Hive metastore [ 37]. \n410 | Chapter 10: Batch Processing\n",
    "summary": "This text discusses the trade-offs between map-side and reduce-side joins in MapReduce, highlighting the importance of data partitioning, sorting, and filesystem metadata for optimization.",
    "sample_answer": "\u201cOkay, let\u2019s analyze this join strategy. The core principle here is that map-side joins\u2014specifically bucketed map joins\u2014are only effective when the input data is already partitioned and sorted by the join key, aligning with the Hadoop ecosystem\u2019s focus on locality. This approach, leveraging the Hive metastore and HCatalog to understand data layout (partitions, keys), essentially avoids the shuffling inherent in reduce-side joins, minimizing network I/O \u2013 a key cost/performance trade-off.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where you would choose a map-side join over a reduce-side join in a MapReduce environment, and explain the factors you would consider based on the data\u2019s physical layout.  How would you leverage metadata like that stored in the Hive metastore to inform your decision?\u201d"
  },
  {
    "chunk": "\u2022If you introduce a bug into the code and the output is wrong or corrupted, you\ncan simply roll back to a previous version of the code and rerun the job, and the\noutput will be correct again. Or, even simpler, you can keep the old output in a\ndifferent directory and simply switch back to it. Databases with read-write trans\u2010\nactions do not have this property: if you deploy buggy code that writes bad data\nto the database, then rolling back the code will do nothing to fix the data in the\ndatabase. (The idea of being able to recover from buggy code has been called\nhuman fault tolerance  [50].)\n\u2022As a consequence of this ease of rolling back, feature development can proceed\nmore quickly than in an environment where mistakes could mean irreversible\ndamage. This principle of minimizing irreversibility  is beneficial for Agile soft\u2010\nware development [ 51].\n\u2022If a map or reduce task fails, the MapReduce framework automatically re-\nschedules it and runs it again on the same input. If the failure is due to a bug in\nthe code, it will keep crashing and eventually cause the job to fail after a few\nattempts; but if the failure is due to a transient issue, the fault is tolerated. This\nautomatic retry is only safe because inputs are immutable and outputs from\nfailed tasks are discarded by the MapReduce framework.\n\u2022The same set of files can be used as input for various different jobs, including\nmonitoring jobs that calculate metrics and evaluate whether a job\u2019s output has\nthe expected characteristics (for example, by comparing it to the output from the\nprevious run and measuring discrepancies).\n\u2022Like Unix tools, MapReduce jobs separate logic from wiring (configuring the\ninput and output directories), which provides a separation of concerns and ena\u2010\nbles potential reuse of code: one team can focus on implementing a job that does\none thing well, while other teams can decide where and when to run that job.\nIn these areas, the design principles that worked well for Unix also seem to be work\u2010\ning well for Hadoop\u2014but Unix and Hadoop also differ in some ways. For example,\nbecause most Unix tools assume untyped text files, they have to do a lot of input\nparsing (our log analysis example at the beginning of the chapter used {print $7}  to\nextract the URL). On Hadoop, some of those low-value syntactic conversions are\neliminated by using more structured file formats: Avro (see \u201cAvro\u201d on page 122) and\nParquet (see \u201cColumn-Oriented Storage\u201d  on page 95) are often used, as they provide\nefficient schema-based encoding and allow evolution of their schemas over time (see\n",
    "summary": "This text highlights the importance of immutability, rollback capabilities, and separation of concerns in data processing systems, particularly within the context of MapReduce and Hadoop.",
    "sample_answer": "\u201cThe key takeaway here is that minimizing irreversible errors is critical for rapid development, aligning with Agile methodologies. We can leverage the inherent rollback capabilities within systems like MapReduce, where immutable data and automatic retries allow us to quickly recover from faulty code without permanently corrupting the output \u2013 this is essentially a form of human fault tolerance. Furthermore, the separation of concerns, mirroring Unix tool design, promotes modularity and reuse of components, which is beneficial for scaling and maintaining complex data processing workflows.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you\u2019ve utilized a system with rollback capabilities to address a faulty data processing job. What specific mechanisms were employed, and what trade-offs did you consider regarding data consistency versus development velocity?\u201d"
  },
  {
    "chunk": "Chapter 4 ). \nComparing Hadoop to Distributed Databases\nAs we have seen, Hadoop is somewhat like a distributed version of Unix, where\nHDFS is the filesystem and MapReduce is a quirky implementation of a Unix process\n414 | Chapter 10: Batch Processing\n(which happens to always run the sort  utility between the map phase and the reduce\nphase). We saw how you can implement various join and grouping operations on top\nof these primitives.\nWhen the MapReduce paper [ 1] was published, it was\u2014in some sense\u2014not at all\nnew. All of the processing and parallel join algorithms that we discussed in the last\nfew sections had already been implemented in so-called massively parallel processing\n(MPP) databases more than a decade previously [ 3, 40]. For example, the Gamma\ndatabase machine, Teradata, and Tandem NonStop SQL were pioneers in this area\n[52].\nThe biggest difference is that MPP databases focus on parallel execution of analytic\nSQL queries on a cluster of machines, while the combination of MapReduce and a\ndistributed filesystem [ 19] provides something much more like a general-purpose\noperating system that can run arbitrary programs.\nDiversity of storage\nDatabases require you to structure data according to a particular model (e.g., rela\u2010\ntional or documents), whereas files in a distributed filesystem are just byte sequences,\nwhich can be written using any data model and encoding. They might be collections\nof database records, but they can equally well be text, images, videos, sensor readings,\nsparse matrices, feature vectors, genome sequences, or any other kind of data.\nTo put it bluntly, Hadoop opened up the possibility of indiscriminately dumping data\ninto HDFS, and only later figuring out how to process it further [ 53]. By contrast,\nMPP databases typically require careful up-front modeling of the data and query pat\u2010\nterns before importing the data into the database\u2019s proprietary storage format.\nFrom a purist\u2019s point of view, it may seem that this careful modeling and import is\ndesirable, because it means users of the database have better-quality data to work\nwith. However, in practice, it appears that simply making data available quickly\u2014\neven if it is in a quirky, difficult-to-use, raw format\u2014is often more valuable than try\u2010\ning to decide on the ideal data model up front [ 54].\nThe idea is similar to a data warehouse (see \u201cData Warehousing\u201d on page 91): simply\nbringing data from various parts of a large organization together in one place is val\u2010\nuable, because it enables joins across datasets that were previously disparate. The\ncareful schema design required by an MPP database slows down that centralized data\ncollection; collecting data in its raw form, and worrying about schema design later,\nallows the data collection to be speeded up (a concept sometimes known as a \u201cdata\nlake\u201d or \u201centerprise data hub\u201d [ 55]).\nIndiscriminate data dumping shifts the burden of interpreting the data: instead of\nforcing the producer of a dataset to bring it into a standardized format, the interpre\u2010\ntation of the data becomes the consumer\u2019s problem (the schema-on-read approach\nMapReduce and Distributed Filesystems | 415\n",
    "summary": "This chapter contrasts Hadoop's general-purpose approach with MPP databases, highlighting the trade-offs between upfront schema design and a flexible, data-dumping approach, echoing the concepts of data lakes and schema-on-read.",
    "sample_answer": "\u201cOkay, so this chunk really underscores the difference between traditional MPP databases and the more flexible approach offered by Hadoop. The key takeaway is the trade-off between a schema-on-write system, like an MPP database, and a schema-on-read approach, as seen with Hadoop and data lakes. MPP databases require upfront modeling based on anticipated query patterns, which can significantly slow down data ingestion \u2013 essentially, you're optimizing for the most common queries *before* the data even arrives.  Hadoop\u2019s approach, as described here, allows for \u2018indiscriminate data dumping,\u2019 prioritizing rapid data collection, similar to a data lake \u2013 you\u2019re essentially delaying schema enforcement until later, allowing for greater agility and potentially accommodating evolving data needs. This aligns with the concept of schema-on-read and the data lake paradigm.\"",
    "potential_interview_question": "\u201cDescribe the trade-offs between a schema-on-write database and a schema-on-read approach like that used with Hadoop.  How does this impact the design choices you'd make when ingesting large volumes of data into a system?\u201d"
  },
  {
    "chunk": "form, it was feasible to implement a whole range of approaches, which would not\nhave been possible within the confines of a monolithic MPP database [ 58].\nCrucially, those various processing models can all be run on a single shared-use clus\u2010\nter of machines, all accessing the same files on the distributed filesystem. In the\nHadoop approach, there is no need to import the data into several different special\u2010\nized systems for different kinds of processing: the system is flexible enough to sup\u2010\nport a diverse set of workloads within the same cluster. Not having to move data\naround makes it a lot easier to derive value from the data, and a lot easier to experi\u2010\nment with new processing models.\nThe Hadoop ecosystem includes both random-access OLTP databases such as HBase\n(see \u201cSSTables and LSM-Trees\u201d on page 76 ) and MPP-style analytic databases such as\nImpala [ 41]. Neither HBase nor Impala uses MapReduce, but both use HDFS for\nstorage. They are very different approaches to accessing and processing data, but they\ncan nevertheless coexist and be integrated in the same system.\nDesigning for frequent faults\nWhen comparing MapReduce to MPP databases, two more differences in design\napproach stand out: the handling of faults and the use of memory and disk. Batch\nprocesses are less sensitive to faults than online systems, because they do not immedi\u2010\nately affect users if they fail and they can always be run again.\nIf a node crashes while a query is executing, most MPP databases abort the entire\nquery, and either let the user resubmit the query or automatically run it again [ 3]. As\nqueries normally run for a few seconds or a few minutes at most, this way of handling\nerrors is acceptable, since the cost of retrying is not too great. MPP databases also\nprefer to keep as much data as possible in memory (e.g., using hash joins) to avoid\nthe cost of reading from disk.\nOn the other hand, MapReduce can tolerate the failure of a map or reduce task\nwithout it affecting the job as a whole by retrying work at the granularity of an indi\u2010\nvidual task. It is also very eager to write data to disk, partly for fault tolerance, and\npartly on the assumption that the dataset will be too big to fit in memory anyway.\nThe MapReduce approach is more appropriate for larger jobs: jobs that process so\nmuch data and run for such a long time that they are likely to experience at least one\ntask failure along the way. In that case, rerunning the entire job due to a single task\nfailure would be wasteful. Even if recovery at the granularity of an individual task\nintroduces overheads that make fault-free processing slower, it can still be a reason\u2010\nable trade-off if the rate of task failures is high enough.\nBut how realistic are these assumptions? In most clusters, machine failures do occur,\nbut they are not very frequent\u2014probably rare enough that most jobs will not experi\u2010\nMapReduce and Distributed Filesystems | 417\n",
    "summary": "The text discusses the trade-offs between MapReduce and MPP databases regarding fault tolerance, data access, and job duration, highlighting the importance of understanding system characteristics for appropriate architecture choices.",
    "sample_answer": "\u201cOkay, this chunk really highlights the importance of understanding your workload when designing a data processing system. We\u2019re seeing a classic trade-off here between MapReduce and MPP databases. MapReduce\u2019s fault tolerance at the task level \u2013 essentially, retrying individual failed tasks \u2013 is critical for large, long-running jobs where a complete job failure would be incredibly expensive. However, this contrasts sharply with MPP databases, which typically abort the entire query upon a fault, reflecting their design for online, interactive workloads.  The text also correctly notes that the choice depends on the frequency of failures\u2014if failures are rare, the cost of retrying tasks in MapReduce could outweigh the benefits.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say you\u2019re designing a system to process clickstream data. The data volume is massive, and the queries need to return results in near real-time. Describe the architectural considerations you\u2019d weigh when deciding between using a MapReduce-based approach and a traditional MPP database. What factors would drive your decision, and how would you address potential failure scenarios?\u201d"
  },
  {
    "chunk": "ence a machine failure. Is it really worth incurring significant overheads for the sake\nof fault tolerance?\nTo understand the reasons for MapReduce\u2019s sparing use of memory and task-level\nrecovery, it is helpful to look at the environment for which MapReduce was originally\ndesigned. Google has mixed-use datacenters, in which online production services and\noffline batch jobs run on the same machines. Every task has a resource allocation\n(CPU cores, RAM, disk space, etc.) that is enforced using containers. Every task also\nhas a priority, and if a higher-priority task needs more resources, lower-priority tasks\non the same machine can be terminated (preempted) in order to free up resources.\nPriority also determines pricing of the computing resources: teams must pay for the\nresources they use, and higher-priority processes cost more [ 59].\nThis architecture allows non-production (low-priority) computing resources to be\novercommitted, because the system knows that it can reclaim the resources if neces\u2010\nsary. Overcommitting resources in turn allows better utilization of machines and\ngreater efficiency compared to systems that segregate production and non-\nproduction tasks. However, as MapReduce jobs run at low priority, they run the risk\nof being preempted at any time because a higher-priority process requires their\nresources. Batch jobs effectively \u201cpick up the scraps under the table,\u201d using any com\u2010\nputing resources that remain after the high-priority processes have taken what they\nneed.\nAt Google, a MapReduce task that runs for an hour has an approximately 5% risk of\nbeing terminated to make space for a higher-priority process. This rate is more than\nan order of magnitude higher than the rate of failures due to hardware issues,\nmachine reboot, or other reasons [ 59]. At this rate of preemptions, if a job has 100\ntasks that each run for 10 minutes, there is a risk greater than 50% that at least one\ntask will be terminated before it is finished.\nAnd this is why MapReduce is designed to tolerate frequent unexpected task termina\u2010\ntion: it\u2019s not because the hardware is particularly unreliable, it\u2019s because the freedom\nto arbitrarily terminate processes enables better resource utilization in a computing\ncluster.\nAmong open source cluster schedulers, preemption is less widely used. YARN\u2019s\nCapacityScheduler supports preemption for balancing the resource allocation of dif\u2010\nferent queues [ 58], but general priority preemption is not supported in YARN,\nMesos, or Kubernetes at the time of writing [ 60]. In an environment where tasks are\nnot so often terminated, the design decisions of MapReduce make less sense. In the\nnext section, we will look at some alternatives to MapReduce that make different\ndesign decisions. \n418 | Chapter 10: Batch Processing\n",
    "summary": "The text discusses MapReduce\u2019s design choices, specifically its tolerance for frequent task terminations, driven by overcommitting resources in a mixed-use datacenter environment to maximize resource utilization.",
    "sample_answer": "\u201cOkay, so looking at MapReduce\u2019s design, it\u2019s clear they\u2019re built for a very specific operational model \u2013 a mixed-use datacenter where online services and batch jobs share resources. This overcommitment strategy, facilitated by preemption of lower-priority tasks, is what allows MapReduce to achieve high resource utilization. The 5% task termination rate, while seemingly high, is a direct consequence of this design, representing a tradeoff between resource efficiency and job completion guarantees. This aligns with the CAP theorem \u2013 MapReduce prioritizes availability (by maximizing resource utilization) over strong consistency, which is understandable given the environment it was designed for.\u201d",
    "potential_interview_question": "\u201cMapReduce is often criticized for its tolerance of task terminations. Explain the rationale behind this design choice, considering the operational context in which it was originally developed and referencing specific concepts like overcommitment and the CAP theorem.\u201d"
  },
  {
    "chunk": "Beyond MapReduce\nAlthough MapReduce became very popular and received a lot of hype in the late\n2000s, it is just one among many possible programming models for distributed sys\u2010\ntems. Depending on the volume of data, the structure of the data, and the type of pro\u2010\ncessing being done with it, other tools may be more appropriate for expressing a\ncomputation.\nWe nevertheless spent a lot of time in this chapter discussing MapReduce because it\nis a useful learning tool, as it is a fairly clear and simple abstraction on top of a dis\u2010\ntributed filesystem. That is, simple  in the sense of being able to understand what it is\ndoing, not in the sense of being easy to use. Quite the opposite: implementing a com\u2010\nplex processing job using the raw MapReduce APIs is actually quite hard and labori\u2010\nous\u2014for instance, you would need to implement any join algorithms from scratch\n[37].\nIn response to the difficulty of using MapReduce directly, various higher-level pro\u2010\ngramming models (Pig, Hive, Cascading, Crunch) were created as abstractions on top\nof MapReduce. If you understand how MapReduce works, they are fairly easy to\nlearn, and their higher-level constructs make many common batch processing tasks\nsignificantly easier to implement.\nHowever, there are also problems with the MapReduce execution model itself, which\nare not fixed by adding another level of abstraction and which manifest themselves as\npoor performance for some kinds of processing. On the one hand, MapReduce is\nvery robust: you can use it to process almost arbitrarily large quantities of data on an\nunreliable multi-tenant system with frequent task terminations, and it will still get the\njob done (albeit slowly). On the other hand, other tools are sometimes orders of mag\u2010\nnitude faster for some kinds of processing.\nIn the rest of this chapter, we will look at some of those alternatives for batch process\u2010\ning. In Chapter 11  we will move to stream processing, which can be regarded as\nanother way of speeding up batch processing.\nMaterialization of Intermediate State\nAs discussed previously, every MapReduce job is independent from every other job.\nThe main contact points of a job with the rest of the world are its input and output\ndirectories on the distributed filesystem. If you want the output of one job to become\nthe input to a second job, you need to configure the second job\u2019s input directory to be\nthe same as the first job\u2019s output directory, and an external workflow scheduler must\nstart the second job only once the first job has completed.\nThis setup is reasonable if the output from the first job is a dataset that you want to\npublish widely within your organization. In that case, you need to be able to refer to it\nBeyond MapReduce | 419\n",
    "summary": "The text discusses the limitations of MapReduce and introduces alternative batch processing tools, highlighting the importance of data materialization and workflow scheduling.",
    "sample_answer": "\u201cOkay, so MapReduce, while useful as a learning tool, isn't always the most efficient solution. The key takeaway here is understanding the materialization of intermediate state \u2013 the output of one MapReduce job becomes the input to another, requiring careful configuration of input directories and a workflow scheduler. This highlights a fundamental design trade-off: MapReduce provides robust execution but can be slow for certain processing tasks, prompting the need for tools like Pig or Hive that can simplify the development process.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where you would choose to use a higher-level abstraction like Pig or Hive over raw MapReduce. What are the key considerations you\u2019d make when designing the data flow, specifically around data materialization and workflow scheduling?\u201d"
  },
  {
    "chunk": "by name and reuse it as input to several different jobs (including jobs developed by\nother teams). Publishing data to a well-known location in the distributed filesystem\nallows loose coupling so that jobs don\u2019t need to know who is producing their input or\nconsuming their output (see \u201cSeparation of logic and wiring\u201d on page 396 ).\nHowever, in many cases, you know that the output of one job is only ever used as\ninput to one other job, which is maintained by the same team. In this case, the files\non the distributed filesystem are simply intermediate state : a means of passing data\nfrom one job to the next. In the complex workflows used to build recommendation\nsystems consisting of 50 or 100 MapReduce jobs [ 29], there is a lot of such intermedi\u2010\nate state.\nThe process of writing out this intermediate state to files is called materialization .\n(We came across the term previously in the context of materialized views, in \u201cAggre\u2010\ngation: Data Cubes and Materialized Views\u201d on page 101. It means to eagerly com\u2010\npute the result of some operation and write it out, rather than computing it on\ndemand when requested.)\nBy contrast, the log analysis example at the beginning of the chapter used Unix pipes\nto connect the output of one command with the input of another. Pipes do not fully\nmaterialize the intermediate state, but instead stream  the output to the input incre\u2010\nmentally, using only a small in-memory buffer.\nMapReduce\u2019s approach of fully materializing intermediate state has downsides com\u2010\npared to Unix pipes:\n\u2022A MapReduce job can only start when all tasks in the preceding jobs (that gener\u2010\nate its inputs) have completed, whereas processes connected by a Unix pipe are\nstarted at the same time, with output being consumed as soon as it is produced.\nSkew or varying load on different machines means that a job often has a few\nstraggler tasks that take much longer to complete than the others. Having to wait\nuntil all of the preceding job\u2019s tasks have completed slows down the execution of\nthe workflow as a whole.\n\u2022Mappers are often redundant: they just read back the same file that was just writ\u2010\nten by a reducer, and prepare it for the next stage of partitioning and sorting. In\nmany cases, the mapper code could be part of the previous reducer: if the reducer\noutput was partitioned and sorted in the same way as mapper output, then\nreducers could be chained together directly, without interleaving with mapper\nstages.\n\u2022Storing intermediate state in a distributed filesystem means those files are repli\u2010\ncated across several nodes, which is often overkill for such temporary data.\n420 | Chapter 10: Batch Processing\n",
    "summary": "The chunk discusses the trade-offs between materializing intermediate data in batch processing workflows (like MapReduce) versus using streaming approaches (like Unix pipes), highlighting concerns about latency, skew, and resource utilization.",
    "sample_answer": "\u201cOkay, let\u2019s analyze this. The key takeaway here is the difference between materializing intermediate data \u2013 as we see with MapReduce \u2013 and using streaming techniques like Unix pipes. MapReduce\u2019s approach introduces inherent latency because a job can only start after all preceding jobs complete, leading to potential bottlenecks if there\u2019s skew in task execution times. This contrasts with Unix pipes, which enable concurrent execution and are suitable for scenarios where low latency and efficient resource utilization are paramount. Furthermore, the replication of intermediate files in a distributed filesystem adds unnecessary overhead compared to the in-memory buffer used in Unix pipes \u2013 representing a cost/performance trade-off.\u201d",
    "potential_interview_question": "\u201cDescribe the trade-offs you\u2019ve encountered between materializing intermediate data in a batch processing system (like MapReduce) versus using a streaming pipeline. How might you choose one approach over the other, and what considerations would drive your decision?\u201d"
  },
  {
    "chunk": "Dataflow engines\nIn order to fix these problems with MapReduce, several new execution engines for\ndistributed batch computations were developed, the most well known of which are\nSpark [ 61, 62], Tez [ 63, 64], and Flink [ 65, 66]. There are various differences in the\nway they are designed, but they have one thing in common: they handle an entire\nworkflow as one job, rather than breaking it up into independent subjobs.\nSince they explicitly model the flow of data through several processing stages, these\nsystems are known as dataflow engines . Like MapReduce, they work by repeatedly\ncalling a user-defined function to process one record at a time on a single thread.\nThey parallelize work by partitioning inputs, and they copy the output of one func\u2010\ntion over the network to become the input to another function.\nUnlike in MapReduce, these functions need not take the strict roles of alternating\nmap and reduce, but instead can be assembled in more flexible ways. We call these\nfunctions operators , and the dataflow engine provides several different options for\nconnecting one operator\u2019s output to another\u2019s input:\n\u2022One option is to repartition and sort records by key, like in the shuffle stage of\nMapReduce (see \u201cDistributed execution of MapReduce\u201d on page 400). This fea\u2010\nture enables sort-merge joins and grouping in the same way as in MapReduce.\n\u2022Another possibility is to take several inputs and to partition them in the same\nway, but skip the sorting. This saves effort on partitioned hash joins, where the\npartitioning of records is important but the order is irrelevant because building\nthe hash table randomizes the order anyway.\n\u2022For broadcast hash joins, the same output from one operator can be sent to all\npartitions of the join operator.\nThis style of processing engine is based on research systems like Dryad [ 67] and\nNephele [ 68], and it offers several advantages compared to the MapReduce model:\n\u2022Expensive work such as sorting need only be performed in places where it is\nactually required, rather than always happening by default between every map\nand reduce stage.\n\u2022There are no unnecessary map tasks, since the work done by a mapper can often\nbe incorporated into the preceding reduce operator (because a mapper does not\nchange the partitioning of a dataset).\n\u2022Because all joins and data dependencies in a workflow are explicitly declared, the\nscheduler has an overview of what data is required where, so it can make locality\noptimizations. For example, it can try to place the task that consumes some data\non the same machine as the task that produces it, so that the data can be\nBeyond MapReduce | 421\n",
    "summary": "The chunk discusses dataflow engines as an alternative to MapReduce, emphasizing their ability to handle workflows as single jobs and their optimization through explicit data dependencies.",
    "sample_answer": "\u201cOkay, so we\u2019re looking at alternatives to MapReduce, and these dataflow engines \u2013 like Spark and Flink \u2013 represent a shift in thinking. The key difference is they model workflows as a single, continuous dataflow, unlike MapReduce's alternating map and reduce stages, which can be inefficient if sorting isn\u2019t always needed. This allows for optimizations like locality, where the scheduler can place tasks to minimize data transfer, which is critical for cost and performance.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say you\u2019re designing a system to process clickstream data. Given the discussion about dataflow engines, how would you approach designing the pipeline, considering the potential for expensive operations like sorting, and how might you leverage locality optimizations to minimize latency?\u201d"
  },
  {
    "chunk": "exchanged through a shared memory buffer rather than having to copy it over\nthe network.\n\u2022It is usually sufficient for intermediate state between operators to be kept in\nmemory or written to local disk, which requires less I/O than writing it to HDFS\n(where it must be replicated to several machines and written to disk on each rep\u2010\nlica). MapReduce already uses this optimization for mapper output, but dataflow\nengines generalize the idea to all intermediate state.\n\u2022Operators can start executing as soon as their input is ready; there is no need to\nwait for the entire preceding stage to finish before the next one starts.\n\u2022Existing Java Virtual Machine (JVM) processes can be reused to run new opera\u2010\ntors, reducing startup overheads compared to MapReduce (which launches a\nnew JVM for each task).\nYou can use dataflow engines to implement the same computations as MapReduce\nworkflows, and they usually execute significantly faster due to the optimizations\ndescribed here. Since operators are a generalization of map and reduce, the same pro\u2010\ncessing code can run on either execution engine: workflows implemented in Pig,\nHive, or Cascading can be switched from MapReduce to Tez or Spark with a simple\nconfiguration change, without modifying code [ 64].\nTez is a fairly thin library that relies on the YARN shuffle service for the actual copy\u2010\ning of data between nodes [ 58], whereas Spark and Flink are big frameworks that\ninclude their own network communication layer, scheduler, and user-facing APIs.\nWe will discuss those high-level APIs shortly.\nFault tolerance\nAn advantage of fully materializing intermediate state to a distributed filesystem is\nthat it is durable, which makes fault tolerance fairly easy in MapReduce: if a task fails,\nit can just be restarted on another machine and read the same input again from the\nfilesystem.\nSpark, Flink, and Tez avoid writing intermediate state to HDFS, so they take a differ\u2010\nent approach to tolerating faults: if a machine fails and the intermediate state on that\nmachine is lost, it is recomputed from other data that is still available (a prior inter\u2010\nmediary stage if possible, or otherwise the original input data, which is normally on\nHDFS).\nTo enable this recomputation, the framework must keep track of how a given piece of\ndata was computed\u2014which input partitions it used, and which operators were\napplied to it. Spark uses the resilient distributed dataset (RDD) abstraction for track\u2010\ning the ancestry of data [ 61], while Flink checkpoints operator state, allowing it to\nresume running an operator that ran into a fault during its execution [ 66].\n422 | Chapter 10: Batch Processing\n",
    "summary": "The chunk discusses optimizing intermediate data storage and fault tolerance strategies across different batch processing engines (MapReduce, Tez, Spark, Flink) by leveraging shared memory and checkpointing mechanisms.",
    "sample_answer": "\u201cOkay, this really highlights the importance of minimizing I/O when building batch pipelines. Using a shared memory buffer, as described here, dramatically reduces the performance bottleneck associated with replicating intermediate data to HDFS, which is a key concern in MapReduce.  Furthermore, the shift to checkpointing operator state (as implemented in Spark with RDDs or Flink) provides a robust fault tolerance strategy\u2014if a node fails, the state can be rebuilt from available ancestor data, demonstrating a departure from MapReduce\u2019s reliance on durable filesystem replication for recovery. This approach is crucial for maintaining availability and minimizing downtime.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say you\u2019re designing a data pipeline for processing large-scale sensor data.  Compare and contrast the fault tolerance mechanisms employed by MapReduce and a modern engine like Spark, referencing specifically the concepts of durable filesystem replication vs. RDD lineage tracking.  What are the trade-offs you would consider when choosing between these approaches?\u201d"
  },
  {
    "chunk": "When recomputing data, it is important to know whether the computation is deter\u2010\nministic : that is, given the same input data, do the operators always produce the same\noutput? This question matters if some of the lost data has already been sent to down\u2010\nstream operators. If the operator is restarted and the recomputed data is not the same\nas the original lost data, it becomes very hard for downstream operators to resolve the\ncontradictions between the old and new data. The solution in the case of nondeter\u2010\nministic operators is normally to kill the downstream operators as well, and run them\nagain on the new data.\nIn order to avoid such cascading faults, it is better to make operators deterministic.\nNote however that it is easy for nondeterministic behavior to accidentally creep in:\nfor example, many programming languages do not guarantee any particular order\nwhen iterating over elements of a hash table, many probabilistic and statistical\nalgorithms explicitly rely on using random numbers, and any use of the system clock\nor external data sources is nondeterministic. Such causes of nondeterminism need to\nbe removed in order to reliably recover from faults, for example by generating\npseudorandom numbers using a fixed seed.\nRecovering from faults by recomputing data is not always the right answer: if the\nintermediate data is much smaller than the source data, or if the computation is very\nCPU-intensive, it is probably cheaper to materialize the intermediate data to files\nthan to recompute it.\nDiscussion of materialization\nReturning to the Unix analogy, we saw that MapReduce is like writing the output of\neach command to a temporary file, whereas dataflow engines look much more like\nUnix pipes. Flink especially is built around the idea of pipelined execution: that is,\nincrementally passing the output of an operator to other operators, and not waiting\nfor the input to be complete before starting to process it.\nA sorting operation inevitably needs to consume its entire input before it can pro\u2010\nduce any output, because it\u2019s possible that the very last input record is the one with\nthe lowest key and thus needs to be the very first output record. Any operator that\nrequires sorting will thus need to accumulate state, at least temporarily. But many\nother parts of a workflow can be executed in a pipelined manner.\nWhen the job completes, its output needs to go somewhere durable so that users can\nfind it and use it\u2014most likely, it is written to the distributed filesystem again. Thus,\nwhen using a dataflow engine, materialized datasets on HDFS are still usually the\ninputs and the final outputs of a job. Like with MapReduce, the inputs are immutable\nand the output is completely replaced. The improvement over MapReduce is that you\nsave yourself writing all the intermediate state to the filesystem as well. \nBeyond MapReduce | 423\n",
    "summary": "The chunk discusses the importance of deterministic operators in dataflow systems to avoid cascading faults and highlights the trade-offs between recomputing data versus materialization, leveraging the concepts of dataflow engines and immutable data.",
    "sample_answer": "\u201cOkay, let\u2019s break down the reliability challenges here. Nondeterministic operators, like those relying on random numbers or external clocks, can cause massive problems when data is lost, leading to contradictory updates downstream. To mitigate this, we need to strive for deterministic behavior, ideally using fixed seeds for random number generation, as discussed. However, we also need to consider the cost of recomputing large datasets \u2013 if that\u2019s computationally expensive, materialization, similar to the Unix pipe concept with MapReduce, provides a more efficient solution.\u201d The chunk then discusses using dataflow engines like Flink that enable incrementally passing data between operators, further emphasizing the importance of avoiding complete recomputation.",
    "potential_interview_question": "\u201cImagine you\u2019re designing a data pipeline where a particular transformation step occasionally fails and needs to be re-executed. Considering the potential for nondeterministic behavior within that step, what specific strategies would you implement to ensure data consistency and prevent cascading failures, and how would you weigh the trade-offs between recomputing the intermediate data versus materializing it?\u201d"
  },
  {
    "chunk": "Graphs and Iterative Processing\nIn \u201cGraph-Like Data Models\u201d on page 49 we discussed using graphs for modeling\ndata, and using graph query languages to traverse the edges and vertices in a graph.\nThe discussion in Chapter 2  was focused around OLTP-style use: quickly executing\nqueries to find a small number of vertices matching certain criteria.\nIt is also interesting to look at graphs in a batch processing context, where the goal is\nto perform some kind of offline processing or analysis on an entire graph. This need\noften arises in machine learning applications such as recommendation engines, or in\nranking systems. For example, one of the most famous graph analysis algorithms is\nPageRank [ 69], which tries to estimate the popularity of a web page based on what\nother web pages link to it. It is used as part of the formula that determines the order\nin which web search engines present their results.\nDataflow engines like Spark, Flink, and Tez (see \u201cMaterialization of\nIntermediate State\u201d on page 419) typically arrange the operators in\na job as a directed acyclic graph (DAG). This is not the same as\ngraph processing: in dataflow engines, the flow of data from one\noperator to another  is structured as a graph, while the data itself\ntypically consists of relational-style tuples. In graph processing, the\ndata itself  has the form of a graph. Another unfortunate naming\nconfusion!\nMany graph algorithms are expressed by traversing one edge at a time, joining one\nvertex with an adjacent vertex in order to propagate some information, and repeating\nuntil some condition is met\u2014for example, until there are no more edges to follow, or\nuntil some metric converges. We saw an example in Figure 2-6 , which made a list of\nall the locations in North America contained in a database by repeatedly following\nedges indicating which location is within which other location (this kind of algorithm\nis called a transitive closure ).\nIt is possible to store a graph in a distributed filesystem (in files containing lists of\nvertices and edges), but this idea of \u201crepeating until done\u201d cannot be expressed in\nplain MapReduce, since it only performs a single pass over the data. This kind of\nalgorithm is thus often implemented in an iterative  style:\n1.An external scheduler runs a batch process to calculate one step of the algorithm.\n2.When the batch process completes, the scheduler checks whether it has finished\n(based on the completion condition\u2014e.g., there are no more edges to follow, or\nthe change compared to the last iteration is below some threshold).\n3.If it has not yet finished, the scheduler goes back to step 1 and runs another\nround of the batch process.\n424 | Chapter 10: Batch Processing\n",
    "summary": "The chunk discusses iterative processing of graphs in a batch context, contrasting it with OLTP-style graph queries and highlighting the limitations of MapReduce for such algorithms.",
    "sample_answer": "\u201cOkay, so when dealing with iterative graph algorithms like PageRank, we need to consider the inherent limitations of a single-pass MapReduce execution. Because the algorithm relies on propagating information across the graph through multiple iterations \u2013 joining vertices and traversing edges \u2013 a standard MapReduce job isn\u2019t suitable; it would only execute the first iteration. Instead, we\u2019d typically leverage a batch processing engine like Spark or Flink, which can organize the operators into a DAG and perform repeated iterations until a convergence criterion is met, effectively mimicking the iterative process outlined in the chunk.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re tasked with implementing PageRank on a very large graph. Explain the challenges you\u2019d face with a traditional MapReduce approach and describe how you might adapt your design to leverage the iterative nature of the algorithm, specifically considering the limitations of a single-pass execution.\u201d"
  },
  {
    "chunk": "This approach works, but implementing it with MapReduce is often very inefficient,\nbecause MapReduce does not account for the iterative nature of the algorithm: it will\nalways read the entire input dataset and produce a completely new output dataset,\neven if only a small part of the graph has changed compared to the last iteration.\nThe Pregel processing model\nAs an optimization for batch processing graphs, the bulk synchronous parallel  (BSP)\nmodel of computation [ 70] has become popular. Among others, it is implemented by\nApache Giraph [ 37], Spark\u2019s GraphX API, and Flink\u2019s Gelly API [ 71]. It is also\nknown as the Pregel  model, as Google\u2019s Pregel paper popularized this approach for\nprocessing graphs [ 72].\nRecall that in MapReduce, mappers conceptually \u201csend a message\u201d to a particular call\nof the reducer because the framework collects together all the mapper outputs with\nthe same key. A similar idea is behind Pregel: one vertex can \u201csend a message\u201d to\nanother vertex, and typically those messages are sent along the edges in a graph.\nIn each iteration, a function is called for each vertex, passing it all the messages that\nwere sent to it\u2014much like a call to the reducer. The difference from MapReduce is\nthat in the Pregel model, a vertex remembers its state in memory from one iteration\nto the next, so the function only needs to process new incoming messages. If no mes\u2010\nsages are being sent in some part of the graph, no work needs to be done.\nIt\u2019s a bit similar to the actor model (see \u201cDistributed actor frameworks\u201d on page 138 ),\nif you think of each vertex as an actor, except that vertex state and messages between\nvertices are fault-tolerant and durable, and communication proceeds in fixed rounds:\nat every iteration, the framework delivers all messages sent in the previous iteration.\nActors normally have no such timing guarantee.\nFault tolerance\nThe fact that vertices can only communicate by message passing (not by querying\neach other directly) helps improve the performance of Pregel jobs, since messages can\nbe batched and there is less waiting for communication. The only waiting is between\niterations: since the Pregel model guarantees that all messages sent in one iteration\nare delivered in the next iteration, the prior iteration must completely finish, and all\nof its messages must be copied over the network, before the next one can start.\nEven though the underlying network may drop, duplicate, or arbitrarily delay mes\u2010\nsages (see \u201cUnreliable Networks\u201d on page 277), Pregel implementations guarantee\nthat messages are processed exactly once at their destination vertex in the following\niteration. Like MapReduce, the framework transparently recovers from faults in\norder to simplify the programming model for algorithms on top of Pregel.\nBeyond MapReduce | 425\n",
    "summary": "The chunk discusses optimizing graph processing using the Pregel model, comparing it to MapReduce and highlighting fault tolerance and iterative processing.",
    "sample_answer": "\u201cOkay, let\u2019s talk about optimizing graph processing. MapReduce\u2019s inherent batch nature, where it always reads the entire dataset, becomes incredibly inefficient for iterative algorithms like those found in graph processing. The Pregel model, popularized by Google, offers a significantly better approach by leveraging a bulk synchronous parallel (BSP) model, which allows vertices to maintain state across iterations and communicate messages directly along edges, reducing redundant computation. This aligns with the CAP theorem \u2013 acknowledging that we\u2019re trading off consistency for availability here, but designing for eventual consistency is key in this iterative processing scenario.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you might choose the Pregel model over MapReduce for graph processing. What are the key trade-offs you\u2019d be considering, and how would you ensure fault tolerance within the system?\u201d"
  },
  {
    "chunk": "This fault tolerance is achieved by periodically checkpointing the state of all vertices\nat the end of an iteration\u2014i.e., writing their full state to durable storage. If a node\nfails and its in-memory state is lost, the simplest solution is to roll back the entire\ngraph computation to the last checkpoint and restart the computation. If the algo\u2010\nrithm is deterministic and messages are logged, it is also possible to selectively\nrecover only the partition that was lost (like we previously discussed for dataflow\nengines) [ 72].\nParallel execution\nA vertex does not need to know on which physical machine it is executing; when it\nsends messages to other vertices, it simply sends them to a vertex ID. It is up to the\nframework to partition the graph\u2014i.e., to decide which vertex runs on which\nmachine, and how to route messages over the network so that they end up in the\nright place.\nBecause the programming model deals with just one vertex at a time (sometimes\ncalled \u201cthinking like a vertex\u201d), the framework may partition the graph in arbitrary\nways. Ideally it would be partitioned such that vertices are colocated on the same\nmachine if they need to communicate a lot. However, finding such an optimized par\u2010\ntitioning is hard\u2014in practice, the graph is often simply partitioned by an arbitrarily\nassigned vertex ID, making no attempt to group related vertices together.\nAs a result, graph algorithms often have a lot of cross-machine communication over\u2010\nhead, and the intermediate state (messages sent between nodes) is often bigger than\nthe original graph. The overhead of sending messages over the network can signifi\u2010\ncantly slow down distributed graph algorithms.\nFor this reason, if your graph can fit in memory on a single computer, it\u2019s quite likely\nthat a single-machine (maybe even single-threaded) algorithm will outperform a dis\u2010\ntributed batch process [ 73, 74]. Even if the graph is bigger than memory, it can fit on\nthe disks of a single computer, single-machine processing using a framework such as\nGraphChi is a viable option [ 75]. If the graph is too big to fit on a single machine, a\ndistributed approach such as Pregel is unavoidable; efficiently parallelizing graph\nalgorithms is an area of ongoing research [ 76]. \nHigh-Level APIs and Languages\nOver the years since MapReduce first became popular, the execution engines for dis\u2010\ntributed batch processing have matured. By now, the infrastructure has become\nrobust enough to store and process many petabytes of data on clusters of over 10,000\nmachines. As the problem of physically operating batch processes at such scale has\nbeen considered more or less solved, attention has turned to other areas: improving\nthe programming model, improving the efficiency of processing, and broadening the\nset of problems that these technologies can solve.\n426 | Chapter 10: Batch Processing\n",
    "summary": "The chunk discusses fault tolerance through checkpointing, the challenges of distributed graph processing (network overhead), and the evolution of batch processing frameworks.",
    "sample_answer": "\u201cOkay, so when building a distributed graph processing system, the first thing to consider is fault tolerance. We\u2019re seeing here that periodic checkpointing \u2013 writing the state of each vertex to durable storage \u2013 is a core technique to mitigate node failures. If a node fails, we can roll back to the last checkpoint, which is crucial for maintaining availability. However, this introduces state synchronization overhead, and as discussed, efficient parallelization of graph algorithms is an ongoing research area. Furthermore, the network overhead associated with message passing between vertices can significantly impact performance \u2013 a key factor that suggests a single-machine approach might be preferable if the graph fits in memory.  This highlights a fundamental cost/performance trade-off we often see in distributed systems.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re designing a system to process a large, distributed graph.  Describe the trade-offs we should consider between a single-machine processing approach and a distributed batch processing approach, referencing specific concepts like checkpointing, network overhead, and the potential for improved efficiency through parallelization.\u201d"
  },
  {
    "chunk": "As discussed previously, higher-level languages and APIs such as Hive, Pig, Cascad\u2010\ning, and Crunch became popular because programming MapReduce jobs by hand is\nquite laborious. As Tez emerged, these high-level languages had the additional bene\u2010\nfit of being able to move to the new dataflow execution engine without the need to\nrewrite job code. Spark and Flink also include their own high-level dataflow APIs,\noften taking inspiration from FlumeJava [ 34].\nThese dataflow APIs generally use relational-style building blocks to express a com\u2010\nputation: joining datasets on the value of some field; grouping tuples by key; filtering\nby some condition; and aggregating tuples by counting, summing, or other functions.\nInternally, these operations are implemented using the various join and grouping\nalgorithms that we discussed earlier in this chapter.\nBesides the obvious advantage of requiring less code, these high-level interfaces also\nallow interactive use, in which you write analysis code incrementally in a shell and\nrun it frequently to observe what it is doing. This style of development is very helpful\nwhen exploring a dataset and experimenting with approaches for processing it. It is\nalso reminiscent of the Unix philosophy, which we discussed in \u201cThe Unix Philoso\u2010\nphy\u201d on page 394 .\nMoreover, these high-level interfaces not only make the humans using the system\nmore productive, but they also improve the job execution efficiency at a machine\nlevel.\nThe move toward declarative query languages\nAn advantage of specifying joins as relational operators, compared to spelling out the\ncode that performs the join, is that the framework can analyze the properties of the\njoin inputs and automatically decide which of the aforementioned join algorithms\nwould be most suitable for the task at hand. Hive, Spark, and Flink have cost-based\nquery optimizers that can do this, and even change the order of joins so that the\namount of intermediate state is minimized [ 66, 77, 78, 79].\nThe choice of join algorithm can make a big difference to the performance of a batch\njob, and it is nice not to have to understand and remember all the various join algo\u2010\nrithms we discussed in this chapter. This is possible if joins are specified in a declara\u2010\ntive way: the application simply states which joins are required, and the query\noptimizer decides how they can best be executed. We previously came across this idea\nin \u201cQuery Languages for Data\u201d on page 42 .\nHowever, in other ways, MapReduce and its dataflow successors are very different\nfrom the fully declarative query model of SQL. MapReduce was built around the idea\nof function callbacks: for each record or group of records, a user-defined function\n(the mapper or reducer) is called, and that function is free to call arbitrary code in\norder to decide what to output. This approach has the advantage that you can draw\nBeyond MapReduce | 427\n",
    "summary": "The text discusses the shift from manual MapReduce coding to declarative dataflow APIs like Hive, Spark, and Flink, emphasizing query optimization and cost-effective execution.",
    "sample_answer": "\u201cOkay, so we\u2019re seeing a significant trend here towards declarative data processing. The move to systems like Hive, Spark, and Flink, with their relational-style APIs, addresses the inherent complexity of hand-coding MapReduce jobs. These frameworks utilize cost-based query optimizers \u2013 similar to what we discussed regarding join algorithms \u2013 to automatically select the most efficient execution strategy, minimizing intermediate data and improving performance. This aligns with the principles of a system where the query engine makes decisions based on data properties, rather than relying on the user to explicitly specify every step.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re building a data pipeline that needs to process large volumes of customer transaction data. We\u2019re considering using Hive or Spark with its relational APIs. How would you approach choosing between different join algorithms, and what factors would you consider to optimize performance in this scenario?\u201d"
  },
  {
    "chunk": "upon a large ecosystem of existing libraries to do things like parsing, natural language\nanalysis, image analysis, and running numerical or statistical algorithms.\nThe freedom to easily run arbitrary code is what has long distinguished batch pro\u2010\ncessing systems of MapReduce heritage from MPP databases (see \u201cComparing\nHadoop to Distributed Databases\u201d on page 414); although databases have facilities\nfor writing user-defined functions, they are often cumbersome to use and not well\nintegrated with the package managers and dependency management systems that are\nwidely used in most programming languages (such as Maven for Java, npm for Java\u2010\nScript, and Rubygems for Ruby).\nHowever, dataflow engines have found that there are also advantages to incorporat\u2010\ning more declarative features in areas besides joins. For example, if a callback func\u2010\ntion contains only a simple filtering condition, or it just selects some fields from a\nrecord, then there is significant CPU overhead in calling the function on every\nrecord. If such simple filtering and mapping operations are expressed in a declarative\nway, the query optimizer can take advantage of column-oriented storage layouts (see\n\u201cColumn-Oriented Storage\u201d on page 95) and read only the required columns from\ndisk. Hive, Spark DataFrames, and Impala also use vectorized execution (see \u201cMem\u2010\nory bandwidth and vectorized processing\u201d on page 99): iterating over data in a tight\ninner loop that is friendly to CPU caches, and avoiding function calls. Spark gener\u2010\nates JVM bytecode [ 79] and Impala uses LLVM to generate native code for these\ninner loops [ 41].\nBy incorporating declarative aspects in their high-level APIs, and having query opti\u2010\nmizers that can take advantage of them during execution, batch processing frame\u2010\nworks begin to look more like MPP databases (and can achieve comparable\nperformance). At the same time, by having the extensibility of being able to run arbi\u2010\ntrary code and read data in arbitrary formats, they retain their flexibility advantage.\nSpecialization for different domains\nWhile the extensibility of being able to run arbitrary code is useful, there are also\nmany common cases where standard processing patterns keep reoccurring, and so it\nis worth having reusable implementations of the common building blocks. Tradition\u2010\nally, MPP databases have served the needs of business intelligence analysts and busi\u2010\nness reporting, but that is just one among many domains in which batch processing\nis used.\nAnother domain of increasing importance is statistical and numerical algorithms,\nwhich are needed for machine learning applications such as classification and recom\u2010\nmendation systems. Reusable implementations are emerging: for example, Mahout\nimplements various algorithms for machine learning on top of MapReduce, Spark,\nand Flink, while MADlib implements similar functionality inside a relational MPP\ndatabase (Apache HAWQ) [ 54].\n428 | Chapter 10: Batch Processing\n",
    "summary": "The chunk discusses batch processing system design, focusing on the trade-offs between extensibility and optimization through declarative processing and leveraging MPP database-like features.",
    "sample_answer": "\u201cOkay, let\u2019s break this down. The core tension here is between the flexibility of running arbitrary code \u2013 a hallmark of MapReduce \u2013 and the performance gains achievable through declarative processing, similar to what you'd see in an MPP database. The text highlights that systems like Hive, Spark DataFrames, and Impala utilize vectorized execution, which is crucial for minimizing CPU overhead when executing simple filtering and mapping operations by directly utilizing column-oriented storage layouts and leveraging the benefits of memory bandwidth. This mirrors the optimization strategies found in traditional MPP databases. It\u2019s an important consideration when designing batch processing systems \u2013 you need to balance the ability to adapt to unforeseen data transformations with the efficiency of pre-optimized, declarative approaches.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a batch processing system for analyzing sensor data. The data arrives in various formats, and analysts need to perform complex statistical analysis alongside simple filtering. How would you architect this system, considering the trade-offs discussed in the chunk regarding declarative processing and extensibility? Specifically, how would you choose between using a framework like Spark and a more traditional approach like MapReduce?\u201d"
  },
  {
    "chunk": "Also useful are spatial algorithms such as k-nearest neighbors  [80], which searches for\nitems that are close to a given item in some multi-dimensional space\u2014a kind of simi\u2010\nlarity search. Approximate search is also important for genome analysis algorithms,\nwhich need to find strings that are similar but not identical [ 81].\nBatch processing engines are being used for distributed execution of algorithms from\nan increasingly wide range of domains. As batch processing systems gain built-in\nfunctionality and high-level declarative operators, and as MPP databases become\nmore programmable and flexible, the two are beginning to look more alike: in the\nend, they are all just systems for storing and processing data. \nSummary\nIn this chapter we explored the topic of batch processing. We started by looking at\nUnix tools such as awk, grep , and sort , and we saw how the design philosophy of\nthose tools is carried forward into MapReduce and more recent dataflow engines.\nSome of those design principles are that inputs are immutable, outputs are intended\nto become the input to another (as yet unknown) program, and complex problems\nare solved by composing small tools that \u201cdo one thing well.\u201d\nIn the Unix world, the uniform interface that allows one program to be composed\nwith another is files and pipes; in MapReduce, that interface is a distributed filesys\u2010\ntem. We saw that dataflow engines add their own pipe-like data transport mecha\u2010\nnisms to avoid materializing intermediate state to the distributed filesystem, but the\ninitial input and final output of a job is still usually HDFS.\nThe two main problems that distributed batch processing frameworks need to solve\nare:\nPartitioning\nIn MapReduce, mappers are partitioned according to input file blocks. The out\u2010\nput of mappers is repartitioned, sorted, and merged into a configurable number\nof reducer partitions. The purpose of this process is to bring all the related data\u2014\ne.g., all the records with the same key\u2014together in the same place.\nPost-MapReduce dataflow engines try to avoid sorting unless it is required, but\nthey otherwise take a broadly similar approach to partitioning.\nFault tolerance\nMapReduce frequently writes to disk, which makes it easy to recover from an\nindividual failed task without restarting the entire job but slows down execution\nin the failure-free case. Dataflow engines perform less materialization of inter\u2010\nmediate state and keep more in memory, which means that they need to recom\u2010\npute more data if a node fails. Deterministic operators reduce the amount of data\nthat needs to be recomputed.\nSummary | 429\n",
    "summary": "This chunk discusses batch processing principles, including partitioning, fault tolerance, and the evolution of dataflow engines towards resembling traditional batch processing tools.",
    "sample_answer": "\u201cOkay, so we\u2019re talking about designing a system for processing large batches of data, likely genomic data as implied by the reference to k-nearest neighbors. A key consideration here is partitioning \u2013 in MapReduce, the input data is divided into chunks and assigned to mappers based on the input file blocks, ensuring related data is processed together.  Furthermore, the reliance on disk writes for fault tolerance, while simplifying recovery from individual task failures, introduces a performance bottleneck compared to in-memory approaches; dataflow engines are trying to mitigate this by minimizing intermediate state materialization, but they still need deterministic operators to avoid recomputation in case of node failures.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re building a system to analyze genomic sequences. We\u2019ve chosen a MapReduce-like architecture.  Explain how partitioning would be handled, and discuss the trade-offs between writing intermediate results to disk versus keeping them in memory for fault tolerance.\u201d"
  },
  {
    "chunk": "We discussed several join algorithms for MapReduce, most of which are also inter\u2010\nnally used in MPP databases and dataflow engines. They also provide a good illustra\u2010\ntion of how partitioned algorithms work:\nSort-merge joins\nEach of the inputs being joined goes through a mapper that extracts the join key.\nBy partitioning, sorting, and merging, all the records with the same key end up\ngoing to the same call of the reducer. This function can then output the joined\nrecords.\nBroadcast hash joins\nOne of the two join inputs is small, so it is not partitioned and it can be entirely\nloaded into a hash table. Thus, you can start a mapper for each partition of the\nlarge join input, load the hash table for the small input into each mapper, and\nthen scan over the large input one record at a time, querying the hash table for\neach record.\nPartitioned hash joins\nIf the two join inputs are partitioned in the same way (using the same key, same\nhash function, and same number of partitions), then the hash table approach can\nbe used independently for each partition.\nDistributed batch processing engines have a deliberately restricted programming\nmodel: callback functions (such as mappers and reducers) are assumed to be stateless\nand to have no externally visible side effects besides their designated output. This\nrestriction allows the framework to hide some of the hard distributed systems prob\u2010\nlems behind its abstraction: in the face of crashes and network issues, tasks can be\nretried safely, and the output from any failed tasks is discarded. If several tasks for a\npartition succeed, only one of them actually makes its output visible.\nThanks to the framework, your code in a batch processing job does not need to worry\nabout implementing fault-tolerance mechanisms: the framework can guarantee that\nthe final output of a job is the same as if no faults had occurred, even though in real\u2010\nity various tasks perhaps had to be retried. These reliable semantics are much stron\u2010\nger than what you usually have in online services that handle user requests and that\nwrite to databases as a side effect of processing a request.\nThe distinguishing feature of a batch processing job is that it reads some input data\nand produces some output data, without modifying the input\u2014in other words, the\noutput is derived from the input. Crucially, the input data is bounded : it has a known,\nfixed size (for example, it consists of a set of log files at some point in time, or a snap\u2010\nshot of a database\u2019s contents). Because it is bounded, a job knows when it has finished\nreading the entire input, and so a job eventually completes when it is done.\nIn the next chapter, we will turn to stream processing, in which the input is unboun\u2010\nded\u2014that is, you still have a job, but its inputs are never-ending streams of data. In\n430 | Chapter 10: Batch Processing\n",
    "summary": "The text discusses join algorithms in MapReduce, emphasizing batch processing\u2019s bounded input and fault tolerance, contrasting it with stream processing.",
    "sample_answer": "\u201cOkay, let\u2019s talk about building a reliable batch processing system. The core principle here is the bounded input, as we see with the log files or database snapshots\u2014knowing when the job is complete is fundamental. We can leverage algorithms like sort-merge joins or broadcast hash joins, understanding that the MapReduce framework handles the retries and fault tolerance behind the scenes, allowing us to focus solely on the data transformations, which is a crucial difference from online services. The framework's stateless callbacks and guaranteed output semantics, even in the face of task failures, provide a much stronger reliability guarantee than you\u2019d typically find in an online system.\u201d",
    "potential_interview_question": "\u201cDescribe the key differences in design considerations between building a batch processing job like those implemented in MapReduce versus building a system designed to handle real-time user requests. How would the choice of join algorithm (sort-merge vs. broadcast hash) impact your design decisions in each scenario, and why?\u201d"
  },
  {
    "chunk": "this case, a job is never complete, because at any time there may still be more work\ncoming in. We shall see that stream and batch processing are similar in some\nrespects, but the assumption of unbounded streams also changes a lot about how we\nbuild systems. \nReferences\n[1] Jeffrey Dean and Sanjay Ghemawat: \u201c MapReduce: Simplified Data Processing on\nLarge Clusters ,\u201d at 6th USENIX Symposium on Operating System Design and Imple\u2010\nmentation  (OSDI), December 2004.\n[2] Joel Spolsky: \u201c The Perils of JavaSchools ,\u201d joelonsoftware.com , December 25, 2005.\n[3] Shivnath Babu and Herodotos Herodotou: \u201c Massively Parallel Databases and\nMapReduce Systems ,\u201d Foundations and Trends in Databases , volume 5, number 1,\npages 1\u2013104, November 2013. doi:10.1561/1900000036\n[4] David J. DeWitt and Michael Stonebraker: \u201c MapReduce: A Major Step Back\u2010\nwards ,\u201d originally published at databasecolumn.vertica.com , January 17, 2008.\n[5] Henry Robinson: \u201c The Elephant Was a Trojan Horse: On the Death of Map-\nReduce at Google ,\u201d the-paper-trail.org , June 25, 2014.\n[6] \u201cThe Hollerith Machine ,\u201d United States Census Bureau, census.gov .\n[7] \u201cIBM 82, 83, and 84 Sorters Reference Manual ,\u201d Edition A24-1034-1, Interna\u2010\ntional Business Machines Corporation, July 1962.\n[8] Adam Drake: \u201c Command-Line Tools Can Be 235x Faster than Your Hadoop\nCluster ,\u201d aadrake.com , January 25, 2014.\n[9] \u201cGNU Coreutils 8.23 Documentation ,\u201d Free Software Foundation, Inc., 2014.\n[10] Martin Kleppmann: \u201c Kafka, Samza, and the Unix Philosophy of Distributed\nData ,\u201d martin.kleppmann.com , August 5, 2015.\n[11] Doug McIlroy: Internal Bell Labs memo , October 1964. Cited in: Dennis M.\nRichie: \u201c Advice from Doug McIlroy ,\u201d cm.bell-labs.com .\n[12] M. D. McIlroy, E. N. Pinson, and B. A. Tague: \u201c UNIX Time-Sharing System:\nForeword ,\u201d The Bell System Technical Journal , volume 57, number 6, pages 1899\u2013\n1904, July 1978.\n[13] Eric S. Raymond: The Art of UNIX Programming . Addison-Wesley, 2003. ISBN:\n978-0-13-142901-7\n[14] Ronald Duncan: \u201c Text File Formats \u2013 ASCII Delimited Text \u2013 Not CSV or TAB\nDelimited Text ,\u201d ronaldduncan.wordpress.com , October 31, 2009.\n[15] Alan Kay: \u201c Is \u2018Software Engineering\u2019 an Oxymoron? ,\u201d tinlizzie.org .\nSummary | 431\n",
    "summary": "The text highlights the challenges of unbounded streams and contrasts them with batch processing, referencing concepts like MapReduce and Unix time-sharing systems.",
    "sample_answer": "\u201cThis excerpt underscores the fundamental shift in system design when dealing with unbounded data streams versus traditional batch processing. The assumption of unbounded streams, as exemplified by the early MapReduce systems (referenced by Dean & Ghemawat), necessitates a different architectural approach compared to approaches like batch processing, where data is finite. A key consideration is the coordination and scaling challenges inherent in a system handling continuous, potentially infinite streams \u2013 something that earlier systems like the IBM 82/83 sorters (referenced in the document) weren\u2019t designed to handle, highlighting the evolution of data processing paradigms.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where a system designed for batch processing would become unsuitable for handling a continuously streaming data source. What architectural considerations would you prioritize to address this change, and what technologies or patterns might you leverage?\u201d"
  },
  {
    "chunk": "[16] Martin Fowler: \u201c InversionOfControl ,\u201d martinfowler.com , June 26, 2005.\n[17] Daniel J. Bernstein: \u201c Two File Descriptors for Sockets ,\u201d cr.yp.to .\n[18] Rob Pike and Dennis M. Ritchie: \u201c The Styx Architecture for Distributed Sys\u2010\ntems ,\u201d Bell Labs Technical Journal , volume 4, number 2, pages 146\u2013152, April 1999.\n[19] Sanjay Ghemawat, Howard Gobioff, and Shun-Tak Leung: \u201c The Google File Sys\u2010\ntem,\u201d at 19th ACM Symposium on Operating Systems Principles  (SOSP), October\n2003. doi:10.1145/945445.945450\n[20] Michael Ovsiannikov, Silvius Rus, Damian Reeves, et al.: \u201c The Quantcast File\nSystem ,\u201d Proceedings of the VLDB Endowment , volume 6, number 11, pages 1092\u2013\n1101, August 2013. doi:10.14778/2536222.2536234\n[21] \u201cOpenStack Swift 2.6.1 Developer Documentation ,\u201d OpenStack Foundation,\ndocs.openstack.org , March 2016.\n[22] Zhe Zhang, Andrew Wang, Kai Zheng, et al.: \u201c Introduction to HDFS Erasure\nCoding in Apache Hadoop ,\u201d blog.cloudera.com , September 23, 2015.\n[23] Peter Cnudde: \u201c Hadoop Turns 10 ,\u201d yahoohadoop.tumblr.com , February 5, 2016.\n[24] Eric Baldeschwieler: \u201c Thinking About the HDFS vs. Other Storage Technolo\u2010\ngies,\u201d hortonworks.com , July 25, 2012.\n[25] Brendan Gregg: \u201c Manta: Unix Meets Map Reduce ,\u201d dtrace.org , June 25, 2013.\n[26] Tom White: Hadoop: The Definitive Guide , 4th edition. O\u2019Reilly Media, 2015.\nISBN: 978-1-491-90163-2\n[27] Jim N. Gray: \u201c Distributed Computing Economics ,\u201d Microsoft Research Tech\nReport MSR-TR-2003-24, March 2003.\n[28] M\u00e1rton Trencs\u00e9ni: \u201c Luigi vs Airflow vs Pinball ,\u201d bytepawn.com , February 6,\n2016.\n[29] Roshan Sumbaly, Jay Kreps, and Sam Shah: \u201c The \u2018Big Data\u2019 Ecosystem at\nLinkedIn ,\u201d at ACM International Conference on Management of Data  (SIGMOD),\nJuly 2013. doi:10.1145/2463676.2463707\n[30] Alan F. Gates, Olga Natkovich, Shubham Chopra, et al.: \u201c Building a High-Level\nDataflow System on Top of Map-Reduce: The Pig Experience ,\u201d at 35th International\nConference on Very Large Data Bases  (VLDB), August 2009.\n[31] Ashish Thusoo, Joydeep Sen Sarma, Namit Jain, et al.: \u201c Hive \u2013 A Petabyte Scale\nData Warehouse Using Hadoop ,\u201d at 26th IEEE International Conference on Data\nEngineering  (ICDE), March 2010. doi:10.1109/ICDE.2010.5447738\n[32] \u201cCascading 3.0 User Guide ,\u201d Concurrent, Inc., docs.cascading.org , January 2016.\n432 | Chapter 10: Batch Processing\n",
    "summary": "The text references various distributed systems technologies and architectural approaches, including HDFS, Hive, MapReduce, and distributed data warehousing, alongside considerations for cost and performance trade-offs.",
    "sample_answer": "\u201cThis collection of resources highlights several key principles in building large-scale data processing systems. The inclusion of names like HDFS and Hive indicates a focus on fault-tolerant storage and querying techniques, likely considering the complexities of maintaining petabyte-scale datasets \u2013 a common concern when designing systems like LinkedIn\u2019s.  Furthermore, the references to MapReduce and the Pig experience demonstrate the evolution of batch processing paradigms from raw MapReduce to higher-level abstractions, reflecting an understanding of the trade-offs between performance and developer productivity.\u201d",
    "potential_interview_question": "\u201cDescribe the evolution of batch processing technologies, from early approaches like MapReduce to more modern frameworks. What architectural trade-offs are inherent in these different approaches, and which would you choose for a scenario involving daily log aggregation and analysis?\u201d"
  },
  {
    "chunk": "[33] \u201cApache Crunch User Guide ,\u201d Apache Software Foundation, crunch.apache.org .\n[34] Craig Chambers, Ashish Raniwala, Frances Perry, et al.: \u201c FlumeJava: Easy, Effi\u2010\ncient Data-Parallel Pipelines ,\u201d at 31st ACM SIGPLAN Conference on Programming\nLanguage Design and Implementation  (PLDI), June 2010. doi:\n10.1145/1806596.1806638\n[35] Jay Kreps: \u201c Why Local State is a Fundamental Primitive in Stream Processing ,\u201d\noreilly.com , July 31, 2014.\n[36] Martin Kleppmann: \u201c Rethinking Caching in Web Apps ,\u201d martin.klepp\u2010\nmann.com , October 1, 2012.\n[37] Mark Grover, Ted Malaska, Jonathan Seidman, and Gwen Shapira: Hadoop\nApplication Architectures . O\u2019Reilly Media, 2015. ISBN: 978-1-491-90004-8\n[38] Philippe Ajoux, Nathan Bronson, Sanjeev Kumar, et al.: \u201c Challenges to Adopting\nStronger Consistency at Scale ,\u201d at 15th USENIX Workshop on Hot Topics in Operat\u2010\ning Systems  (HotOS), May 2015.\n[39] Sriranjan Manjunath: \u201c Skewed Join ,\u201d wiki.apache.org , 2009.\n[40] David J. DeWitt, Jeffrey F. Naughton, Donovan A. Schneider, and S. Seshadri:\n\u201cPractical Skew Handling in Parallel Joins ,\u201d at 18th International Conference on Very\nLarge Data Bases  (VLDB), August 1992.\n[41] Marcel Kornacker, Alexander Behm, Victor Bittorf, et al.: \u201c Impala: A Modern,\nOpen-Source SQL Engine for Hadoop ,\u201d at 7th Biennial Conference on Innovative\nData Systems Research  (CIDR), January 2015.\n[42] Matthieu Monsch: \u201c Open-Sourcing PalDB, a Lightweight Companion for Stor\u2010\ning Side Data ,\u201d engineering.linkedin.com , October 26, 2015.\n[43] Daniel Peng and Frank Dabek: \u201c Large-Scale Incremental Processing Using Dis\u2010\ntributed Transactions and Notifications ,\u201d at 9th USENIX conference on Operating Sys\u2010\ntems Design and Implementation  (OSDI), October 2010.\n[44] \u201c\u201cCloudera Search User Guide,\u201d  Cloudera, Inc., September 2015.\n[45] Lili Wu, Sam Shah, Sean Choi, et al.: \u201c The Browsemaps: Collaborative Filtering\nat LinkedIn ,\u201d at 6th Workshop on Recommender Systems and the Social Web\n(RSWeb), October 2014.\n[46] Roshan Sumbaly, Jay Kreps, Lei Gao, et al.: \u201c Serving Large-Scale Batch Compu\u2010\nted Data with Project Voldemort ,\u201d at 10th USENIX Conference on File and Storage\nTechnologies  (FAST), February 2012.\n[47] Varun Sharma: \u201c Open-Sourcing Terrapin: A Serving System for Batch Gener\u2010\nated Data ,\u201d engineering.pinterest.com , September 14, 2015.\nSummary | 433\n",
    "summary": "The text discusses various data processing technologies and techniques, including distributed transaction processing, batch processing, serving systems, and consistency models at scale. It references tools like Voldemort, PalDB, Impala, and Cloudera Search, alongside core concepts like skew handling and strong consistency.",
    "sample_answer": "\u201cOkay, this chunk highlights several key areas for designing robust data systems. Looking at the references, particularly Voldemort and PalDB, we're seeing a shift towards serving systems designed for high-throughput batch data processing. The discussion around skew handling\u2014as seen in the references to the Skewed Join wiki page and the VLDB paper\u2014is crucial because skewed joins represent a significant performance bottleneck in parallel processing environments.  Furthermore, the inclusion of tools like Cloudera Search and approaches to batch computation like Voldemort demonstrate the evolution of systems to efficiently serve pre-computed results.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you might encounter a skew join in a data processing pipeline. What strategies would you employ to mitigate its impact on performance, and what system architectures (like serving systems) might you consider to address this challenge?\u201d"
  },
  {
    "chunk": "[48] Nathan Marz: \u201c ElephantDB ,\u201d slideshare.net , May 30, 2011.\n[49] Jean-Daniel (JD) Cryans: \u201c How-to: Use HBase Bulk Loading, and Why ,\u201d\nblog.cloudera.com , September 27, 2013.\n[50] Nathan Marz: \u201c How to Beat the CAP Theorem ,\u201d nathanmarz.com , October 13,\n2011.\n[51] Molly Bartlett Dishman and Martin Fowler: \u201c Agile Architecture ,\u201d at O\u2019Reilly\nSoftware Architecture Conference , March 2015.\n[52] David J. DeWitt and Jim N. Gray: \u201c Parallel Database Systems: The Future of\nHigh Performance Database Systems ,\u201d Communications of the ACM , volume 35,\nnumber 6, pages 85\u201398, June 1992. doi:10.1145/129888.129894\n[53] Jay Kreps: \u201c But the multi-tenancy thing is actually really really hard ,\u201d tweet\u2010\nstorm, twitter.com , October 31, 2014.\n[54] Jeffrey Cohen, Brian Dolan, Mark Dunlap, et al.: \u201c MAD Skills: New Analysis\nPractices for Big Data ,\u201d Proceedings of the VLDB Endowment , volume 2, number 2,\npages 1481\u20131492, August 2009. doi:10.14778/1687553.1687576\n[55] Ignacio Terrizzano, Peter Schwarz, Mary Roth, and John E. Colino: \u201c Data Wran\u2010\ngling: The Challenging Journey from the Wild to the Lake ,\u201d at 7th Biennial Confer\u2010\nence on Innovative Data Systems Research  (CIDR), January 2015.\n[56] Paige Roberts: \u201c To Schema on Read or to Schema on Write, That Is the Hadoop\nData Lake Question ,\u201d adaptivesystemsinc.com , July 2, 2015.\n[57] Bobby Johnson and Joseph Adler: \u201c The Sushi Principle: Raw Data Is Better ,\u201d at\nStrata+Hadoop World , February 2015.\n[58] Vinod Kumar Vavilapalli, Arun C. Murthy, Chris Douglas, et al.: \u201c Apache\nHadoop YARN: Yet Another Resource Negotiator ,\u201d at 4th ACM Symposium on\nCloud Computing  (SoCC), October 2013. doi:10.1145/2523616.2523633\n[59] Abhishek Verma, Luis Pedrosa, Madhukar Korupolu, et al.: \u201c Large-Scale Cluster\nManagement at Google with Borg ,\u201d at 10th European Conference on Computer Sys\u2010\ntems  (EuroSys), April 2015. doi:10.1145/2741948.2741964\n[60] Malte Schwarzkopf: \u201c The Evolution of Cluster Scheduler Architectures ,\u201d firma\u2010\nment.io , March 9, 2016.\n[61] Matei Zaharia, Mosharaf Chowdhury, Tathagata Das, et al.: \u201c Resilient Dis\u2010\ntributed Datasets: A Fault-Tolerant Abstraction for In-Memory Cluster Computing ,\u201d\nat 9th USENIX Symposium on Networked Systems Design and Implementation\n(NSDI), April 2012.\n[62] Holden Karau, Andy Konwinski, Patrick Wendell, and Matei Zaharia: Learning\nSpark . O\u2019Reilly Media, 2015. ISBN: 978-1-449-35904-1\n434 | Chapter 10: Batch Processing\n",
    "summary": "The text discusses various aspects of big data systems, including fault tolerance, data lake architecture, multi-tenancy challenges, and distributed cluster management.",
    "sample_answer": "\u201cOkay, this chunk highlights several critical design considerations for big data systems. The discussion around HBase bulk loading and the CAP theorem immediately brings to mind the need for robust fault tolerance \u2013 something that\u2019s directly addressed by concepts like replication and, potentially, ZooKeeper or Raft for consensus. Moreover, the reference to Spark and \u2018Learning Spark\u2019 suggests the importance of choosing the right abstraction layer for distributed processing, acknowledging that simpler abstractions can be more performant and easier to manage. The inclusion of YARN and Borg demonstrates the evolution of cluster scheduling and resource management, reflecting the increasing complexity of managing large-scale distributed deployments.\"",
    "potential_interview_question": "\u201cDescribe a scenario where you would choose \u2018Schema on Read\u2019 versus \u2018Schema on Write\u2019 for a data lake. What trade-offs are you considering, and how would you handle potential schema drift?\u201d"
  },
  {
    "chunk": "[63] Bikas Saha and Hitesh Shah: \u201c Apache Tez: Accelerating Hadoop Query Process\u2010\ning,\u201d at Hadoop Summit , June 2014.\n[64] Bikas Saha, Hitesh Shah, Siddharth Seth, et al.: \u201c Apache Tez: A Unifying Frame\u2010\nwork for Modeling and Building Data Processing Applications ,\u201d at ACM Interna\u2010\ntional Conference on Management of Data  (SIGMOD), June 2015. doi:\n10.1145/2723372.2742790\n[65] Kostas Tzoumas: \u201c Apache Flink: API, Runtime, and Project Roadmap ,\u201d slide\u2010\nshare.net , January 14, 2015.\n[66] Alexander Alexandrov, Rico Bergmann, Stephan Ewen, et al.: \u201c The Stratosphere\nPlatform for Big Data Analytics ,\u201d The VLDB Journal , volume 23, number 6, pages\n939\u2013964, May 2014. doi:10.1007/s00778-014-0357-y\n[67] Michael Isard, Mihai Budiu, Yuan Yu, et al.: \u201c Dryad: Distributed Data-Parallel\nPrograms from Sequential Building Blocks ,\u201d at European Conference on Computer\nSystems  (EuroSys), March 2007. doi:10.1145/1272996.1273005\n[68] Daniel Warneke and Odej Kao: \u201c Nephele: Efficient Parallel Data Processing in\nthe Cloud ,\u201d at 2nd Workshop on Many-Task Computing on Grids and Supercomputers\n(MTAGS), November 2009. doi:10.1145/1646468.1646476\n[69] Lawrence Page, Sergey Brin, Rajeev Motwani, and Terry Winograd: \u201c The\nPageRank  Citation Ranking: Bringing Order to the Web ,\u201d Stanford InfoLab Techni\u2010\ncal Report 422, 1999.\n[70] Leslie G. Valiant: \u201c A Bridging Model for Parallel Computation ,\u201d Communica\u2010\ntions of the ACM , volume 33, number 8, pages 103\u2013111, August 1990. doi:\n10.1145/79173.79181\n[71] Stephan Ewen, Kostas Tzoumas, Moritz Kaufmann, and Volker Markl: \u201c Spin\u2010\nning Fast Iterative Data Flows ,\u201d Proceedings of the VLDB Endowment , volume 5,\nnumber 11, pages 1268-1279, July 2012. doi:10.14778/2350229.2350245\n[72] Grzegorz Malewicz, Matthew H. Austern, Aart J. C. Bik, et al.: \u201c Pregel: A System\nfor Large-Scale Graph Processing ,\u201d at ACM International Conference on Management\nof Data  (SIGMOD), June 2010. doi:10.1145/1807167.1807184\n[73] Frank McSherry, Michael Isard, and Derek G. Murray: \u201c Scalability! But at What\nCOST? ,\u201d at 15th USENIX Workshop on Hot Topics in Operating Systems  (HotOS),\nMay 2015.\n[74] Ionel Gog, Malte Schwarzkopf, Natacha Crooks, et al.: \u201c Musketeer: All for One,\nOne for All in Data Processing Systems ,\u201d at 10th European Conference on Computer\nSystems  (EuroSys), April 2015. doi:10.1145/2741948.2741968\nSummary | 435\n",
    "summary": "The chunk discusses various big data processing frameworks (Tez, Flink, Pregel, Musketeer) and related research, focusing on scalability and parallel processing.",
    "sample_answer": "\u201cThis collection of papers highlights the evolution of big data processing systems, with a strong emphasis on parallel execution and achieving scalability. Apache Tez, as presented in the 2015 ACM SIGMOD paper, aimed to accelerate Hadoop query processing by providing a unified framework for modeling data processing applications\u2014a critical consideration for systems like Hadoop. Further, frameworks like Pregel, showcased in the 2010 SIGMOD paper, demonstrate the focus on distributed graph processing, a key factor in many modern data architectures.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you might choose between Apache Tez and Apache Flink for a data processing task. What are the key trade-offs you\u2019d consider in terms of data processing paradigms and fault tolerance?\u201d"
  },
  {
    "chunk": "[75] Aapo Kyrola, Guy Blelloch, and Carlos Guestrin: \u201c GraphChi: Large-Scale Graph\nComputation on Just a PC ,\u201d at 10th USENIX Symposium on Operating Systems\nDesign and Implementation  (OSDI), October 2012.\n[76] Andrew Lenharth, Donald Nguyen, and Keshav Pingali: \u201c Parallel Graph Analyt\u2010\nics,\u201d Communications of the ACM , volume 59, number 5, pages 78\u201387, May 2016. doi:\n10.1145/2901919\n[77] Fabian H\u00fcske: \u201c Peeking into Apache Flink\u2019s Engine Room ,\u201d flink.apache.org ,\nMarch 13, 2015.\n[78] Mostafa Mokhtar: \u201c Hive 0.14 Cost Based Optimizer (CBO) Technical Over\u2010\nview ,\u201d hortonworks.com , March 2, 2015.\n[79] Michael Armbrust, Reynold S Xin, Cheng Lian, et al.: \u201c Spark SQL: Relational\nData Processing in Spark ,\u201d at ACM International Conference on Management of Data\n(SIGMOD), June 2015. doi:10.1145/2723372.2742797\n[80] Daniel Blazevski: \u201c Planting Quadtrees for Apache Flink ,\u201d insightdataengineer\u2010\ning.com , March 25, 2016.\n[81] Tom White: \u201c Genome Analysis Toolkit: Now Using Apache Spark for Data Pro\u2010\ncessing ,\u201d blog.cloudera.com , April 6, 2016.\n436 | Chapter 10: Batch Processing\n",
    "summary": "The chunk discusses graph analytics, batch processing with Spark and Hive, and streaming processing with Apache Flink, highlighting the importance of optimization and alternative processing paradigms.",
    "sample_answer": "\u201cOkay, this section outlines several approaches to large-scale data processing. The GraphChi paper demonstrates leveraging a single PC for graph computation, suggesting a potential strategy for handling complex relationships within a system. Similarly, the Hive CBO and Spark SQL examples demonstrate the need for optimization within batch processing pipelines \u2013 a CBO aims to intelligently choose the most efficient execution plan, while Spark SQL allows for relational query processing within a distributed environment. Furthermore, the mention of planting quadtrees in Flink suggests employing spatial indexing techniques for performance gains within a stream processing context.\u201d",
    "potential_interview_question": "\u201cImagine you're designing a system to analyze social network connections at scale. Briefly explain how you might address the challenges of computational complexity while considering options like GraphChi or leveraging a tool like Spark SQL for query processing \u2013 what considerations would you prioritize, and why?\u201d"
  },
  {
    "chunk": "slices entirely and simply processing every event as it happens. That is the idea\nbehind stream processing .\nIn general, a \u201cstream\u201d refers to data that is incrementally made available over time.\nThe concept appears in many places: in the stdin  and stdout  of Unix, programming\nlanguages (lazy lists) [ 2], filesystem APIs (such as Java\u2019s FileInputStream ), TCP con\u2010\nnections, delivering audio and video over the internet, and so on.\nIn this chapter we will look at event streams  as a data management mechanism: the\nunbounded, incrementally processed counterpart to the batch data we saw in the\nlast chapter. We will first discuss how streams are represented, stored, and transmit\u2010\nted over a network. In \u201cDatabases and Streams\u201d on page 451 we will investigate\nthe relationship between streams and databases. And finally, in \u201cProcessing Streams\u201d\non page 464 we will explore approaches and tools for processing those streams\ncontinually, and ways that they can be used to build applications.\nTransmitting Event Streams\nIn the batch processing world, the inputs and outputs of a job are files (perhaps on a\ndistributed filesystem). What does the streaming equivalent look like?\nWhen the input is a file (a sequence of bytes), the first processing step is usually to\nparse it into a sequence of records. In a stream processing context, a record is more\ncommonly known as an event , but it is essentially the same thing: a small, self-\ncontained, immutable object containing the details of something that happened at\nsome point in time. An event usually contains a timestamp indicating when it hap\u2010\npened according to a time-of-day clock (see \u201cMonotonic Versus Time-of-Day\nClocks\u201d on page 288 ).\nFor example, the thing that happened might be an action that a user took, such as\nviewing a page or making a purchase. It might also originate from a machine, such as\na periodic measurement from a temperature sensor, or a CPU utilization metric. In\nthe example of \u201cBatch Processing with Unix Tools\u201d  on page 391, each line of the web\nserver log is an event.\nAn event may be encoded as a text string, or JSON, or perhaps in some binary form,\nas discussed in Chapter 4 . This encoding allows you to store an event, for example by\nappending it to a file, inserting it into a relational table, or writing it to a document\ndatabase. It also allows you to send the event over the network to another node in\norder to process it.\nIn batch processing, a file is written once and then potentially read by multiple jobs.\nAnalogously, in streaming terminology, an event is generated once by a producer\n(also known as a publisher  or sender ), and then potentially processed by multiple con\u2010\nsumers  (subscribers  or recipients ) [3]. In a filesystem, a filename identifies a set of\n440 | Chapter 11: Stream Processing\n",
    "summary": "The text discusses stream processing as an unbounded, incrementally processed data management mechanism, contrasting it with batch processing and highlighting the concepts of event producers and consumers.",
    "sample_answer": "\u201cOkay, so the core shift here is from batch processing\u2019s reliance on static files to stream processing\u2019s model of continuous, real-time event ingestion. This means we\u2019re dealing with a producer-consumer architecture, where events are generated by a source (like a website click) and then consumed by various downstream processes \u2013 think of the events as potentially flowing through multiple consumers based on specific criteria or transformations.  This highlights the importance of designing for scale and potentially using techniques like sharding to handle a large number of concurrent producers and consumers, mirroring the principles of a distributed system where we're managing a potentially unbounded stream of data.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re building a real-time fraud detection system using event streams.  Describe the architectural components involved, referencing concepts like producers, consumers, and potentially discussing how you might handle a large volume of events.  What considerations would you make regarding scalability and fault tolerance in this scenario?\u201d"
  },
  {
    "chunk": "related records; in a streaming system, related events are usually grouped together\ninto a topic  or stream .\nIn principle, a file or database is sufficient to connect producers and consumers: a\nproducer writes every event that it generates to the datastore, and each consumer\nperiodically polls the datastore to check for events that have appeared since it last ran.\nThis is essentially what a batch process does when it processes a day\u2019s worth of data at\nthe end of every day.\nHowever, when moving toward continual processing with low delays, polling\nbecomes expensive if the datastore is not designed for this kind of usage. The more\noften you poll, the lower the percentage of requests that return new events, and thus\nthe higher the overheads become. Instead, it is better for consumers to be notified\nwhen new events appear.\nDatabases have traditionally not supported this kind of notification mechanism very\nwell: relational databases commonly have triggers , which can react to a change (e.g., a\nrow being inserted into a table), but they are very limited in what they can do and\nhave been somewhat of an afterthought in database design [ 4, 5]. Instead, specialized\ntools have been developed for the purpose of delivering event notifications.\nMessaging Systems\nA common approach for notifying consumers about new events is to use a messaging\nsystem : a producer sends a message containing the event, which is then pushed to\nconsumers. We touched on these systems previously in \u201cMessage-Passing Dataflow\u201d\non page 136 , but we will now go into more detail.\nA direct communication channel like a Unix pipe or TCP connection between pro\u2010\nducer and consumer would be a simple way of implementing a messaging system.\nHowever, most messaging systems expand on this basic model. In particular, Unix\npipes and TCP connect exactly one sender with one recipient, whereas a messaging\nsystem allows multiple producer nodes to send messages to the same topic and allows\nmultiple consumer nodes to receive messages in a topic.\nWithin this publish/subscribe  model, different systems take a wide range of\napproaches, and there is no one right answer for all purposes. To differentiate the\nsystems, it is particularly helpful to ask the following two questions:\n1.What happens if the producers send messages faster than the consumers can pro\u2010\ncess them?  Broadly speaking, there are three options: the system can drop mes\u2010\nsages, buffer messages in a queue, or apply backpressure  (also known as flow\ncontrol ; i.e., blocking the producer from sending more messages). For example,\nUnix pipes and TCP use backpressure: they have a small fixed-size buffer, and if\nTransmitting Event Streams | 441\n",
    "summary": "The text discusses event streaming architectures, focusing on producer-consumer relationships and strategies for handling asynchronous event delivery, particularly through messaging systems and backpressure mechanisms.",
    "sample_answer": "\u201cOkay, this chunk highlights the core challenges of building event streaming systems. The producer-consumer model, particularly when moving from batch processing to continual processing, necessitates a more sophisticated approach than simple polling. We see this reflected in the discussion of messaging systems and the importance of backpressure \u2013 the system must prevent the producer from overwhelming the consumers, likely achieved through mechanisms like a fixed-size buffer, which is a classic example of flow control, mirroring the constraints of a Unix pipe.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say you\u2019re designing a system to ingest sensor data from millions of devices. How would you architect the producer-consumer relationships to ensure low latency and prevent data loss, and what strategies would you employ for managing potential backpressure scenarios?\u201d"
  },
  {
    "chunk": "it fills up, the sender is blocked until the recipient takes data out of the buffer (see\n\u201cNetwork congestion and queueing\u201d on page 282 ).\nIf messages are buffered in a queue, it is important to understand what happens\nas that queue grows. Does the system crash if the queue no longer fits in mem\u2010\nory, or does it write messages to disk? If so, how does the disk access affect the\nperformance of the messaging system [ 6]?\n2.What happens if nodes crash or temporarily go offline\u2014are any messages lost?  As\nwith databases, durability may require some combination of writing to disk\nand/or replication (see the sidebar \u201cReplication and Durability\u201d on page 227),\nwhich has a cost. If you can afford to sometimes lose messages, you can probably\nget higher throughput and lower latency on the same hardware.\nWhether message loss is acceptable depends very much on the application. For exam\u2010\nple, with sensor readings and metrics that are transmitted periodically, an occasional\nmissing data point is perhaps not important, since an updated value will be sent a\nshort time later anyway. However, beware that if a large number of messages are\ndropped, it may not be immediately apparent that the metrics are incorrect [ 7]. If you\nare counting events, it is more important that they are delivered reliably, since every\nlost message means incorrect counters.\nA nice property of the batch processing systems we explored in Chapter 10  is that\nthey provide a strong reliability guarantee: failed tasks are automatically retried, and\npartial output from failed tasks is automatically discarded. This means the output is\nthe same as if no failures had occurred, which helps simplify the programming\nmodel. Later in this chapter we will examine how we can provide similar guarantees\nin a streaming context.\nDirect messaging from producers to consumers\nA number of messaging systems use direct network communication between produc\u2010\ners and consumers without going via intermediary nodes:\n\u2022UDP multicast is widely used in the financial industry for streams such as stock\nmarket feeds, where low latency is important [ 8]. Although UDP itself is unrelia\u2010\nble, application-level protocols can recover lost packets (the producer must\nremember packets it has sent so that it can retransmit them on demand).\n\u2022Brokerless messaging libraries such as ZeroMQ [ 9] and nanomsg take a similar\napproach, implementing publish/subscribe messaging over TCP or IP multicast.\n\u2022StatsD [ 10] and Brubeck [ 7] use unreliable UDP messaging for collecting metrics\nfrom all machines on the network and monitoring them. (In the StatsD protocol,\ncounter metrics are only correct if all messages are received; using UDP makes\nthe metrics at best approximate [ 11]. See also \u201cTCP Versus UDP\u201d on page 283 .)\n442 | Chapter 11: Stream Processing\n",
    "summary": "The chunk discusses trade-offs between reliability and performance in streaming systems, focusing on techniques like UDP messaging and the implications of message loss.",
    "sample_answer": "\u201cOkay, let\u2019s analyze this section. The core challenge here is balancing the need for reliable stream processing with the performance constraints of a system like UDP messaging. The chunk highlights how using UDP, while offering low latency, inherently introduces unreliability \u2013 we see this reflected in the discussion of application-level protocol recovery for lost packets, as well as the caveat regarding StatsD where counters are only accurate if all messages are received. This touches on the CAP theorem \u2013 specifically, the tradeoff between consistency and availability when dealing with a network-based messaging system like UDP, which is a common discussion point in senior interviews.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system to collect real-time sensor data. You\u2019ve chosen UDP for its low latency but recognize the potential for message loss. What strategies would you employ to ensure the system\u2019s overall reliability, and how would you weigh the performance benefits of UDP against the risks of data loss?\u201d"
  },
  {
    "chunk": "\u2022If the consumer exposes a service on the network, producers can make a direct\nHTTP or RPC request (see \u201cDataflow Through Services: REST and RPC\u201d on page\n131) to push messages to the consumer. This is the idea behind webhooks [ 12], a\npattern in which a callback URL of one service is registered with another service,\nand it makes a request to that URL whenever an event occurs.\nAlthough these direct messaging systems work well in the situations for which they\nare designed, they generally require the application code to be aware of the possibility\nof message loss. The faults they can tolerate are quite limited: even if the protocols\ndetect and retransmit packets that are lost in the network, they generally assume that\nproducers and consumers are constantly online.\nIf a consumer is offline, it may miss messages that were sent while it is unreachable.\nSome protocols allow the producer to retry failed message deliveries, but this\napproach may break down if the producer crashes, losing the buffer of messages that\nit was supposed to retry.\nMessage brokers\nA widely used alternative is to send messages via a message broker  (also known as a\nmessage queue ), which is essentially a kind of database that is optimized for handling\nmessage streams [ 13]. It runs as a server, with producers and consumers connecting\nto it as clients. Producers write messages to the broker, and consumers receive them\nby reading them from the broker.\nBy centralizing the data in the broker, these systems can more easily tolerate clients\nthat come and go (connect, disconnect, and crash), and the question of durability is\nmoved to the broker instead. Some message brokers only keep messages in memory,\nwhile others (depending on configuration) write them to disk so that they are not lost\nin case of a broker crash. Faced with slow consumers, they generally allow unboun\u2010\nded queueing (as opposed to dropping messages or backpressure), although this\nchoice may also depend on the configuration.\nA consequence of queueing is also that consumers are generally asynchronous : when\na producer sends a message, it normally only waits for the broker to confirm that it\nhas buffered the message and does not wait for the message to be processed by con\u2010\nsumers. The delivery to consumers will happen at some undetermined future point in\ntime\u2014often within a fraction of a second, but sometimes significantly later if there is\na queue backlog.\nMessage brokers compared to databases\nSome message brokers can even participate in two-phase commit protocols using XA\nor JTA (see \u201cDistributed Transactions in Practice\u201d on page 360). This feature makes\nTransmitting Event Streams | 443\n",
    "summary": "The text discusses alternative messaging approaches to direct producer-consumer communication, emphasizing the role of message brokers in handling client failures and providing asynchronous delivery.",
    "sample_answer": "\u201cOkay, this section highlights a key architectural trade-off: direct producer-consumer communication is fragile because it relies on constant availability. Using a message broker, like a database optimized for streaming data, offers a more resilient solution, as it abstracts away the complexities of managing individual client connections. The broker\u2019s ability to queue messages and potentially participate in XA transactions (two-phase commit) aligns with a strategy for improved fault tolerance and durability \u2013 a core principle of building systems that can withstand transient failures, mirroring a concept in the CAP theorem where availability is prioritized over strict consistency in certain scenarios.\"",
    "potential_interview_question": "\u201cImagine you're designing a system where high-volume sensor data is streamed to multiple downstream services. Considering the text's discussion about message brokers and their potential for XA transactions, how would you approach designing the data flow to ensure eventual consistency and handle potential failures in the consumer services?\u201d"
  },
  {
    "chunk": "Fan-out\nEach message is delivered to all of the consumers. Fan-out allows several inde\u2010\npendent consumers to each \u201ctune in\u201d to the same broadcast of messages, without\naffecting each other\u2014the streaming equivalent of having several different batch\njobs that read the same input file. (This feature is provided by topic subscriptions\nin JMS, and exchange bindings in AMQP.)\nFigure 11-1. (a) Load balancing: sharing the work of consuming a topic among con\u2010\nsumers; (b) fan-out: delivering each message to multiple consumers.\nThe two patterns can be combined: for example, two separate groups of consumers\nmay each subscribe to a topic, such that each group collectively receives all messages,\nbut within each group only one of the nodes receives each message.\nAcknowledgments and redelivery\nConsumers may crash at any time, so it could happen that a broker delivers a mes\u2010\nsage to a consumer but the consumer never processes it, or only partially processes it\nbefore crashing. In order to ensure that the message is not lost, message brokers use\nacknowledgments : a client must explicitly tell the broker when it has finished process\u2010\ning a message so that the broker can remove it from the queue.\nIf the connection to a client is closed or times out without the broker receiving an\nacknowledgment, it assumes that the message was not processed, and therefore it\ndelivers the message again to another consumer. (Note that it could happen that the\nmessage actually was fully processed, but the acknowledgment was lost in the net\u2010\nwork. Handling this case requires an atomic commit protocol, as discussed in \u201cDis\u2010\ntributed Transactions in Practice\u201d on page 360 .)\nTransmitting Event Streams | 445\n",
    "summary": "The text discusses fan-out messaging and acknowledgment strategies for ensuring message delivery in a distributed system, highlighting the importance of fault tolerance and handling message loss.",
    "sample_answer": "\u201cOkay, let\u2019s break down the design considerations here. The fan-out pattern, as illustrated, allows for parallel consumption of events, mirroring a load balancing approach, but crucially ensuring that each message reaches multiple consumers. This addresses scalability. More importantly, the acknowledgment mechanism coupled with potential redelivery demonstrates a focus on durability and availability. The broker relies on explicit client acknowledgments to confirm message processing, and if an acknowledgment isn\u2019t received, it assumes processing failure and attempts redelivery\u2014a common strategy in streaming systems. This acknowledges the potential for network issues or client downtime, aligning with a design that prioritizes eventual consistency and high availability, similar to approaches we'd see with Kafka or other streaming platforms.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you\u2019d utilize a fan-out pattern in a data pipeline, and then explain how you\u2019d handle message loss to maintain data integrity. What mechanisms would you use and why?\u201d"
  },
  {
    "chunk": "When combined with load balancing, this redelivery behavior has an interesting\neffect on the ordering of messages. In Figure 11-2 , the consumers generally process\nmessages in the order they were sent by producers. However, consumer 2 crashes\nwhile processing message m3, at the same time as consumer 1 is processing message\nm4. The unacknowledged message m3 is subsequently redelivered to consumer 1,\nwith the result that consumer 1 processes messages in the order m4, m3, m5. Thus,\nm3 and m4 are not delivered in the same order as they were sent by producer 1.\nFigure 11-2. Consumer 2 crashes while processing m3, so it is redelivered to consumer 1\nat a later time.\nEven if the message broker otherwise tries to preserve the order of messages (as\nrequired by both the JMS and AMQP standards), the combination of load balancing\nwith redelivery inevitably leads to messages being reordered. To avoid this issue, you\ncan use a separate queue per consumer (i.e., not use the load balancing feature). Mes\u2010\nsage reordering is not a problem if messages are completely independent of each\nother, but it can be important if there are causal dependencies between messages, as\nwe shall see later in the chapter. \nPartitioned Logs\nSending a packet over a network or making a request to a network service is normally\na transient operation that leaves no permanent trace. Although it is possible to record\nit permanently (using packet capture and logging), we normally don\u2019t think of it that\nway. Even message brokers that durably write messages to disk quickly delete them\nagain after they have been delivered to consumers, because they are built around a\ntransient messaging mindset.\n446 | Chapter 11: Stream Processing\n",
    "summary": "The chunk discusses the impact of load balancing and redelivery mechanisms on message ordering, highlighting the importance of considering causal dependencies and the transient nature of message brokers.",
    "sample_answer": "\u201cThis illustrates a crucial consideration in stream processing architectures: the inherent challenges of maintaining message order when using load balancing and redelivery. The message broker\u2019s transient nature \u2013 quickly deleting messages after delivery \u2013 combined with load balancing\u2019s attempt to distribute load, can lead to reordering, particularly if there are causal relationships between messages. To mitigate this, a common approach is to create a separate queue per consumer, effectively isolating the load distribution and preventing the broker\u2019s redelivery mechanism from disrupting the intended causal sequence.  This acknowledges the CAP theorem \u2013 availability and partition tolerance \u2013 and emphasizes the trade-off between distributing load and maintaining strict ordering.\u201d",
    "potential_interview_question": "\u201cImagine you are designing a system for processing sensor data where events need to be processed in a specific order to trigger downstream actions. How would you address the potential for message reordering introduced by a load-balanced message broker, and what architectural decisions would you make to ensure causal consistency?\u201d"
  },
  {
    "chunk": "Databases and filesystems take the opposite approach: everything that is written to a\ndatabase or file is normally expected to be permanently recorded, at least until some\u2010\none explicitly chooses to delete it again.\nThis difference in mindset has a big impact on how derived data is created. A key\nfeature of batch processes, as discussed in Chapter 10 , is that you can run them\nrepeatedly, experimenting with the processing steps, without risk of damaging the\ninput (since the input is read-only). This is not the case with AMQP/JMS-style mes\u2010\nsaging: receiving a message is destructive if the acknowledgment causes it to be\ndeleted from the broker, so you cannot run the same consumer again and expect to\nget the same result.\nIf you add a new consumer to a messaging system, it typically only starts receiving\nmessages sent after the time it was registered; any prior messages are already gone\nand cannot be recovered. Contrast this with files and databases, where you can add a\nnew client at any time, and it can read data written arbitrarily far in the past (as long\nas it has not been explicitly overwritten or deleted by the application).\nWhy can we not have a hybrid, combining the durable storage approach of databases\nwith the low-latency notification facilities of messaging? This is the idea behind log-\nbased message brokers .\nUsing logs for message storage\nA log is simply an append-only sequence of records on disk. We previously discussed\nlogs in the context of log-structured storage engines and write-ahead logs in Chap\u2010\nter 3 , and in the context of replication in Chapter 5 .\nThe same structure can be used to implement a message broker: a producer sends a\nmessage by appending it to the end of the log, and a consumer receives messages by\nreading the log sequentially. If a consumer reaches the end of the log, it waits for a\nnotification that a new message has been appended. The Unix tool tail -f , which\nwatches a file for data being appended, essentially works like this.\nIn order to scale to higher throughput than a single disk can offer, the log can be\npartitioned  (in the sense of Chapter 6 ). Different partitions can then be hosted on dif\u2010\nferent machines, making each partition a separate log that can be read and written\nindependently from other partitions. A topic can then be defined as a group of parti\u2010\ntions that all carry messages of the same type. This approach is illustrated in\nFigure 11-3 .\nWithin each partition, the broker assigns a monotonically increasing sequence num\u2010\nber, or offset , to every message (in Figure 11-3 , the numbers in boxes are message off\u2010\nsets). Such a sequence number makes sense because a partition is append-only, so the\nmessages within a partition are totally ordered. There is no ordering guarantee across\ndifferent partitions.\nTransmitting Event Streams | 447\n",
    "summary": "This text discusses a log-based message broker architecture, highlighting the trade-offs between durable storage (databases) and low-latency messaging, and introduces partitioning for scalability.",
    "sample_answer": "\u201cThis design presents a critical architectural choice: traditional messaging systems, like AMQP/JMS, are inherently destructive\u2014acknowledging a message removes it, preventing re-processing.  The log-based broker flips this by treating the message queue as a durable, append-only log, mirroring the behavior of databases.  To achieve scalability, we\u2019d partition this log across multiple machines, aligning with concepts from Chapter 6, and using monotonically increasing offsets to maintain message ordering within a partition, while recognizing that cross-partition ordering is not guaranteed.  This architecture is particularly well-suited for scenarios where re-processing or auditing of events is needed, but requires careful consideration of consistency.\u201d",
    "potential_interview_question": "\u201cDescribe the trade-offs you've seen between traditional messaging systems (like AMQP/JMS) and a log-based message broker architecture. When might you choose one over the other, and what key considerations would drive that decision?\u201d"
  },
  {
    "chunk": "Figure 11-3. Producers send messages by appending them to a topic-partition file, and\nconsumers read these files sequentially.\nApache Kafka [ 17, 18], Amazon Kinesis Streams [ 19], and Twitter\u2019s DistributedLog\n[20, 21] are log-based message brokers that work like this. Google Cloud Pub/Sub is\narchitecturally similar but exposes a JMS-style API rather than a log abstraction [ 16].\nEven though these message brokers write all messages to disk, they are able to achieve\nthroughput of millions of messages per second by partitioning across multiple\nmachines, and fault tolerance by replicating messages [ 22, 23].\nLogs compared to traditional messaging\nThe log-based approach trivially supports fan-out messaging, because several con\u2010\nsumers can independently read the log without affecting each other\u2014reading a mes\u2010\nsage does not delete it from the log. To achieve load balancing across a group of\nconsumers, instead of assigning individual messages to consumer clients, the broker\ncan assign entire partitions to nodes in the consumer group.\nEach client then consumes all the messages in the partitions it has been assigned.\nTypically, when a consumer has been assigned a log partition, it reads the messages in\nthe partition sequentially, in a straightforward single-threaded manner. This coarse-\ngrained load balancing approach has some downsides:\n448 | Chapter 11: Stream Processing\n",
    "summary": "This chunk describes a log-based message broker architecture utilizing partitioned topics and sequential consumer reads for high throughput and fault tolerance.",
    "sample_answer": "\u201cOkay, this describes a classic approach to building a highly scalable stream processing system. The log-based messaging, leveraging technologies like Kafka or Kinesis, allows for fan-out messaging because consumers can independently read partitions without affecting each other. The sequential reading model, combined with partitioning across multiple machines, is a way to achieve high throughput by parallelizing the consumption process \u2013 this relies on the principle of coarse-grained load balancing, distributing the load across consumer groups, which reduces contention and bottlenecks.  Furthermore, the replication of messages across machines provides durability and fault tolerance, ensuring that messages aren't lost if a node fails.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re designing a system to ingest clickstream data.  We need to handle potentially millions of events per second. Describe the architectural considerations \u2013 specifically, how would you approach distributing the load for processing this data, referencing any relevant concepts from our discussion (e.g., partitioning, load balancing, fault tolerance)?\u201d"
  },
  {
    "chunk": "i. It\u2019s possible to create a load balancing scheme in which two consumers share the work of processing a par\u2010\ntition by having both read the full set of messages, but one of them only considers messages with even-\nnumbered offsets while the other deals with the odd-numbered offsets. Alternatively, you could spread\nmessage processing over a thread pool, but that approach complicates consumer offset management. In gen\u2010\neral, single-threaded processing of a partition is preferable, and parallelism can be increased by using more\npartitions.\u2022The number of nodes sharing the work of consuming a topic can be at most the\nnumber of log partitions in that topic, because messages within the same parti\u2010\ntion are delivered to the same node.i\n\u2022If a single message is slow to process, it holds up the processing of subsequent\nmessages in that partition (a form of head-of-line blocking; see \u201cDescribing Per\u2010\nformance\u201d on page 13 ).\nThus, in situations where messages may be expensive to process and you want to par\u2010\nallelize processing on a message-by-message basis, and where message ordering is not\nso important, the JMS/AMQP style of message broker is preferable. On the other\nhand, in situations with high message throughput, where each message is fast to pro\u2010\ncess and where message ordering is important, the log-based approach works very\nwell.\nConsumer offsets\nConsuming a partition sequentially makes it easy to tell which messages have been\nprocessed: all messages with an offset less than a consumer\u2019s current offset have\nalready been processed, and all messages with a greater offset have not yet been seen.\nThus, the broker does not need to track acknowledgments for every single message\u2014\nit only needs to periodically record the consumer offsets. The reduced bookkeeping\noverhead and the opportunities for batching and pipelining in this approach help\nincrease the throughput of log-based systems.\nThis offset is in fact very similar to the log sequence number  that is commonly found\nin single-leader database replication, and which we discussed in \u201cSetting Up New\nFollowers\u201d  on page 155. In database replication, the log sequence number allows a\nfollower to reconnect to a leader after it has become disconnected, and resume repli\u2010\ncation without skipping any writes. Exactly the same principle is used here: the mes\u2010\nsage broker behaves like a leader database, and the consumer like a follower.\nIf a consumer node fails, another node in the consumer group is assigned the failed\nconsumer\u2019s partitions, and it starts consuming messages at the last recorded offset. If\nthe consumer had processed subsequent messages but not yet recorded their offset,\nthose messages will be processed a second time upon restart. We will discuss ways of\ndealing with this issue later in the chapter.\nTransmitting Event Streams | 449\n",
    "summary": "The chunk discusses load balancing strategies for message processing, highlighting the trade-offs between JMS/AMQP and log-based approaches, and emphasizes the role of consumer offsets for fault tolerance.",
    "sample_answer": "\u201cOkay, this chunk really illustrates the importance of choosing the right message processing architecture based on our requirements. The log-based approach, using consumer offsets like those found in database replication, offers high throughput due to reduced bookkeeping and allows for efficient recovery from consumer failures \u2013 essentially behaving like a leader-follower system. This parallels the replication strategy we\u2019ve discussed, where a consumer acts as a follower, allowing it to resume processing from the last known offset after a failure, mitigating head-of-line blocking and improving system availability.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re building a system that processes high-volume sensor data. We\u2019ve identified two potential architectures: (a) a JMS/AMQP-based system where messages are processed sequentially by multiple consumers, or (b) a log-based system with consumer offsets. Considering factors like throughput, fault tolerance, and the potential for message ordering, which architecture would you recommend and why? Furthermore, how would you address the issue of duplicate processing if a consumer fails and restarts?\u201d"
  },
  {
    "chunk": "Disk space usage\nIf you only ever append to the log, you will eventually run out of disk space. To\nreclaim disk space, the log is actually divided into segments, and from time to time\nold segments are deleted or moved to archive storage. (We\u2019ll discuss a more sophisti\u2010\ncated way of freeing disk space later.)\nThis means that if a slow consumer cannot keep up with the rate of messages, and it\nfalls so far behind that its consumer offset points to a deleted segment, it will miss\nsome of the messages. Effectively, the log implements a bounded-size buffer that dis\u2010\ncards old messages when it gets full, also known as a circular buffer  or ring buffer .\nHowever, since that buffer is on disk, it can be quite large.\nLet\u2019s do a back-of-the-envelope calculation. At the time of writing, a typical large\nhard drive has a capacity of 6 TB and a sequential write throughput of 150 MB/s. If\nyou are writing messages at the fastest possible rate, it takes about 11 hours to fill the\ndrive. Thus, the disk can buffer 11 hours\u2019 worth of messages, after which it will start\noverwriting old messages. This ratio remains the same, even if you use many hard\ndrives and machines. In practice, deployments rarely use the full write bandwidth of\nthe disk, so the log can typically keep a buffer of several days\u2019 or even weeks\u2019 worth of\nmessages.\nRegardless of how long you retain messages, the throughput of a log remains more or\nless constant, since every message is written to disk anyway [ 18]. This behavior is in\ncontrast to messaging systems that keep messages in memory by default and only\nwrite them to disk if the queue grows too large: such systems are fast when queues are\nshort and become much slower when they start writing to disk, so the throughput\ndepends on the amount of history retained.\nWhen consumers cannot keep up with producers\nAt the beginning of \u201cMessaging Systems\u201d on page 441 we discussed three choices of\nwhat to do if a consumer cannot keep up with the rate at which producers are send\u2010\ning messages: dropping messages, buffering, or applying backpressure. In this taxon\u2010\nomy, the log-based approach is a form of buffering with a large but fixed-size buffer\n(limited by the available disk space).\nIf a consumer falls so far behind that the messages it requires are older than what is\nretained on disk, it will not be able to read those messages\u2014so the broker effectively\ndrops old messages that go back further than the size of the buffer can accommodate.\nYou can monitor how far a consumer is behind the head of the log, and raise an alert\nif it falls behind significantly. As the buffer is large, there is enough time for a human\noperator to fix the slow consumer and allow it to catch up before it starts missing\nmessages.\n450 | Chapter 11: Stream Processing\n",
    "summary": "The chunk discusses a log-based buffering strategy with a fixed-size buffer (disk space) for managing message flow, highlighting the trade-offs between throughput and potential message loss due to consumer lag.",
    "sample_answer": "\u201cOkay, this describes a common approach to building a stream processing pipeline where we\u2019re using a log as a bounded buffer. The key here is the concept of a circular buffer \u2013 in this case, it\u2019s implemented using disk space. The log acts as a fixed-size buffer, effectively discarding older messages to prevent unbounded growth, which is a direct response to the CAP theorem\u2019s limitations when scaling a distributed system. We can monitor the consumer lag using metrics and set alerts, allowing for proactive intervention before significant data loss occurs. This aligns with a backpressure strategy, as the log effectively drops old messages if the consumer can\u2019t keep pace, illustrating a simpler alternative to complex backpressure mechanisms.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where a consumer in a stream processing pipeline falls significantly behind the producer, and discuss potential strategies for mitigating the impact of this lag, referencing relevant system design concepts.\u201d"
  },
  {
    "chunk": "Even if a consumer does fall too far behind and starts missing messages, only that\nconsumer is affected; it does not disrupt the service for other consumers. This fact is\na big operational advantage: you can experimentally consume a production log for\ndevelopment, testing, or debugging purposes, without having to worry much about\ndisrupting production services. When a consumer is shut down or crashes, it stops\nconsuming resources\u2014the only thing that remains is its consumer offset.\nThis behavior also contrasts with traditional message brokers, where you need to be\ncareful to delete any queues whose consumers have been shut down\u2014otherwise they\ncontinue unnecessarily accumulating messages and taking away memory from con\u2010\nsumers that are still active.\nReplaying old messages\nWe noted previously that with AMQP- and JMS-style message brokers, processing\nand acknowledging messages is a destructive operation, since it causes the messages\nto be deleted on the broker. On the other hand, in a log-based message broker, con\u2010\nsuming messages is more like reading from a file: it is a read-only operation that does\nnot change the log.\nThe only side effect of processing, besides any output of the consumer, is that the\nconsumer offset moves forward. But the offset is under the consumer\u2019s control, so it\ncan easily be manipulated if necessary: for example, you can start a copy of a con\u2010\nsumer with yesterday\u2019s offsets and write the output to a different location, in order to\nreprocess the last day\u2019s worth of messages. You can repeat this any number of times,\nvarying the processing code.\nThis aspect makes log-based messaging more like the batch processes of the last\n",
    "summary": "This text discusses the operational advantages of a log-based message broker, particularly concerning consumer resilience and replayability, contrasting it with traditional message brokers.",
    "sample_answer": "\u201cThis log-based approach highlights a key architectural pattern \u2013 isolating failures. Unlike traditional message brokers where a failed consumer can disrupt the entire service, here, the consumer's impact is contained, aligning with the CAP theorem\u2019s emphasis on availability over strong consistency within a distributed system. The ability to replay messages by manipulating consumer offsets demonstrates a robust strategy for handling data reprocessing, similar to batch processing, and enables techniques like \u201cdead-letter queues\u201d \u2013 a pattern where you can reprocess messages if the initial consumer fails.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where a data processing pipeline experiences a consumer failure. How could a log-based message broker, as described in this text, be utilized to ensure continued data processing and recovery, referencing specific architectural patterns or principles?\u201d"
  },
  {
    "chunk": "chapter, where derived data is clearly separated from input data through a repeatable\ntransformation process. It allows more experimentation and easier recovery from\nerrors and bugs, making it a good tool for integrating dataflows within an organiza\u2010\ntion [ 24]. \nDatabases and Streams\nWe have drawn some comparisons between message brokers and databases. Even\nthough they have traditionally been considered separate categories of tools, we saw\nthat log-based message brokers have been successful in taking ideas from databases\nand applying them to messaging. We can also go in reverse: take ideas from messag\u2010\ning and streams, and apply them to databases.\nWe said previously that an event is a record of something that happened at some\npoint in time. The thing that happened may be a user action (e.g., typing a search\nquery), or a sensor reading, but it may also be a write to a database . The fact that\nsomething was written to a database is an event that can be captured, stored, and pro\u2010\nDatabases and Streams | 451\n",
    "summary": "The text discusses the blurring lines between databases and message brokers, highlighting the application of database principles to messaging and vice versa, emphasizing the importance of repeatable transformations and event capture.",
    "sample_answer": "\u201cThis chapter\u2019s focus on separating derived data and using repeatable transformations aligns with a robust data pipeline design, mirroring best practices for data lakes where you\u2019re dealing with evolving schemas and diverse data sources.  The approach of applying database concepts like idempotency and versioning to message brokers \u2013 as discussed in relation to event capture \u2013 is crucial for building resilient systems capable of handling high volumes of data while ensuring data integrity.  Specifically, leveraging log-based message brokers allows us to treat events as first-class citizens, enabling features like exactly-once semantics, similar to what we\u2019d implement with a database\u2019s transaction guarantees.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where you would choose a log-based message broker over a traditional database for event ingestion. What considerations would you make regarding data consistency and fault tolerance in this scenario, and how would you ensure that events are processed exactly once?\u201d"
  },
  {
    "chunk": "data is later going to be used. If a new application feature is introduced\u2014for example,\n\u201cthe place is offered to the next person on the waiting list\u201d\u2014the event sourcing\napproach allows that new side effect to easily be chained off the existing event.\nEvent sourcing is similar to the chronicle data model [ 45], and there are also similari\u2010\nties between an event log and the fact table that you find in a star schema (see \u201cStars\nand Snowflakes: Schemas for Analytics\u201d on page 93 ).\nSpecialized databases such as Event Store [ 46] have been developed to support appli\u2010\ncations using event sourcing, but in general the approach is independent of any par\u2010\nticular tool. A conventional database or a log-based message broker can also be used\nto build applications in this style.\nDeriving current state from the event log\nAn event log by itself is not very useful, because users generally expect to see the cur\u2010\nrent state of a system, not the history of modifications. For example, on a shopping\nwebsite, users expect to be able to see the current contents of their cart, not an\nappend-only list of all the changes they have ever made to their cart.\nThus, applications that use event sourcing need to take the log of events (representing\nthe data written  to the system) and transform it into application state that is suitable\nfor showing to a user (the way in which data is read  from the system [ 47]). This\ntransformation can use arbitrary logic, but it should be deterministic so that you can\nrun it again and derive the same application state from the event log.\nLike with change data capture, replaying the event log allows you to reconstruct the\ncurrent state of the system. However, log compaction needs to be handled differently:\n\u2022A CDC event for the update of a record typically contains the entire new version\nof the record, so the current value for a primary key is entirely determined by the\nmost recent event for that primary key, and log compaction can discard previous\nevents for the same key.\n\u2022On the other hand, with event sourcing, events are modeled at a higher level: an\nevent typically expresses the intent of a user action, not the mechanics of the state\nupdate that occurred as a result of the action. In this case, later events typically\ndo not override prior events, and so you need the full history of events to recon\u2010\nstruct the final state. Log compaction is not possible in the same way.\nApplications that use event sourcing typically have some mechanism for storing\nsnapshots of the current state that is derived from the log of events, so they don\u2019t\nneed to repeatedly reprocess the full log. However, this is only a performance optimi\u2010\nzation to speed up reads and recovery from crashes; the intention is that the system is\nable to store all raw events forever and reprocess the full event log whenever required.\nWe discuss this assumption in \u201cLimitations of immutability\u201d on page 463 . \n458 | Chapter 11: Stream Processing\n",
    "summary": "The chunk discusses event sourcing, its relation to schemas, and the need for state derivation from event logs, highlighting the challenges of log compaction versus state reconstruction.",
    "sample_answer": "\u201cOkay, so event sourcing presents a really interesting challenge when it comes to maintaining a consistent view of the data. Because events are immutable, reconstructing the current state requires us to replay the entire event log, which could become a performance bottleneck. This contrasts with traditional schemas like star schemas where we can directly query for the current state. We need to consider whether we can use techniques like snapshots to reduce the size of the log we need to replay, but that introduces complexities around recovery \u2013 if we lose a snapshot, we need to reprocess everything from the last known good snapshot.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re building an e-commerce system using event sourcing. How would you approach deriving the current state of a user\u2019s shopping cart, and what trade-offs would you consider in terms of performance and data volume?\u201d"
  },
  {
    "chunk": "Commands and events\nThe event sourcing philosophy is careful to distinguish between events  and com\u2010\nmands  [48]. When a request from a user first arrives, it is initially a command: at this\npoint it may still fail, for example because some integrity condition is violated. The\napplication must first validate that it can execute the command. If the validation is\nsuccessful and the command is accepted, it becomes an event, which is durable and\nimmutable.\nFor example, if a user tries to register a particular username, or reserve a seat on an\nairplane or in a theater, then the application needs to check that the username or seat\nis not already taken. (We previously discussed this example in \u201cFault-Tolerant Con\u2010\nsensus\u201d  on page 364.) When that check has succeeded, the application can generate\nan event to indicate that a particular username was registered by a particular user ID,\nor that a particular seat has been reserved for a particular customer.\nAt the point when the event is generated, it becomes a fact. Even if the customer later\ndecides to change or cancel the reservation, the fact remains true that they formerly\nheld a reservation for a particular seat, and the change or cancellation is a separate\nevent that is added later.\nA consumer of the event stream is not allowed to reject an event: by the time the con\u2010\nsumer sees the event, it is already an immutable part of the log, and it may have\nalready been seen by other consumers. Thus, any validation of a command needs to\nhappen synchronously, before it becomes an event\u2014for example, by using a serializa\u2010\nble transaction that atomically validates the command and publishes the event.\nAlternatively, the user request to reserve a seat could be split into two events: first a\ntentative reservation, and then a separate confirmation event once the reservation has\nbeen validated (as discussed in \u201cImplementing linearizable storage using total order\nbroadcast\u201d on page 350). This split allows the validation to take place in an asynchro\u2010\nnous process. \nState, Streams, and Immutability\nWe saw in Chapter 10  that batch processing benefits from the immutability of its\ninput files, so you can run experimental processing jobs on existing input files\nwithout fear of damaging them. This principle of immutability is also what makes\nevent sourcing and change data capture so powerful.\nWe normally think of databases as storing the current state of the application\u2014this\nrepresentation is optimized for reads, and it is usually the most convenient for serv\u2010\ning queries. The nature of state is that it changes, so databases support updating and\ndeleting data as well as inserting it. How does this fit with immutability?\nDatabases and Streams | 459\n",
    "summary": "The chunk discusses event sourcing, immutable event logs, and the implications of this approach for data pipeline design, particularly regarding validation and state management.",
    "sample_answer": "\u201cThis approach aligns with event sourcing by treating commands as potentially failing validations that, upon success, become durable, immutable events. To ensure consistency, the validation must occur synchronously before publishing the event, potentially using a serializable transaction, mirroring the principles outlined in \u2018Implementing linearizable storage using total order broadcast.\u2019 The concept of immutability here is key \u2013 we\u2019re leveraging it to enable robust, auditable data streams, much like batch processing benefits from immutable data, preventing accidental corruption and facilitating reliable change data capture.\u201d",
    "potential_interview_question": "\u201cDescribe how you might design a system to handle user requests (commands) in a system that utilizes event sourcing. Specifically, how would you ensure that the system handles potentially failing command validations and how does that tie into the overall event stream?\u201d"
  },
  {
    "chunk": "change: with a batch job that has been running for a few minutes, a failed task can\nsimply be restarted from the beginning, but with a stream job that has been running\nfor several years, restarting from the beginning after a crash may not be a viable\noption.\nUses of Stream Processing\nStream processing has long been used for monitoring purposes, where an organiza\u2010\ntion wants to be alerted if certain things happen. For example:\n\u2022Fraud detection systems need to determine if the usage patterns of a credit card\nhave unexpectedly changed, and block the card if it is likely to have been stolen.\n\u2022Trading systems need to examine price changes in a financial market and execute\ntrades according to specified rules.\n\u2022Manufacturing systems need to monitor the status of machines in a factory, and\nquickly identify the problem if there is a malfunction.\n\u2022Military and intelligence systems need to track the activities of a potential aggres\u2010\nsor, and raise the alarm if there are signs of an attack.\nThese kinds of applications require quite sophisticated pattern matching and correla\u2010\ntions. However, other uses of stream processing have also emerged over time. In this\n",
    "summary": "The text highlights the challenges of restarting long-running stream processing jobs versus batch jobs, emphasizing the need for sophisticated pattern matching and correlations for use cases like fraud detection and monitoring.",
    "sample_answer": "\u201cOkay, this illustrates a fundamental difference in system design approaches. Batch processing, as described, lends itself to simple recovery \u2013 a failed task is just retried. However, with a persistent stream, restarting from the beginning after a failure introduces unacceptable latency and potential data loss, which is critical for applications like fraud detection or real-time monitoring where continuous state is maintained.  This aligns with the concept of eventual consistency in stream processing \u2013 acknowledging that immediate, perfect state is often impossible, and designing for tolerance of temporary inconsistencies is key to availability.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we're building a real-time monitoring system for a manufacturing plant, similar to the example in the text. We need to track the status of hundreds of machines and alert operators to potential issues. Considering the challenges of restarting a long-running stream processing job, what architectural considerations would you make to ensure high availability and data accuracy for this system?\u201d"
  },
  {
    "chunk": "section we will briefly compare and contrast some of these applications.\nComplex event processing\nComplex event processing  (CEP) is an approach developed in the 1990s for analyzing\nevent streams, especially geared toward the kind of application that requires search\u2010\ning for certain event patterns [ 65, 66]. Similarly to the way that a regular expression\nallows you to search for certain patterns of characters in a string, CEP allows you to\nspecify rules to search for certain patterns of events in a stream.\nCEP systems often use a high-level declarative query language like SQL, or a graphi\u2010\ncal user interface, to describe the patterns of events that should be detected. These\nqueries are submitted to a processing engine that consumes the input streams and\ninternally maintains a state machine that performs the required matching. When a\nmatch is found, the engine emits a complex event  (hence the name) with the details of\nthe event pattern that was detected [ 67].\nIn these systems, the relationship between queries and data is reversed compared to\nnormal databases. Usually, a database stores data persistently and treats queries as\ntransient: when a query comes in, the database searches for data matching the query,\nand then forgets about the query when it has finished. CEP engines reverse these\nroles: queries are stored long-term, and events from the input streams continuously\nflow past them in search of a query that matches an event pattern [ 68].\nProcessing Streams | 465\n",
    "summary": "The text discusses CEP systems which employ a reversed query-to-data relationship compared to traditional databases, utilizing state machines to detect event patterns. This approach highlights the importance of maintaining state for pattern matching.",
    "sample_answer": "\u201cCEP systems present a fascinating departure from traditional database design. Unlike typical databases where queries are transient and focused on retrieving data, CEP engines treat queries as persistent, long-term specifications. This is achieved by maintaining a state machine that continuously evaluates these queries against incoming event streams \u2013 a technique often found in systems requiring real-time pattern detection. This contrasts with the stateless nature of many database queries, and the continual maintenance of state can significantly impact performance and scalability, particularly when dealing with high-velocity streams.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system to detect fraudulent transactions in real-time. How would the reversed query-to-data relationship described in the CEP system concept influence your architectural choices, and what considerations would you make regarding the maintenance of the state machine within the system?\u201d"
  },
  {
    "chunk": "Implementations of CEP include Esper [ 69], IBM InfoSphere Streams [ 70], Apama,\nTIBCO StreamBase, and SQLstream. Distributed stream processors like Samza are\nalso gaining SQL support for declarative queries on streams [ 71].\nStream analytics\nAnother area in which stream processing is used is for analytics  on streams. The\nboundary between CEP and stream analytics is blurry, but as a general rule, analytics\ntends to be less interested in finding specific event sequences and is more oriented\ntoward aggregations and statistical metrics over a large number of events\u2014for exam\u2010\nple:\n\u2022Measuring the rate of some type of event (how often it occurs per time interval)\n\u2022Calculating the rolling average of a value over some time period\n\u2022Comparing current statistics to previous time intervals (e.g., to detect trends or\nto alert on metrics that are unusually high or low compared to the same time last\nweek)\nSuch statistics are usually computed over fixed time intervals\u2014for example, you\nmight want to know the average number of queries per second to a service over the\nlast 5 minutes, and their 99th percentile response time during that period. Averaging\nover a few minutes smoothes out irrelevant fluctuations from one second to the next,\nwhile still giving you a timely picture of any changes in traffic pattern. The time\ninterval over which you aggregate is known as a window , and we will look into win\u2010\ndowing in more detail in \u201cReasoning About Time\u201d on page 468 .\nStream analytics systems sometimes use probabilistic algorithms, such as Bloom fil\u2010\nters (which we encountered in \u201cPerformance optimizations\u201d on page 79) for set\nmembership, HyperLogLog [ 72] for cardinality estimation, and various percentile\nestimation algorithms (see \u201cPercentiles in Practice\u201d on page 16). Probabilistic algo\u2010\nrithms produce approximate results, but have the advantage of requiring significantly\nless memory in the stream processor than exact algorithms. This use of approxima\u2010\ntion algorithms sometimes leads people to believe that stream processing systems are\nalways lossy and inexact, but that is wrong: there is nothing inherently approximate\nabout stream processing, and probabilistic algorithms are merely an optimization\n[73].\nMany open source distributed stream processing frameworks are designed with ana\u2010\nlytics in mind: for example, Apache Storm, Spark Streaming, Flink, Concord, Samza,\nand Kafka Streams [ 74]. Hosted services include Google Cloud Dataflow and Azure\nStream Analytics.\n466 | Chapter 11: Stream Processing\n",
    "summary": "The chunk discusses stream processing for analytics, highlighting the use of probabilistic algorithms for efficiency and various stream processing frameworks.",
    "sample_answer": "\u201cWhen designing a stream processing system for analytics, a key consideration is balancing accuracy with resource constraints. We can leverage probabilistic algorithms like Bloom filters and HyperLogLog to estimate cardinality or set membership without the memory overhead of exact algorithms, which is particularly important at scale. Furthermore, the choice of stream processing framework \u2013 such as Spark Streaming or Flink \u2013 would depend on the specific requirements of the use case, especially around fault tolerance and exactly-once semantics, which are critical for maintaining data consistency during the analytical process.\u201d",
    "potential_interview_question": "\u201cLet's say we\u2019re building a system to track website traffic and identify anomalies. What considerations would you make when choosing a stream processing framework, specifically focusing on accuracy versus resource efficiency, and how would you address the potential for lossy results?\u201d"
  },
  {
    "chunk": "Message passing and RPC\nIn \u201cMessage-Passing Dataflow\u201d on page 136  we discussed message-passing systems as\nan alternative to RPC\u2014i.e., as a mechanism for services to communicate, as used for\nexample in the actor model. Although these systems are also based on messages and\nevents, we normally don\u2019t think of them as stream processors:\n\u2022Actor frameworks are primarily a mechanism for managing concurrency and\ndistributed execution of communicating modules, whereas stream processing is\nprimarily a data management technique.\n\u2022Communication between actors is often ephemeral and one-to-one, whereas\nevent logs are durable and multi-subscriber.\n\u2022Actors can communicate in arbitrary ways (including cyclic request/response\npatterns), but stream processors are usually set up in acyclic pipelines where\nevery stream is the output of one particular job, and derived from a well-defined\nset of input streams.\nThat said, there is some crossover area between RPC-like systems and stream pro\u2010\ncessing. For example, Apache Storm has a feature called distributed RPC , which\nallows user queries to be farmed out to a set of nodes that also process event streams;\nthese queries are then interleaved with events from the input streams, and results can\nbe aggregated and sent back to the user [ 78]. (See also \u201cMulti-partition data process\u2010\ning\u201d on page 514 .)\nIt is also possible to process streams using actor frameworks. However, many such\nframeworks do not guarantee message delivery in the case of crashes, so the process\u2010\ning is not fault-tolerant unless you implement additional retry logic.\nReasoning About Time\nStream processors often need to deal with time, especially when used for analytics\npurposes, which frequently use time windows such as \u201cthe average over the last five\nminutes.\u201d It might seem that the meaning of \u201cthe last five minutes\u201d should be unam\u2010\nbiguous and clear, but unfortunately the notion is surprisingly tricky.\nIn a batch process, the processing tasks rapidly crunch through a large collection of\nhistorical events. If some kind of breakdown by time needs to happen, the batch pro\u2010\ncess needs to look at the timestamp embedded in each event. There is no point in\nlooking at the system clock of the machine running the batch process, because the\ntime at which the process is run has nothing to do with the time at which the events\nactually occurred.\nA batch process may read a year\u2019s worth of historical events within a few minutes; in\nmost cases, the timeline of interest is the year of history, not the few minutes of pro\u2010\ncessing. Moreover, using the timestamps in the events allows the processing to be\n468 | Chapter 11: Stream Processing\n",
    "summary": "The text discusses the differences between message-passing systems (like actor frameworks) and stream processors, highlighting the importance of durable event logs and acyclic pipelines for stream processing.",
    "sample_answer": "\u201cWhen designing a stream processing system, it\u2019s crucial to distinguish between message-passing architectures, which often rely on ephemeral communication like the actor model, and true stream processors. Unlike actor frameworks, stream processors typically benefit from durable event logs \u2013 think Kafka \u2013 to ensure data isn\u2019t lost during processing, and a well-defined, acyclic pipeline to avoid complex dependencies and potential bottlenecks. Furthermore, careful consideration must be given to the meaning of time, as the timestamp embedded in the event represents the time of the event itself, not the processing node\u2019s clock, which is a common source of errors when deriving time-based aggregations.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re building a real-time fraud detection system using a stream processor. How would you ensure the accuracy of time-based calculations, and why is it important to distinguish between the event\u2019s timestamp and the processing node\u2019s clock?\u201d"
  },
  {
    "chunk": "ii. Thank you to Kostas Kloudas from the Flink community for coming up with this analogy.deterministic: running the same process again on the same input yields the same\nresult (see \u201cFault tolerance\u201d on page 422 ).\nOn the other hand, many stream processing frameworks use the local system clock\non the processing machine (the processing time ) to determine windowing [ 79]. This\napproach has the advantage of being simple, and it is reasonable if the delay between\nevent creation and event processing is negligibly short. However, it breaks down if\nthere is any significant processing lag\u2014i.e., if the processing may happen noticeably\nlater than the time at which the event actually occurred.\nEvent time versus processing time\nThere are many reasons why processing may be delayed: queueing, network faults\n(see \u201cUnreliable Networks\u201d on page 277), a performance issue leading to contention\nin the message broker or processor, a restart of the stream consumer, or reprocessing\nof past events (see \u201cReplaying old messages\u201d on page 451) while recovering from a\nfault or after fixing a bug in the code.\nMoreover, message delays can also lead to unpredictable ordering of messages. For\nexample, say a user first makes one web request (which is handled by web server A),\nand then a second request (which is handled by server B). A and B emit events\ndescribing the requests they handled, but B\u2019s event reaches the message broker before\nA\u2019s event does. Now stream processors will first see the B event and then the A event,\neven though they actually occurred in the opposite order.\nIf it helps to have an analogy, consider the Star Wars  movies: Episode IV was released\nin 1977, Episode V in 1980, and Episode VI in 1983, followed by Episodes I, II, and\nIII in 1999, 2002, and 2005, respectively, and Episode VII in 2015 [ 80].ii If you\nwatched the movies in the order they came out, the order in which you processed the\nmovies is inconsistent with the order of their narrative. (The episode number is like\nthe event timestamp, and the date when you watched the movie is the processing\ntime.) As humans, we are able to cope with such discontinuities, but stream process\u2010\ning algorithms need to be specifically written to accommodate such timing and\nordering issues.\nConfusing event time and processing time leads to bad data. For example, say you\nhave a stream processor that measures the rate of requests (counting the number of\nrequests per second). If you redeploy the stream processor, it may be shut down for a\nminute and process the backlog of events when it comes back up. If you measure the\nrate based on the processing time, it will look as if there was a sudden anomalous\nspike of requests while processing the backlog, when in fact the real rate of requests\nwas steady ( Figure 11-7 ).\nProcessing Streams | 469\n",
    "summary": "The chunk discusses the critical distinction between event time and processing time in stream processing, highlighting the potential for inconsistencies and the need for careful design to avoid incorrect data interpretation.",
    "sample_answer": "\u201cThis excerpt really drives home the importance of understanding the temporal context within a streaming system. The key takeaway is the difference between \u2018event time\u2019 \u2013 which is the timestamp of when the event actually occurred \u2013 and \u2018processing time,\u2019 which is the time it takes the system to process the event. Because processing time is often variable due to factors like network latency or processing bottlenecks, relying on it for calculations or windowing can lead to significant data skew, as we\u2019ve seen in the Star Wars example. To mitigate this, we need to design our stream processing pipelines to operate primarily based on event time, potentially incorporating mechanisms for compensating for processing delays, perhaps through buffering or jitter-based windowing strategies.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say you\u2019re building a real-time fraud detection system that processes streaming transaction data. How would you approach designing the system to handle the potential discrepancy between event time (the time of the transaction) and processing time (the time the system spends analyzing it)? What specific design considerations would you prioritize, and why?\u201d"
  },
  {
    "chunk": "Figure 11-7. Windowing by processing time introduces artifacts due to variations in\nprocessing rate.\nKnowing when you\u2019re ready\nA tricky problem when defining windows in terms of event time is that you can never\nbe sure when you have received all of the events for a particular window, or whether\nthere are some events still to come.\nFor example, say you\u2019re grouping events into one-minute windows so that you can\ncount the number of requests per minute. You have counted some number of events\nwith timestamps that fall in the 37th minute of the hour, and time has moved on;\nnow most of the incoming events fall within the 38th and 39th minutes of the hour.\nWhen do you declare that you have finished the window for the 37th minute, and\noutput its counter value?\nYou can time out and declare a window ready after you have not seen any new events\nfor a while, but it could still happen that some events were buffered on another\nmachine somewhere, delayed due to a network interruption. You need to be able to\nhandle such straggler  events that arrive after the window has already been declared\ncomplete. Broadly, you have two options [ 1]:\n1.Ignore the straggler events, as they are probably a small percentage of events in\nnormal circumstances. You can track the number of dropped events as a metric,\nand alert if you start dropping a significant amount of data.\n2.Publish a correction , an updated value for the window with stragglers included.\nYou may also need to retract the previous output.\n470 | Chapter 11: Stream Processing\n",
    "summary": "The text discusses the challenges of defining time-based windows in streaming data, particularly the issue of straggler events and the need for strategies to handle them, including dropping events or publishing corrections.",
    "sample_answer": "\u201cThis scenario highlights a core challenge in stream processing \u2013 accurately defining windows based on event time. The problem of \u2018straggler\u2019 events, where delayed data arrives after a window is declared complete, is directly related to the CAP theorem, specifically availability and partition tolerance. To address this, we can choose to ignore stragglers, monitoring the number of dropped events and alerting if the rate increases significantly; however, this introduces potential data loss. Alternatively, we can implement a correction mechanism \u2013 publishing an updated value for the window, which might necessitate retracting the previous output \u2013 offering higher accuracy but introducing complexity.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re building a system to calculate the number of clicks per minute. How would you handle straggler events \u2013 data arriving after the current minute has been declared complete \u2013 and what considerations would you have for minimizing data loss versus maintaining accuracy?\u201d"
  },
  {
    "chunk": "In some cases it is possible to use a special message to indicate, \u201cFrom now on there\nwill be no more messages with a timestamp earlier than t,\u201d which can be used by con\u2010\nsumers to trigger windows [ 81]. However, if several producers on different machines\nare generating events, each with their own minimum timestamp thresholds, the con\u2010\nsumers need to keep track of each producer individually. Adding and removing pro\u2010\nducers is trickier in this case.\nWhose clock are you using, anyway?\nAssigning timestamps to events is even more difficult when events can be buffered at\nseveral points in the system. For example, consider a mobile app that reports events\nfor usage metrics to a server. The app may be used while the device is offline, in\nwhich case it will buffer events locally on the device and send them to a server when\nan internet connection is next available (which may be hours or even days later). To\nany consumers of this stream, the events will appear as extremely delayed stragglers.\nIn this context, the timestamp on the events should really be the time at which the\nuser interaction occurred, according to the mobile device\u2019s local clock. However, the\nclock on a user-controlled device often cannot be trusted, as it may be accidentally or\ndeliberately set to the wrong time (see \u201cClock Synchronization and Accuracy\u201d on\npage 289). The time at which the event was received by the server (according to the\nserver\u2019s clock) is more likely to be accurate, since the server is under your control, but\nless meaningful in terms of describing the user interaction.\nTo adjust for incorrect device clocks, one approach is to log three timestamps [ 82]:\n\u2022The time at which the event occurred, according to the device clock\n\u2022The time at which the event was sent to the server, according to the device clock\n\u2022The time at which the event was received by the server, according to the server\nclock\nBy subtracting the second timestamp from the third, you can estimate the offset\nbetween the device clock and the server clock (assuming the network delay is negligi\u2010\nble compared to the required timestamp accuracy). You can then apply that offset to\nthe event timestamp, and thus estimate the true time at which the event actually\noccurred (assuming the device clock offset did not change between the time the event\noccurred and the time it was sent to the server).\nThis problem is not unique to stream processing\u2014batch processing suffers from\nexactly the same issues of reasoning about time. It is just more noticeable in a stream\u2010\ning context, where we are more aware of the passage of time.\nProcessing Streams | 471\n",
    "summary": "The chunk highlights the challenges of timestamping in streaming and batch data pipelines, particularly concerning clock synchronization and data staleness.",
    "sample_answer": "\u201cThis situation really underscores the fundamental problem of dealing with time-based events in distributed systems. We\u2019re seeing a conflict between the source of truth \u2013 the user\u2019s device clock \u2013 and the system clock used for ordering events, leading to potential data staleness. To mitigate this, we need a strategy to reconcile these clocks, which could involve logging multiple timestamps as described \u2013 the user\u2019s local time, the device send time, and the server receive time \u2013 to calculate the offset.\u201d  \u201cThis mirrors the CAP theorem\u2019s implications for system design, where accuracy in time-based ordering can be difficult to achieve given the inherent variability in clocks across different nodes.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re building a real-time analytics pipeline that consumes events from mobile apps. How would you address the potential for clock skew between the mobile devices and your central processing server, and what trade-offs would you consider in your solution?\u201d"
  },
  {
    "chunk": "Types of windows\nOnce you know how the timestamp of an event should be determined, the next step\nis to decide how windows over time periods should be defined. The window can then\nbe used for aggregations, for example to count events, or to calculate the average of\nvalues within the window. Several types of windows are in common use [ 79, 83]:\nTumbling window\nA tumbling window has a fixed length, and every event belongs to exactly one\nwindow. For example, if you have a 1-minute tumbling window, all the events\nwith timestamps between 10:03:00 and 10:03:59 are grouped into one window,\nevents between 10:04:00 and 10:04:59 into the next window, and so on. You\ncould implement a 1-minute tumbling window by taking each event timestamp\nand rounding it down to the nearest minute to determine the window that it\nbelongs to.\nHopping window\nA hopping window also has a fixed length, but allows windows to overlap in\norder to provide some smoothing. For example, a 5-minute window with a hop\nsize of 1 minute would contain the events between 10:03:00 and 10:07:59, then\nthe next window would cover events between 10:04:00 and 10:08:59, and so on.\nYou can implement this hopping window by first calculating 1-minute tumbling\nwindows, and then aggregating over several adjacent windows.\nSliding window\nA sliding window contains all the events that occur within some interval of each\nother. For example, a 5-minute sliding window would cover events at 10:03:39\nand 10:08:12, because they are less than 5 minutes apart (note that tumbling and\nhopping 5-minute windows would not have put these two events in the same\nwindow, as they use fixed boundaries). A sliding window can be implemented by\nkeeping a buffer of events sorted by time and removing old events when they\nexpire from the window.\nSession window\nUnlike the other window types, a session window has no fixed duration. Instead,\nit is defined by grouping together all events for the same user that occur closely\ntogether in time, and the window ends when the user has been inactive for some\ntime (for example, if there have been no events for 30 minutes). Sessionization is\na common requirement for website analytics (see \u201cGROUP BY\u201d on page 406 ). \nStream Joins\nIn Chapter 10  we discussed how batch jobs can join datasets by key, and how such\njoins form an important part of data pipelines. Since stream processing generalizes\n472 | Chapter 11: Stream Processing\n",
    "summary": "The chunk details four windowing techniques \u2013 tumbling, hopping, sliding, and session \u2013 each with distinct characteristics for time-based aggregations and their implications for data pipeline design.",
    "sample_answer": "\u201cOkay, let\u2019s consider the implications of these windowing strategies for a data engineering design. The tumbling window, with its fixed boundaries, is straightforward but doesn\u2019t handle overlapping events well, potentially leading to data loss if an event straddles two windows.  The hopping window addresses this by allowing overlapping windows, mirroring the need to smooth data. Crucially, a sliding window \u2013 which I'd likely implement using a sorted buffer and expiration logic \u2013 allows for the most granular analysis, but it demands careful management of the buffer size and potential re-sorting operations. The session window, relying on user inactivity, is a more complex scenario, often used in conjunction with stream joins to analyze user behavior over time, which is crucial for understanding trends and patterns.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system to track website user activity. You\u2019ve chosen a sliding window approach to analyze user sessions.  Describe the key considerations you\u2019d have regarding the size of the window, and explain how you\u2019d handle the potential performance challenges of maintaining a continually updated sorted buffer.\u201d"
  },
  {
    "chunk": "iii. If you regard a stream as the derivative of a table, as in Figure 11-6 , and regard a join as a product of two\ntables u\u00b7v, something interesting happens: the stream of changes to the materialized join follows the product\nrule ( u\u00b7v)\u2032 = u\u2032v + uv\u2032. In words: any change of tweets is joined with the current followers, and any change of\nfollowers is joined with the current tweets [ 49, 50].\u2022When a user deletes a tweet, it is removed from all users\u2019 timelines.\n\u2022When user u1 starts following user u2, recent tweets by u2 are added to u1\u2019s\ntimeline.\n\u2022When user u1 unfollows user u2, tweets by u2 are removed from u1\u2019s timeline.\nTo implement this cache maintenance in a stream processor, you need streams of\nevents for tweets (sending and deleting) and for follow relationships (following and\nunfollowing). The stream process needs to maintain a database containing the set of\nfollowers for each user so that it knows which timelines need to be updated when a\nnew tweet arrives [ 86].\nAnother way of looking at this stream process is that it maintains a materialized view\nfor a query that joins two tables (tweets and follows), something like the following:\nSELECT follows.follower_id  AS timeline_id ,\n  array_agg (tweets.* ORDER BY tweets.timestamp  DESC)\nFROM tweets\nJOIN follows ON follows.followee_id  = tweets.sender_id\nGROUP BY follows.follower_id\nThe join of the streams corresponds directly to the join of the tables in that query.\nThe timelines are effectively a cache of the result of this query, updated every time the\nunderlying tables change.iii\nTime-dependence of joins\nThe three types of joins described here (stream-stream, stream-table, and table-table)\nhave a lot in common: they all require the stream processor to maintain some state\n(search and click events, user profiles, or follower list) based on one join input, and\nquery that state on messages from the other join input.\nThe order of the events that maintain the state is important (it matters whether you\nfirst follow and then unfollow, or the other way round). In a partitioned log, the\nordering of events within a single partition is preserved, but there is typically no\nordering guarantee across different streams or partitions.\nThis raises a question: if events on different streams happen around a similar time, in\nwhich order are they processed? In the stream-table join example, if a user updates\ntheir profile, which activity events are joined with the old profile (processed before\nthe profile update), and which are joined with the new profile (processed after the\nProcessing Streams | 475\n",
    "summary": "The chunk describes a stream processing architecture for maintaining a materialized view (a cache) of a join between a \u2018tweets\u2019 and \u2018follows\u2019 table, emphasizing the need for state management and ordering considerations.",
    "sample_answer": "\u201cOkay, this is a classic example of building a near-realtime materialized view. We\u2019re essentially replicating the results of a complex join \u2013 in this case, users\u2019 timelines \u2013 and updating that view as new events arrive. The key challenge here is ensuring consistency and ordering, as the chunk highlights. We need to maintain state, specifically the follower list for each user, and then update timelines whenever a tweet is sent or a follow/unfollow relationship changes. Because there's no inherent ordering across different streams, we need a strategy, likely a timestamp-based ordering within each stream to ensure that updates are applied in the correct sequence. If the follow/unfollow events happen around a similar time, we\u2019d have to rely on some ordering mechanism \u2013 perhaps a monotonically increasing timestamp \u2013 to prevent inconsistent updates. This ties into the CAP theorem; we're likely prioritizing consistency over availability in this scenario, given the need to accurately maintain the materialized view.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system to track user interactions (clicks, views, etc.) and their relationships on a social media platform. You need to build a near-real-time view of which users are following whom. Describe the key architectural considerations, including how you\u2019d manage state, handle ordering issues, and potentially address consistency concerns \u2013 specifically referencing concepts like the CAP theorem.\u201d"
  },
  {
    "chunk": "profile update)? Put another way: if state changes over time, and you join with some\nstate, what point in time do you use for the join [ 45]?\nSuch time dependence can occur in many places. For example, if you sell things, you\nneed to apply the right tax rate to invoices, which depends on the country or state,\nthe type of product, and the date of sale (since tax rates change from time to time).\nWhen joining sales to a table of tax rates, you probably want to join with the tax rate\nat the time of the sale, which may be different from the current tax rate if you are\nreprocessing historical data.\nIf the ordering of events across streams is undetermined, the join becomes nondeter\u2010\nministic [ 87], which means you cannot rerun the same job on the same input and\nnecessarily get the same result: the events on the input streams may be interleaved in\na different way when you run the job again.\nIn data warehouses, this issue is known as a slowly changing dimension  (SCD), and it\nis often addressed by using a unique identifier for a particular version of the joined\nrecord: for example, every time the tax rate changes, it is given a new identifier, and\nthe invoice includes the identifier for the tax rate at the time of sale [ 88, 89]. This\nchange makes the join deterministic, but has the consequence that log compaction is\nnot possible, since all versions of the records in the table need to be retained. \nFault Tolerance\nIn the final section of this chapter, let\u2019s consider how stream processors can tolerate\nfaults. We saw in Chapter 10  that batch processing frameworks can tolerate faults\nfairly easily: if a task in a MapReduce job fails, it can simply be started again on\nanother machine, and the output of the failed task is discarded. This transparent retry\nis possible because input files are immutable, each task writes its output to a separate\nfile on HDFS, and output is only made visible when a task completes successfully.\nIn particular, the batch approach to fault tolerance ensures that the output of the\nbatch job is the same as if nothing had gone wrong, even if in fact some tasks did fail.\nIt appears as though every input record was processed exactly once\u2014no records are\nskipped, and none are processed twice. Although restarting tasks means that records\nmay in fact be processed multiple times, the visible effect in the output is as if they\nhad only been processed once. This principle is known as exactly-once semantics ,\nalthough effectively-once  would be a more descriptive term [ 90].\nThe same issue of fault tolerance arises in stream processing, but it is less straightfor\u2010\nward to handle: waiting until a task is finished before making its output visible is not\nan option, because a stream is infinite and so you can never finish processing it.\n476 | Chapter 11: Stream Processing\n",
    "summary": "This chunk discusses the challenges of deterministic joins in stream processing, particularly concerning Slowly Changing Dimensions (SCDs) and the implications for fault tolerance.",
    "sample_answer": "\u201cThis scenario highlights a critical challenge in stream processing \u2013 ensuring deterministic joins when dealing with evolving dimensions, like tax rates. To address this, we need to implement an SCD strategy, likely tracking changes via a unique identifier for each record version, similar to how a warehouse might track product revisions. From a fault-tolerance perspective, replicating the stream processing logic and managing the state accurately are crucial, acknowledging the limitations of exactly-once semantics within an infinite stream; this requires a careful understanding of how HDFS's immutable files and task retries can mask concurrent processing and effectively mimic exactly-once semantics.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system to process customer purchase events in real-time, incorporating dynamically changing tax rates. How would you design the system to maintain a consistent view of the purchase data, considering the challenges of ensuring deterministic joins, and what fault tolerance strategies would you employ to ensure data integrity?\u201d"
  },
  {
    "chunk": "Microbatching and checkpointing\nOne solution is to break the stream into small blocks, and treat each block like a min\u2010\niature batch process. This approach is called microbatching , and it is used in Spark\nStreaming [ 91]. The batch size is typically around one second, which is the result of a\nperformance compromise: smaller batches incur greater scheduling and coordination\noverhead, while larger batches mean a longer delay before results of the stream pro\u2010\ncessor become visible.\nMicrobatching also implicitly provides a tumbling window equal to the batch size\n(windowed by processing time, not event timestamps); any jobs that require larger\nwindows need to explicitly carry over state from one microbatch to the next.\nA variant approach, used in Apache Flink, is to periodically generate rolling check\u2010\npoints of state and write them to durable storage [ 92, 93]. If a stream operator\ncrashes, it can restart from its most recent checkpoint and discard any output gener\u2010\nated between the last checkpoint and the crash. The checkpoints are triggered by bar\u2010\nriers in the message stream, similar to the boundaries between microbatches, but\nwithout forcing a particular window size.\nWithin the confines of the stream processing framework, the microbatching and\ncheckpointing approaches provide the same exactly-once semantics as batch process\u2010\ning. However, as soon as output leaves the stream processor (for example, by writing\nto a database, sending messages to an external message broker, or sending emails),\nthe framework is no longer able to discard the output of a failed batch. In this case,\nrestarting a failed task causes the external side effect to happen twice, and micro\u2010\nbatching or checkpointing alone is not sufficient to prevent this problem.\nAtomic commit revisited\nIn order to give the appearance of exactly-once processing in the presence of faults,\nwe need to ensure that all outputs and side effects of processing an event take effect if\nand only if  the processing is successful. Those effects include any messages sent to\ndownstream operators or external messaging systems (including email or push notifi\u2010\ncations), any database writes, any changes to operator state, and any acknowledg\u2010\nment of input messages (including moving the consumer offset forward in a log-\nbased message broker).\nThose things either all need to happen atomically, or none of them must happen, but\nthey should not go out of sync with each other. If this approach sounds familiar, it is\nbecause we discussed it in \u201cExactly-once message processing\u201d on page 360  in the con\u2010\ntext of distributed transactions and two-phase commit.\nIn Chapter 9  we discussed the problems in the traditional implementations of dis\u2010\ntributed transactions, such as XA. However, in more restricted environments it is\npossible to implement such an atomic commit facility efficiently. This approach is\nProcessing Streams | 477\n",
    "summary": "The chunk discusses microbatching, checkpointing, and atomic commit strategies for achieving exactly-once semantics in stream processing, highlighting the challenges and trade-offs involved.",
    "sample_answer": "\u201cOkay, so when dealing with stream processing and the need for exactly-once semantics, we\u2019re often facing a core challenge: how do we ensure that all side effects, like writes to a database or sending messages, are consistent even if a task fails? Microbatching, as seen in Spark Streaming, allows us to treat small chunks of data as mini-batches, but that approach doesn\u2019t solve the problem of external effects; checkpointing, used in Flink, allows us to periodically save operator state, which can be restored after a failure. Critically, these approaches only work if we\u2019re operating within the stream processor's control \u2013 once the output leaves the stream processor, we lose that guarantee, mirroring the challenges of distributed transactions and necessitating an \u2018atomic commit\u2019 strategy, similar to 2PC, to ensure all side effects are handled consistently.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re building a real-time analytics pipeline that writes aggregated data to a database. We're using a stream processing framework like Flink. Explain the trade-offs between microbatching and checkpointing, and discuss how you would address the challenge of ensuring exactly-once semantics when writing data to external systems, referencing concepts like atomic commits and potential solutions.\u201d"
  },
  {
    "chunk": "\u201cStream-table join (stream enrichment)\u201d on page 473. An alternative is to keep state\nlocal to the stream processor, and replicate it periodically. Then, when the stream\nprocessor is recovering from a failure, the new task can read the replicated state and\nresume processing without data loss.\nFor example, Flink periodically captures snapshots of operator state and writes them\nto durable storage such as HDFS [ 92, 93]; Samza and Kafka Streams replicate state\nchanges by sending them to a dedicated Kafka topic with log compaction, similar to\nchange data capture [ 84, 100]. VoltDB replicates state by redundantly processing\neach input message on several nodes (see \u201cActual Serial Execution\u201d on page 252 ).\nIn some cases, it may not even be necessary to replicate the state, because it can be\nrebuilt from the input streams. For example, if the state consists of aggregations over\na fairly short window, it may be fast enough to simply replay the input events corre\u2010\nsponding to that window. If the state is a local replica of a database, maintained by\nchange data capture, the database can also be rebuilt from the log-compacted change\nstream (see \u201cLog compaction\u201d on page 456 ).\nHowever, all of these trade-offs depend on the performance characteristics of the\nunderlying infrastructure: in some systems, network delay may be lower than disk\naccess latency, and network bandwidth may be comparable to disk bandwidth. There\nis no universally ideal trade-off for all situations, and the merits of local versus\nremote state may also shift as storage and networking technologies evolve. \nSummary\nIn this chapter we have discussed event streams, what purposes they serve, and how\nto process them. In some ways, stream processing is very much like the batch pro\u2010\ncessing we discussed in Chapter 10 , but done continuously on unbounded (never-\nending) streams rather than on a fixed-size input. From this perspective, message\nbrokers and event logs serve as the streaming equivalent of a filesystem.\nWe spent some time comparing two types of message brokers:\nAMQP/JMS-style message broker\nThe broker assigns individual messages to consumers, and consumers acknowl\u2010\nedge individual messages when they have been successfully processed. Messages\nare deleted from the broker once they have been acknowledged. This approach is\nappropriate as an asynchronous form of RPC (see also \u201cMessage-Passing Data\u2010\nflow\u201d  on page 136), for example in a task queue, where the exact order of mes\u2010\nsage processing is not important and where there is no need to go back and read\nold messages again after they have been processed.\nSummary | 479\n",
    "summary": "This chunk discusses strategies for handling state in stream processing, including replication and rebuilding from streams, highlighting the importance of understanding infrastructure trade-offs.",
    "sample_answer": "\u201cOkay, this chapter presents several approaches to state management in stream processing. The core idea is that maintaining state locally versus replicating it impacts availability and recovery \u2013 if the stream processor fails, recovering from a local state is faster than rebuilding from a replicated state, which requires reading the change stream. The replication strategy discussed, using Kafka Streams with log compaction, aligns with a change data capture (CDC) pattern, where state changes are tracked in a durable log, similar to how we would handle schema evolution and ensure data consistency across systems.\u201d",
    "potential_interview_question": "\u201cImagine you're designing a real-time fraud detection system using Kafka Streams. Describe the different strategies you could employ for handling state \u2013 such as local replication versus rebuilding from the input stream \u2013 and explain the trade-offs in terms of availability, latency, and data consistency. How would you choose the best approach, and how would you monitor this system for performance or correctness issues?\u201d"
  },
  {
    "chunk": "two join inputs may in fact be the same stream (a self-join ) if you want to find\nrelated events within that one stream.\nStream-table joins\nOne input stream consists of activity events, while the other is a database change\u2010\nlog. The changelog keeps a local copy of the database up to date. For each activity\nevent, the join operator queries the database and outputs an enriched activity\nevent.\nTable-table joins\nBoth input streams are database changelogs. In this case, every change on one\nside is joined with the latest state of the other side. The result is a stream of\nchanges to the materialized view of the join between the two tables.\nFinally, we discussed techniques for achieving fault tolerance and exactly-once\nsemantics in a stream processor. As with batch processing, we need to discard the\npartial output of any failed tasks. However, since a stream process is long-running\nand produces output continuously, we can\u2019t simply discard all output. Instead, a\nfiner-grained recovery mechanism can be used, based on microbatching, checkpoint\u2010\ning, transactions, or idempotent writes. \nReferences\n[1] Tyler Akidau, Robert Bradshaw, Craig Chambers, et al.: \u201c The Dataflow Model: A\nPractical Approach to Balancing Correctness, Latency, and Cost in Massive-Scale,\nUnbounded, Out-of-Order Data Processing ,\u201d Proceedings of the VLDB Endowment ,\nvolume 8, number 12, pages 1792\u20131803, August 2015. doi:10.14778/2824032.2824076\n[2] Harold Abelson, Gerald Jay Sussman, and Julie Sussman: Structure and Interpre\u2010\ntation of Computer Programs , 2nd edition. MIT Press, 1996. ISBN:\n978-0-262-51087-5, available online at mitpress.mit.edu\n[3] Patrick Th. Eugster, Pascal A. Felber, Rachid Guerraoui, and Anne-Marie Ker\u2010\nmarrec: \u201c The Many Faces of Publish/Subscribe ,\u201d ACM Computing Surveys , volume\n35, number 2, pages 114\u2013131, June 2003. doi:10.1145/857076.857078\n[4] Joseph M. Hellerstein and Michael Stonebraker: Readings in Database Systems ,\n4th edition. MIT Press, 2005. ISBN: 978-0-262-69314-1, available online at red\u2010\nbook.cs.berkeley.edu\n[5] Don Carney, U\u011fur \u00c7etintemel, Mitch Cherniack, et al.: \u201c Monitoring Streams \u2013 A\nNew Class of Data Management Applications ,\u201d at 28th International Conference on\nVery Large Data Bases  (VLDB), August 2002.\n[6] Matthew Sackman: \u201c Pushing Back ,\u201d lshift.net , May 5, 2016.\nSummary | 481\n",
    "summary": "The chunk discusses stream-table joins, fault tolerance strategies in stream processing, and techniques for achieving exactly-once semantics.",
    "sample_answer": "\u201cThis scenario highlights a key design consideration when processing streams \u2013 the potential need for self-joins to correlate events within a single stream. When dealing with stream-table joins, especially where one input is a changelog, we\u2019re essentially reconstructing a materialized view.  From a fault-tolerance perspective, discarding partial output isn\u2019t sufficient because of the long-running nature of stream processing.  Instead, we need strategies like microbatching or checkpointing\u2014which align with the CAP theorem by prioritizing availability\u2014to ensure durability and recovery, echoing the concepts discussed in the VLDB paper by Akidau et al.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you might employ a stream-table join and discuss the trade-offs you would consider in terms of latency, throughput, and fault tolerance.\u201d"
  },
  {
    "chunk": "[7] Vicent Mart\u00ed: \u201c Brubeck, a statsd-Compatible Metrics Aggregator ,\u201d githubengin\u2010\neering.com , June 15, 2015.\n[8] Seth Lowenberger: \u201c MoldUDP64 Protocol Specification V 1.00 ,\u201d nasdaq\u2010\ntrader.com , July 2009.\n[9] Pieter Hintjens: ZeroMQ \u2013 The Guide . O\u2019Reilly Media, 2013. ISBN:\n978-1-449-33404-8\n[10] Ian Malpass: \u201c Measure Anything, Measure Everything ,\u201d codeascraft.com , Febru\u2010\nary 15, 2011.\n[11] Dieter Plaetinck: \u201c 25 Graphite, Grafana and statsd Gotchas ,\u201d blog.raintank.io ,\nMarch 3, 2016.\n[12] Jeff Lindsay: \u201c Web Hooks to Revolutionize the Web ,\u201d progrium.com , May 3,\n2007.\n[13] Jim N. Gray: \u201c Queues Are Databases ,\u201d Microsoft Research Technical Report\nMSR-TR-95-56, December 1995.\n[14] Mark Hapner, Rich Burridge, Rahul Sharma, et al.: \u201c JSR-343 Java Message Ser\u2010\nvice (JMS) 2.0 Specification ,\u201d jms-spec.java.net , March 2013.\n[15] Sanjay Aiyagari, Matthew Arrott, Mark Atwell, et al.: \u201c AMQP: Advanced Mes\u2010\nsage Queuing Protocol Specification ,\u201d Version 0-9-1, November 2008.\n[16] \u201cGoogle Cloud Pub/Sub: A Google-Scale Messaging Service ,\u201d cloud.google.com ,\n2016.\n[17] \u201cApache Kafka 0.9 Documentation ,\u201d kafka.apache.org , November 2015.\n[18] Jay Kreps, Neha Narkhede, and Jun Rao: \u201c Kafka: A Distributed Messaging Sys\u2010\ntem for Log Processing ,\u201d at 6th International Workshop on Networking Meets Data\u2010\nbases  (NetDB), June 2011.\n[19] \u201cAmazon Kinesis Streams Developer Guide ,\u201d docs.aws.amazon.com , April 2016.\n[20] Leigh Stewart and Sijie Guo: \u201c Building DistributedLog: Twitter\u2019s High-\nPerformance Replicated Log Service ,\u201d blog.twitter.com , September 16, 2015.\n[21] \u201cDistributedLog Documentation ,\u201d Twitter, Inc., distributedlog.io , May 2016.\n[22] Jay Kreps: \u201c Benchmarking Apache Kafka: 2 Million Writes Per Second (On\nThree Cheap Machines) ,\u201d engineering.linkedin.com , April 27, 2014.\n[23] Kartik Paramasivam: \u201c How We\u2019re Improving and Advancing Kafka at\nLinkedIn ,\u201d engineering.linkedin.com , September 2, 2015.\n[24] Jay Kreps: \u201c The Log: What Every Software Engineer Should Know About Real-\nTime Data\u2019s Unifying Abstraction ,\u201d engineering.linkedin.com , December 16, 2013.\n482 | Chapter 11: Stream Processing\n",
    "summary": "The chunk discusses various messaging systems and log processing architectures, including Kafka, DistributedLog, and considerations for scaling and performance.",
    "sample_answer": "\u201cThis collection of resources highlights the evolution of real-time data processing, particularly focusing on the trade-offs between centralized and distributed logging solutions. For instance, DistributedLog\u2019s approach, as described in the Twitter engineering blog post, demonstrates a key architectural pattern: replicating data across multiple nodes to achieve high availability and fault tolerance, similar to what we'd consider when designing a system like Kafka. This mirrors the CAP theorem \u2013 acknowledging that we may need to sacrifice consistency for availability in a distributed environment.  Furthermore, the emphasis on benchmarks like Kreps\u2019s LinkedIn study on Kafka\u2019s performance showcases the importance of rigorous testing to understand the limitations and optimal configurations for a system like Kafka, a crucial aspect of any high-throughput data pipeline.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where you might choose Kafka over a simpler messaging queue like RabbitMQ. What are the key considerations and trade-offs you would evaluate when making this decision, referencing specific concepts like the CAP theorem or data replication strategies?\u201d"
  },
  {
    "chunk": "[25] Shirshanka Das, Chavdar Botev, Kapil Surlaker, et al.: \u201c All Aboard the Data\u2010\nbus!,\u201d at 3rd ACM Symposium on Cloud Computing  (SoCC), October 2012.\n[26] Yogeshwer Sharma, Philippe Ajoux, Petchean Ang, et al.: \u201c Wormhole: Reliable\nPub-Sub to Support Geo-Replicated Internet Services ,\u201d at 12th USENIX Symposium\non Networked Systems Design and Implementation  (NSDI), May 2015.\n[27] P. P. S. Narayan: \u201c Sherpa Update ,\u201d developer.yahoo.com , June 8, .\n[28] Martin Kleppmann: \u201c Bottled Water: Real-Time Integration of PostgreSQL and\nKafka ,\u201d martin.kleppmann.com , April 23, 2015.\n[29] Ben Osheroff: \u201c Introducing Maxwell, a mysql-to-kafka Binlog Processor ,\u201d devel\u2010\noper.zendesk.com , August 20, 2015.\n[30] Randall Hauch: \u201c Debezium 0.2.1 Released ,\u201d debezium.io , June 10, 2016.\n[31] Prem Santosh Udaya Shankar: \u201c Streaming MySQL Tables in Real-Time to\nKafka ,\u201d engineeringblog.yelp.com , August 1, 2016.\n[32] \u201cMongoriver ,\u201d Stripe, Inc., github.com , September 2014.\n[33] Dan Harvey: \u201c Change Data Capture with Mongo + Kafka ,\u201d at Hadoop Users\nGroup UK , August 2015.\n[34] \u201cOracle GoldenGate 12c: Real-Time Access to Real-Time Information ,\u201d Oracle\nWhite Paper, March 2015.\n[35] \u201cOracle GoldenGate Fundamentals: How Oracle GoldenGate Works ,\u201d Oracle\nCorporation, youtube.com , November 2012.\n[36] Slava Akhmechet: \u201c Advancing the Realtime Web ,\u201d rethinkdb.com , January 27,\n2015.\n[37] \u201cFirebase Realtime Database Documentation ,\u201d Google, Inc., firebase.google.com ,\nMay 2016.\n[38] \u201cApache CouchDB 1.6 Documentation ,\u201d docs.couchdb.org , 2014.\n[39] Matt DeBergalis: \u201c Meteor 0.7.0: Scalable Database Queries Using MongoDB\nOplog Instead of Poll-and-Diff ,\u201d info.meteor.com , December 17, 2013.\n[40] \u201cChapter 15. Importing and Exporting Live Data ,\u201d VoltDB 6.4 User Manual,\ndocs.voltdb.com , June 2016.\n[41] Neha Narkhede: \u201c Announcing Kafka Connect: Building Large-Scale Low-\nLatency Data Pipelines ,\u201d confluent.io , February 18, 2016.\n[42] Greg Young: \u201c CQRS and Event Sourcing ,\u201d at Code on the Beach , August 2014.\n[43] Martin Fowler: \u201c Event Sourcing ,\u201d martinfowler.com , December 12, 2005.\nSummary | 483\n",
    "summary": "The text discusses various techniques for real-time data integration, change data capture, and streaming data pipelines, including technologies like Kafka, Debezium, and approaches like CQRS and Event Sourcing.",
    "sample_answer": "\u201cOkay, this chunk highlights several critical aspects of building modern data pipelines. It\u2019s clear that real-time data integration is a major focus, and we're seeing techniques like Debezium capturing changes from MySQL and streaming them into Kafka \u2013 which, as Martin Kleppmann explains in the \u2018Bottled Water\u2019 paper, allows us to build resilient, low-latency pipelines. The use of Event Sourcing, as discussed by Martin Fowler, is also crucial for maintaining data consistency and auditability in these systems.  From a design perspective, the choice between approaches like Kafka Connect and Debezium reflects a trade-off between operational complexity and the speed of integration \u2013 a choice we'd need to carefully consider based on the specific requirements.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you would choose Debezium over Kafka Connect for capturing changes from a MySQL database and streaming them into Kafka. What are the key trade-offs you\u2019d be considering, and how would you monitor the health of the integration?\u201d"
  },
  {
    "chunk": "[44] Vaughn Vernon: Implementing Domain-Driven Design . Addison-Wesley Profes\u2010\nsional, 2013. ISBN: 978-0-321-83457-7\n[45] H. V. Jagadish, Inderpal Singh Mumick, and Abraham Silberschatz: \u201c View\nMaintenance Issues for the Chronicle Data Model ,\u201d at 14th ACM SIGACT-SIGMOD-\nSIGART Symposium on Principles of Database Systems  (PODS), May 1995. doi:\n10.1145/212433.220201\n[46] \u201cEvent Store 3.5.0 Documentation ,\u201d Event Store LLP, docs.geteventstore.com ,\nFebruary 2016.\n[47] Martin Kleppmann: Making Sense of Stream Processing . Report, O\u2019Reilly Media,\nMay 2016.\n[48] Sander Mak: \u201c Event-Sourced Architectures with Akka ,\u201d at JavaOne , September\n2014.\n[49] Julian Hyde: personal communication , June 2016.\n[50] Ashish Gupta and Inderpal Singh Mumick: Materialized Views: Techniques,\nImplementations, and Applications . MIT Press, 1999. ISBN: 978-0-262-57122-7\n[51] Timothy Griffin and Leonid Libkin: \u201c Incremental Maintenance of Views with\nDuplicates ,\u201d at ACM International Conference on Management of Data  (SIGMOD),\nMay 1995. doi:10.1145/223784.223849\n[52] Pat Helland: \u201c Immutability Changes Everything ,\u201d at 7th Biennial Conference on\nInnovative Data Systems Research  (CIDR), January 2015.\n[53] Martin Kleppmann: \u201c Accounting for Computer Scientists ,\u201d martin.klepp\u2010\nmann.com , March 7, 2011.\n[54] Pat Helland: \u201c Accountants Don\u2019t Use Erasers ,\u201d blogs.msdn.com , June 14, 2007.\n[55] Fangjin Yang: \u201c Dogfooding with Druid, Samza, and Kafka: Metametrics at Met\u2010\namarkets ,\u201d metamarkets.com , June 3, 2015.\n[56] Gavin Li, Jianqiu Lv, and Hang Qi: \u201c Pistachio: Co-Locate the Data and Compute\nfor Fastest Cloud Compute ,\u201d yahoohadoop.tumblr.com , April 13, 2015.\n[57] Kartik Paramasivam: \u201c Stream Processing Hard Problems \u2013 Part 1: Killing\nLambda ,\u201d engineering.linkedin.com , June 27, 2016.\n[58] Martin Fowler: \u201c CQRS ,\u201d martinfowler.com , July 14, 2011.\n[59] Greg Young: \u201c CQRS Documents ,\u201d cqrs.files.wordpress.com , November 2010.\n[60] Baron Schwartz: \u201c Immutability, MVCC, and Garbage Collection ,\u201d xaprb.com ,\nDecember 28, 2013.\n484 | Chapter 11: Stream Processing\n",
    "summary": "The chunk discusses various concepts related to data modeling (Event Sourcing, Materialized Views), stream processing (Lambda architecture, CQRS), and architectural patterns (Immutability, MVCC).",
    "sample_answer": "\u201cThis chunk highlights several key considerations for building robust data systems. The emphasis on Event Sourcing, as outlined in the Event Store documentation and Sander Mak\u2019s work, suggests a design where every change to a system\u2019s state is recorded as an event. Combining this with immutable data structures, as Pat Helland argues, helps ensure data integrity and simplifies debugging \u2013 avoiding the complexities of traditional data models. Furthermore, the discussion of Lambda architecture and CQRS, referencing Martin Fowler and Greg Young, points to a design pattern where separating read and write models improves scalability and allows for tailored processing strategies.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where Event Sourcing would be a beneficial architecture choice. Explain how immutability plays a role in this design, and what challenges might you anticipate given the complexities of distributed systems?\u201d"
  },
  {
    "chunk": "[61] Daniel Eloff, Slava Akhmechet, Jay Kreps, et al.: \u201cRe: Turning the Database\nInside-out with Apache Samza ,\u201d Hacker News discussion, news.ycombinator.com ,\nMarch 4, 2015.\n[62] \u201cDatomic Development Resources: Excision ,\u201d Cognitect, Inc., docs.datomic.com .\n[63] \u201cFossil Documentation: Deleting Content from Fossil ,\u201d fossil-scm.org , 2016.\n[64] Jay Kreps: \u201c The irony of distributed systems is that data loss is really easy but\ndeleting data is surprisingly hard, \u201d twitter.com , March 30, 2015.\n[65] David C. Luckham: \u201c What\u2019s the Difference Between ESP and CEP? ,\u201d complexe\u2010\nvents.com , August 1, 2006.\n[66] Srinath Perera: \u201c How Is Stream Processing and Complex Event Processing\n(CEP) Different? ,\u201d quora.com , December 3, 2015.\n[67] Arvind Arasu, Shivnath Babu, and Jennifer Widom: \u201c The CQL Continuous\nQuery Language: Semantic Foundations and Query Execution ,\u201d The VLDB Journal ,\nvolume 15, number 2, pages 121\u2013142, June 2006. doi:10.1007/s00778-004-0147-z\n[68] Julian Hyde: \u201c Data in Flight: How Streaming SQL Technology Can Help Solve\nthe Web 2.0 Data Crunch ,\u201d ACM Queue , volume 7, number 11, December 2009. doi:\n10.1145/1661785.1667562\n[69] \u201cEsper Reference, Version 5.4.0 ,\u201d EsperTech, Inc., espertech.com , April 2016.\n[70] Zubair Nabi, Eric Bouillet, Andrew Bainbridge, and Chris Thomas: \u201c Of Streams\nand Storms ,\u201d IBM technical report, developer.ibm.com , April 2014.\n[71] Milinda Pathirage, Julian Hyde, Yi Pan, and Beth Plale: \u201c SamzaSQL: Scalable\nFast Data Management with Streaming SQL ,\u201d at IEEE International Workshop on\nHigh-Performance Big Data Computing  (HPBDC), May 2016. doi:10.1109/IPDPSW.\n2016.141\n[72] Philippe Flajolet, \u00c9ric Fusy, Olivier Gandouet, and Fr\u00e9d\u00e9ric Meunier: \u201c HyperLog\nLog: The Analysis of a Near-Optimal Cardinality Estimation Algorithm ,\u201d at Confer\u2010\nence on Analysis of Algorithms  (AofA), June 2007.\n[73] Jay Kreps: \u201c Questioning the Lambda Architecture ,\u201d oreilly.com , July 2, 2014.\n[74] Ian Hellstr\u00f6m: \u201c An Overview of Apache Streaming Technologies ,\u201d database\u2010\nline.wordpress.com , March 12, 2016.\n[75] Jay Kreps: \u201c Why Local State Is a Fundamental Primitive in Stream Processing ,\u201d\noreilly.com , July 31, 2014.\n[76] Shay Banon: \u201c Percolator ,\u201d elastic.co , February 8, 2011.\n[77] Alan Woodward and Martin Kleppmann: \u201c Real-Time Full-Text Search with\nLuwak and Samza ,\u201d martin.kleppmann.com , April 13, 2015.\nSummary | 485\n",
    "summary": "The discussion highlights the challenges of data loss and deletion in distributed systems, particularly when using stream processing technologies like Samza and Esper, alongside concepts like local state and HyperLogLog.",
    "sample_answer": "\"This chunk emphasizes a critical design consideration: the difficulty of reliably deleting data in a distributed, streaming environment. The Lambda Architecture\u2019s reliance on immutable logs and eventual consistency creates a situation where truly deleting data is hard\u2014it's easier to simply append new data.  Technologies like Samza, which employs local state for processing, combined with solutions like HyperLogLog for cardinality estimation, are important to manage data drift and ensure the system can still function accurately despite this challenge.  Furthermore, the discussion about Percolator suggests a potential approach to managing and purging stale data, acknowledging that a naive deletion strategy isn't viable.\"",
    "potential_interview_question": "\u201cDescribe a situation where the ease of appending data to a stream processing system (like Samza) creates a significant design challenge related to data retention and query accuracy. How would you mitigate this challenge, and what techniques might you leverage, such as those discussed in the text?\u201d"
  },
  {
    "chunk": "[78] \u201cApache Storm 1.0.1 Documentation ,\u201d storm.apache.org , May 2016.\n[79] Tyler Akidau: \u201c The World Beyond Batch: Streaming 102 ,\u201d oreilly.com , January\n20, 2016.\n[80] Stephan Ewen: \u201c Streaming Analytics with Apache Flink ,\u201d at Kafka Summit , April\n2016.\n[81] Tyler Akidau, Alex Balikov, Kaya Bekiro\u011flu, et al.: \u201c MillWheel: Fault-Tolerant\nStream Processing at Internet Scale ,\u201d at 39th International Conference on Very Large\nData Bases  (VLDB), August 2013.\n[82] Alex Dean: \u201c Improving Snowplow\u2019s Understanding of Time ,\u201d snowplowanalyt\u2010\nics.com , September 15, 2015.\n[83] \u201cWindowing (Azure Stream Analytics) ,\u201d Microsoft Azure Reference,\nmsdn.microsoft.com , April 2016.\n[84] \u201cState Management ,\u201d Apache Samza 0.10 Documentation, samza.apache.org ,\nDecember 2015.\n[85] Rajagopal Ananthanarayanan, Venkatesh Basker, Sumit Das, et al.: \u201c Photon:\nFault-Tolerant and Scalable Joining of Continuous Data Streams ,\u201d at ACM Interna\u2010\ntional Conference on Management of Data  (SIGMOD), June 2013. doi:\n10.1145/2463676.2465272\n[86] Martin Kleppmann: \u201c Samza Newsfeed Demo ,\u201d github.com , September 2014.\n[87] Ben Kirwin: \u201c Doing the Impossible: Exactly-Once Messaging Patterns in Kafka ,\u201d\nben.kirw.in , November 28, 2014.\n[88] Pat Helland: \u201c Data on the Outside Versus Data on the Inside ,\u201d at 2nd Biennial\nConference on Innovative Data Systems Research  (CIDR), January 2005.\n[89] Ralph Kimball and Margy Ross: The Data Warehouse Toolkit: The Definitive\nGuide to Dimensional Modeling , 3rd edition. John Wiley & Sons, 2013. ISBN:\n978-1-118-53080-1\n[90] Viktor Klang: \u201c I\u2019m coining the phrase \u2018effectively-once\u2019 for message processing\nwith at-least-once + idempotent operations ,\u201d twitter.com , October 20, 2016.\n[91] Matei Zaharia, Tathagata Das, Haoyuan Li, et al.: \u201c Discretized Streams: An Effi\u2010\ncient and Fault-Tolerant Model for Stream Processing on Large Clusters ,\u201d at 4th\nUSENIX Conference in Hot Topics in Cloud Computing  (HotCloud), June 2012.\n[92] Kostas Tzoumas, Stephan Ewen, and Robert Metzger: \u201c High-Throughput, Low-\nLatency, and Exactly-Once Stream Processing with Apache Flink ,\u201d data-artisans.com ,\nAugust 5, 2015.\n486 | Chapter 11: Stream Processing\n",
    "summary": "The chunk discusses stream processing technologies, windowing strategies, and concepts like exactly-once semantics and fault-tolerant architectures, primarily focusing on tools like Apache Storm, Flink, Kafka, and Samza.",
    "sample_answer": "\u201cOkay, so this chunk highlights the evolution of stream processing. We're seeing a shift from batch-oriented approaches like Hadoop to real-time processing with technologies like Apache Storm and Flink. The emphasis on \u2018exactly-once\u2019 semantics, as discussed by Viktor Klang\u2019s Twitter thread, demonstrates the growing need for reliable, stateful stream processing. Using concepts like Flink and Kafka, we can achieve low-latency, fault-tolerant solutions, which is critical for modern data applications \u2013 something the \u2018Photon\u2019 paper from SIGMOD addresses. We also see the importance of windowing strategies, referencing Azure Stream Analytics for defining time-based analysis.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you might choose Apache Flink over Apache Storm for a real-time data processing application. What considerations would drive your decision, and how would you address the \u2018exactly-once\u2019 processing requirement?\u201d"
  },
  {
    "chunk": "[93] Paris Carbone, Gyula F\u00f3ra, Stephan Ewen, et al.: \u201c Lightweight Asynchronous\nSnapshots for Distributed Dataflows ,\u201d arXiv:1506.08603 [cs.DC], June 29, 2015.\n[94] Ryan Betts and John Hugg: Fast Data: Smart and at Scale . Report, O\u2019Reilly\nMedia, October 2015.\n[95] Flavio Junqueira: \u201c Making Sense of Exactly-Once Semantics ,\u201d at Strata+Hadoop\nWorld London , June 2016.\n[96] Jason Gustafson, Flavio Junqueira, Apurva Mehta, Sriram Subramanian, and\nGuozhang Wang: \u201c KIP-98 \u2013 Exactly Once Delivery and Transactional Messaging ,\u201d\ncwiki.apache.org , November 2016.\n[97] Pat Helland: \u201c Idempotence Is Not a Medical Condition ,\u201d Communications of the\nACM , volume 55, number 5, page 56, May 2012. doi:10.1145/2160718.2160734\n[98] Jay Kreps: \u201c Re: Trying to Achieve Deterministic Behavior on Recovery/Rewind ,\u201d\nemail to samza-dev  mailing list, September 9, 2014.\n[99] E. N. (Mootaz) Elnozahy, Lorenzo Alvisi, Yi-Min Wang, and David B. Johnson:\n\u201cA Survey of Rollback-Recovery Protocols in Message-Passing Systems ,\u201d ACM Com\u2010\nputing Surveys , volume 34, number 3, pages 375\u2013408, September 2002. doi:\n10.1145/568522.568525\n[100] Adam Warski: \u201c Kafka Streams \u2013 How Does It Fit the Stream Processing Land\u2010\nscape? ,\u201d softwaremill.com , June 1, 2016.\nSummary | 487\n",
    "summary": "The chunk discusses rollback-recovery protocols for distributed dataflows, particularly in the context of Kafka Streams, and explores the challenges of achieving exactly-once semantics in stream processing.",
    "sample_answer": "\u201cOkay, this excerpt highlights several key considerations for building robust stream processing systems. The discussion of rollback-recovery protocols, referencing Elnozahy et al. (2002), suggests that handling failures in Kafka Streams \u2013 or similar systems \u2013 requires careful design around the potential for data loss or duplication during recovery. Achieving exactly-once semantics, as explored in KIP-98 (Jason Gustafson et al., 2016), is critically important, and often necessitates strategies like idempotent operations and potentially utilizing techniques like two-phase commit (2PC) or variations of it, to ensure data consistency after a failure.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say you\u2019re designing a stream processing system using Kafka Streams. How would you approach guaranteeing exactly-once processing semantics, considering the challenges of rollback and recovery, and what considerations would you make regarding the underlying architecture to handle failures effectively?\u201d"
  },
  {
    "chunk": "CHAPTER 12\nThe Future of Data Systems\nIf a thing be ordained to another as to its end, its last end cannot consist in the preservation\nof its being. Hence a captain does not intend as a last end, the preservation of the ship\nentrusted to him, since a ship is ordained to something else as its end, viz. to navigation.\n(Often quoted as: If the highest aim of a captain was the preserve his ship, he would keep it\nin port forever.)\n\u2014St. Thomas Aquinas, Summa Theologica  (1265\u20131274)\nSo far, this book has been mostly about describing things as they are at present. In\nthis final chapter, we will shift our perspective toward the future and discuss how\nthings should be : I will propose some ideas and approaches that, I believe, may funda\u2010\nmentally improve the ways we design and build applications.\nOpinions and speculation about the future are of course subjective, and so I will use\nthe first person in this chapter when writing about my personal opinions. You are\nwelcome to disagree with them and form your own opinions, but I hope that the\nideas in this chapter will at least be a starting point for a productive discussion and\nbring some clarity to concepts that are often confused.\nThe goal of this book was outlined in Chapter 1 : to explore how to create applications\nand systems that are reliable , scalable , and maintainable . These themes have run\nthrough all of the chapters: for example, we discussed many fault-tolerance algo\u2010\nrithms that help improve reliability, partitioning to improve scalability, and mecha\u2010\nnisms for evolution and abstraction that improve maintainability. In this chapter we\nwill bring all of these ideas together, and build on them to envisage the future. Our\ngoal is to discover how to design applications that are better than the ones of today\u2014\nrobust, correct, evolvable, and ultimately beneficial to humanity.\n489\n",
    "summary": "The chapter emphasizes designing reliable, scalable, and maintainable systems, referencing concepts like fault tolerance, partitioning, and evolution/abstraction.",
    "sample_answer": "\u201cOkay, so this chapter really pivots towards future-oriented system design. The core message is that we need to move beyond simply describing existing systems and start thinking about how to build applications that are truly robust.  A key aspect is acknowledging the need for fault tolerance \u2013 concepts like replication and consensus algorithms (like Raft, for example) are crucial for ensuring availability even in the face of component failures.  Furthermore, the idea of partitioning data to achieve scalability aligns with the principle of dividing a complex problem into smaller, more manageable parts.  The emphasis on evolution and abstraction reflects the need for systems that can gracefully handle schema changes and maintainability over time \u2013 something frequently achieved through techniques like domain-driven design and embracing eventual consistency.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re designing a new real-time analytics platform.  How would you incorporate concepts like fault tolerance and partitioning to ensure both scalability and data reliability, referencing specific design patterns or techniques you\u2019d consider?\u201d"
  },
  {
    "chunk": "Updating a derived data system based on an event log can often be made determinis\u2010\ntic and idempotent (see \u201cIdempotence\u201d  on page 478), making it quite easy to recover\nfrom faults.\nDerived data versus distributed transactions\nThe classic approach for keeping different data systems consistent with each other\ninvolves distributed transactions, as discussed in \u201cAtomic Commit and Two-Phase\nCommit (2PC)\u201d on page 354. How does the approach of using derived data systems\nfare in comparison to distributed transactions?\nAt an abstract level, they achieve a similar goal by different means. Distributed trans\u2010\nactions decide on an ordering of writes by using locks for mutual exclusion (see\n\u201cTwo-Phase Locking (2PL)\u201d on page 257), while CDC and event sourcing use a log\nfor ordering. Distributed transactions use atomic commit to ensure that changes take\neffect exactly once, while log-based systems are often based on deterministic retry\nand idempotence.\nThe biggest difference is that transaction systems usually provide linearizability (see\n\u201cLinearizability\u201d  on page 324), which implies useful guarantees such as reading your\nown writes (see \u201cReading Your Own Writes\u201d on page 162). On the other hand,\nderived data systems are often updated asynchronously, and so they do not by default\noffer the same timing guarantees.\nWithin limited environments that are willing to pay the cost of distributed transac\u2010\ntions, they have been used successfully. However, I think that XA has poor fault toler\u2010\nance and performance characteristics (see \u201cDistributed Transactions in Practice\u201d  on\npage 360), which severely limit its usefulness. I believe that it might be possible to\ncreate a better protocol for distributed transactions, but getting such a protocol\nwidely adopted and integrated with existing tools would be challenging, and unlikely\nto happen soon.\nIn the absence of widespread support for a good distributed transaction protocol, I\nbelieve that log-based derived data is the most promising approach for integrating\ndifferent data systems. However, guarantees such as reading your own writes are use\u2010\nful, and I don\u2019t think that it is productive to tell everyone \u201ceventual consistency is\ninevitable\u2014suck it up and learn to deal with it\u201d (at least not without good guidance\non how to deal with it).\nIn \u201cAiming for Correctness\u201d  on page 515 we will discuss some approaches for imple\u2010\nmenting stronger guarantees on top of asynchronously derived systems, and work\ntoward a middle ground between distributed transactions and asynchronous log-\nbased systems.\n492 | Chapter 12: The Future of Data Systems\n",
    "summary": "The text contrasts distributed transactions (using 2PC and linearizability) with log-based derived data systems, highlighting the trade-offs in guarantees and fault tolerance.",
    "sample_answer": "\u201cOkay, let\u2019s break this down. The core argument here is that while distributed transactions, using protocols like 2PC and providing linearizability, offer strong consistency guarantees \u2013 including reading your own writes \u2013 they\u2019re increasingly complex and brittle. The text suggests that log-based derived data systems, relying on idempotence and deterministic retry, provide a more robust and scalable alternative, especially considering the inherent challenges of wide-scale 2PC adoption. We\u2019re essentially recognizing the CAP theorem \u2013 availability and consistency can\u2019t always be simultaneously optimized, and log-based systems represent a pragmatic approach to managing that trade-off.\u201d",
    "potential_interview_question": "\u201cDescribe the key differences between distributed transactions (using 2PC) and log-based derived data systems in terms of consistency guarantees and architectural trade-offs. How might a system designer approach the selection of the appropriate approach given specific requirements for data integration?\u201d"
  },
  {
    "chunk": "The limits of total ordering\nWith systems that are small enough, constructing a totally ordered event log is\nentirely feasible (as demonstrated by the popularity of databases with single-leader\nreplication, which construct precisely such a log). However, as systems are scaled\ntoward bigger and more complex workloads, limitations begin to emerge:\n\u2022In most cases, constructing a totally ordered log requires all events to pass\nthrough a single leader node  that decides on the ordering. If the throughput of\nevents is greater than a single machine can handle, you need to partition it across\nmultiple machines (see \u201cPartitioned Logs\u201d on page 446). The order of events in\ntwo different partitions is then ambiguous.\n\u2022If the servers are spread across multiple geographically distributed  datacenters,\nfor example in order to tolerate an entire datacenter going offline, you typically\nhave a separate leader in each datacenter, because network delays make synchro\u2010\nnous cross-datacenter coordination inefficient (see \u201cMulti-Leader Replication\u201d\non page 168). This implies an undefined ordering of events that originate in two\ndifferent datacenters.\n\u2022When applications are deployed as microservices  (see \u201cDataflow Through Serv\u2010\nices: REST and RPC\u201d on page 131), a common design choice is to deploy each\nservice and its durable state as an independent unit, with no durable state shared\nbetween services. When two events originate in different services, there is no\ndefined order for those events.\n\u2022Some applications maintain client-side state that is updated immediately on user\ninput (without waiting for confirmation from a server), and even continue to\nwork offline (see \u201cClients with offline operation\u201d on page 170). With such appli\u2010\ncations, clients and servers are very likely to see events in different orders.\nIn formal terms, deciding on a total order of events is known as total order broadcast ,\nwhich is equivalent to consensus (see \u201cConsensus algorithms and total order broad\u2010\ncast\u201d  on page 366). Most consensus algorithms are designed for situations in which\nthe throughput of a single node is sufficient to process the entire stream of events,\nand these algorithms do not provide a mechanism for multiple nodes to share the\nwork of ordering the events. It is still an open research problem to design consensus\nalgorithms that can scale beyond the throughput of a single node and that work well\nin a geographically distributed setting.\nOrdering events to capture causality\nIn cases where there is no causal link between events, the lack of a total order is not a\nbig problem, since concurrent events can be ordered arbitrarily. Some other cases are\neasy to handle: for example, when there are multiple updates of the same object, they\ncan be totally ordered by routing all updates for a particular object ID to the same log\nData Integration | 493\n",
    "summary": "The chunk discusses the challenges of establishing total ordering in distributed systems, particularly regarding scalability, geographical distribution, and microservices architectures, highlighting the connection to consensus algorithms.",
    "sample_answer": "\u201cOkay, this chunk really nails a key consideration in data engineering \u2013 total ordering. The core problem is that achieving a globally consistent total order becomes increasingly difficult as you scale out a system, particularly if you\u2019re dealing with geographically distributed datacenters or independent microservices.  The emergence of the need for total order broadcast mirrors the concept of consensus algorithms, like Raft or Paxos, which aim to provide agreement on a single logical sequence of events, but their inherent limitations in throughput become apparent when trying to handle high-volume, distributed streams \u2013 this also reinforces the CAP theorem; in a distributed system, you can only reliably optimize for two out of consistency, availability, and partition tolerance.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re designing a system to ingest events from thousands of IoT devices. Given that these devices operate independently and may experience network latency, how would you approach designing an ordering system for these events, and what trade-offs would you consider in terms of consistency versus availability?\u201d"
  },
  {
    "chunk": "partition. However, causal dependencies sometimes arise in more subtle ways (see\nalso \u201cOrdering and Causality\u201d on page 339 ).\nFor example, consider a social networking service, and two users who were in a rela\u2010\ntionship but have just broken up. One of the users removes the other as a friend, and\nthen sends a message to their remaining friends complaining about their ex-partner.\nThe user\u2019s intention is that their ex-partner should not see the rude message, since\nthe message was sent after the friend status was revoked.\nHowever, in a system that stores friendship status in one place and messages in\nanother place, that ordering dependency between the unfriend  event and the message-\nsend  event may be lost. If the causal dependency is not captured, a service that sends\nnotifications about new messages may process the message-send  event before the\nunfriend  event, and thus incorrectly send a notification to the ex-partner.\nIn this example, the notifications are effectively a join between the messages and the\nfriend list, making it related to the timing issues of joins that we discussed previously\n(see \u201cTime-dependence of joins\u201d on page 475 ). Unfortunately, there does not seem to\nbe a simple answer to this problem [ 2, 3]. Starting points include: \n\u2022Logical timestamps can provide total ordering without coordination (see\n\u201cSequence Number Ordering\u201d on page 343), so they may help in cases where\ntotal order broadcast is not feasible. However, they still require recipients to han\u2010\ndle events that are delivered out of order, and they require additional metadata to\nbe passed around.\n\u2022If you can log an event to record the state of the system that the user saw before\nmaking a decision, and give that event a unique identifier, then any later events\ncan reference that event identifier in order to record the causal dependency [ 4].\nWe will return to this idea in \u201cReads are events too\u201d on page 513 .\n\u2022Conflict resolution algorithms (see \u201cAutomatic Conflict Resolution\u201d on page\n174) help with processing events that are delivered in an unexpected order. They\nare useful for maintaining state, but they do not help if actions have external side\neffects (such as sending a notification to a user).\nPerhaps, over time, patterns for application development will emerge that allow\ncausal dependencies to be captured efficiently, and derived state to be maintained\ncorrectly, without forcing all events to go through the bottleneck of total order\nbroadcast. \nBatch and Stream Processing\nI would say that the goal of data integration is to make sure that data ends up in the\nright form in all the right places. Doing so requires consuming inputs, transforming,\njoining, filtering, aggregating, training models, evaluating, and eventually writing to\n494 | Chapter 12: The Future of Data Systems\n",
    "summary": "The chunk discusses causal dependencies in distributed systems, particularly around maintaining order when events with temporal relationships (like unfriend and message send) are processed asynchronously.",
    "sample_answer": "\u201cOkay, this is a classic challenge in distributed systems \u2013 ensuring consistency when events have inherent causal relationships. The core issue here is that without a centralized ordering service, we\u2019re vulnerable to inconsistencies, as highlighted by the social networking example. To address this, we could leverage logical timestamps, although these introduce the complexity of handling out-of-order events, requiring additional metadata and processing. Alternatively, we could use a mechanism to explicitly record event identifiers to allow later events to reference them, effectively capturing the causal chain \u2013 this approach mirrors the ideas we discussed in \u2018Reads are events too.\u2019\u201d",
    "potential_interview_question": "\u201cImagine a system processing events related to user transactions. How would you design a system to ensure that actions taken after a payment is initiated are correctly processed, considering potential delays and the possibility of out-of-order event delivery?  Specifically, what architectural patterns or techniques could you employ to handle causal dependencies between events, and what are the trade-offs associated with each approach?\u201d"
  },
  {
    "chunk": "Derived views allow gradual  evolution. If you want to restructure a dataset, you do\nnot need to perform the migration as a sudden switch. Instead, you can maintain the\nold schema and the new schema side by side as two independently derived views onto\nthe same underlying data. You can then start shifting a small number of users to the\nnew view in order to test its performance and find any bugs, while most users con\u2010\ntinue to be routed to the old view. Gradually, you can increase the proportion of\nusers accessing the new view, and eventually you can drop the old view [ 10].\nThe beauty of such a gradual migration is that every stage of the process is easily\nreversible if something goes wrong: you always have a working system to go back to.\nBy reducing the risk of irreversible damage, you can be more confident about going\nahead, and thus move faster to improve your system [ 11].\nThe lambda architecture\nIf batch processing is used to reprocess historical data, and stream processing is used\nto process recent updates, then how do you combine the two? The lambda architec\u2010\nture [12] is a proposal in this area that has gained a lot of attention.\nThe core idea of the lambda architecture is that incoming data should be recorded by\nappending immutable events to an always-growing dataset, similarly to event sourc\u2010\ning (see \u201cEvent Sourcing\u201d on page 457). From these events, read-optimized views are\nderived. The lambda architecture proposes running two different systems in parallel:\na batch processing system such as Hadoop MapReduce, and a separate stream-\nprocessing system such as Storm.\nIn the lambda approach, the stream processor consumes the events and quickly pro\u2010\nduces an approximate update to the view; the batch processor later consumes the\nsame  set of events and produces a corrected version of the derived view. The reason\u2010\ning behind this design is that batch processing is simpler and thus less prone to bugs,\nwhile stream processors are thought to be less reliable and harder to make fault-\ntolerant (see \u201cFault Tolerance\u201d on page 476). Moreover, the stream process can use\nfast approximate algorithms while the batch process uses slower exact algorithms.\nThe lambda architecture was an influential idea that shaped the design of data sys\u2010\ntems for the better, particularly by popularizing the principle of deriving views onto\nstreams of immutable events and reprocessing events when needed. However, I also\nthink that it has a number of practical problems:\n\u2022Having to maintain the same logic to run both in a batch and in a stream pro\u2010\ncessing framework is significant additional effort. Although libraries such as\nSummingbird [ 13] provide an abstraction for computations that can be run in\neither a batch or a streaming context, the operational complexity of debugging,\ntuning, and maintaining two different systems remains [ 14].\nData Integration | 497\n",
    "summary": "The chunk discusses a gradual data migration strategy (derived views) and the lambda architecture, highlighting trade-offs in system design.",
    "sample_answer": "\u201cOkay, let\u2019s talk about this gradual migration approach with derived views \u2013 it\u2019s a fantastic way to mitigate risk when restructuring a dataset. The key is that you maintain both the old and new views concurrently, allowing for controlled rollout and easy rollback if needed, a vital strategy for ensuring system availability. Moving on to the lambda architecture, it\u2019s an interesting approach, but the key tradeoff is the operational complexity of managing two distinct systems\u2014a batch system like Hadoop MapReduce and a stream processor. The rationale behind this architecture is that batch processing is simpler and less prone to bugs, while stream processors are thought to be less reliable and harder to make fault-tolerant, which justifies the two-system design.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where you might use derived views to migrate a dataset. What are the potential risks and benefits of this approach compared to a single, immediate migration? Also, how does the lambda architecture relate to this concept?\u201d"
  },
  {
    "chunk": "\u2022Since the stream pipeline and the batch pipeline produce separate outputs, they\nneed to be merged in order to respond to user requests. This merge is fairly easy\nif the computation is a simple aggregation over a tumbling window, but it\nbecomes significantly harder if the view is derived using more complex opera\u2010\ntions such as joins and sessionization, or if the output is not a time series.\n\u2022Although it is great to have the ability to reprocess the entire historical dataset,\ndoing so frequently is expensive on large datasets. Thus, the batch pipeline often\nneeds to be set up to process incremental batches (e.g., an hour\u2019s worth of data at\nthe end of every hour) rather than reprocessing everything. This raises the prob\u2010\nlems discussed in \u201cReasoning About Time\u201d on page 468, such as handling strag\u2010\nglers and handling windows that cross boundaries between batches.\nIncrementalizing a batch computation adds complexity, making it more akin to\nthe streaming layer, which runs counter to the goal of keeping the batch layer as\nsimple as possible.\nUnifying batch and stream processing\nMore recent work has enabled the benefits of the lambda architecture to be enjoyed\nwithout its downsides, by allowing both batch computations (reprocessing historical\ndata) and stream computations (processing events as they arrive) to be implemented\nin the same system [ 15].\nUnifying batch and stream processing in one system requires the following features,\nwhich are becoming increasingly widely available:\n\u2022The ability to replay historical events through the same processing engine that\nhandles the stream of recent events. For example, log-based message brokers\nhave the ability to replay messages (see \u201cReplaying old messages\u201d on page 451),\nand some stream processors can read input from a distributed filesystem like\nHDFS.\n\u2022Exactly-once semantics for stream processors\u2014that is, ensuring that the output\nis the same as if no faults had occurred, even if faults did in fact occur (see \u201cFault\nTolerance\u201d on page 476). Like with batch processing, this requires discarding the\npartial output of any failed tasks.\n\u2022Tools for windowing by event time, not by processing time, since processing\ntime is meaningless when reprocessing historical events (see \u201cReasoning About\nTime\u201d  on page 468). For example, Apache Beam provides an API for expressing\nsuch computations, which can then be run using Apache Flink or Google Cloud\nDataflow. \n498 | Chapter 12: The Future of Data Systems\n",
    "summary": "The chunk discusses unifying batch and stream processing, highlighting the need for exactly-once semantics, windowing by event time, and replay capabilities.",
    "sample_answer": "\u201cThis excerpt really highlights the challenges of merging batch and stream processing. The core problem is maintaining consistency when reprocessing historical data \u2013 something that requires careful consideration of exactly-once semantics, similar to what\u2019s discussed in \u2018Fault Tolerance\u2019 on page 476. We need to ensure that replaying historical events doesn\u2019t inadvertently double-count or corrupt our results, which is why mechanisms like discarding partial output during failures are crucial.\u201d Furthermore, \u201cThe emphasis on windowing by event time, rather than processing time, as demonstrated by Apache Beam, reflects the fundamental difference between batch and stream processing, and the need for a consistent view when reprocessing historical data.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re building a system to analyze website clickstream data \u2013 part of which is processed in real-time as a stream, and part is processed in batches nightly. How would you approach ensuring \u2018exactly-once\u2019 processing when you need to recompute a key metric (e.g., hourly session count) from the historical data, and what architectural considerations would you make to avoid data inconsistencies?\u201d"
  },
  {
    "chunk": "i. Explaining a joke rarely improves it, but I don\u2019t want anyone to feel left out. Here, Church  is a reference to\nthe mathematician Alonzo Church, who created the lambda calculus, an early form of computation that is the\nbasis for most functional programming languages. The lambda calculus has no mutable state (i.e., no vari\u2010\nables that can be overwritten), so one could say that mutable state is separate from Church\u2019s work.poorly suited for this purpose. They do not fit well with the requirements of modern\napplication development, such as dependency and package management, version\ncontrol, rolling upgrades, evolvability, monitoring, metrics, calls to network services,\nand integration with external systems.\nOn the other hand, deployment and cluster management tools such as Mesos, YARN,\nDocker, Kubernetes, and others are designed specifically for the purpose of running\napplication code. By focusing on doing one thing well, they are able to do it much\nbetter than a database that provides execution of user-defined functions as one of its\nmany features.\nI think it makes sense to have some parts of a system that specialize in durable data\nstorage, and other parts that specialize in running application code. The two can\ninteract while still remaining independent.\nMost web applications today are deployed as stateless services, in which any user\nrequest can be routed to any application server, and the server forgets everything\nabout the request once it has sent the response. This style of deployment is conve\u2010\nnient, as servers can be added or removed at will, but the state has to go somewhere:\ntypically, a database. The trend has been to keep stateless application logic separate\nfrom state management (databases): not putting application logic in the database and\nnot putting persistent state in the application [ 36]. As people in the functional pro\u2010\ngramming community like to joke, \u201cWe believe in the separation of Church and\nstate\u201d [ 37].i\nIn this typical web application model, the database acts as a kind of mutable shared\nvariable that can be accessed synchronously over the network. The application can\nread and update the variable, and the database takes care of making it durable, pro\u2010\nviding some concurrency control and fault tolerance.\nHowever, in most programming languages you cannot subscribe to changes in a\nmutable variable\u2014you can only read it periodically. Unlike in a spreadsheet, readers\nof the variable don\u2019t get notified if the value of the variable changes. (You can imple\u2010\nment such notifications in your own code\u2014this is known as the observer pattern \u2014\nbut most languages do not have this pattern as a built-in feature.)\nDatabases have inherited this passive approach to mutable data: if you want to find\nout whether the content of the database has changed, often your only option is to poll\n(i.e., to repeat your query periodically). Subscribing to changes is only just beginning\nto emerge as a feature (see \u201cAPI support for change streams\u201d on page 456 ).\n506 | Chapter 12: The Future of Data Systems\n",
    "summary": "The text discusses the trade-offs between specialized data storage and application execution environments, highlighting the importance of stateless deployments and the challenges of managing mutable state in data systems.",
    "sample_answer": "\u201cThis excerpt really underscores the importance of designing for distinct roles within a system. We\u2019ve seen a trend towards deploying application logic as stateless services, and this directly impacts how we approach data storage. The challenge highlighted here is managing mutable state \u2013 polling for changes in a database is inherently inefficient and prone to inconsistency. This aligns with the broader principle of minimizing shared mutable state, a common recommendation for building more resilient and scalable systems, and directly relates to the concepts of eventual consistency when dealing with asynchronous updates.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where you\u2019ve had to choose between using a mutable database for state management and a stateless application architecture. What considerations did you take into account, and what trade-offs did you make? How would you address the challenges of monitoring and alerting in such a system?\u201d"
  },
  {
    "chunk": "ii. In the microservices approach, you could avoid the synchronous network request by caching the exchange\nrate locally in the service that processes the purchase. However, in order to keep that cache fresh, you would\nneed to periodically poll for updated exchange rates, or subscribe to a stream of changes\u2014which is exactly\nwhat happens in the dataflow approach.This application code can do the arbitrary processing that built-in derivation func\u2010\ntions in databases generally don\u2019t provide. Like Unix tools chained by pipes, stream\noperators can be composed to build large systems around dataflow. Each operator\ntakes streams of state changes as input, and produces other streams of state changes\nas output.\nStream processors and services\nThe currently trendy style of application development involves breaking down func\u2010\ntionality into a set of services  that communicate via synchronous network requests\nsuch as REST APIs (see \u201cDataflow Through Services: REST and RPC\u201d on page 131).\nThe advantage of such a service-oriented architecture over a single monolithic appli\u2010\ncation is primarily organizational scalability through loose coupling: different teams\ncan work on different services, which reduces coordination effort between teams (as\nlong as the services can be deployed and updated independently).\nComposing stream operators into dataflow systems has a lot of similar characteristics\nto the microservices approach [ 40]. However, the underlying communication mecha\u2010\nnism is very different: one-directional, asynchronous message streams rather than\nsynchronous request/response interactions.\nBesides the advantages listed in \u201cMessage-Passing Dataflow\u201d  on page 136, such as\nbetter fault tolerance, dataflow systems can also achieve better performance. For\nexample, say a customer is purchasing an item that is priced in one currency but paid\nfor in another currency. In order to perform the currency conversion, you need to\nknow the current exchange rate. This operation could be implemented in two ways\n[40, 41]:\n1.In the microservices approach, the code that processes the purchase would prob\u2010\nably query an exchange-rate service or database in order to obtain the current\nrate for a particular currency.\n2.In the dataflow approach, the code that processes purchases would subscribe to a\nstream of exchange rate updates ahead of time, and record the current rate in a\nlocal database whenever it changes. When it comes to processing the purchase, it\nonly needs to query the local database.\nThe second approach has replaced a synchronous network request to another service\nwith a query to a local database (which may be on the same machine, even in the\nsame process).ii Not only is the dataflow approach faster, but it is also more robust to\n508 | Chapter 12: The Future of Data Systems\n",
    "summary": "The chunk discusses trade-offs between synchronous and asynchronous data processing, highlighting the benefits of dataflow systems for performance and fault tolerance through local state management and stream processing.",
    "sample_answer": "\u201cThis scenario really illustrates a key architectural difference between traditional microservices and dataflow systems. The initial approach of querying an external exchange-rate service represents a synchronous dependency, introducing potential latency and a single point of failure. By subscribing to a stream of exchange rate updates and maintaining a local database, we're leveraging a dataflow approach \u2013 essentially building a system around continuous state changes \u2013 which allows us to avoid that synchronous request and improves both performance and fault tolerance; this aligns with the principles of building robust, scalable systems by decoupling dependencies and utilizing asynchronous communication.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where using a dataflow approach, rather than a traditional microservices architecture, could be advantageous. Specifically, discuss the trade-offs you\u2019d consider regarding data consistency and performance when handling currency conversions as described in the text.\u201d"
  },
  {
    "chunk": "When we move away from the assumption of stateless clients talking to a central\ndatabase and toward state that is maintained on end-user devices, a world of new\nopportunities opens up. In particular, we can think of the on-device state as a cache of\nstate on the server . The pixels on the screen are a materialized view onto model\nobjects in the client app; the model objects are a local replica of state in a remote\ndatacenter [ 27].\nPushing state changes to clients\nIn a typical web page, if you load the page in a web browser and the data subse\u2010\nquently changes on the server, the browser does not find out about the change until\nyou reload the page. The browser only reads the data at one point in time, assuming\nthat it is static\u2014it does not subscribe to updates from the server. Thus, the state on\nthe device is a stale cache that is not updated unless you explicitly poll for changes.\n(HTTP-based feed subscription protocols like RSS are really just a basic form of poll\u2010\ning.)\nMore recent protocols have moved beyond the basic request/response pattern of\nHTTP: server-sent events (the EventSource API) and WebSockets provide communi\u2010\ncation channels by which a web browser can keep an open TCP connection to a\nserver, and the server can actively push messages to the browser as long as it remains\nconnected. This provides an opportunity for the server to actively inform the end-\nuser client about any changes to the state it has stored locally, reducing the staleness\nof the client-side state.\nIn terms of our model of write path and read path, actively pushing state changes all\nthe way to client devices means extending the write path all the way to the end user.\nWhen a client is first initialized, it would still need to use a read path to get its initial\nstate, but thereafter it could rely on a stream of state changes sent by the server. The\nideas we discussed around stream processing and messaging are not restricted to run\u2010\nning only in a datacenter: we can take the ideas further, and extend them all the way\nto end-user devices [ 43].\nThe devices will be offline some of the time, and unable to receive any notifications of\nstate changes from the server during that time. But we already solved that problem: in\n\u201cConsumer offsets\u201d on page 449 we discussed how a consumer of a log-based mes\u2010\nsage broker can reconnect after failing or becoming disconnected, and ensure that it\ndoesn\u2019t miss any messages that arrived while it was disconnected. The same techni\u2010\nque works for individual users, where each device is a small subscriber to a small\nstream of events.\nEnd-to-end event streams\nRecent tools for developing stateful clients and user interfaces, such as the Elm lan\u2010\nguage [ 30] and Facebook\u2019s toolchain of React, Flux, and Redux [ 44], already manage\n512 | Chapter 12: The Future of Data Systems\n",
    "summary": "The text discusses extending data pipelines to end-user devices via event streams, leveraging techniques like WebSockets and consumer offsets to maintain data consistency and handle offline scenarios.",
    "sample_answer": "\u201cThis approach represents a shift from traditional read-only data access to a truly real-time data stream, mirroring the concepts of stream processing we discussed earlier. Specifically, using WebSockets to establish persistent connections with clients allows the server to push updates, mimicking a long-running stream \u2013 something we\u2019ve built with Kafka before. This aligns with the consumer offset strategy, ensuring that clients can resume processing from where they left off after temporary disconnections, a critical component of building resilient, fault-tolerant data pipelines.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you\u2019d use a persistent connection protocol like WebSockets to deliver data updates to a large number of clients. How would you address potential issues like network instability and ensuring data consistency between the server and the clients?\u201d"
  },
  {
    "chunk": "the nodes that store the data being queried. This is a reasonable design, but not the\nonly possible one. It is also possible to represent read requests as streams of events,\nand send both the read events and the write events through a stream processor; the\nprocessor responds to read events by emitting the result of the read to an output\nstream [ 46].\nWhen both the writes and the reads are represented as events, and routed to the same\nstream operator in order to be handled, we are in fact performing a stream-table join\nbetween the stream of read queries and the database. The read event needs to be sent\nto the database partition holding the data (see \u201cRequest Routing\u201d on page 214), just\nlike batch and stream processors need to copartition inputs on the same key when\njoining (see \u201cReduce-Side Joins and Grouping\u201d on page 403 ).\nThis correspondence between serving requests and performing joins is quite funda\u2010\nmental [ 47]. A one-off read request just passes the request through the join operator\nand then immediately forgets it; a subscribe request is a persistent join with past and\nfuture events on the other side of the join.\nRecording a log of read events potentially also has benefits with regard to tracking\ncausal dependencies and data provenance across a system: it would allow you to\nreconstruct what the user saw before they made a particular decision. For example, in\nan online shop, it is likely that the predicted shipping date and the inventory status\nshown to a customer affect whether they choose to buy an item [ 4]. To analyze this\nconnection, you need to record the result of the user\u2019s query of the shipping and\ninventory status.\nWriting read events to durable storage thus enables better tracking of causal depen\u2010\ndencies (see \u201cOrdering events to capture causality\u201d on page 493), but it incurs addi\u2010\ntional storage and I/O cost. Optimizing such systems to reduce the overhead is still\nan open research problem [ 2]. But if you already log read requests for operational\npurposes, as a side effect of request processing, it is not such a great change to make\nthe log the source of the requests instead.\nMulti-partition data processing\nFor queries that only touch a single partition, the effort of sending queries through a\nstream and collecting a stream of responses is perhaps overkill. However, this idea\nopens the possibility of distributed execution of complex queries that need to com\u2010\nbine data from several partitions, taking advantage of the infrastructure for message\nrouting, partitioning, and joining that is already provided by stream processors.\nStorm\u2019s distributed RPC feature supports this usage pattern (see \u201cMessage passing\nand RPC\u201d on page 468). For example, it has been used to compute the number of\npeople who have seen a URL on Twitter\u2014i.e., the union of the follower sets of every\u2010\none who has tweeted that URL [ 48]. As the set of Twitter users is partitioned, this\ncomputation requires combining results from many partitions.\n514 | Chapter 12: The Future of Data Systems\n",
    "summary": "This chunk discusses stream-table joins, causal dependency tracking via event logging, and the potential for distributed query execution leveraging stream processors like Storm.",
    "sample_answer": "\u201cThis excerpt highlights a critical architectural pattern: transforming read requests into a stream-table join operation, mirroring how batch joins are handled. This approach allows us to leverage stream processing capabilities, much like a distributed MapReduce setup, but with potentially lower latency. Specifically, by logging read events, we can begin to establish causal dependencies, which is fundamental for debugging and understanding user behavior, as illustrated by the Twitter example\u2014combining data across multiple partitions to answer a complex query.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system to track user interactions with a website. How would you represent read requests as a stream-table join, and what considerations would you make regarding durability and causal dependency tracking in that design?\u201d"
  },
  {
    "chunk": "Another example of this pattern occurs in fraud prevention: in order to assess the risk\nof whether a particular purchase event is fraudulent, you can examine the reputation\nscores of the user\u2019s IP address, email address, billing address, shipping address, and\nso on. Each of these reputation databases is itself partitioned, and so collecting the\nscores for a particular purchase event requires a sequence of joins with differently\npartitioned datasets [ 49].\nThe internal query execution graphs of MPP databases have similar characteristics\n(see \u201cComparing Hadoop to Distributed Databases\u201d  on page 414 ). If you need to per\u2010\nform this kind of multi-partition join, it is probably simpler to use a database that\nprovides this feature than to implement it using a stream processor. However, treat\u2010\ning queries as streams provides an option for implementing large-scale applications\nthat run against the limits of conventional off-the-shelf solutions. \nAiming for Correctness\nWith stateless services that only read data, it is not a big deal if something goes\nwrong: you can fix the bug and restart the service, and everything returns to normal.\nStateful systems such as databases are not so simple: they are designed to remember\nthings forever (more or less), so if something goes wrong, the effects also potentially\nlast forever\u2014which means they require more careful thought [ 50].\nWe want to build applications that are reliable and correct  (i.e., programs whose\nsemantics are well defined and understood, even in the face of various faults). For\napproximately four decades, the transaction properties of atomicity, isolation, and\ndurability ( Chapter 7 ) have been the tools of choice for building correct applications.\nHowever, those foundations are weaker than they seem: witness for example the con\u2010\nfusion of weak isolation levels (see \u201cWeak Isolation Levels\u201d on page 233 ).\nIn some areas, transactions are being abandoned entirely and replaced with models\nthat offer better performance and scalability, but much messier semantics (see for\nexample \u201cLeaderless Replication\u201d on page 177). Consistency  is often talked about, but\npoorly defined (see \u201cConsistency\u201d  on page 224 and Chapter 9 ). Some people assert\nthat we should \u201cembrace weak consistency\u201d for the sake of better availability, while\nlacking a clear idea of what that actually means in practice.\nFor a topic that is so important, our understanding and our engineering methods are\nsurprisingly flaky. For example, it is very difficult to determine whether it is safe to\nrun a particular application at a particular transaction isolation level or replication\nconfiguration [ 51, 52]. Often simple solutions appear to work correctly when concur\u2010\nrency is low and there are no faults, but turn out to have many subtle bugs in more\ndemanding circumstances.\nFor example, Kyle Kingsbury\u2019s Jepsen experiments [ 53] have highlighted the stark\ndiscrepancies between some products\u2019 claimed safety guarantees and their actual\nAiming for Correctness | 515\n",
    "summary": "The chunk discusses multi-partitioned joins for fraud detection and the challenges of achieving correctness in stateful systems, highlighting the complexities of consistency and replication.",
    "sample_answer": "\u201cThis fraud detection scenario highlights a common architectural pattern \u2013 needing to join data across multiple partitioned datasets, which directly relates to MPP database design. The fact that the query execution graph resembles that of MPP databases suggests a need for optimized joins, possibly leveraging techniques like sharding or pre-aggregation to minimize latency. However, the discussion about stateful systems emphasizes the importance of carefully considering transaction isolation levels and replication configurations, reflecting the difficulties in ensuring correctness when data is persisted and potentially affected by concurrency or failures \u2013 issues that echo the considerations around CAP theorem and weak isolation.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where you\u2019ve had to design a system that required joining data from multiple, partitioned sources. What architectural considerations would you prioritize, and what potential pitfalls might you encounter regarding consistency and fault tolerance?\u201d"
  },
  {
    "chunk": "behavior in the presence of network problems and crashes. Even if infrastructure\nproducts like databases were free from problems, application code would still need to\ncorrectly use the features they provide, which is error-prone if the configuration is\nhard to understand (which is the case with weak isolation levels, quorum configura\u2010\ntions, and so on).\nIf your application can tolerate occasionally corrupting or losing data in unpredicta\u2010\nble ways, life is a lot simpler, and you might be able to get away with simply crossing\nyour fingers and hoping for the best. On the other hand, if you need stronger assur\u2010\nances of correctness, then serializability and atomic commit are established\napproaches, but they come at a cost: they typically only work in a single datacenter\n(ruling out geographically distributed architectures), and they limit the scale and\nfault-tolerance properties you can achieve.\nWhile the traditional transaction approach is not going away, I also believe it is not\nthe last word in making applications correct and resilient to faults. In this section I\nwill suggest some ways of thinking about correctness in the context of dataflow archi\u2010\ntectures.\nThe End-to-End Argument for Databases\nJust because an application uses a data system that provides comparatively strong\nsafety properties, such as serializable transactions, that does not mean the application\nis guaranteed to be free from data loss or corruption. For example, if an application\nhas a bug that causes it to write incorrect data, or delete data from a database, serial\u2010\nizable transactions aren\u2019t going to save you.\nThis example may seem frivolous, but it is worth taking seriously: application bugs\noccur, and people make mistakes. I used this example in \u201cState, Streams, and Immut\u2010\nability\u201d  on page 459 to argue in favor of immutable and append-only data, because it\nis easier to recover from such mistakes if you remove the ability of faulty code to\ndestroy good data.\nAlthough immutability is useful, it is not a cure-all by itself. Let\u2019s look at a more sub\u2010\ntle example of data corruption that can occur.\nExactly-once execution of an operation\nIn \u201cFault Tolerance\u201d on page 476 we encountered an idea called exactly-once  (or\neffectively-once ) semantics. If something goes wrong while processing a message, you\ncan either give up (drop the message\u2014i.e., incur data loss) or try again. If you try\nagain, there is the risk that it actually succeeded the first time, but you just didn\u2019t find\nout about the success, and so the message ends up being processed twice.\nProcessing twice is a form of data corruption: it is undesirable to charge a customer\ntwice for the same service (billing them too much) or increment a counter twice\n516 | Chapter 12: The Future of Data Systems\n",
    "summary": "The text discusses the trade-offs between strong consistency (serializable transactions) and data corruption risks, and introduces the concept of exactly-once semantics.",
    "sample_answer": "\u201cOkay, so the key takeaway here is that achieving strong data consistency \u2013 like serializable transactions \u2013 often limits scalability and fault tolerance due to its reliance on a single datacenter.  This highlights a crucial cost/performance trade-off. Furthermore, the discussion around \u2018exactly-once execution\u2019 \u2013 referencing the potential for reprocessing messages and thus data corruption \u2013 demonstrates the importance of carefully considering dataflow architectures and how they handle failures.  We need to be aware that simply relying on a robust database doesn't guarantee data integrity if application code is flawed.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where achieving \u2018exactly-once\u2019 semantics in a data pipeline could introduce new challenges. How would you mitigate the potential for data corruption in this situation, and what architectural considerations would you prioritize?\u201d"
  },
  {
    "chunk": "(overstating some metric). In this context, exactly-once  means arranging the compu\u2010\ntation such that the final effect is the same as if no faults had occurred, even if the\noperation actually was retried due to some fault. We previously discussed a few\napproaches for achieving this goal.\nOne of the most effective approaches is to make the operation idempotent  (see\n\u201cIdempotence\u201d  on page 478); that is, to ensure that it has the same effect, no matter\nwhether it is executed once or multiple times. However, taking an operation that is\nnot naturally idempotent and making it idempotent requires some effort and care:\nyou may need to maintain some additional metadata (such as the set of operation IDs\nthat have updated a value), and ensure fencing when failing over from one node to\nanother (see \u201cThe leader and the lock\u201d on page 301 ).\nDuplicate suppression\nThe same pattern of needing to suppress duplicates occurs in many other places\nbesides stream processing. For example, TCP uses sequence numbers on packets to\nput them in the correct order at the recipient, and to determine whether any packets\nwere lost or duplicated on the network. Any lost packets are retransmitted and any\nduplicates are removed by the TCP stack before it hands the data to an application.\nHowever, this duplicate suppression only works within the context of a single TCP\nconnection. Imagine the TCP connection is a client\u2019s connection to a database, and it\nis currently executing the transaction in Example 12-1 . In many databases, a transac\u2010\ntion is tied to a client connection (if the client sends several queries, the database\nknows that they belong to the same transaction because they are sent on the same\nTCP connection). If the client suffers a network interruption and connection timeout\nafter sending the COMMIT , but before hearing back from the database server, it does\nnot know whether the transaction has been committed or aborted ( Figure 8-1 ).\nExample 12-1. A nonidempotent transfer of money from one account to another\nBEGIN TRANSACTION ;\nUPDATE accounts  SET balance = balance + 11.00 WHERE account_id  = 1234;\nUPDATE accounts  SET balance = balance - 11.00 WHERE account_id  = 4321;\nCOMMIT;\nThe client can reconnect to the database and retry the transaction, but now it is out\u2010\nside of the scope of TCP duplicate suppression. Since the transaction in Example 12-1\nis not idempotent, it could happen that $22 is transferred instead of the desired $11.\nThus, even though Example 12-1  is a standard example for transaction atomicity, it is\nactually not correct, and real banks do not work like this [ 3].\nTwo-phase commit (see \u201cAtomic Commit and Two-Phase Commit (2PC)\u201d  on page\n354) protocols break the 1:1 mapping between a TCP connection and a transaction,\nsince they must allow a transaction coordinator to reconnect to a database after a net\u2010\nAiming for Correctness | 517\n",
    "summary": "The text discusses the challenges of achieving exactly-once processing in distributed systems, particularly focusing on idempotence and the limitations of TCP-level duplicate suppression.",
    "sample_answer": "\u201cOkay, this highlights a really important consideration when designing data pipelines, especially those dealing with transactions. Achieving exactly-once semantics is incredibly complex; simply relying on TCP's duplicate suppression isn\u2019t sufficient because it's tied to a single connection. The core issue is that operations like the money transfer example aren\u2019t inherently idempotent \u2013 executing them multiple times could lead to incorrect results. To address this, we need to leverage techniques like two-phase commit (2PC) which provides a way to coordinate across nodes to ensure atomicity and consistency, essentially guaranteeing that the transaction either completes entirely or is rolled back, regardless of network issues.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where relying solely on TCP-level duplicate suppression would be insufficient to guarantee exactly-once processing. What design considerations would you employ to overcome this limitation?\u201d"
  },
  {
    "chunk": "work fault, and tell it whether to commit or abort an in-doubt transaction. Is this suf\u2010\nficient to ensure that the transaction will only be executed once? Unfortunately not.\nEven if we can suppress duplicate transactions between the database client and\nserver, we still need to worry about the network between the end-user device and the\napplication server. For example, if the end-user client is a web browser, it probably\nuses an HTTP POST request to submit an instruction to the server. Perhaps the user\nis on a weak cellular data connection, and they succeed in sending the POST, but the\nsignal becomes too weak before they are able to receive the response from the server.\nIn this case, the user will probably be shown an error message, and they may retry\nmanually. Web browsers warn, \u201cAre you sure you want to submit this form again?\u201d\u2014\nand the user says yes, because they wanted the operation to happen. (The Post/Redi\u2010\nrect/Get pattern [ 54] avoids this warning message in normal operation, but it doesn\u2019t\nhelp if the POST request times out.) From the web server\u2019s point of view the retry is a\nseparate request, and from the database\u2019s point of view it is a separate transaction.\nThe usual deduplication mechanisms don\u2019t help.\nOperation identifiers\nTo make the operation idempotent through several hops of network communication,\nit is not sufficient to rely just on a transaction mechanism provided by a database\u2014\nyou need to consider the end-to-end  flow of the request.\nFor example, you could generate a unique identifier for an operation (such as a\nUUID) and include it as a hidden form field in the client application, or calculate a\nhash of all the relevant form fields to derive the operation ID [ 3]. If the web browser\nsubmits the POST request twice, the two requests will have the same operation ID.\nYou can then pass that operation ID all the way through to the database and check\nthat you only ever execute one operation with a given ID, as shown in Example 12-2 .\nExample 12-2. Suppressing duplicate requests using a unique ID\nALTER TABLE requests  ADD UNIQUE (request_id );\nBEGIN TRANSACTION ;\nINSERT INTO requests\n  (request_id , from_account , to_account , amount)\n  VALUES('0286FDB8-D7E1-423F-B40B-792B3608036C' , 4321, 1234, 11.00);\nUPDATE accounts  SET balance = balance + 11.00 WHERE account_id  = 1234;\nUPDATE accounts  SET balance = balance - 11.00 WHERE account_id  = 4321;\nCOMMIT;\n518 | Chapter 12: The Future of Data Systems\n",
    "summary": "The text discusses idempotency and reliability in distributed transaction processing, particularly in the context of web applications and network communication.",
    "sample_answer": "\u201cThis scenario highlights the critical need for idempotency in distributed systems. The core issue is that a single transaction initiated by a user on a potentially unreliable network can be interpreted as multiple transactions by the database, leading to duplicate updates. The proposed solution\u2014using a unique operation ID generated as a UUID\u2014is a common approach. This ID acts as a canonical representation of the operation, allowing us to detect and prevent duplicate execution, similar to how a distributed lock might work but without the dependency on centralized coordination.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where you\u2019ve had to implement idempotency in a system involving multiple network hops. What strategies did you employ, and how did you ensure the system\u2019s robustness against potential message duplication?\u201d"
  },
  {
    "chunk": "Example 12-2  relies on a uniqueness constraint on the request_id  column. If a\ntransaction attempts to insert an ID that already exists, the INSERT  fails and the trans\u2010\naction is aborted, preventing it from taking effect twice. Relational databases can gen\u2010\nerally maintain a uniqueness constraint correctly, even at weak isolation levels\n(whereas an application-level check-then-insert may fail under nonserializable isola\u2010\ntion, as discussed in \u201cWrite Skew and Phantoms\u201d on page 246 ).\nBesides suppressing duplicate requests, the requests  table in Example 12-2  acts as a\nkind of event log, hinting in the direction of event sourcing (see \u201cEvent Sourcing\u201d on\npage 457). The updates to the account balances don\u2019t actually have to happen in the\nsame transaction as the insertion of the event, since they are redundant and could be\nderived from the request event in a downstream consumer\u2014as long as the event is\nprocessed exactly once, which can again be enforced using the request ID.\nThe end-to-end argument\nThis scenario of suppressing duplicate transactions is just one example of a more\ngeneral principle called the end-to-end argument , which was articulated by Saltzer,\nReed, and Clark in 1984 [ 55]:\nThe function in question can completely and correctly be implemented only with the\nknowledge and help of the application standing at the endpoints of the communica\u2010\ntion system. Therefore, providing that questioned function as a feature of the commu\u2010\nnication system itself is not possible. (Sometimes an incomplete version of the function\nprovided by the communication system may be useful as a performance enhance\u2010\nment.)\nIn our example, the function in question  was duplicate suppression. We saw that TCP\nsuppresses duplicate packets at the TCP connection level, and some stream process\u2010\nors provide so-called exactly-once semantics at the message processing level, but that\nis not enough to prevent a user from submitting a duplicate request if the first one\ntimes out. By themselves, TCP, database transactions, and stream processors cannot\nentirely rule out these duplicates. Solving the problem requires an end-to-end solu\u2010\ntion: a transaction identifier that is passed all the way from the end-user client to the\ndatabase.\nThe end-to-end argument also applies to checking the integrity of data: checksums\nbuilt into Ethernet, TCP, and TLS can detect corruption of packets in the network,\nbut they cannot detect corruption due to bugs in the software at the sending and\nreceiving ends of the network connection, or corruption on the disks where the data\nis stored. If you want to catch all possible sources of data corruption, you also need\nend-to-end checksums.\nA similar argument applies with encryption [ 55]: the password on your home WiFi\nnetwork protects against people snooping your WiFi traffic, but not against attackers\nelsewhere on the internet; TLS/SSL between your client and the server protects\nAiming for Correctness | 519\n",
    "summary": "The text discusses a system design pattern utilizing a uniqueness constraint to prevent duplicate transactions, leveraging the end-to-end argument for robust system design.",
    "sample_answer": "\u201cThis scenario highlights a crucial design principle \u2013 the end-to-end argument. The system\u2019s resilience to duplicate transactions hinges on enforcing uniqueness at the client-side, rather than relying solely on the database or network layers. By adding a uniqueness constraint on `request_id`, we\u2019re effectively preventing a race condition where a user submits the same transaction twice, which demonstrates a defense against write skew and phantom reads. This approach aligns with the end-to-end argument, suggesting that the complete solution for preventing data corruption or inconsistency must be implemented at the boundaries of the system \u2013 in this case, by controlling the generation and propagation of transaction IDs.\u201d",
    "potential_interview_question": "\u201cDescribe a system design scenario where you would utilize a uniqueness constraint to prevent data inconsistencies. How does this approach relate to the \u2018end-to-end argument,\u2019 and what potential limitations should be considered?\u201d"
  },
  {
    "chunk": "against network attackers, but not against compromises of the server. Only end-to-\nend encryption and authentication can protect against all of these things.\nAlthough the low-level features (TCP duplicate suppression, Ethernet checksums,\nWiFi encryption) cannot provide the desired end-to-end features by themselves, they\nare still useful, since they reduce the probability of problems at the higher levels. For\nexample, HTTP requests would often get mangled if we didn\u2019t have TCP putting the\npackets back in the right order. We just need to remember that the low-level reliabil\u2010\nity features are not by themselves sufficient to ensure end-to-end correctness.\nApplying end-to-end thinking in data systems\nThis brings me back to my original thesis: just because an application uses a data sys\u2010\ntem that provides comparatively strong safety properties, such as serializable transac\u2010\ntions, that does not mean the application is guaranteed to be free from data loss or\ncorruption. The application itself needs to take end-to-end measures, such as dupli\u2010\ncate suppression, as well.\nThat is a shame, because fault-tolerance mechanisms are hard to get right. Low-level\nreliability mechanisms, such as those in TCP, work quite well, and so the remaining\nhigher-level faults occur fairly rarely. It would be really nice to wrap up the remain\u2010\ning high-level fault-tolerance machinery in an abstraction so that application code\nneedn\u2019t worry about it\u2014but I fear that we have not yet found the right abstraction.\nTransactions have long been seen as a good abstraction, and I do believe that they are\nuseful. As discussed in the introduction to Chapter 7 , they take a wide range of possi\u2010\nble issues (concurrent writes, constraint violations, crashes, network interruptions,\ndisk failures) and collapse them down to two possible outcomes: commit or abort.\nThat is a huge simplification of the programming model, but I fear that it is not\nenough.\nTransactions are expensive, especially when they involve heterogeneous storage tech\u2010\nnologies (see \u201cDistributed Transactions in Practice\u201d  on page 360). When we refuse to\nuse distributed transactions because they are too expensive, we end up having to\nreimplement fault-tolerance mechanisms in application code. As numerous examples\nthroughout this book have shown, reasoning about concurrency and partial failure is\ndifficult and counterintuitive, and so I suspect that most application-level mecha\u2010\nnisms do not work correctly. The consequence is lost or corrupted data.\nFor these reasons, I think it is worth exploring fault-tolerance abstractions that make\nit easy to provide application-specific end-to-end correctness properties, but also\nmaintain good performance and good operational characteristics in a large-scale dis\u2010\ntributed environment. \n520 | Chapter 12: The Future of Data Systems\n",
    "summary": "The text highlights the importance of end-to-end thinking in data systems, emphasizing that low-level reliability features are insufficient without application-level safeguards, and discusses the challenges of building robust fault-tolerance abstractions.",
    "sample_answer": "\u201cThis passage really underscores the principle of end-to-end data system design. While technologies like TCP\u2019s duplicate suppression and Ethernet checksums provide crucial low-level reliability\u2014reducing the probability of network-level issues\u2014they don\u2019t inherently guarantee data integrity at the application level. We\u2019ve seen this mirrored in distributed transactions, where simplifying failures with \u2018commit or abort\u2019 can obscure the underlying complexity of concurrent operations and lead to data corruption if not handled carefully. A key takeaway is the need for application-level safeguards, aligning with the CAP theorem \u2013 acknowledging that achieving strong consistency (a key system property) often comes at the cost of availability or partition tolerance.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where a seemingly robust technology (like a distributed transaction protocol) could lead to data corruption if not carefully considered within the broader context of a data system. How does the principle of 'end-to-end' thinking relate to this situation, and what design considerations might a senior data engineer prioritize in this scenario?\u201d"
  },
  {
    "chunk": "Enforcing Constraints\nLet\u2019s think about correctness in the context of the ideas around unbundling databases\n(\u201cUnbundling Databases\u201d on page 499). We saw that end-to-end duplicate suppres\u2010\nsion can be achieved with a request ID that is passed all the way from the client to the\ndatabase that records the write. What about other kinds of constraints?\nIn particular, let\u2019s focus on uniqueness constraints\u2014such as the one we relied on in\nExample 12-2 . In \u201cConstraints and uniqueness guarantees\u201d on page 330 we saw sev\u2010\neral other examples of application features that need to enforce uniqueness: a user\u2010\nname or email address must uniquely identify a user, a file storage service cannot\nhave more than one file with the same name, and two people cannot book the same\nseat on a flight or in a theater.\nOther kinds of constraints are very similar: for example, ensuring that an account\nbalance never goes negative, that you don\u2019t sell more items than you have in stock in\nthe warehouse, or that a meeting room does not have overlapping bookings. Techni\u2010\nques that enforce uniqueness can often be used for these kinds of constraints as well.\nUniqueness constraints require consensus\nIn Chapter 9  we saw that in a distributed setting, enforcing a uniqueness constraint\nrequires consensus: if there are several concurrent requests with the same value, the\nsystem somehow needs to decide which one of the conflicting operations is accepted,\nand reject the others as violations of the constraint.\nThe most common way of achieving this consensus is to make a single node the\nleader, and put it in charge of making all the decisions. That works fine as long as you\ndon\u2019t mind funneling all requests through a single node (even if the client is on the\nother side of the world), and as long as that node doesn\u2019t fail. If you need to tolerate\nthe leader failing, you\u2019re back at the consensus problem again (see \u201cSingle-leader rep\u2010\nlication and consensus\u201d on page 367 ).\nUniqueness checking can be scaled out by partitioning based on the value that needs\nto be unique. For example, if you need to ensure uniqueness by request ID, as in\nExample 12-2 , you can ensure all requests with the same request ID are routed to the\nsame partition (see Chapter 6 ). If you need usernames to be unique, you can partition\nby hash of username.\nHowever, asynchronous multi-master replication is ruled out, because it could hap\u2010\npen that different masters concurrently accept conflicting writes, and thus the values\nare no longer unique (see \u201cImplementing Linearizable Systems\u201d  on page 332). If you\nwant to be able to immediately reject any writes that would violate the constraint,\nsynchronous coordination is unavoidable [ 56].\nAiming for Correctness | 521\n",
    "summary": "The text discusses enforcing uniqueness constraints in distributed systems, highlighting the need for consensus and potential scaling strategies.",
    "sample_answer": "\u201cWhen enforcing uniqueness constraints across a distributed system, like ensuring unique usernames, we need to consider the inherent challenges of consensus. The core principle is that a single node acting as a leader must make all decisions regarding uniqueness, preventing conflicting writes from different clients. This aligns with the CAP theorem \u2013 we\u2019re prioritizing consistency (C) over availability (A) to guarantee correctness when dealing with unique values, which is critical for systems like user databases. Scaling this out by partitioning based on the value to be unique (e.g., hashing usernames) allows us to distribute the load, but it necessitates synchronous coordination to avoid conflicts.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you\u2019d need to enforce a uniqueness constraint in a distributed system. What consensus mechanism would you employ, and why? How would you approach scaling this out?\u201d"
  },
  {
    "chunk": "Uniqueness in log-based messaging\nThe log ensures that all consumers see messages in the same order\u2014a guarantee that\nis formally known as total order broadcast  and is equivalent to consensus (see \u201cTotal\nOrder Broadcast\u201d on page 348). In the unbundled database approach with log-based\nmessaging, we can use a very similar approach to enforce uniqueness constraints.\nA stream processor consumes all the messages in a log partition sequentially on a sin\u2010\ngle thread (see \u201cLogs compared to traditional messaging\u201d on page 448). Thus, if the\nlog is partitioned based on the value that needs to be unique, a stream processor can\nunambiguously and deterministically decide which one of several conflicting opera\u2010\ntions came first. For example, in the case of several users trying to claim the same\nusername [ 57]:\n1.Every request for a username is encoded as a message, and appended to a parti\u2010\ntion determined by the hash of the username.\n2.A stream processor sequentially reads the requests in the log, using a local data\u2010\nbase to keep track of which usernames are taken. For every request for a user\u2010\nname that is available, it records the name as taken and emits a success message\nto an output stream. For every request for a username that is already taken, it\nemits a rejection message to an output stream.\n3.The client that requested the username watches the output stream and waits for a\nsuccess or rejection message corresponding to its request.\nThis algorithm is basically the same as in \u201cImplementing linearizable storage using\ntotal order broadcast\u201d on page 350. It scales easily to a large request throughput by\nincreasing the number of partitions, as each partition can be processed independ\u2010\nently.\nThe approach works not only for uniqueness constraints, but also for many other\nkinds of constraints. Its fundamental principle is that any writes that may conflict are\nrouted to the same partition and processed sequentially. As discussed in \u201cWhat is a\nconflict?\u201d on page 174  and \u201cWrite Skew and Phantoms\u201d on page 246 , the definition of\na conflict may depend on the application, but the stream processor can use arbitrary\nlogic to validate a request. This idea is similar to the approach pioneered by Bayou in\nthe 1990s [ 58].\nMulti-partition request processing\nEnsuring that an operation is executed atomically, while satisfying constraints,\nbecomes more interesting when several partitions are involved. In Example 12-2 ,\nthere are potentially three partitions: the one containing the request ID, the one con\u2010\ntaining the payee account, and the one containing the payer account. There is no rea\u2010\n522 | Chapter 12: The Future of Data Systems\n",
    "summary": "The chunk discusses a log-based messaging approach for enforcing uniqueness constraints using total order broadcast, drawing parallels to Bayou and highlighting the importance of partitioning and sequential processing.",
    "sample_answer": "\u201cThis approach leverages total order broadcast, essentially mimicking a consensus protocol, to guarantee the deterministic ordering of operations\u2014critical for enforcing uniqueness. By partitioning the log based on the unique key (like a username), we achieve parallel processing while maintaining a consistent view of data, similar to how Bayou historically addressed conflict resolution. This allows us to scale the system by increasing the number of partitions, enabling concurrent requests to be processed sequentially and consistently.\u201d",
    "potential_interview_question": "\u201cDescribe a system design scenario where you\u2019d use a log-based messaging system to enforce a uniqueness constraint, explaining how you would leverage concepts like total order broadcast and partitioning to achieve scalability and fault tolerance.\u201d"
  },
  {
    "chunk": "son why those three things should be in the same partition, since they are all\nindependent from each other.\nIn the traditional approach to databases, executing this transaction would require an\natomic commit across all three partitions, which essentially forces it into a total order\nwith respect to all other transactions on any of those partitions. Since there is now\ncross-partition coordination, different partitions can no longer be processed inde\u2010\npendently, so throughput is likely to suffer.\nHowever, it turns out that equivalent correctness can be achieved with partitioned\nlogs, and without an atomic commit:\n1.The request to transfer money from account A to account B is given a unique\nrequest ID by the client, and appended to a log partition based on the request ID.\n2.A stream processor reads the log of requests. For each request message it emits\ntwo messages to output streams: a debit instruction to the payer account A (par\u2010\ntitioned by A), and a credit instruction to the payee account B (partitioned by B).\nThe original request ID is included in those emitted messages.\n3.Further processors consume the streams of credit and debit instructions, dedu\u2010\nplicate by request ID, and apply the changes to the account balances.\nSteps 1 and 2 are necessary because if the client directly sent the credit and debit\ninstructions, it would require an atomic commit across those two partitions to ensure\nthat either both or neither happen. To avoid the need for a distributed transaction,\nwe first durably log the request as a single message, and then derive the credit and\ndebit instructions from that first message. Single-object writes are atomic in almost\nall data systems (see \u201cSingle-object writes\u201d on page 230), and so the request either\nappears in the log or it doesn\u2019t, without any need for a multi-partition atomic com\u2010\nmit.\nIf the stream processor in step 2 crashes, it resumes processing from its last check\u2010\npoint. In doing so, it does not skip any request messages, but it may process requests\nmultiple times and produce duplicate credit and debit instructions. However, since it\nis deterministic, it will just produce the same instructions again, and the processors in\nstep 3 can easily deduplicate them using the end-to-end request ID.\nIf you want to ensure that the payer account is not overdrawn by this transfer, you\ncan additionally have a stream processor (partitioned by payer account number) that\nmaintains account balances and validates transactions. Only valid transactions would\nthen be placed in the request log in step 1.\nBy breaking down the multi-partition transaction into two differently partitioned\nstages and using the end-to-end request ID, we have achieved the same correctness\nproperty (every request is applied exactly once to both the payer and payee accounts),\neven in the presence of faults, and without using an atomic commit protocol. The\nAiming for Correctness | 523\n",
    "summary": "The chunk describes a strategy to achieve correctness in a multi-partition transaction by decoupling operations and leveraging request IDs for deduplication, avoiding the need for an atomic commit.",
    "sample_answer": "\u201cThis scenario highlights a key trade-off in distributed systems design \u2013 achieving correctness versus performance. The traditional approach of requiring an atomic commit across partitions introduces significant bottlenecks due to the need for cross-partition coordination, impacting throughput. Instead, the system breaks down the transaction into two stages, using the end-to-end request ID to ensure idempotency, a crucial pattern to avoid duplicate processing if a stream processor fails, like a Raft consensus protocol but without the full complexity of distributed transactions.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system to process financial transactions across multiple partitions. How would you approach ensuring data consistency and handling potential failures, without relying on a traditional distributed transaction protocol? Discuss the trade-offs you\u2019d consider, including the role of idempotency and request IDs.\u201d"
  },
  {
    "chunk": "If integrity is violated, the inconsistency is permanent: waiting and trying again is\nnot going to fix database corruption in most cases. Instead, explicit checking and\nrepair is needed. In the context of ACID transactions (see \u201cThe Meaning of\nACID\u201d  on page 223), consistency is usually understood as some kind of\napplication-specific notion of integrity. Atomicity and durability are important\ntools for preserving integrity.\nIn slogan form: violations of timeliness are \u201ceventual consistency,\u201d whereas violations\nof integrity are \u201cperpetual inconsistency.\u201d\nI am going to assert that in most applications, integrity is much more important than\ntimeliness. Violations of timeliness can be annoying and confusing, but violations of\nintegrity can be catastrophic.\nFor example, on your credit card statement, it is not surprising if a transaction that\nyou made within the last 24 hours does not yet appear\u2014it is normal that these sys\u2010\ntems have a certain lag. We know that banks reconcile and settle transactions asyn\u2010\nchronously, and timeliness is not very important here [ 3]. However, it would be very\nbad if the statement balance was not equal to the sum of the transactions plus the\nprevious statement balance (an error in the sums), or if a transaction was charged to\nyou but not paid to the merchant (disappearing money). Such problems would be\nviolations of the integrity of the system.\nCorrectness of dataflow systems\nACID transactions usually provide both timeliness (e.g., linearizability) and integrity\n(e.g., atomic commit) guarantees. Thus, if you approach application correctness from\nthe point of view of ACID transactions, the distinction between timeliness and integ\u2010\nrity is fairly inconsequential.\nOn the other hand, an interesting property of the event-based dataflow systems that\nwe have discussed in this chapter is that they decouple timeliness and integrity. When\nprocessing event streams asynchronously, there is no guarantee of timeliness, unless\nyou explicitly build consumers that wait for a message to arrive before returning. But\nintegrity is in fact central to streaming systems.\nExactly-once  or effectively-once  semantics (see \u201cFault Tolerance\u201d  on page 476) is a\nmechanism for preserving integrity. If an event is lost, or if an event takes effect\ntwice, the integrity of a data system could be violated. Thus, fault-tolerant message\ndelivery and duplicate suppression (e.g., idempotent operations) are important for\nmaintaining the integrity of a data system in the face of faults.\nAs we saw in the last section, reliable stream processing systems can preserve integ\u2010\nrity without requiring distributed transactions and an atomic commit protocol,\nwhich means they can potentially achieve comparable correctness with much better\nAiming for Correctness | 525\n",
    "summary": "The text highlights the crucial distinction between timeliness and integrity in data systems, emphasizing that integrity violations are permanent and require specific fault tolerance mechanisms like exactly-once semantics.",
    "sample_answer": "\u201cOkay, let\u2019s talk about building robust data systems. It\u2019s absolutely critical to recognize the difference between timeliness and integrity \u2013 timeliness issues are often \u2018eventual consistency,\u2019 whereas integrity violations are catastrophic.  To achieve this, we need to design for exactly-once semantics, which, as the text notes, is crucial for preserving integrity, particularly when dealing with potentially lost or duplicated events.  This aligns with the need for fault tolerance, ensuring that data remains accurate even under failure conditions, and highlights the need for idempotent operations to prevent duplicate processing.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re building a real-time analytics pipeline that processes financial transactions. How would you architect this system to guarantee the integrity of financial records, particularly considering the potential for asynchronous event processing?\u201d"
  },
  {
    "chunk": "performance and operational robustness. We achieved this integrity through a com\u2010\nbination of mechanisms:\n\u2022Representing the content of the write operation as a single message, which can\neasily be written atomically\u2014an approach that fits very well with event sourcing\n(see \u201cEvent Sourcing\u201d on page 457 )\n\u2022Deriving all other state updates from that single message using deterministic der\u2010\nivation functions, similarly to stored procedures (see \u201cActual Serial Execution\u201d\non page 252  and \u201cApplication code as a derivation function\u201d on page 505 )\n\u2022Passing a client-generated request ID through all these levels of processing, ena\u2010\nbling end-to-end duplicate suppression and idempotence\n\u2022Making messages immutable and allowing derived data to be reprocessed from\ntime to time, which makes it easier to recover from bugs (see \u201cAdvantages of\nimmutable events\u201d on page 460 )\nThis combination of mechanisms seems to me a very promising direction for build\u2010\ning fault-tolerant applications in the future. \nLoosely interpreted constraints\nAs discussed previously, enforcing a uniqueness constraint requires consensus, typi\u2010\ncally implemented by funneling all events in a particular partition through a single\nnode. This limitation is unavoidable if we want the traditional form of uniqueness\nconstraint, and stream processing cannot avoid it.\nHowever, another thing to realize is that many real applications can actually get away\nwith much weaker notions of uniqueness:\n\u2022If two people concurrently register the same username or book the same seat,\nyou can send one of them a message to apologize, and ask them to choose a dif\u2010\nferent one. This kind of change to correct a mistake is called a compensating\ntransaction  [59, 60].\n\u2022If customers order more items than you have in your warehouse, you can order\nin more stock, apologize to customers for the delay, and offer them a discount.\nThis is actually the same as what you\u2019d have to do if, say, a forklift truck ran over\nsome of the items in your warehouse, leaving you with fewer items in stock than\nyou thought you had [ 61]. Thus, the apology workflow already needs to be part\nof your business processes anyway, and so it might be unnecessary to require a\nlinearizable constraint on the number of items in stock.\n\u2022Similarly, many airlines overbook airplanes in the expectation that some passen\u2010\ngers will miss their flight, and many hotels overbook rooms, expecting that some\nguests will cancel. In these cases, the constraint of \u201cone person per seat\u201d is delib\u2010\n526 | Chapter 12: The Future of Data Systems\n",
    "summary": "The text outlines a strategy for building fault-tolerant systems using event sourcing, deterministic derivation functions, and idempotency, alongside strategies for relaxing constraints based on business needs.",
    "sample_answer": "\u201cThis approach of combining event sourcing with deterministic derivation functions is really interesting \u2013 it\u2019s a classic pattern for building highly reliable systems. Specifically, the use of a single message and deterministic functions aligns with the principles of eventual consistency and minimizes the risk of divergence across different data replicas, which is crucial for maintaining availability. Furthermore, acknowledging the limitations of traditional constraints like uniqueness, and opting for compensating transactions or relaxed constraints, demonstrates a pragmatic understanding of trade-offs between consistency and operational efficiency \u2013 this is particularly relevant when dealing with systems experiencing high volumes of concurrent updates.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where you might choose to relax a uniqueness constraint in a data system. What considerations would you take into account, and what patterns might you employ to maintain data integrity despite this relaxed constraint?\u201d"
  },
  {
    "chunk": "erately violated for business reasons, and compensation processes (refunds,\nupgrades, providing a complimentary room at a neighboring hotel) are put in\nplace to handle situations in which demand exceeds supply. Even if there was no\noverbooking, apology and compensation processes would be needed in order to\ndeal with flights being cancelled due to bad weather or staff on strike\u2014recover\u2010\ning from such issues is just a normal part of business [ 3].\n\u2022If someone withdraws more money than they have in their account, the bank can\ncharge them an overdraft fee and ask them to pay back what they owe. By limit\u2010\ning the total withdrawals per day, the risk to the bank is bounded.\nIn many business contexts, it is actually acceptable to temporarily violate a constraint\nand fix it up later by apologizing. The cost of the apology (in terms of money or repu\u2010\ntation) varies, but it is often quite low: you can\u2019t unsend an email, but you can send a\nfollow-up email with a correction. If you accidentally charge a credit card twice, you\ncan refund one of the charges, and the cost to you is just the processing fees and per\u2010\nhaps a customer complaint. Once money has been paid out of an ATM, you can\u2019t\ndirectly get it back, although in principle you can send debt collectors to recover the\nmoney if the account was overdrawn and the customer won\u2019t pay it back.\nWhether the cost of the apology is acceptable is a business decision. If it is acceptable,\nthe traditional model of checking all constraints before even writing the data is\nunnecessarily restrictive, and a linearizable constraint is not needed. It may well be a\nreasonable choice to go ahead with a write optimistically, and to check the constraint\nafter the fact. You can still ensure that the validation occurs before doing things that\nwould be expensive to recover from, but that doesn\u2019t imply you must do the valida\u2010\ntion before you even write the data.\nThese applications do require integrity: you would not want to lose a reservation, or\nhave money disappear due to mismatched credits and debits. But they don\u2019t  require\ntimeliness on the enforcement of the constraint: if you have sold more items than you\nhave in the warehouse, you can patch up the problem after the fact by apologizing.\nDoing so is similar to the conflict resolution approaches we discussed in \u201cHandling\nWrite Conflicts\u201d on page 171 .\nCoordination-avoiding data systems\nWe have now made two interesting observations:\n1.Dataflow systems can maintain integrity guarantees on derived data without\natomic commit, linearizability, or synchronous cross-partition coordination.\n2.Although strict uniqueness constraints require timeliness and coordination,\nmany applications are actually fine with loose constraints that may be temporar\u2010\nily violated and fixed up later, as long as integrity is preserved throughout.\nAiming for Correctness | 527\n",
    "summary": "The text discusses tradeoffs between strict data constraints (like linearizability) and looser constraints that can be validated after the fact, highlighting the importance of data integrity versus timeliness.",
    "sample_answer": "\u201cThis excerpt really speaks to a key system design principle: acknowledging that striving for strict consistency\u2014like linearizability\u2014can be an unnecessary bottleneck, especially when the impact of a violation is manageable. The bank\u2019s overdraft example demonstrates this perfectly; they prioritize data integrity (avoiding incorrect transactions) but don't require immediate, synchronous coordination for every write. This relates to concepts like eventual consistency and the CAP theorem \u2013 in situations where availability and partition tolerance are paramount, a relaxed constraint model can be more performant, provided data integrity is ultimately maintained. We can use techniques like shadow keys or optimistic locking to manage potential conflicts if we choose to implement looser constraints.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system for processing airline booking transactions. Discuss the trade-offs between enforcing strict ACID properties on every booking versus a more relaxed approach where you validate constraints after the fact. How would you approach data integrity and potential conflict resolution in this scenario, considering concepts like eventual consistency and CAP theorem?\u201d"
  },
  {
    "chunk": "Taken together, these observations mean that dataflow systems can provide the data\nmanagement services for many applications without requiring coordination, while\nstill giving strong integrity guarantees. Such coordination-avoiding  data systems have\na lot of appeal: they can achieve better performance and fault tolerance than systems\nthat need to perform synchronous coordination [ 56].\nFor example, such a system could operate distributed across multiple datacenters in a\nmulti-leader configuration, asynchronously replicating between regions. Any one\ndatacenter can continue operating independently from the others, because no syn\u2010\nchronous cross-region coordination is required. Such a system would have weak\ntimeliness guarantees\u2014it could not be linearizable without introducing coordination\n\u2014but it can still have strong integrity guarantees.\nIn this context, serializable transactions are still useful as part of maintaining derived\nstate, but they can be run at a small scope where they work well [ 8]. Heterogeneous\ndistributed transactions such as XA transactions (see \u201cDistributed Transactions in\nPractice\u201d on page 360) are not required. Synchronous coordination can still be intro\u2010\nduced in places where it is needed (for example, to enforce strict constraints before\nan operation from which recovery is not possible), but there is no need for everything\nto pay the cost of coordination if only a small part of an application needs it [ 43].\nAnother way of looking at coordination and constraints: they reduce the number of\napologies you have to make due to inconsistencies, but potentially also reduce the\nperformance and availability of your system, and thus potentially increase the num\u2010\nber of apologies you have to make due to outages. You cannot reduce the number of\napologies to zero, but you can aim to find the best trade-off for your needs\u2014the\nsweet spot where there are neither too many inconsistencies nor too many availability\nproblems. \nTrust, but Verify\nAll of our discussion of correctness, integrity, and fault-tolerance has been under the\nassumption that certain things might go wrong, but other things won\u2019t. We call these\nassumptions our system model  (see \u201cMapping system models to the real world\u201d on\npage 309): for example, we should assume that processes can crash, machines can\nsuddenly lose power, and the network can arbitrarily delay or drop messages. But we\nmight also assume that data written to disk is not lost after fsync , that data in mem\u2010\nory is not corrupted, and that the multiplication instruction of our CPU always\nreturns the correct result.\nThese assumptions are quite reasonable, as they are true most of the time, and it\nwould be difficult to get anything done if we had to constantly worry about our com\u2010\nputers making mistakes. Traditionally, system models take a binary approach toward\nfaults: we assume that some things can happen, and other things can never happen.\nIn reality, it is more a question of probabilities: some things are more likely, other\n528 | Chapter 12: The Future of Data Systems\n",
    "summary": "The text discusses building coordination-avoiding data systems with strong integrity guarantees, highlighting trade-offs between performance, availability, and coordination overhead.",
    "sample_answer": "\u201cThis excerpt illustrates a key principle in designing high-availability data systems \u2013 minimizing the need for synchronous coordination. A multi-datacenter architecture utilizing asynchronous replication, as described, inherently improves fault tolerance because individual datacenters can continue operating independently. This approach aligns with the CAP theorem, suggesting that in a distributed system, you typically have to trade off consistency for availability, and the system model assumes potential failures like process crashes or network delays, allowing the system to gracefully handle these events without requiring strict, coordinated transactions\u2014which would introduce significant performance bottlenecks.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you might choose to implement a coordination-avoiding data system over a system requiring synchronous transactions. What are the potential trade-offs, and how would you approach designing the architecture to ensure data integrity, referencing relevant concepts like the CAP theorem.\u201d"
  },
  {
    "chunk": "things less likely. The question is whether violations of our assumptions happen often\nenough that we may encounter them in practice.\nWe have seen that data can become corrupted while it is sitting untouched on disks\n(see \u201cReplication and Durability\u201d on page 227), and data corruption on the network\ncan sometimes evade the TCP checksums (see \u201cWeak forms of lying\u201d on page 306).\nMaybe this is something we should be paying more attention to?\nOne application that I worked on in the past collected crash reports from clients, and\nsome of the reports we received could only be explained by random bit-flips in the\nmemory of those devices. It seems unlikely, but if you have enough devices running\nyour software, even very unlikely things do happen. Besides random memory corrup\u2010\ntion due to hardware faults or radiation, certain pathological memory access patterns\ncan flip bits even in memory that has no faults [ 62]\u2014an effect that can be used to\nbreak security mechanisms in operating systems [ 63] (this technique is known as\nrowhammer ). Once you look closely, hardware isn\u2019t quite the perfect abstraction that\nit may seem.\nTo be clear, random bit-flips are still very rare on modern hardware [ 64]. I just want\nto point out that they are not beyond the realm of possibility, and so they deserve\nsome attention.\nMaintaining integrity in the face of software bugs\nBesides such hardware issues, there is always the risk of software bugs, which would\nnot be caught by lower-level network, memory, or filesystem checksums. Even widely\nused database software has bugs: I have personally seen cases of MySQL failing to\ncorrectly maintain a uniqueness constraint [ 65] and PostgreSQL\u2019s serializable isola\u2010\ntion level exhibiting write skew anomalies [ 66], even though MySQL and PostgreSQL\nare robust and well-regarded databases that have been battle-tested by many people\nfor many years. In less mature software, the situation is likely to be much worse.\nDespite considerable efforts in careful design, testing, and review, bugs still creep in.\nAlthough they are rare, and they eventually get found and fixed, there is still a period\nduring which such bugs can corrupt data.\nWhen it comes to application code, we have to assume many more bugs, since most\napplications don\u2019t receive anywhere near the amount of review and testing that data\u2010\nbase code does. Many applications don\u2019t even correctly use the features that databases\noffer for preserving integrity, such as foreign key or uniqueness constraints [ 36].\nConsistency in the sense of ACID (see \u201cConsistency\u201d  on page 224) is based on the\nidea that the database starts off in a consistent state, and a transaction transforms it\nfrom one consistent state to another consistent state. Thus, we expect the database to\nalways be in a consistent state. However, this notion only makes sense if you assume\nthat the transaction is free from bugs. If the application uses the database incorrectly\nAiming for Correctness | 529\n",
    "summary": "The text discusses the potential for data corruption due to both hardware faults (rowhammer) and software bugs, emphasizing the need for vigilance beyond typical consistency guarantees.",
    "sample_answer": "\u201cOkay, this is a really important reminder about the limitations of our assumptions when designing data systems. We often focus on achieving ACID consistency, but this relies on the assumption that the application code and underlying database are free from bugs.  Specifically, the discussion of rowhammer and memory corruption highlights a potential source of data inconsistency that checksums and traditional database integrity constraints won\u2019t catch.  Therefore, we need to consider the possibility of software bugs and incorporate strategies like extensive testing and validation, potentially even going beyond standard ACID guarantees to ensure data reliability.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where a standard ACID database might fail to provide data integrity, and what design considerations should be taken to address this potential failure, referencing specific concepts like rowhammer or software bugs.\u201d"
  },
  {
    "chunk": "in some way, for example using a weak isolation level unsafely, the integrity of the\ndatabase cannot be guaranteed.\nDon\u2019t just blindly trust what they promise\nWith both hardware and software not always living up to the ideal that we would like\nthem to be, it seems that data corruption is inevitable sooner or later. Thus, we\nshould at least have a way of finding out if data has been corrupted so that we can fix\nit and try to track down the source of the error. Checking the integrity of data is\nknown as auditing .\nAs discussed in \u201cAdvantages of immutable events\u201d on page 460, auditing is not just\nfor financial applications. However, auditability is highly important in finance pre\u2010\ncisely because everyone knows that mistakes happen, and we all recognize the need to\nbe able to detect and fix problems.\nMature systems similarly tend to consider the possibility of unlikely things going\nwrong, and manage that risk. For example, large-scale storage systems such as HDFS\nand Amazon S3 do not fully trust disks: they run background processes that continu\u2010\nally read back files, compare them to other replicas, and move files from one disk to\nanother, in order to mitigate the risk of silent corruption [ 67].\nIf you want to be sure that your data is still there, you have to actually read it and\ncheck. Most of the time it will still be there, but if it isn\u2019t, you really want to find out\nsooner rather than later. By the same argument, it is important to try restoring from\nyour backups from time to time\u2014otherwise you may only find out that your backup\nis broken when it is too late and you have already lost data. Don\u2019t just blindly trust\nthat it is all working.\nA culture of verification\nSystems like HDFS and S3 still have to assume that disks work correctly most of the\ntime\u2014which is a reasonable assumption, but not the same as assuming that they\nalways  work correctly. However, not many systems currently have this kind of \u201ctrust,\nbut verify\u201d approach of continually auditing themselves. Many assume that correct\u2010\nness guarantees are absolute and make no provision for the possibility of rare data\ncorruption. I hope that in the future we will see more self-validating  or self-auditing\nsystems that continually check their own integrity, rather than relying on blind trust\n[68].\nI fear that the culture of ACID databases has led us toward developing applications\non the basis of blindly trusting technology (such as a transaction mechanism), and\nneglecting any sort of auditability in the process. Since the technology we trusted\nworked well enough most of the time, auditing mechanisms were not deemed worth\nthe investment.\n530 | Chapter 12: The Future of Data Systems\n",
    "summary": "The text emphasizes the importance of continuous data integrity checks and self-auditing in large-scale systems like HDFS and S3 to mitigate silent data corruption risks.",
    "sample_answer": "\u201cThis highlights a critical design consideration \u2013 that relying solely on the theoretical guarantees of systems like HDFS or S3 isn\u2019t sufficient. The continuous replication and background processes, which read and compare data across replicas, represent a form of \u2018trust, but verify,\u2019 mirroring a robust approach to fault tolerance.  This concept aligns with the CAP theorem, specifically acknowledging that strong consistency (which ACID databases provide) may be difficult to maintain in a distributed environment, necessitating explicit validation mechanisms like regular data integrity checks.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where you might implement a \u2018trust, but verify\u2019 strategy in a data pipeline.  What components would you use, and how would you ensure the integrity of the data throughout the process?\u201d"
  },
  {
    "chunk": "But then the database landscape changed: weaker consistency guarantees became the\nnorm under the banner of NoSQL, and less mature storage technologies became\nwidely used. Yet, because the audit mechanisms had not been developed, we contin\u2010\nued building applications on the basis of blind trust, even though this approach had\nnow become more dangerous. Let\u2019s think for a moment about designing for audita\u2010\nbility.\nDesigning for auditability\nIf a transaction mutates several objects in a database, it is difficult to tell after the fact\nwhat that transaction means. Even if you capture the transaction logs (see \u201cChange\nData Capture\u201d on page 454), the insertions, updates, and deletions in various tables\ndo not necessarily give a clear picture of why those mutations were performed. The\ninvocation of the application logic that decided on those mutations is transient and\ncannot be reproduced.\nBy contrast, event-based systems can provide better auditability. In the event sourc\u2010\ning approach, user input to the system is represented as a single immutable event,\nand any resulting state updates are derived from that event. The derivation can be\nmade deterministic and repeatable, so that running the same log of events through\nthe same version of the derivation code will result in the same state updates.\nBeing explicit about dataflow (see \u201cPhilosophy of batch process outputs\u201d  on page\n413) makes the provenance  of data much clearer, which makes integrity checking\nmuch more feasible. For the event log, we can use hashes to check that the event stor\u2010\nage has not been corrupted. For any derived state, we can rerun the batch and stream\nprocessors that derived it from the event log in order to check whether we get the\nsame result, or even run a redundant derivation in parallel.\nA deterministic and well-defined dataflow also makes it easier to debug and trace the\nexecution of a system in order to determine why it did something [ 4, 69]. If some\u2010\nthing unexpected occurred, it is valuable to have the diagnostic capability to repro\u2010\nduce the exact circumstances that led to the unexpected event\u2014a kind of time-travel\ndebugging capability.\nThe end-to-end argument again\nIf we cannot fully trust that every individual component of the system will be free\nfrom corruption\u2014that every piece of hardware is fault-free and that every piece of\nsoftware is bug-free\u2014then we must at least periodically check the integrity of our\ndata. If we don\u2019t check, we won\u2019t find out about corruption until it is too late and it\nhas caused some downstream damage, at which point it will be much harder and\nmore expensive to track down the problem.\nChecking the integrity of data systems is best done in an end-to-end fashion (see\n\u201cThe End-to-End Argument for Databases\u201d on page 516): the more systems we can\nAiming for Correctness | 531\n",
    "summary": "The text highlights the importance of auditability and data integrity in systems, particularly when relying on less mature technologies, advocating for event-based systems and end-to-end data checking.",
    "sample_answer": "\u201cOkay, this really underscores the shift in data engineering challenges. We\u2019ve moved from assuming strong consistency in relational databases to managing systems with weaker guarantees, often utilizing NoSQL technologies. To address this, we need to prioritize auditability \u2013 and event-based systems offer a significant improvement. By representing user input as immutable events, we create a traceable dataflow, allowing us to reproduce state updates deterministically, which is crucial for debugging and verifying data integrity.  Furthermore, the end-to-end argument suggests periodic integrity checks to mitigate the risk of undetected corruption, particularly when trusting multiple components.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say you\u2019re designing a system that ingests user activity data from a NoSQL database. How would you approach ensuring the integrity and auditability of that data, considering the potential for weaker consistency guarantees and the need for traceability?\u201d"
  },
  {
    "chunk": "include in an integrity check, the fewer opportunities there are for corruption to go\nunnoticed at some stage of the process. If we can check that an entire derived data\npipeline is correct end to end, then any disks, networks, services, and algorithms\nalong the path are implicitly included in the check.\nHaving continuous end-to-end integrity checks gives you increased confidence about\nthe correctness of your systems, which in turn allows you to move faster [ 70]. Like\nautomated testing, auditing increases the chances that bugs will be found quickly,\nand thus reduces the risk that a change to the system or a new storage technology will\ncause damage. If you are not afraid of making changes, you can much better evolve\nan application to meet changing requirements.\nTools for auditable data systems\nAt present, not many data systems make auditability a top-level concern. Some appli\u2010\ncations implement their own audit mechanisms, for example by logging all changes\nto a separate audit table, but guaranteeing the integrity of the audit log and the data\u2010\nbase state is still difficult. A transaction log can be made tamper-proof by periodically\nsigning it with a hardware security module, but that does not guarantee that the right\ntransactions went into the log in the first place.\nIt would be interesting to use cryptographic tools to prove the integrity of a system in\na way that is robust to a wide range of hardware and software issues, and even poten\u2010\ntially malicious actions. Cryptocurrencies, blockchains, and distributed ledger tech\u2010\nnologies such as Bitcoin, Ethereum, Ripple, Stellar, and various others [ 71, 72, 73]\nhave sprung up to explore this area.\nI am not qualified to comment on the merits of these technologies as currencies or\nmechanisms for agreeing contracts. However, from a data systems point of view they\ncontain some interesting ideas. Essentially, they are distributed databases, with a data\nmodel and transaction mechanism, in which different replicas can be hosted by\nmutually untrusting organizations. The replicas continually check each other\u2019s integ\u2010\nrity and use a consensus protocol to agree on the transactions that should be exe\u2010\ncuted.\nI am somewhat skeptical about the Byzantine fault tolerance aspects of these technol\u2010\nogies (see \u201cByzantine Faults\u201d on page 304), and I find the technique of proof of work\n(e.g., Bitcoin mining) extraordinarily wasteful. The transaction throughput of Bitcoin\nis rather low, albeit for political and economic reasons more than for technical ones.\nHowever, the integrity checking aspects are interesting.\nCryptographic auditing and integrity checking often relies on Merkle trees  [74],\nwhich are trees of hashes that can be used to efficiently prove that a record appears in\nsome dataset (and a few other things). Outside of the hype of cryptocurrencies, certif\u2010\nicate transparency  is a security technology that relies on Merkle trees to check the val\u2010\nidity of TLS/SSL certificates [ 75, 76].\n532 | Chapter 12: The Future of Data Systems\n",
    "summary": "The text highlights the importance of end-to-end integrity checks and the potential of cryptographic auditing techniques, particularly leveraging Merkle trees and concepts from blockchain technologies, for building robust and auditable data systems.",
    "sample_answer": "\u201cOkay, this excerpt really underscores the need for proactive integrity checking in data pipelines. The core idea is that if you can verify the entire pipeline \u2013 from raw data ingestion to the final derived data \u2013 you\u2019ve implicitly validated every component, including the disks, networks, and algorithms. Utilizing techniques like Merkle trees, which are a tree of hashes, enables efficient verification of data integrity, offering a strong defense against corruption. Furthermore, the mention of blockchain technologies and consensus protocols illustrates a shift towards distributed ledger technologies that can provide tamper-proof audit trails, albeit with considerations around Byzantine fault tolerance and the efficiency of techniques like proof-of-work.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system to track financial transactions. How could you leverage the principles outlined in this excerpt\u2014specifically, end-to-end integrity checks and cryptographic techniques\u2014to ensure the accuracy and trustworthiness of the data, and what are some potential drawbacks to consider regarding technologies like blockchains?\u201d"
  },
  {
    "chunk": "I could imagine integrity-checking and auditing algorithms, like those of certificate\ntransparency and distributed ledgers, becoming more widely used in data systems in\ngeneral. Some work will be needed to make them equally scalable as systems without\ncryptographic auditing, and to keep the performance penalty as low as possible. But I\nthink this is an interesting area to watch in the future. \nDoing the Right Thing\nIn the final section of this book, I would like to take a step back. Throughout this\nbook we have examined a wide range of different architectures for data systems, eval\u2010\nuated their pros and cons, and explored techniques for building reliable, scalable, and\nmaintainable applications. However, we have left out an important and fundamental\npart of the discussion, which I would now like to fill in.\nEvery system is built for a purpose; every action we take has both intended and unin\u2010\ntended consequences. The purpose may be as simple as making money, but the con\u2010\nsequences for the world may reach far beyond that original purpose. We, the\nengineers building these systems, have a responsibility to carefully consider those\nconsequences and to consciously decide what kind of world we want to live in.\nWe talk about data as an abstract thing, but remember that many datasets are about\npeople: their behavior, their interests, their identity. We must treat such data with\nhumanity and respect. Users are humans too, and human dignity is paramount.\nSoftware development increasingly involves making important ethical choices. There\nare guidelines to help software engineers navigate these issues, such as the ACM\u2019s\nSoftware Engineering Code of Ethics and Professional Practice [ 77], but they are\nrarely discussed, applied, and enforced in practice. As a result, engineers and product\nmanagers sometimes take a very cavalier attitude to privacy and potential negative\nconsequences of their products [ 78, 79, 80].\nA technology is not good or bad in itself\u2014what matters is how it is used and how it\naffects people. This is true for a software system like a search engine in much the\nsame way as it is for a weapon like a gun. I think it is not sufficient for software engi\u2010\nneers to focus exclusively on the technology and ignore its consequences: the ethical\nresponsibility is ours to bear also. Reasoning about ethics is difficult, but it is too\nimportant to ignore.\nPredictive Analytics\nFor example, predictive analytics is a major part of the \u201cBig Data\u201d hype. Using data\nanalysis to predict the weather, or the spread of diseases, is one thing [ 81]; it is\nanother matter to predict whether a convict is likely to reoffend, whether an applicant\nfor a loan is likely to default, or whether an insurance customer is likely to make\nexpensive claims. The latter have a direct effect on individual people\u2019s lives.\nDoing the Right Thing | 533\n",
    "summary": "The text emphasizes ethical considerations in data system design, highlighting the potential impact of data analysis on individuals and the need for responsible technology use, referencing concepts like distributed ledgers and predictive analytics.",
    "sample_answer": "\u201cThis excerpt underscores the critical need to consider the ethical implications of data systems, particularly when using techniques like predictive analytics. Specifically, focusing on systems with cryptographic auditing \u2013 such as distributed ledgers \u2013 is important, but the fundamental responsibility lies with the engineer to evaluate the impact of the technology on individuals, mirroring the considerations of a powerful tool like a firearm. A key challenge is managing the performance penalty of cryptographic auditing versus simpler approaches, which ties into the CAP theorem \u2013 acknowledging that strong consistency often comes at the expense of availability.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re building a system to predict loan defaults. What are some of the ethical considerations you\u2019d need to address beyond simply building a technically accurate model? How might you balance the goals of minimizing false positives with the potential for unfairly impacting individuals, and what architectural patterns (e.g., data governance, audit trails) would be critical to implement to ensure accountability?\u201d"
  },
  {
    "chunk": "Naturally, payment networks want to prevent fraudulent transactions, banks want to\navoid bad loans, airlines want to avoid hijackings, and companies want to avoid hir\u2010\ning ineffective or untrustworthy people. From their point of view, the cost of a missed\nbusiness opportunity is low, but the cost of a bad loan or a problematic employee is\nmuch higher, so it is natural for organizations to want to be cautious. If in doubt,\nthey are better off saying no.\nHowever, as algorithmic decision-making becomes more widespread, someone who\nhas (accurately or falsely) been labeled as risky by some algorithm may suffer a large\nnumber of those \u201cno\u201d decisions. Systematically being excluded from jobs, air travel,\ninsurance coverage, property rental, financial services, and other key aspects of soci\u2010\nety is such a large constraint of the individual\u2019s freedom that it has been called \u201calgo\u2010\nrithmic prison\u201d [ 82]. In countries that respect human rights, the criminal justice\nsystem presumes innocence until proven guilty; on the other hand, automated sys\u2010\ntems can systematically and arbitrarily exclude a person from participating in society\nwithout any proof of guilt, and with little chance of appeal.\nBias and discrimination\nDecisions made by an algorithm are not necessarily any better or any worse than\nthose made by a human. Every person is likely to have biases, even if they actively try\nto counteract them, and discriminatory practices can become culturally institutional\u2010\nized. There is hope that basing decisions on data, rather than subjective and instinc\u2010\ntive assessments by people, could be more fair and give a better chance to people who\nare often overlooked in the traditional system [ 83].\nWhen we develop predictive analytics systems, we are not merely automating a\nhuman\u2019s decision by using software to specify the rules for when to say yes or no; we\nare even leaving the rules themselves to be inferred from data. However, the patterns\nlearned by these systems are opaque: even if there is some correlation in the data, we\nmay not know why. If there is a systematic bias in the input to an algorithm, the sys\u2010\ntem will most likely learn and amplify that bias in its output [ 84].\nIn many countries, anti-discrimination laws prohibit treating people differently\ndepending on protected traits such as ethnicity, age, gender, sexuality, disability, or\nbeliefs. Other features of a person\u2019s data may be analyzed, but what happens if they\nare correlated with protected traits? For example, in racially segregated neighbor\u2010\nhoods, a person\u2019s postal code or even their IP address is a strong predictor of race.\nPut like this, it seems ridiculous to believe that an algorithm could somehow take\nbiased data as input and produce fair and impartial output from it [ 85]. Yet this belief\noften seems to be implied by proponents of data-driven decision making, an attitude\nthat has been satirized as \u201cmachine learning is like money laundering for bias\u201d [ 86].\nPredictive analytics systems merely extrapolate from the past; if the past is discrimi\u2010\nnatory, they codify that discrimination. If we want the future to be better than the\n534 | Chapter 12: The Future of Data Systems\n",
    "summary": "The text highlights the risks of bias amplification in predictive analytics systems due to biased data, emphasizing the need for careful consideration of data sources and potential discriminatory outcomes.",
    "sample_answer": "\u201cThis excerpt really underscores the importance of understanding data provenance and potential bias amplification in predictive models. The core problem is that algorithms aren\u2019t inherently fair; they learn patterns from the data they\u2019re fed. If the data reflects existing societal biases \u2013 as illustrated by the example of postal codes correlating with ethnicity \u2013 the algorithm will inevitably perpetuate and potentially exacerbate those biases, leading to discriminatory outcomes. This relates directly to the concept of algorithmic prison, where systems unfairly exclude individuals based on correlations rather than explicit discriminatory rules. To mitigate this, we need robust data validation processes, bias detection algorithms, and ongoing monitoring \u2013 essentially, replicating the principles of a robust criminal justice system of presumed innocence until proven guilty, but applied to data.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where a predictive model, trained on historical loan data, might unfairly deny loans to a specific demographic group. What architectural changes or monitoring strategies could you implement to address this potential bias, drawing on the key concerns raised in this text?\u201d"
  },
  {
    "chunk": "past, moral imagination is required, and that\u2019s something only humans can provide\n[87]. Data and models should be our tools, not our masters.\nResponsibility and accountability\nAutomated decision making opens the question of responsibility and accountability\n[87]. If a human makes a mistake, they can be held accountable, and the person affec\u2010\nted by the decision can appeal. Algorithms make mistakes too, but who is accounta\u2010\nble if they go wrong [ 88]? When a self-driving car causes an accident, who is\nresponsible? If an automated credit scoring algorithm systematically discriminates\nagainst people of a particular race or religion, is there any recourse? If a decision by\nyour machine learning system comes under judicial review, can you explain to the\njudge how the algorithm made its decision?\nCredit rating agencies are an old example of collecting data to make decisions about\npeople. A bad credit score makes life difficult, but at least a credit score is normally\nbased on relevant facts about a person\u2019s actual borrowing history, and any errors in\nthe record can be corrected (although the agencies normally do not make this easy).\nHowever, scoring algorithms based on machine learning typically use a much wider\nrange of inputs and are much more opaque, making it harder to understand how a\nparticular decision has come about and whether someone is being treated in an\nunfair or discriminatory way [ 89].\nA credit score summarizes \u201cHow did you behave in the past?\u201d whereas predictive\nanalytics usually work on the basis of \u201cWho is similar to you, and how did people like\nyou behave in the past?\u201d Drawing parallels to others\u2019 behavior implies stereotyping\npeople, for example based on where they live (a close proxy for race and socioeco\u2010\nnomic class). What about people who get put in the wrong bucket? Furthermore, if a\ndecision is incorrect due to erroneous data, recourse is almost impossible [ 87].\nMuch data is statistical in nature, which means that even if the probability distribu\u2010\ntion on the whole is correct, individual cases may well be wrong. For example, if the\naverage life expectancy in your country is 80 years, that doesn\u2019t mean you\u2019re expected\nto drop dead on your 80th birthday. From the average and the probability distribu\u2010\ntion, you can\u2019t say much about the age to which one particular person will live. Simi\u2010\nlarly, the output of a prediction system is probabilistic and may well be wrong in\nindividual cases.\nA blind belief in the supremacy of data for making decisions is not only delusional, it\nis positively dangerous. As data-driven decision making becomes more widespread,\nwe will need to figure out how to make algorithms accountable and transparent, how\nto avoid reinforcing existing biases, and how to fix them when they inevitably make\nmistakes.\nWe will also need to figure out how to prevent data being used to harm people, and\nrealize its positive potential instead. For example, analytics can reveal financial and\nDoing the Right Thing | 535\n",
    "summary": "The text discusses accountability and transparency in automated decision-making, particularly highlighting the risks of bias and the difficulty of auditing opaque algorithms.",
    "sample_answer": "\u201cThis really resonates with our thinking about building resilient data systems. We need to consider the downstream effects of automated decisions, specifically focusing on accountability \u2013 who is responsible when a model, like a predictive credit scoring algorithm, makes a biased or incorrect decision? This echoes the challenges we face with probabilistic outputs; even if the underlying statistical distribution is accurate, individual cases can be wrong, highlighting the importance of monitoring for drift and bias. We should be implementing mechanisms for auditing and explaining model decisions \u2013 essentially building \u2018explainable AI\u2019 (XAI) principles into our design.\u201d",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system for automated credit scoring. How would you approach ensuring accountability and transparency, particularly addressing the potential for bias within the system\u2019s decision-making process?\u201d"
  },
  {
    "chunk": "social characteristics of people\u2019s lives. On the one hand, this power could be used to\nfocus aid and support to help those people who most need it. On the other hand, it is\nsometimes used by predatory business seeking to identify vulnerable people and sell\nthem risky products such as high-cost loans and worthless college degrees [ 87, 90].\nFeedback loops\nEven with predictive applications that have less immediately far-reaching effects on\npeople, such as recommendation systems, there are difficult issues that we must con\u2010\nfront. When services become good at predicting what content users want to see, they\nmay end up showing people only opinions they already agree with, leading to echo\nchambers in which stereotypes, misinformation, and polarization can breed. We are\nalready seeing the impact of social media echo chambers on election campaigns [ 91].\nWhen predictive analytics affect people\u2019s lives, particularly pernicious problems arise\ndue to self-reinforcing feedback loops. For example, consider the case of employers\nusing credit scores to evaluate potential hires. You may be a good worker with a good\ncredit score, but suddenly find yourself in financial difficulties due to a misfortune\noutside of your control. As you miss payments on your bills, your credit score suffers,\nand you will be less likely to find work. Joblessness pushes you toward poverty, which\nfurther worsens your scores, making it even harder to find employment [ 87]. It\u2019s a\ndownward spiral due to poisonous assumptions, hidden behind a camouflage of\nmathematical rigor and data.\nWe can\u2019t always predict when such feedback loops happen. However, many conse\u2010\nquences can be predicted by thinking about the entire system (not just the computer\u2010\nized parts, but also the people interacting with it)\u2014an approach known as systems\nthinking  [92]. We can try to understand how a data analysis system responds to dif\u2010\nferent behaviors, structures, or characteristics. Does the system reinforce and amplify\nexisting differences between people (e.g., making the rich richer or the poor poorer),\nor does it try to combat injustice? And even with the best intentions, we must beware\nof unintended consequences. \nPrivacy and Tracking\nBesides the problems of predictive analytics\u2014i.e., using data to make automated\ndecisions about people\u2014there are ethical problems with data collection itself. What is\nthe relationship between the organizations collecting data and the people whose data\nis being collected?\nWhen a system only stores data that a user has explicitly entered, because they want\nthe system to store and process it in a certain way, the system is performing a service\nfor the user: the user is the customer. But when a user\u2019s activity is tracked and logged\nas a side effect of other things they are doing, the relationship is less clear. The service\n536 | Chapter 12: The Future of Data Systems\n",
    "summary": "The text discusses potential negative feedback loops in predictive analytics and the importance of systems thinking to mitigate unintended consequences.",
    "sample_answer": "\u201cThis excerpt highlights a crucial consideration in data system design \u2013 the potential for feedback loops to exacerbate existing inequalities or create new ones.  Specifically, the concept of \u2018systems thinking,\u2019 as referenced, suggests we must move beyond simply analyzing the data itself and instead model the entire system, including human behavior and interactions. For example, if we\u2019re designing a recommendation system, we need to proactively consider how user engagement with those recommendations could influence their behavior, potentially creating an echo chamber effect, which is a common problem where data amplification leads to unforeseen societal outcomes.  We would need to incorporate mechanisms to detect and mitigate these loops, perhaps through algorithmic fairness constraints or human oversight.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where a data system you were designing could inadvertently create a negative feedback loop, and what steps you would take to mitigate that risk. How does the concept of \u2018systems thinking\u2019 inform your approach to this design challenge?\u201d"
  },
  {
    "chunk": "no longer just does what the user tells it to do, but it takes on interests of its own,\nwhich may conflict with the user\u2019s interests.\nTracking behavioral data has become increasingly important for user-facing features\nof many online services: tracking which search results are clicked helps improve the\nranking of search results; recommending \u201cpeople who liked X also liked Y\u201d helps\nusers discover interesting and useful things; A/B tests and user flow analysis can help\nindicate how a user interface might be improved. Those features require some\namount of tracking of user behavior, and users benefit from them.\nHowever, depending on a company\u2019s business model, tracking often doesn\u2019t stop\nthere. If the service is funded through advertising, the advertisers are the actual cus\u2010\ntomers, and the users\u2019 interests take second place. Tracking data becomes more\ndetailed, analyses become further-reaching, and data is retained for a long time in\norder to build up detailed profiles of each person for marketing purposes.\nNow the relationship between the company and the user whose data is being collec\u2010\nted starts looking quite different. The user is given a free service and is coaxed into\nengaging with it as much as possible. The tracking of the user serves not primarily\nthat individual, but rather the needs of the advertisers who are funding the service. I\nthink this relationship can be appropriately described with a word that has more sin\u2010\nister connotations: surveillance .\nSurveillance\nAs a thought experiment, try replacing the word data  with surveillance , and observe if\ncommon phrases still sound so good [ 93]. How about this: \u201cIn our surveillance-\ndriven organization we collect real-time surveillance streams and store them in our\nsurveillance warehouse. Our surveillance scientists use advanced analytics and sur\u2010\nveillance processing in order to derive new insights.\u201d\nThis thought experiment is unusually polemic for this book, Designing Surveillance-\nIntensive Applications , but I think that strong words are needed to emphasize this\npoint. In our attempts to make software \u201ceat the world\u201d [ 94], we have built the great\u2010\nest mass surveillance infrastructure the world has ever seen. Rushing toward an Inter\u2010\nnet of Things, we are rapidly approaching a world in which every inhabited space\ncontains at least one internet-connected microphone, in the form of smartphones,\nsmart TVs, voice-controlled assistant devices, baby monitors, and even children\u2019s\ntoys that use cloud-based speech recognition. Many of these devices have a terrible\nsecurity record [ 95].\nEven the most totalitarian and repressive regimes could only dream of putting a\nmicrophone in every room and forcing every person to constantly carry a device\ncapable of tracking their location and movements. Yet we apparently voluntarily,\neven enthusiastically, throw ourselves into this world of total surveillance. The differ\u2010\nDoing the Right Thing | 537\n",
    "summary": "The text discusses the shift in online service design towards extensive user tracking, driven by advertising revenue, and highlights the implications of this shift for data privacy and system architecture.",
    "sample_answer": "\u201cThis scenario presents a key scaling challenge \u2013 we\u2019re essentially building a continuously evolving, high-volume data warehouse, which is the 'surveillance warehouse' described. To address this, we\u2019d likely employ a tiered architecture, starting with a real-time streaming layer to capture the \u2018surveillance streams\u2019 \u2013 perhaps using Kafka for ingestion \u2013 followed by batch processing for more complex analytics and profiling, potentially leveraging a data lake architecture for raw data storage. Furthermore, given the potential for schema evolution due to the diverse data sources (smart TVs, voice assistants, etc.), we\u2019d need to implement robust schema management, possibly using a data catalog and automated schema detection to proactively handle changes.\u201d",
    "potential_interview_question": "\u201cImagine designing a system to collect and analyze data from a network of IoT devices, including smart TVs and voice assistants, to generate marketing insights. What architectural considerations, including data ingestion, storage, and processing, would you prioritize, and how would you address the potential for evolving data schemas and the ethical implications of mass surveillance?\u201d"
  },
  {
    "chunk": "return: the relationship between the service and the user is very asymmetric and one-\nsided. The terms are set by the service, not by the user [ 99].\nFor a user who does not consent to surveillance, the only real alternative is simply not\nto use a service. But this choice is not free either: if a service is so popular that it is\n\u201cregarded by most people as essential for basic social participation\u201d [ 99], then it is not\nreasonable to expect people to opt out of this service\u2014using it is de facto  mandatory.\nFor example, in most Western social communities, it has become the norm to carry a\nsmartphone, to use Facebook for socializing, and to use Google for finding informa\u2010\ntion. Especially when a service has network effects, there is a social cost to people\nchoosing not to use it.\nDeclining to use a service due to its tracking of users is only an option for the small\nnumber of people who are privileged enough to have the time and knowledge to\nunderstand its privacy policy, and who can afford to potentially miss out on social\nparticipation or professional opportunities that may have arisen if they had participa\u2010\nted in the service. For people in a less privileged position, there is no meaningful free\u2010\ndom of choice: surveillance becomes inescapable.\nPrivacy and use of data\nSometimes people claim that \u201cprivacy is dead\u201d on the grounds that some users are\nwilling to post all sorts of things about their lives to social media, sometimes mun\u2010\ndane and sometimes deeply personal. However, this claim is false and rests on a mis\u2010\nunderstanding of the word privacy .\nHaving privacy does not mean keeping everything secret; it means having the free\u2010\ndom to choose which things to reveal to whom, what to make public, and what to\nkeep secret. The right to privacy is a decision right: it enables each person to decide\nwhere they want to be on the spectrum between secrecy and transparency in each sit\u2010\nuation [ 99]. It is an important aspect of a person\u2019s freedom and autonomy.\nWhen data is extracted from people through surveillance infrastructure, privacy\nrights are not necessarily eroded, but rather transferred to the data collector. Compa\u2010\nnies that acquire data essentially say \u201ctrust us to do the right thing with your data,\u201d\nwhich means that the right to decide what to reveal and what to keep secret is trans\u2010\nferred from the individual to the company.\nThe companies in turn choose to keep much of the outcome of this surveillance\nsecret, because to reveal it would be perceived as creepy, and would harm their busi\u2010\nness model (which relies on knowing more about people than other companies do).\nIntimate information about users is only revealed indirectly, for example in the form\nof tools for targeting advertisements to specific groups of people (such as those suf\u2010\nfering from a particular illness).\nDoing the Right Thing | 539\n",
    "summary": "The text explores the asymmetry of user-service relationships, the social cost of opting out of popular services, and the transfer of privacy rights to data collectors.",
    "sample_answer": "\u201cThis scenario highlights a crucial consideration in designing systems that interact with users \u2013 understanding the power dynamics and potential for coercion. The text\u2019s discussion of \u2018network effects\u2019 directly relates to the CAP theorem, specifically the \u2018partition\u2019 aspect; if a service becomes essential, preventing users from opting out introduces a strong influence, potentially leading to an undesirable state. We must consider how our systems handle situations where user choice is effectively constrained, potentially necessitating strategies like user-defined opt-out mechanisms, coupled with robust auditing to ensure transparency and accountability.\u201d",
    "potential_interview_question": "\u201cImagine a widely used social media platform becomes integral to social participation in a community. The platform employs targeted advertising based on user data. How would you, as a data engineer, address the ethical concerns raised in this passage regarding user choice and data ownership, and what technical strategies could you employ to mitigate potential risks?\u201d"
  },
  {
    "chunk": "Even if particular users cannot be personally reidentified from the bucket of people\ntargeted by a particular ad, they have lost their agency about the disclosure of some\nintimate information, such as whether they suffer from some illness. It is not the user\nwho decides what is revealed to whom on the basis of their personal preferences\u2014it\nis the company that exercises the privacy right with the goal of maximizing its profit.\nMany companies have a goal of not being perceived  as creepy\u2014avoiding the question\nof how intrusive their data collection actually is, and instead focusing on managing\nuser perceptions. And even these perceptions are often managed poorly: for example,\nsomething may be factually correct, but if it triggers painful memories, the user may\nnot want to be reminded about it [ 100]. With any kind of data we should expect the\npossibility that it is wrong, undesirable, or inappropriate in some way, and we need to\nbuild mechanisms for handling those failures. Whether something is \u201cundesirable\u201d or\n\u201cinappropriate\u201d is of course down to human judgment; algorithms are oblivious to\nsuch notions unless we explicitly program them to respect human needs. As engi\u2010\nneers of these systems we must be humble, accepting and planning for such failings.\nPrivacy settings that allow a user of an online service to control which aspects of their\ndata other users can see are a starting point for handing back some control to users.\nHowever, regardless of the setting, the service itself still has unfettered access to the\ndata, and is free to use it in any way permitted by the privacy policy. Even if the ser\u2010\nvice promises not to sell the data to third parties, it usually grants itself unrestricted\nrights to process and analyze the data internally, often going much further than what\nis overtly visible to users.\nThis kind of large-scale transfer of privacy rights from individuals to corporations is\nhistorically unprecedented [ 99]. Surveillance has always existed, but it used to be\nexpensive and manual, not scalable and automated. Trust relationships have always\nexisted, for example between a patient and their doctor, or between a defendant and\ntheir attorney\u2014but in these cases the use of data has been strictly governed by ethical,\nlegal, and regulatory constraints. Internet services have made it much easier to amass\nhuge amounts of sensitive information without meaningful consent, and to use it at\nmassive scale without users understanding what is happening to their private data.\nData as assets and power\nSince behavioral data is a byproduct of users interacting with a service, it is some\u2010\ntimes called \u201cdata exhaust\u201d\u2014suggesting that the data is worthless waste material.\nViewed this way, behavioral and predictive analytics can be seen as a form of recy\u2010\ncling that extracts value from data that would have otherwise been thrown away.\nMore correct would be to view it the other way round: from an economic point of\nview, if targeted advertising is what pays for a service, then behavioral data about\npeople is the service\u2019s core asset. In this case, the application with which the user\ninteracts is merely a means to lure users into feeding more and more personal infor\u2010\n540 | Chapter 12: The Future of Data Systems\n",
    "summary": "The text discusses the shift in data ownership and control, highlighting the risks of centralized data management and the need for robust failure handling mechanisms.",
    "sample_answer": "\u201cThis really underscores a critical architectural challenge \u2013 we\u2019re moving from systems where users have explicit control to systems where data is a core asset, almost like a commodity. Considering the potential for \u2018undesirable\u2019 or \u2018inappropriate\u2019 use, we need to build in mechanisms for data governance, similar to how we handle schema drift.  Specifically, we'd want to think about implementing mechanisms for detecting and mitigating potential misuse \u2013 something akin to anomaly detection or perhaps even a rule-based system to flag potentially problematic data usage, particularly given the shift from explicit consent to massive scale data processing.\"",
    "potential_interview_question": "\u201cImagine you\u2019re designing a system for a service that collects user behavioral data for targeted advertising. Given the discussion in the text about centralized control and potential misuse, how would you approach building in safeguards to ensure the data is used ethically and responsibly, considering the possibility that the data itself becomes a central, valuable asset?\u201d"
  },
  {
    "chunk": "mation into the surveillance infrastructure [ 99]. The delightful human creativity and\nsocial relationships that often find expression in online services are cynically exploi\u2010\nted by the data extraction machine.\nThe assertion that personal data is a valuable asset is supported by the existence of\ndata brokers, a shady industry operating in secrecy, purchasing, aggregating, analyz\u2010\ning, inferring, and reselling intrusive personal data about people, mostly for market\u2010\ning purposes [ 90]. Startups are valued by their user numbers, by \u201ceyeballs\u201d\u2014i.e., by\ntheir surveillance capabilities.\nBecause the data is valuable, many people want it. Of course companies want it\u2014\nthat\u2019s why they collect it in the first place. But governments want to obtain it too: by\nmeans of secret deals, coercion, legal compulsion, or simply stealing it [ 101]. When a\ncompany goes bankrupt, the personal data it has collected is one of the assets that get\nsold. Moreover, the data is difficult to secure, so breaches happen disconcertingly\noften [ 102].\nThese observations have led critics to saying that data is not just an asset, but a \u201ctoxic\nasset\u201d [ 101], or at least \u201chazardous material\u201d [ 103]. Even if we think that we are capa\u2010\nble of preventing abuse of data, whenever we collect data, we need to balance the ben\u2010\nefits with the risk of it falling into the wrong hands: computer systems may be\ncompromised by criminals or hostile foreign intelligence services, data may be leaked\nby insiders, the company may fall into the hands of unscrupulous management that\ndoes not share our values, or the country may be taken over by a regime that has no\nqualms about compelling us to hand over the data.\nWhen collecting data, we need to consider not just today\u2019s political environment, but\nall possible future governments. There is no guarantee that every government elected\nin future will respect human rights and civil liberties, so \u201cit is poor civic hygiene to\ninstall technologies that could someday facilitate a police state\u201d [ 104].\n\u201cKnowledge is power,\u201d as the old adage goes. And furthermore, \u201cto scrutinize others\nwhile avoiding scrutiny oneself is one of the most important forms of power\u201d [ 105].\nThis is why totalitarian governments want surveillance: it gives them the power to\ncontrol the population. Although today\u2019s technology companies are not overtly seek\u2010\ning political power, the data and knowledge they have accumulated nevertheless gives\nthem a lot of power over our lives, much of which is surreptitious, outside of public\noversight [ 106].\nRemembering the Industrial Revolution\nData is the defining feature of the information age. The internet, data storage, pro\u2010\ncessing, and software-driven automation are having a major impact on the global\neconomy and human society. As our daily lives and social organization have changed\nin the past decade, and will probably continue to radically change in the coming dec\u2010\nades, comparisons to the Industrial Revolution come to mind [ 87, 96].\nDoing the Right Thing | 541\n",
    "summary": "The text highlights the risks associated with data collection, emphasizing potential misuse, breaches, and the concentration of power through data accumulation, referencing concepts like a \u201cpolice state\u201d and the need for proactive risk assessment.",
    "sample_answer": "\u201cThis scenario really underscores the importance of designing for resilience and adaptability, particularly around data governance. We\u2019re essentially looking at a system where the \u2018asset\u2019 \u2013 the data \u2013 is inherently vulnerable, and therefore, we need to build in layers of defense, mirroring a concept like a \u2018police state\u2019 where surveillance is pervasive. This means not just focusing on durability and availability, but also on data minimization, strict access controls, and potentially, incorporating techniques like differential privacy to mitigate the risks of misuse or compromise, even considering how the system might evolve to accommodate potential future regulatory or political pressures \u2013 essentially, anticipating a constantly changing threat landscape.\u201d",
    "potential_interview_question": "\u201cDescribe a system design challenge related to protecting personal data, considering potential misuse and evolving risks. What architectural considerations would you prioritize, and how would you balance the benefits of data collection with the inherent security and privacy risks?\u201d"
  },
  {
    "chunk": "The Industrial Revolution came about through major technological and agricultural\nadvances, and it brought sustained economic growth and significantly improved liv\u2010\ning standards in the long run. Yet it also came with major problems: pollution of the\nair (due to smoke and chemical processes) and the water (from industrial and human\nwaste) was dreadful. Factory owners lived in splendor, while urban workers often\nlived in very poor housing and worked long hours in harsh conditions. Child labor\nwas common, including dangerous and poorly paid work in mines.\nIt took a long time before safeguards were established, such as environmental protec\u2010\ntion regulations, safety protocols for workplaces, outlawing child labor, and health\ninspections for food. Undoubtedly the cost of doing business increased when facto\u2010\nries could no longer dump their waste into rivers, sell tainted foods, or exploit work\u2010\ners. But society as a whole benefited hugely, and few of us would want to return to a\ntime before those regulations [ 87].\nJust as the Industrial Revolution had a dark side that needed to be managed, our tran\u2010\nsition to the information age has major problems that we need to confront and solve.\nI believe that the collection and use of data is one of those problems. In the words of\nBruce Schneier [ 96]:\nData is the pollution problem of the information age, and protecting privacy is the\nenvironmental challenge. Almost all computers produce information. It stays around,\nfestering. How we deal with it\u2014how we contain it and how we dispose of it\u2014is central\nto the health of our information economy. Just as we look back today at the early deca\u2010\ndes of the industrial age and wonder how our ancestors could have ignored pollution\nin their rush to build an industrial world, our grandchildren will look back at us during\nthese early decades of the information age and judge us on how we addressed the chal\u2010\nlenge of data collection and misuse.\nWe should try to make them proud.\nLegislation and self-regulation\nData protection laws might be able to help preserve individuals\u2019 rights. For example,\nthe 1995 European Data Protection Directive states that personal data must be \u201ccol\u2010\nlected for specified, explicit and legitimate purposes and not further processed in a\nway incompatible with those purposes,\u201d and furthermore that data must be \u201cade\u2010\nquate, relevant and not excessive in relation to the purposes for which they are collec\u2010\nted\u201d [ 107].\nHowever, it is doubtful whether this legislation is effective in today\u2019s internet context\n[108]. These rules run directly counter to the philosophy of Big Data, which is to\nmaximize data collection, to combine it with other datasets, to experiment and to\nexplore in order to generate new insights. Exploration means using data for unfore\u2010\nseen purposes, which is the opposite of the \u201cspecified and explicit\u201d purposes for\nwhich the user gave their consent (if we can meaningfully speak of consent at all\n[109]). Updated regulations are now being developed [ 89].\n542 | Chapter 12: The Future of Data Systems\n",
    "summary": "The text highlights the parallels between the industrial revolution\u2019s challenges and the current data collection problem, emphasizing the need for proactive regulation and responsible data handling.",
    "sample_answer": "\u201cThis is a really insightful analogy. Just like the Industrial Revolution demonstrated the need for regulation to mitigate negative consequences of unchecked growth, we\u2019re seeing a similar pattern with the proliferation of data. The core issue, as Schneier points out, is that data, unlike pollution, persists and can be repurposed in unexpected ways, directly contradicting the principles outlined in the European Data Protection Directive \u2013 specifically the requirement for \u2018specified, explicit and legitimate purposes.\u2019  We need to think about architectures that allow for dynamic schema evolution to accommodate the exploration that's inherent in the Big Data philosophy, while simultaneously enforcing constraints based on those original consent criteria \u2013 perhaps leveraging techniques like differential privacy to balance utility and privacy.\u201d",
    "potential_interview_question": "\u201cLet\u2019s say we\u2019re tasked with building a system to collect and analyze user behavior data, mirroring the challenges highlighted in the text. How would you design a system to balance the exploration and discovery inherent in \u2018Big Data\u2019 with the need for responsible data governance and adherence to regulations like the European Data Protection Directive? What technical approaches would you consider?\u201d"
  },
  {
    "chunk": "References\n[1] Rachid Belaid: \u201c Postgres Full-Text Search is Good Enough! ,\u201d rachbelaid.com , July\n13, 2015.\n[2] Philippe Ajoux, Nathan Bronson, Sanjeev Kumar, et al.: \u201c Challenges to Adopting\nStronger Consistency at Scale ,\u201d at 15th USENIX Workshop on Hot Topics in Operat\u2010\ning Systems  (HotOS), May 2015.\n[3] Pat Helland and Dave Campbell: \u201c Building on Quicksand ,\u201d at 4th Biennial Con\u2010\nference on Innovative Data Systems Research  (CIDR), January 2009.\n[4] Jessica Kerr: \u201c Provenance and Causality in Distributed Systems ,\u201d blog.jessi\u2010\ntron.com , September 25, 2016.\n[5] Kostas Tzoumas: \u201c Batch Is a Special Case of Streaming ,\u201d data-artisans.com , Sep\u2010\ntember 15, 2015.\n[6] Shinji Kim and Robert Blafford: \u201c Stream Windowing Performance Analysis: Con\u2010\ncord and Spark Streaming ,\u201d concord.io , July 6, 2016.\n[7] Jay Kreps: \u201c The Log: What Every Software Engineer Should Know About Real-\nTime Data\u2019s Unifying Abstraction ,\u201d engineering.linkedin.com , December 16, 2013.\n[8] Pat Helland: \u201c Life Beyond Distributed Transactions: An Apostate\u2019s Opinion ,\u201d at\n3rd Biennial Conference on Innovative Data Systems Research  (CIDR), January 2007.\n[9] \u201cGreat Western Railway (1835\u20131948) ,\u201d Network Rail Virtual Archive, network\u2010\nrail.co.uk .\n[10] Jacqueline Xu: \u201c Online Migrations at Scale ,\u201d stripe.com , February 2, 2017.\n[11] Molly Bartlett Dishman and Martin Fowler: \u201c Agile Architecture ,\u201d at O\u2019Reilly\nSoftware Architecture Conference , March 2015.\n[12] Nathan Marz and James Warren: Big Data: Principles and Best Practices of Scala\u2010\nble Real-Time Data Systems . Manning, 2015. ISBN: 978-1-617-29034-3\n[13] Oscar Boykin, Sam Ritchie, Ian O\u2019Connell, and Jimmy Lin: \u201c Summingbird: A\nFramework for Integrating Batch and Online MapReduce Computations ,\u201d at 40th\nInternational Conference on Very Large Data Bases  (VLDB), September 2014.\n[14] Jay Kreps: \u201c Questioning the Lambda Architecture ,\u201d oreilly.com , July 2, 2014.\n[15] Raul Castro Fernandez, Peter Pietzuch, Jay Kreps, et al.: \u201c Liquid: Unifying Near\u2010\nline and Offline Big Data Integration ,\u201d at 7th Biennial Conference on Innovative Data\nSystems Research  (CIDR), January 2015.\nSummary | 545\n",
    "summary": "The chunk discusses various approaches to big data integration, consistency challenges at scale, and the evolution of data architectures like Lambda and Liquid, referencing concepts like stream windowing and online migrations.",
    "sample_answer": "\u201cThis collection of references points to a significant evolution in how we approach big data processing. The discussion around \u2018Challenges to Adopting Stronger Consistency at Scale\u2019 (reference [2]) highlights the inherent trade-offs; stronger consistency often comes at the expense of performance and availability \u2013 a classic CAP theorem scenario. Furthermore, the exploration of architectures like \u2018Liquid\u2019 (reference [15]) and \u2018Summingbird\u2019 (reference [13]) suggests a move away from the rigid Lambda architecture, recognizing the need for more flexible integration of batch and streaming data.  Considering \u2018Online Migrations at Scale\u2019 (reference [10]) is also vital, as it addresses the complexity of continually adapting data pipelines to changing schemas and business requirements.\u201d",
    "potential_interview_question": "\u201cDescribe a situation where you would prioritize eventual consistency over strong consistency in a data pipeline. Explain your reasoning, referencing relevant architectural patterns or concepts like the CAP theorem or the Lambda architecture.\u201d"
  },
  {
    "chunk": "[16] Dennis M. Ritchie and Ken Thompson: \u201c The UNIX Time-Sharing System ,\u201d\nCommunications of the ACM , volume 17, number 7, pages 365\u2013375, July 1974. doi:\n10.1145/361011.361061\n[17] Eric A. Brewer and Joseph M. Hellerstein: \u201c CS262a: Advanced Topics in Com\u2010\nputer Systems ,\u201d lecture notes, University of California, Berkeley, cs.berkeley.edu ,\nAugust 2011.\n[18] Michael Stonebraker: \u201c The Case for Polystores ,\u201d wp.sigmod.org , July 13, 2015.\n[19] Jennie Duggan, Aaron J. Elmore, Michael Stonebraker, et al.: \u201c The BigDAWG\nPolystore System ,\u201d ACM SIGMOD Record , volume 44, number 2, pages 11\u201316, June\n2015. doi:10.1145/2814710.2814713\n[20] Patrycja Dybka: \u201c Foreign Data Wrappers for PostgreSQL ,\u201d vertabelo.com , March\n24, 2015.\n[21] David B. Lomet, Alan Fekete, Gerhard Weikum, and Mike Zwilling: \u201c Unbun\u2010\ndling Transaction Services in the Cloud ,\u201d at 4th Biennial Conference on Innovative\nData Systems Research  (CIDR), January 2009.\n[22] Martin Kleppmann and Jay Kreps: \u201c Kafka, Samza and the Unix Philosophy of\nDistributed Data ,\u201d IEEE Data Engineering Bulletin , volume 38, number 4, pages 4\u201314,\nDecember 2015.\n[23] John Hugg: \u201c Winning Now and in the Future: Where VoltDB Shines ,\u201d\nvoltdb.com , March 23, 2016.\n[24] Frank McSherry, Derek G. Murray, Rebecca Isaacs, and Michael Isard: \u201c Differ\u2010\nential Dataflow ,\u201d at 6th Biennial Conference on Innovative Data Systems Research\n(CIDR), January 2013.\n[25] Derek G Murray, Frank McSherry, Rebecca Isaacs, et al.: \u201c Naiad: A Timely Data\u2010\nflow System ,\u201d at 24th ACM Symposium on Operating Systems Principles  (SOSP),\npages 439\u2013455, November 2013. doi:10.1145/2517349.2522738\n[26] Gwen Shapira: \u201c We have a bunch of customers who are implementing \u2018database\ninside-out\u2019 concept and they all ask \u2018is anyone else doing it? are we crazy?\u2019 \u201d twit\u2010\nter.com , July 28, 2016.\n[27] Martin Kleppmann: \u201c Turning the Database Inside-out with Apache Samza, \u201d at\nStrange Loop , September 2014.\n[28] Peter Van Roy and Seif Haridi: Concepts, Techniques, and Models of Computer\nProgramming . MIT Press, 2004. ISBN: 978-0-262-22069-9\n[29] \u201cJuttle Documentation ,\u201d juttle.github.io , 2016.\n546 | Chapter 12: The Future of Data Systems\n",
    "summary": "The chunk discusses various data system architectures, including polystores, inside-out databases, and distributed data processing with Kafka/Samza.",
    "sample_answer": "\u201cThis chunk highlights several key architectural approaches to data management. The discussion of \u2018polystores\u2019 \u2013 systems like PostgreSQL that can seamlessly integrate data from diverse sources \u2013 speaks to a common trade-off between query performance and data consistency. Furthermore, the references to Kafka and Samza illustrate the shift towards a \u2018database inside-out\u2019 model, where data transformations and processing happen concurrently with data storage, leveraging the strengths of a distributed streaming platform like Kafka for real-time data pipelines. Considering the conversation around \u2018database inside-out\u2019 and its underlying principles, a good approach would be to design a system where the front-end processing takes place with data being written to a central storage solution and handled by a streaming platform. \u201c",
    "potential_interview_question": "\u201cDescribe the trade-offs involved in adopting a \u2018database inside-out\u2019 approach to data management.  How does this differ from a traditional \u2018database-centric\u2019 approach, and what architectural considerations would you prioritize when designing a system around this model?\u201d"
  },
  {
    "chunk": "[30] Evan Czaplicki and Stephen Chong: \u201c Asynchronous Functional Reactive Pro\u2010\ngramming for GUIs ,\u201d at 34th ACM SIGPLAN Conference on Programming Language\nDesign and Implementation  (PLDI), June 2013. doi:10.1145/2491956.2462161\n[31] Engineer Bainomugisha, Andoni Lombide Carreton, Tom van Cutsem, Stijn\nMostinckx, and Wolfgang de Meuter: \u201c A Survey on Reactive Programming ,\u201d ACM\nComputing Surveys , volume 45, number 4, pages 1\u201334, August 2013. doi:\n10.1145/2501654.2501666\n[32] Peter Alvaro, Neil Conway, Joseph M. Hellerstein, and William R. Marczak:\n\u201cConsistency Analysis in Bloom: A CALM and Collected Approach ,\u201d at 5th Biennial\nConference on Innovative Data Systems Research  (CIDR), January 2011.\n[33] Felienne Hermans: \u201c Spreadsheets Are Code ,\u201d at Code Mesh , November 2015.\n[34] Dan Bricklin and Bob Frankston: \u201c VisiCalc: Information from Its Creators ,\u201d\ndanbricklin.com .\n[35] D. Sculley, Gary Holt, Daniel Golovin, et al.: \u201c Machine Learning: The High-\nInterest Credit Card of Technical Debt ,\u201d at NIPS Workshop on Software Engineering\nfor Machine Learning  (SE4ML), December 2014.\n[36] Peter Bailis, Alan Fekete, Michael J Franklin, et al.: \u201c Feral Concurrency Control:\nAn Empirical Investigation of Modern Application Integrity ,\u201d at ACM International\nConference on Management of Data  (SIGMOD), June 2015. doi:\n10.1145/2723372.2737784\n[37] Guy Steele: \u201c Re: Need for Macros (Was Re: Icon) ,\u201d email to ll1-discuss  mailing\nlist, people.csail.mit.edu , December 24, 2001.\n[38] David Gelernter: \u201c Generative Communication in Linda ,\u201d ACM Transactions on\nProgramming Languages and Systems  (TOPLAS), volume 7, number 1, pages 80\u2013112,\nJanuary 1985. doi:10.1145/2363.2433\n[39] Patrick Th. Eugster, Pascal A. Felber, Rachid Guerraoui, and Anne-Marie Ker\u2010\nmarrec: \u201c The Many Faces of Publish/Subscribe ,\u201d ACM Computing Surveys , volume\n35, number 2, pages 114\u2013131, June 2003. doi:10.1145/857076.857078\n[40] Ben Stopford: \u201c Microservices in a Streaming World ,\u201d at QCon London , March\n2016.\n[41] Christian Posta: \u201c Why Microservices Should Be Event Driven: Autonomy vs\nAuthority ,\u201d blog.christianposta.com , May 27, 2016.\n[42] Alex Feyerke: \u201c Say Hello to Offline First ,\u201d hood.ie , November 5, 2013.\n[43] Sebastian Burckhardt, Daan Leijen, Jonathan Protzenko, and Manuel F\u00e4hndrich:\n\u201cGlobal Sequence Protocol: A Robust Abstraction for Replicated Shared State ,\u201d at\nSummary | 547\n",
    "summary": "The chunk discusses reactive programming, microservices, and data consistency, highlighting concepts like global sequence protocols and event-driven architectures.",
    "sample_answer": "\u201cThis material touches on some really important system design considerations. The discussion of reactive programming, particularly with concepts like global sequence protocols, speaks directly to building resilient, responsive systems \u2013 it\u2019s about managing state changes and ensuring eventual consistency, something we often grapple with in distributed systems. Furthermore, the reference to event-driven microservices aligns with modern architectural trends; leveraging events for autonomy and coordination is a strong approach to decoupling and scalability, but it introduces challenges around data consistency and potential for eventual consistency problems that need careful consideration, a core design trade-off.\u201d",
    "potential_interview_question": "\u201cDescribe a scenario where eventual consistency might be an acceptable tradeoff in a distributed system. Explain how a global sequence protocol could help manage that tradeoff, and what potential downsides you would need to monitor.\u201d"
  },
  {
    "chunk": "29th European Conference on Object-Oriented Programming  (ECOOP), July 2015.\ndoi:10.4230/LIPIcs.ECOOP.2015.568\n[44] Mark Soper: \u201c Clearing Up React Data Management Confusion with Flux, Redux,\nand Relay ,\u201d medium.com , December 3, 2015.\n[45] Eno Thereska, Damian Guy, Michael Noll, and Neha Narkhede: \u201c Unifying\nStream Processing and Interactive Queries in Apache Kafka ,\u201d confluent.io , October\n26, 2016.\n[46] Frank McSherry: \u201c Dataflow as Database ,\u201d github.com , July 17, 2016.\n[47] Peter Alvaro: \u201c I See What You Mean ,\u201d at Strange Loop , September 2015.\n[48] Nathan Marz: \u201c Trident: A High-Level Abstraction for Realtime Computation ,\u201d\nblog.twitter.com , August 2, 2012.\n[49] Edi Bice: \u201c Low Latency Web Scale Fraud Prevention with Apache Samza, Kafka\nand Friends ,\u201d at Merchant Risk Council MRC Vegas Conference , March 2016.\n[50] Charity Majors: \u201c The Accidental DBA ,\u201d charity.wtf , October 2, 2016.\n[51] Arthur J. Bernstein, Philip M. Lewis, and Shiyong Lu: \u201c Semantic Conditions for\nCorrectness at Different Isolation Levels ,\u201d at 16th International Conference on Data\nEngineering  (ICDE), February 2000. doi:10.1109/ICDE.2000.839387\n[52] Sudhir Jorwekar, Alan Fekete, Krithi Ramamritham, and S. Sudarshan: \u201c Auto\u2010\nmating the Detection of Snapshot Isolation Anomalies ,\u201d at 33rd International Confer\u2010\nence on Very Large Data Bases  (VLDB), September 2007.\n[53] Kyle Kingsbury: Jepsen blog post series , aphyr.com , 2013\u20132016.\n[54] Michael Jouravlev: \u201c Redirect After Post ,\u201d theserverside.com , August 1, 2004.\n[55] Jerome H. Saltzer, David P. Reed, and David D. Clark: \u201c End-to-End Arguments\nin System Design ,\u201d ACM Transactions on Computer Systems , volume 2, number 4,\npages 277\u2013288, November 1984. doi:10.1145/357401.357402\n[56] Peter Bailis, Alan Fekete, Michael J. Franklin, et al.: \u201c Coordination-Avoiding\nDatabase Systems ,\u201d Proceedings of the VLDB Endowment , volume 8, number 3, pages\n185\u2013196, November 2014.\n[57] Alex Yarmula: \u201c Strong Consistency in Manhattan ,\u201d blog.twitter.com , March 17,\n2016.\n[58] Douglas B Terry, Marvin M Theimer, Karin Petersen, et al.: \u201c Managing Update\nConflicts in Bayou, a Weakly Connected Replicated Storage System ,\u201d at 15th ACM\nSymposium on Operating Systems Principles  (SOSP), pages 172\u2013182, December 1995.\ndoi:10.1145/224056.224070\n548 | Chapter 12: The Future of Data Systems\n",
    "summary": "The chunk discusses various data systems and techniques, including dataflow databases, stream processing, consistency models, and system design principles.",
    "sample_answer": "\u201cThis chunk highlights several key considerations for designing modern data systems. The discussion of dataflow as a database (Frank McSherry) suggests a shift towards more efficient computation models, potentially leveraging stream processing capabilities like those in Apache Kafka (Eno Thereska et al.). Critically, the references to Jepsen\u2019s blog posts (Kyle Kingsbury) and strong consistency (Alex Yarmula) demonstrate the ongoing tension between achieving strong guarantees\u2014likely through techniques like two-phase commit\u2014and the operational complexity involved, mirroring the CAP theorem\u2019s trade-offs.\u201d",
    "potential_interview_question": "\u201cDescribe the trade-offs involved in achieving strong consistency versus availability in a distributed system.  How might the Jepsen protocol address these trade-offs?\u201d"
  }
]